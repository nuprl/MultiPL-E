name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 's',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n   \
    \     } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n     \
    \   } else {\n            $encoded .= $char;\n        }\n    }\n    for my $char\
    \ (split //, $encoded) {\n        if ($vowels =~ /$char/) {\n            $encoded\
    \ =~ s/$char/$vowels_hash->{$char}/;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = @vowels;\n    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_new_position\
    \ = 0;\n    my $vowel_new_index = 0;\n    my $vowel_new_letter = \"\";\n    my\
    \ $vowel_new_letter_index = 0;\n    my $vowel_new_letter_position = 0;\n    my\
    \ $vowel_new_letter_new_position = 0;\n    my $vowel_new_letter_new_index = 0;\n\
    \    my $vowel_new_letter_new_letter = \"\";\n    my $vowel_new_letter_new_letter_index\
    \ = 0;\n    my $vowel_new_letter_new_letter_position = 0;\n    my $vowel_new_letter_new_letter_new_position\
    \ = 0;\n    my $vowel_new_letter_new_letter_new_index = 0;\n    my $vowel_new_letter_new_letter_new_letter\
    \ = \"\";\n    my $vowel_new_letter_new_letter_new_letter_index = 0;\n    my $vowel_new_letter_new_letter_new_letter_position\
    \ = 0;\n    my $vowel_new_letter_new_letter_new_letter_new_position = 0;\n   \
    \ my $vowel_new_letter_new_letter_new_letter_new_index = 0;\n    my $vowel_new_letter_new_letter_new_letter_new_letter\
    \ = \"\";\n    my $vowel_new_letter_new_letter_new_letter_new_letter_index = 0;\n\
    \    my $vowel_new_letter_new_letter_new_letter_new_letter_position = 0;\n", " \
    \   my @message = split(//, $message);\n    my @encoded;\n    my $letter;\n  \
    \  my $vowels = \"aeiou\";\n    my $vowels_index;\n    my $vowel_index;\n    my\
    \ $vowel_index_2;\n    foreach $letter (@message) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $letter =~ tr/a-z/A-Z/;\n            $vowels_index = index($vowels,\
    \ $letter);\n            if ($vowels_index != -1) {\n                $vowel_index\
    \ = $vowels_index + 1;\n                if ($vowel_index == 5) {\n           \
    \         $vowel_index_2 = 0;\n                }\n                else {\n   \
    \                 $vowel_index_2 = $vowel_index + 1;\n                }\n    \
    \            $letter = substr($vowels, $vowel_index_2, 1);\n            }\n  \
    \      }\n        elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \            $vowels_index = index($vowels, $letter);\n            if ($vowels_index\
    \ != -1) {\n                $vowel_index = $vowels_index + 1;\n              \
    \  if ($vowel_index == 5) {\n                    $vowel_index_2 = 0;\n       \
    \         }\n                else {\n                    $vowel_index_2 = $vowel_index\
    \ + 1;\n                }\n                $letter = substr($vowels, $vowel_index_2,\
    \ 1);\n            }\n        }\n        push(@encoded, $letter);\n    }\n   \
    \ return join(\"\", @encoded);\n}", "    my $encoded = \"\";\n    my @vowels =\
    \ ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= $vowels[($vowel_index\
    \ + 2) % $vowel_count];\n            $vowel_index = ($vowel_index + 1) % $vowel_count;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n \
    \   foreach my $char (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if (grep {$_ eq lc($char)} @vowels) {\n                my $index\
    \ = 0;\n                foreach my $vowel (@vowels) {\n                    if\
    \ ($vowel eq lc($char)) {\n                        $index = ($index + 2) % 5;\n\
    \                        $char = $vowels[$index];\n                        last;\n\
    \                    }\n                    $index++;\n                }\n   \
    \         }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_position_plus_two\
    \ = 0;\n    my $vowel_position_plus_two_char = \"\";\n    my $vowel_position_plus_two_char_upper\
    \ = \"\";\n    my $vowel_position_plus_two_char_lower = \"\";\n    my $vowel_position_plus_two_char_upper_found\
    \ = 0;\n    my $vowel_position_plus_two_char_lower_found = 0;\n    my $vowel_position_plus_two_char_found\
    \ = 0;\n    my $char = \"\";\n    my $char_upper = \"\";\n    my $char_lower =\
    \ \"\";\n    my $char_upper_found = 0;\n    my $char_lower_found = 0;\n    my\
    \ $char_found = 0;\n    my $char_index = 0;\n    my $char_count = 0;\n    my $char_length\
    \ = 0;\n    my $message_length = length($message);\n    my $message_index = 0;\n\
    \    my $message_count = 0;\n    my $message_length = length($message);\n    my\
    \ $message_index = 0;\n    my $message_count = 0;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_count = 0;\n    my $message_length\
    \ = length($message);\n    my $message_index = 0;\n    my $message_count = 0;\n\
    \    my $message_length = length($message);\n    my $message_index = 0;\n    my\
    \ $message_count = 0;\n    my $message_length = length($message);\n    my $message_index\
    \ = 0;\n    my $message", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded;\n    for my $letter (@message) {\n      \
    \  if (grep {$letter eq $_} @vowels) {\n            push @encoded, chr(ord($letter)\
    \ + 2);\n        } else {\n            push @encoded, $letter;\n        }\n  \
    \  }\n    return join \"\", @encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfgh/;\n    return $message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_shifted = \"cgkosw\";\n\
    \    my $vowels_hash = {};\n    my @vowels_array = split(\"\", $vowels);\n   \
    \ my @vowels_shifted_array = split(\"\", $vowels_shifted);\n    for (my $i = 0;\
    \ $i < scalar(@vowels_array); $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_shifted_array[$i];\n    }\n    my @message_array = split(\"\", $message);\n\
    \    for (my $i = 0; $i < scalar(@message_array); $i++) {\n        if (exists($vowels_hash->{lc($message_array[$i])}))\
    \ {\n            $encoded .= $vowels_hash->{lc($message_array[$i])};\n       \
    \ } else {\n            $encoded .= $message_array[$i];\n        }\n    }\n  \
    \  return $encoded;\n}", "    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/) {\n            if ($char =~ /[aeiou]/) {\n\
    \                push @encoded, $vowels{$char};\n            } else {\n      \
    \          push @encoded, $char;\n            }\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            if ($char =~ /[AEIOU]/) {\n                push @encoded, uc\
    \ $vowels{lc $char};\n            } else {\n                push @encoded, lc\
    \ $char;\n            }\n        } else {\n            push @encoded, $char;\n\
    \        }\n    }\n    return join '', @encoded;\n}", "    my $encoded = \"\"\
    ;\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my $vowels_array\
    \ = [split(//, $vowels)];\n    for (my $i = 0; $i < scalar(@$vowels_array); $i++)\
    \ {\n        $vowels_hash->{$vowels_array->[$i]} = $vowels_array->[($i + 2) %\
    \ 5];\n    }\n    my $message_array = [split(//, $message)];\n    for (my $i =\
    \ 0; $i < scalar(@$message_array); $i++) {\n        if ($vowels_hash->{lc($message_array->[$i])})\
    \ {\n            $encoded .= $vowels_hash->{lc($message_array->[$i])};\n     \
    \   } elsif ($message_array->[$i] =~ /[A-Z]/) {\n            $encoded .= lc($message_array->[$i]);\n\
    \        } elsif ($message_array->[$i] =~ /[a-z]/) {\n            $encoded .=\
    \ uc($message_array->[$i]);\n        } else {\n            $encoded .= $message_array->[$i];\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    foreach my $char (split //, $message) {\n     \
    \   if (grep { $_ eq $char } @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return uc($encoded_message);\n}", "    my $encoded_message = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_next = \"efghj\";\n    my $vowels_next_next\
    \ = \"ghjkl\";\n    my $vowels_next_next_next = \"ijklmn\";\n    my $vowels_next_next_next_next\
    \ = \"klmnop\";\n    my $vowels_next_next_next_next_next = \"mnopqr\";\n    my\
    \ $vowels_next_next_next_next_next_next = \"opqrst\";\n    my $vowels_next_next_next_next_next_next_next\
    \ = \"pqrstu\";\n    my $vowels_next_next_next_next_next_next_next_next = \"qrstuv\"\
    ;\n    my $vowels_next_next_next_next_next_next_next_next_next = \"rstuvw\";\n\
    \    my $vowels_next_next_next_next_next_next_next_next_next_next = \"stuvwx\"\
    ;\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next = \"\
    tuvwxy\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"uvwxyz\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"vwxyza\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"wxyzab\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"xyzabc\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"yzab", "    my $encoded = \"\";\n    my @vowels = (\"a\",\"e\",\"i\",\"\
    o\",\"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found\
    \ = 0;\n    my $letter_index = 0;\n    my $letter_count = 0;\n    my $letter_found\
    \ = 0;\n    my $letter = \"\";\n    my $vowel = \"\";\n    my $letter_index_plus_two\
    \ = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_mod =\
    \ 0;\n    my $letter_index_plus_two_mod = 0;\n    my $message_length = length($message);\n\
    \    my $vowel_length = length(@vowels);\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $alphabet_index = 0;\n\
    \    my $alphabet_index_plus_two = 0;\n    my $alphabet_index_plus_two_mod = 0;\n\
    \    my $alphabet_index_plus_two_mod_char = \"\";\n    my $message_char = \"\"\
    ;\n    my $message_char_upper = \"\";\n    my $message_char_lower = \"\";\n  \
    \  my $message_char_upper_index = 0;\n    my $message_char_lower_index = 0;\n\
    \    my $message_char_upper_index_plus_two = 0;\n    my $message_char_lower_index_plus_two\
    \ = 0;\n    my $message_char_upper_index_plus_two_mod = 0;\n    my $message_char_lower_index_plus_two_mod\
    \ = 0;\n    my $message_char_upper_index_plus_two_mod_char = \"\";\n    my $message_char_lower_index_plus_two_mod_char\
    \ = \"\";\n    for ($letter_index = 0; $letter_index < $message_length; $letter_index++)\
    \ {", "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    foreach my $char (@message_array) {\n        if ($char =~ /[A-Z]/) {\n  \
    \          $encoded_message .= lc($char);\n        } elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($char);\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    $encoded_message =~ s/[aeiou]/chr(ord($&)+2)/eg;\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels =\
    \ (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_is_upper =\
    \ 0;\n    my $message_char_is_lower = 0;\n    my $message_char_is_vowel = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_not_letter = 0;\n\
    \    my $message_char_is_not_vowel = 0;\n    my $message_char_is_not_upper = 0;\n\
    \    my $message_char_is_not_lower = 0;\n    my $message_char_is_not_space = 0;\n\
    \    my $message_char_is_space = 0;\n    my $message_char_is_not_alpha = 0;\n\
    \    my $message_char_is_alpha = 0;\n    my $message_char_is_not_digit = 0;\n\
    \    my $message_char_is_digit = 0;\n    my $message_char_is_not_alnum = 0;\n\
    \    my $message_char_is_alnum = 0;\n    my $message_char_is_not_cntrl = 0;\n\
    \    my $message_char_is_cntrl = 0;\n    my $message_char_is_not_graph = 0;\n\
    \    my $message_char_is_graph = 0;\n    my $message_char_is_not_print = 0;\n\
    \    my $message_char_is_print = 0;\n    my $message_char_is_not_punct = 0;\n\
    \    my $message_char_is_punct = 0;\n    my $message_char_is_not_xdigit = 0",
  "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n      \
    \  \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n\
    \    foreach my $letter (@message_array) {\n        if (exists $vowels{$letter})\
    \ {\n            $encoded_message .= $vowels{$letter};\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n     \
    \   } else {\n            $encoded_message .= $letter;\n        }\n    }\n   \
    \ return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar\
    \ @vowels;\n    my $vowel_found = 0;\n    my $vowel_next = \"\";\n    my $vowel_next_next\
    \ = \"\";\n    my $vowel_next_next_index = 0;\n    my $vowel_next_index = 0;\n\
    \    my $vowel_next_next_found = 0;\n    my $vowel_next_found = 0;\n    my $vowel_next_next_count\
    \ = 0;\n    my $vowel_next_count = 0;\n    my $vowel_next_next_length = 0;\n \
    \   my $vowel_next_length = 0;\n    my $vowel_next_next_next = \"\";\n    my $vowel_next_next_next_index\
    \ = 0;\n    my $vowel_next_next_next_found = 0;\n    my $vowel_next_next_next_count\
    \ = 0;\n    my $vowel_next_next_next_length = 0;\n    my $vowel_next_next_next_next\
    \ = \"\";\n    my $vowel_next_next_next_next_index = 0;\n    my $vowel_next_next_next_next_found\
    \ = 0;\n    my $vowel_next_next_next_next_count = 0;\n    my $vowel_next_next_next_next_length\
    \ = 0;\n    my $vowel_next_next_next_next_next = \"\";\n    my $vowel_next_next_next_next_next_index\
    \ = 0;\n    my $vowel_next_next_next_next_next_found = 0;\n    my $vowel_next_next_",
  "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_count\
    \ = 0;\n    my $vowel_index = 0;\n    my $vowel_letter = \"\";\n    my $vowel_letter_index\
    \ = 0;\n    my $vowel_letter_index_plus_two = 0;\n    my $vowel_letter_index_plus_two_mod\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_plus_97 = 0;\n    my $vowel_letter_index_plus_two_mod_plus_97_char\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper = \"\";\n\
    \    my $vowel_letter_index_plus_two_mod_plus_97_char_lower = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_",
  "    my @message = split(//, $message);\n    my @encoded = ();\n    my %vowels =\
    \ (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o'\
    \ => 'q',\n        'u' => 'y',\n    );\n    foreach my $char (@message) {\n  \
    \      if (exists $vowels{$char}) {\n            push @encoded, $vowels{$char};\n\
    \        } elsif ($char =~ /[a-z]/) {\n            push @encoded, chr(ord($char)\
    \ + 2);\n        } elsif ($char =~ /[A-Z]/) {\n            push @encoded, chr(ord($char)\
    \ + 2 - 32);\n        } else {\n            push @encoded, $char;\n        }\n\
    \    }\n    return join('', @encoded);\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n    \
    \    \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n     \
    \   \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n      \
    \  \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n       \
    \ \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"\
    o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\"\
    \ => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" =>\
    \ \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"\
    z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    foreach my\
    \ $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n          \
    \  $encoded .= $alphabet{lc($char)};\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index =\
    \ 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n    my $vowel_found_index\
    \ = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_index_count = 0;\n\
    \    my $vowel_found_index_count_index = 0;\n    my $vowel_found_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index = 0;\n    my $vowel_found_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index = 0;\n \
    \   my $vowel_found_index_count_index_count_index_count_index_count = 0;\n   \
    \ my $vowel_found_index_count_index_count_index_count_index_count_index = 0;\n\
    \    my $vowel_found_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %letters = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper = map { $_\
    \ => 1 } (\"A\"..\"Z\");\n    my %letters_lower = map { $_ => 1 } (\"a\"..\"z\"\
    );\n    my %letters_upper_lower = map { $_ => 1 } (\"A\"..\"Z\");\n    my %letters_lower_upper\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_lower_lower = map { $_ =>\
    \ 1 } (\"a\"..\"z\");\n    my %letters_upper_upper = map { $_ => 1 } (\"A\"..\"\
    Z\");\n    my %letters_lower_upper_lower = map { $_ => 1 } (\"a\"..\"z\");\n \
    \   my %letters_upper_lower_upper = map { $_ => 1 } (\"A\"..\"Z\");\n    my %letters_lower_upper_upper\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper_lower_lower = map {\
    \ $_ => 1 } (\"A\"..\"Z\");\n    my %letters_upper_upper_lower = map { $_ => 1\
    \ } (\"A\"..\"Z\");\n    my %letters_upper_upper_upper = map { $_ => 1 } (\"A\"\
    ..\"Z\");\n    my %letters_lower_lower_lower = map { $_ => 1 } (\"a\"..\"z\");\n\
    \    my %letters_lower_lower_upper = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_lower_upper_lower_lower\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper_lower_upper_lower =\
    \ map { $_ => 1 } (\"A\"..\"Z\");\n    my %letters_lower_upper_upper_lower = map\
    \ { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper_lower_lower_upper = map {\
    \ $_ => 1 } (\"A\"..\"Z\");", "    my $encoded_message = \"\";\n    my @message_array\
    \ = split(//, $message);\n    my %vowels = (\n        \"a\" => \"c\",\n      \
    \  \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n       \
    \ \"u\" => \"y\",\n    );\n    for my $letter (@message_array) {\n        if ($letter\
    \ =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/) {\n                $encoded_message\
    \ .= $vowels{$letter};\n            } else {\n                $encoded_message\
    \ .= uc($letter);\n            }\n        } elsif ($letter =~ /[A-Z]/) {\n   \
    \         if ($letter =~ /[AEIOU]/) {\n                $encoded_message .= uc($vowels{lc($letter)});\n\
    \            } else {\n                $encoded_message .= lc($letter);\n    \
    \        }\n        } else {\n            $encoded_message .= $letter;\n     \
    \   }\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n   \
    \ my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n   \
    \ my %encoding = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 's',\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= $encoding{lc\
    \ $char};\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return uc $encoded;\n}", "    my $encoded = \"\";\n    my @letters = split(//,\
    \ $message);\n    for my $letter (@letters) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            my $new_letter = $letter;\n            if ($letter =~ /[a-z]/)\
    \ {\n                $new_letter =~ tr/a-z/b-za/;\n            } else {\n    \
    \            $new_letter =~ tr/A-Z/B-ZA/;\n            }\n            if ($new_letter\
    \ =~ /[aeiou]/i) {\n                $new_letter =~ tr/aeiou/eioua/;\n        \
    \    }\n            $encoded .= $new_letter;\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded =\
    \ \"\";\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z);\n    my %vowel_hash = map { $vowels[$_]\
    \ => $vowels[($_ + 2) % 5] } (0..4);\n    my %alphabet_hash = map { $alphabet[$_]\
    \ => $_ } (0..25);\n    for my $char (split //, $message) {\n        if (exists\
    \ $vowel_hash{lc $char}) {\n            $encoded .= uc $vowel_hash{lc $char};\n\
    \        } elsif (exists $alphabet_hash{lc $char}) {\n            my $new_char\
    \ = $alphabet[($alphabet_hash{lc $char} + 2) % 26];\n            $encoded .= uc\
    \ $new_char;\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_letter = \"\";\n    my $vowel_letter_index = 0;\n    my\
    \ $vowel_letter_count = 0;\n    my $vowel_letter_index_plus_two = 0;\n    my $vowel_letter_index_plus_two_count\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter = \"\";\n    my $vowel_letter_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter_count = 0;\n    my $vowel_letter_index_plus_two_letter_index_plus_two\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter_index_plus_two_count = 0;\n\
    \    my $vowel_letter_index_plus_two_letter_index_plus_two_letter = \"\";\n  \
    \  my $vowel_letter_index_plus_two_letter_index_plus_two_letter_index = 0;\n \
    \   my $vowel_letter_index_plus_two_letter_index_plus_two_letter_count = 0;\n\
    \    my $vowel_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two_count\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter\
    \ = \"\";\n    my $vowel_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_letter_index_plus_two_letter_index_plus_two_letter_", " \
    \   my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    my %vowel_hash = ();\n    my $vowel_index = 0;\n    foreach my\
    \ $vowel (@vowels) {\n        $vowel_hash{$vowel} = $vowels[($vowel_index + 2)\
    \ % 5];\n        $vowel_index++;\n    }\n    foreach my $char (split //, $message)\
    \ {\n        if (exists $vowel_hash{lc($char)}) {\n            $encoded_message\
    \ .= uc($vowel_hash{lc($char)});\n        } else {\n            $encoded_message\
    \ .= uc($char);\n        }\n    }\n    return $encoded_message;\n}", "    my @message\
    \ = split(//, $message);\n    my @vowels = qw(a e i o u);\n    my @alphabet =\
    \ qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %vowels = map\
    \ { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } @alphabet;\n    my\
    \ @encoded_message;\n    foreach my $letter (@message) {\n        if ($vowels{$letter})\
    \ {\n            my $index = 0;\n            while ($index < @alphabet) {\n  \
    \              if ($alphabet[$index] eq $letter) {\n                    push @encoded_message,\
    \ $alphabet[$index + 2];\n                    last;\n                }\n     \
    \           $index++;\n            }\n        } else {\n            push @encoded_message,\
    \ $letter;\n        }\n    }\n    return join('', @encoded_message);\n}", "  \
    \  my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } ('a'..'z');\n\
    \    my %alphabet_index = map { $alphabet[$_] => $_ } (0..$#alphabet);\n    my\
    \ $alphabet_size = scalar(keys %alphabet);\n    for my $letter (split(//, $message))\
    \ {\n        if ($vowels{$letter}) {\n            my $letter_index = $alphabet_index{$letter};\n\
    \            my $new_letter_index = ($letter_index + 2) % $alphabet_size;\n  \
    \          my $new_letter = $alphabet[$new_letter_index];\n            $encoded_message\
    \ .= $new_letter;\n        }\n        else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $result\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/i) {\n\
    \            my $pos = index($alphabet, lc($char));\n            $result .= substr($alphabet,\
    \ ($pos + 2) % 26, 1);\n        } else {\n            $result .= $char;\n    \
    \    }\n    }\n    return $result;\n}", "    my @message = split //, $message;\n\
    \    my @encoded_message;\n    my %vowels = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n\
    \            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            } else {\n                $letter = lc $letter;\n            }\n\
    \            if ($letter =~ /[aeiou]/) {\n                $letter = $vowels{$letter};\n\
    \            }\n        }\n        push @encoded_message, $letter;\n    }\n  \
    \  return join '', @encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %letters_upper = map { $_ => 1 } qw(A B C D E F G H I J K L M N O P Q\
    \ R S T U V W X Y Z);\n    my %letters_lower = map { $_ => 1 } qw(a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z);\n    my %letters_swap = map { $_ =>\
    \ 1 } qw(b c d e f g h i j k l m n o p q r s t u v w x y z a);\n    my %letters_swap_upper\
    \ = map { $_ => 1 } qw(B C D E F G H I J K L M N O P Q R S T U V W X Y Z A);\n\
    \    my %letters_swap_lower = map { $_ => 1 } qw(b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z a);\n    my %letters_swap_vowels = map { $_ => 1 } qw(c\
    \ d e f g h i j k l m n o p q r s t u v w x y z a b);\n    my %letters_swap_vowels_upper\
    \ = map { $_ => 1 } qw(C D E F G H I J K L M N O P Q R S T U V W X Y Z A B);\n\
    \    my %letters_swap_vowels_lower = map { $_ => 1 } qw(c d e f g h i j k l m\
    \ n o p q r s t u v w x y z a b);\n    my @message = split(//, $message);\n  \
    \  foreach my $char (@message) {\n        if (exists $letters{$char}) {\n    \
    \        if (exists $vowels", "    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split(//, $vowels))\
    \ {\n        $vowels_hash->{$vowel} = 1;\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($vowels_hash->{$char}) {\n            $encoded\
    \ .= $vowels_encoded_hash->{$char};\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1\
    \ } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n\
    \    my $vowel_offset = 2;\n    my $vowel_offset_index = 0;\n    my $vowel_offset_count\
    \ = 0;\n    my $vowel_offset_char = \"\";\n    my $char = \"\";\n    my $char_index\
    \ = 0;\n    my $char_count = 0;\n    my $char_is_vowel = 0;\n    my $char_is_upper\
    \ = 0;\n    my $char_is_lower = 0;\n    my $char_is_alpha = 0;\n    my $char_is_digit\
    \ = 0;\n    my $char_is_space = 0;\n    my $char_is_punct = 0;\n    my $char_is_other\
    \ = 0;\n    my $char_is_unknown = 0;\n    my $char_is_upper_offset = 0;\n    my\
    \ $char_is_lower_offset = 0;\n    my $char_is_alpha_offset = 0;\n    my $char_is_digit_offset\
    \ = 0;\n    my $char_is_space_offset = 0;\n    my $char_is_punct_offset = 0;\n\
    \    my $char_is_other_offset = 0;\n    my $char_is_unknown_offset = 0;\n    my\
    \ $char_is_upper_offset_char = \"\";\n    my $char_is_lower_offset_char = \"\"\
    ;\n    my $char_is_alpha_offset_char = \"\";\n    my $char_is_digit_offset_char\
    \ = \"\";\n    my $char_is_space_offset_char = \"\";\n    my $char_is_punct_offset_char\
    \ = \"\";\n    my $char_is_other_offset_char = \"\";\n    my $char_is_unknown_offset_char",
  "    my $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach my\
    \ $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            $encoded\
    \ .= encode_letter($letter);\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my $vowels_array\
    \ = [split(//, $vowels)];\n    for (my $i = 0; $i < scalar(@$vowels_array); $i++)\
    \ {\n        $vowels_hash->{$vowels_array->[$i]} = $vowels_array->[($i + 2) %\
    \ scalar(@$vowels_array)];\n    }\n    my $message_array = [split(//, $message)];\n\
    \    for (my $i = 0; $i < scalar(@$message_array); $i++) {\n        if (exists($vowels_hash->{lc($message_array->[$i])}))\
    \ {\n            $encoded_message .= uc($vowels_hash->{lc($message_array->[$i])});\n\
    \        } else {\n            $encoded_message .= uc($message_array->[$i]);\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n\
    \    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    for my $letter (split //, $message) {\n        if ($vowels{lc $letter}) {\n\
    \            my $index = (index(join(\"\", @vowels), lc $letter) + 2) % 5;\n \
    \           $letter = $vowels[$index];\n        }\n        $encoded .= uc $letter;\n\
    \    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    for my $char (split //, $message)\
    \ {\n        my $encoded_char = $char;\n        if ($char =~ /[a-z]/i) {\n   \
    \         $encoded_char = lc($char) eq $char ? uc($char) : lc($char);\n      \
    \      if ($vowels{$encoded_char}) {\n                my $index = $alphabet{$encoded_char};\n\
    \                $index += 2;\n                $index -= 26 if $index > 25;\n\
    \                $encoded_char = $alphabet[$index];\n            }\n        }\n\
    \        $encoded_message .= $encoded_char;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded_message = \"\";\n    my @letters = split //, $message;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $encoded_message .= chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n   \
    \     } else {\n            $encoded_message .= $letter;\n        }\n    }\n \
    \   return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    for my $letter (split //, $message)\
    \ {\n        my $index = index($vowels, $letter);\n        if ($index != -1) {\n\
    \            $encoded .= substr($vowels_encoded, $index, 1);\n        } else {\n\
    \            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded = \"\";\n    my @message = split(//, $message);\n    my $i = 0;\n\
    \    while ($i < scalar(@message)) {\n        my $char = $message[$i];\n     \
    \   if ($char =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n            if\
    \ ($char =~ /[AEIOU]/) {\n                $char =~ tr/AEIOU/EIOUA/;\n        \
    \    }\n        }\n        $encoded .= $char;\n        $i++;\n    }\n    return\
    \ $encoded;\n}", "    my $encoded_message = \"\";\n    my @letters = split(\"\"\
    , $message);\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n \
    \       'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            if\
    \ ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n           \
    \ } else {\n                $letter = lc($letter);\n            }\n          \
    \  if ($letter =~ /[aeiou]/) {\n                $letter = $vowels{$letter};\n\
    \            }\n        }\n        $encoded_message .= $letter;\n    }\n    return\
    \ $encoded_message;\n}", "    my @message = split(//, $message);\n    my @new_message;\n\
    \    my %vowels = (\n        a => 'c',\n        e => 'g',\n        i => 'k',\n\
    \        o => 'q',\n        u => 'y',\n    );\n    for my $letter (@message) {\n\
    \        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[a-z]/) {\n  \
    \              if ($letter =~ /[aeiou]/) {\n                    push @new_message,\
    \ $vowels{$letter};\n                } else {\n                    push @new_message,\
    \ $letter;\n                }\n            } else {\n                push @new_message,\
    \ $letter;\n            }\n        } else {\n            push @new_message, $letter;\n\
    \        }\n    }\n    my $new_message = join('', @new_message);\n    return $new_message;\n\
    }", "    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_ahead =\
    \ 'cgkmoqsuwy';\n    my $vowels_ahead_index = 0;\n    my $vowels_index = 0;\n\
    \    my $vowel_ahead = '';\n    my $vowel = '';\n    my $letter = '';\n    my\
    \ $letter_index = 0;\n    my $message_length = length($message);\n    my $message_index\
    \ = 0;\n    my $vowels_ahead_length = length($vowels_ahead);\n    my $vowels_length\
    \ = length($vowels);\n    my $letter_code = 0;\n    my $letter_code_ahead = 0;\n\
    \    my $letter_code_diff = 0;\n    my $letter_code_diff_ahead = 0;\n    my $letter_code_diff_ahead_index\
    \ = 0;\n    my $letter_code_diff_index = 0;\n    my $letter_code_diff_length =\
    \ 0;\n    my $letter_code_diff_length_ahead = 0;\n    my $letter_code_diff_length_ahead_index\
    \ = 0;\n    my $letter_code_diff_length_index = 0;\n    my $letter_code_diff_length_length\
    \ = 0;\n    my $letter_code_diff_length_length_ahead = 0;\n    my $letter_code_diff_length_length_ahead_index\
    \ = 0;\n    my $letter_code_diff_length_length_index = 0;\n    my $letter_code_diff_length_length_length\
    \ = 0;\n    my $letter_code_diff_length_length_length_ahead = 0;\n    my $letter_code_diff_length_length_length_ahead_index\
    \ = 0;\n    my $letter_code_diff_length_length_length_index = 0;\n    my $letter_code_diff_length_length_length_length\
    \ = 0;\n    my $letter_code_diff_length_length_length_length_ahead = 0;\n    my\
    \ $letter_code_diff_length", "    my @chars = split(//, $message);\n    my $encoded\
    \ = \"\";\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n\
    \            $encoded .= encode_char($char);\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\
    \";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map\
    \ { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n \
    \   my $vowel_length = scalar @vowels;\n    my $char;\n    my $char_code;\n  \
    \  my $char_code_plus_two;\n    my $char_code_plus_two_char;\n    for (my $i =\
    \ 0; $i < length($message); $i++) {\n        $char = substr($message, $i, 1);\n\
    \        $char_code = ord($char);\n        if ($char_code >= 65 && $char_code\
    \ <= 90) {\n            $char_code_plus_two = $char_code + 2;\n            if\
    \ ($char_code_plus_two > 90) {\n                $char_code_plus_two = $char_code_plus_two\
    \ - 26;\n            }\n            $char_code_plus_two_char = chr($char_code_plus_two);\n\
    \            if (exists $vowels{$char_code_plus_two_char}) {\n               \
    \ $encoded .= $vowels[$vowel_index];\n                $vowel_index++;\n      \
    \          if ($vowel_index >= $vowel_length) {\n                    $vowel_index\
    \ = 0;\n                }\n            } else {\n                $encoded .= $char_code_plus_two_char;\n\
    \            }\n        } elsif ($char_code >= 97 && $char_code <= 122) {\n  \
    \          $char_code_plus_two = $char_code + 2;\n            if ($char_code_plus_two\
    \ > 122) {\n                $char_code_plus_two = $char_code_plus_two - 26;\n\
    \            }\n            $char_code_plus_two_char = chr($char_code_plus_two);\n\
    \            if (exists $vowels{$char_code_plus_two_char})", "    my $encoded\
    \ = \"\";\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            my $new_letter = $letter;\n\
    \            if ($letter =~ /[a-z]/) {\n                $new_letter =~ tr/a-z/b-za/;\n\
    \            } else {\n                $new_letter =~ tr/A-Z/B-ZA/;\n        \
    \    }\n            if ($new_letter =~ /[aeiou]/i) {\n                $new_letter\
    \ =~ tr/aeiou/eioua/;\n            }\n            $encoded .= $new_letter;\n \
    \       } else {\n            $encoded .= $letter;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            }\n      \
    \      else {\n                $char =~ tr/A-Z/a-z/;\n            }\n        \
    \    if (exists $vowels{lc($char)}) {\n                my $index = ord($char)\
    \ - ord(\"a\");\n                $index = ($index + 2) % 26;\n               \
    \ $char = chr(ord(\"a\") + $index);\n            }\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash\
    \ = {};\n    my $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n      \
    \  $vowels_encoded_hash->{$vowel} = substr($vowels_encoded, $i, 1);\n        $i++;\n\
    \    }\n    foreach my $char (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($char =~ /[aeiou]/) {\n                $char = $vowels_encoded_hash->{$char};\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    my @alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_index_plus_two = 0;\n    my\
    \ $alphabet_index_plus_two = 0;\n    my $vowel_index_plus_two_letter = \"\";\n\
    \    my $alphabet_index_plus_two_letter = \"\";\n    my $vowel_index_plus_two_letter_upper\
    \ = \"\";\n    my $alphabet_index_plus_two_letter_upper = \"\";\n    my $vowel_index_plus_two_letter_lower\
    \ = \"\";\n    my $alphabet_index_plus_two_letter_lower = \"\";\n    my $vowel_index_plus_two_letter_upper_index\
    \ = 0;\n    my $alphabet_index_plus_two_letter_upper_index = 0;\n    my $vowel_index_plus_two_letter_lower_index\
    \ = 0;\n    my $alphabet_index_plus_two_letter_lower_index = 0;\n    my $vowel_index_plus_two_letter_upper_index_plus_two\
    \ = 0;\n    my $alphabet_index_plus_two_letter_upper_index_plus_two = 0;\n   \
    \ my $vowel_index_plus_two_letter_lower_index_plus_two = 0;\n    my $alphabet_index_plus_two_letter_lower_index_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_letter_upper_index_plus_two_letter = \"\"\
    ;\n    my $alphabet_index_plus_two_letter_upper_index_plus_two_letter = \"\";\n\
    \    my $vowel_index_plus_two_letter_lower_index_plus_two_letter = \"\";\n   \
    \ my $alphabet_index_plus_", "    my @message = split(//, $message);\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my @encoded_message;\n    foreach my $letter\
    \ (@message) {\n        if (grep {$_ eq $letter} @vowels) {\n            my $index\
    \ = 0;\n            foreach my $vowel (@vowels) {\n                if ($vowel\
    \ eq $letter) {\n                    $index = $index + 2;\n                  \
    \  if ($index > 4) {\n                        $index = $index - 5;\n         \
    \           }\n                    push(@encoded_message, $vowels[$index]);\n\
    \                }\n            }\n        } else {\n            if ($letter eq\
    \ uc($letter)) {\n                push(@encoded_message, lc($letter));\n     \
    \       } else {\n                push(@encoded_message, uc($letter));\n     \
    \       }\n        }\n    }\n    return join('', @encoded_message);\n}", "   \
    \ my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ (\"a\"..\"z\");\n    my %alphabet_map = map { $_ => 1 } (\"a\"..\"z\");\n  \
    \  my @alphabet = (\"a\"..\"z\");\n    my $alphabet_size = scalar(@alphabet);\n\
    \    my $alphabet_index = 0;\n    my $vowel_index = 0;\n    my $vowel_size = scalar(@vowels);\n\
    \    my $vowel_map = {};\n    foreach my $vowel (@vowels) {\n        $vowel_map->{$vowel}\
    \ = $vowels[($vowel_index + 2) % $vowel_size];\n        $vowel_index++;\n    }\n\
    \    foreach my $char (split(//, $message)) {\n        if (exists($alphabet{$char}))\
    \ {\n            if (exists($vowels{$char})) {\n                $encoded .= $vowel_map->{$char};\n\
    \            } else {\n                $encoded .= $alphabet[($alphabet_index\
    \ + 2) % $alphabet_size];\n            }\n        } else {\n            $encoded\
    \ .= $char;\n        }\n        $alphabet_index++;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_index\
    \ = 0;\n    my $vowel_index = 0;\n    for(my $i = 0; $i < length($message); $i++)\
    \ {\n        my $char = substr($message, $i, 1);\n        if($char =~ /[a-zA-Z]/)\
    \ {\n            if($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         $vowel_index = index($vowels, lc($char));\n            if($vowel_index\
    \ != -1) {\n                $vowels_index = ($vowel_index + 2) % 5;\n        \
    \        $char = substr($vowels, $vowels_index, 1);\n                if(substr($message,\
    \ $i, 1) =~ /[A-Z]/) {\n                    $char = uc($char);\n             \
    \   }\n            }\n        }\n        $encoded_message .= $char;\n    }\n \
    \   return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels2 = \"cdfghjklmnpqrstvwxyz\";\n    my $vowels3 = \"bdfhjlnprtvxz\"\
    ;\n    my $vowels4 = \"aeiou\";\n    my $vowels5 = \"aeiou\";\n    my $vowels6\
    \ = \"aeiou\";\n    my $vowels7 = \"aeiou\";\n    my $vowels8 = \"aeiou\";\n \
    \   my $vowels9 = \"aeiou\";\n    my $vowels10 = \"aeiou\";\n    my $vowels11\
    \ = \"aeiou\";\n    my $vowels12 = \"aeiou\";\n    my $vowels13 = \"aeiou\";\n\
    \    my $vowels14 = \"aeiou\";\n    my $vowels15 = \"aeiou\";\n    my $vowels16\
    \ = \"aeiou\";\n    my $vowels17 = \"aeiou\";\n    my $vowels18 = \"aeiou\";\n\
    \    my $vowels19 = \"aeiou\";\n    my $vowels20 = \"aeiou\";\n    my $vowels21\
    \ = \"aeiou\";\n    my $vowels22 = \"aeiou\";\n    my $vowels23 = \"aeiou\";\n\
    \    my $vowels24 = \"aeiou\";\n    my $vowels25 = \"aeiou\";\n    my $vowels26\
    \ = \"aeiou\";\n    my $vowels27 = \"aeiou\";\n    my $vowels28 = \"aeiou\";\n\
    \    my $vowels29 = \"aeiou\";\n    my $vowels30 = \"aeiou\";\n    my $vowels31\
    \ = \"aeiou\";\n    my $vowels32 = \"aeiou\";\n    my $vowels33 = \"aeiou\";\n\
    \    my $vowels34 = \"aeiou\";\n    my $vowels35 = \"ae", "    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my\
    \ $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n    my @vowels_encoded_array\
    \ = split(//, $vowels_encoded);\n    my @vowels_array = split(//, $vowels);\n\
    \    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_encoded_array[$i];\n        $vowels_encoded_hash->{$vowels_encoded_array[$i]}\
    \ = $vowels_array[$i];\n    }\n    my @message_array = split(//, $message);\n\
    \    for (my $i = 0; $i < scalar(@message_array); $i++) {\n        my $char =\
    \ $message_array[$i];\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char = uc($char);\n            }\n         \
    \   if (exists($vowels_hash->{$char})) {\n                $char = $vowels_hash->{$char};\n\
    \            }\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my @message = split //, $message;\n    my @new_message;\n    my %vowels\
    \ = (\n        a => 'c',\n        e => 'g',\n        i => 'k',\n        o => 'q',\n\
    \        u => 's',\n    );\n    for my $letter (@message) {\n        if ($letter\
    \ =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n                $letter\
    \ = uc $letter;\n            } else {\n                $letter = lc $letter;\n\
    \            }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter\
    \ = $vowels{lc $letter};\n        }\n        push @new_message, $letter;\n   \
    \ }\n    return join '', @new_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            my $new_char = $char;\n \
    \           if ($char =~ /[a-z]/) {\n                $new_char = uc($char);\n\
    \            } else {\n                $new_char = lc($char);\n            }\n\
    \            if ($vowels{$new_char}) {\n                my $index = $alphabet{$new_char};\n\
    \                $new_char = $alphabet[($index + 2) % 26];\n            }\n  \
    \          $encoded .= $new_char;\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n \
    \           $encoded .= chr(ord($char) + 2);\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_shifted = \"cgkosw\";\n    my\
    \ $vowels_hash = {};\n    for(my $i = 0; $i < length($vowels); $i++) {\n     \
    \   $vowels_hash->{substr($vowels, $i, 1)} = substr($vowels_shifted, $i, 1);\n\
    \    }\n    for(my $i = 0; $i < length($message); $i++) {\n        my $char =\
    \ substr($message, $i, 1);\n        if(exists($vowels_hash->{$char})) {\n    \
    \        $encoded .= $vowels_hash->{$char};\n        } elsif($char =~ /[a-z]/)\
    \ {\n            $encoded .= chr(ord($char) - 32);\n        } elsif($char =~ /[A-Z]/)\
    \ {\n            $encoded .= chr(ord($char) + 32);\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach my $letter\
    \ (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n            } else {\n\
    \                $letter =~ tr/A-Z/a-z/;\n            }\n            if ($letter\
    \ =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/EIOUA/;\n            }\n\
    \        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    for my $char (split\
    \ //, $message) {\n        if (grep {$_ eq lc $char} @vowels) {\n            $encoded\
    \ .= $vowels[($_ + 2) % 5] for grep {$vowels[$_] eq lc $char} 0..$#vowels;\n \
    \       } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split(//, $message);\n    my @encoded;\n \
    \   my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n       \
    \ \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n\
    \    foreach my $letter (@message) {\n        if ($letter =~ /[A-Z]/) {\n    \
    \        $letter = lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n    \
    \        $letter = uc($letter);\n        }\n        if (exists $vowels{$letter})\
    \ {\n            $letter = $vowels{$letter};\n        }\n        push(@encoded,\
    \ $letter);\n    }\n    return join(\"\", @encoded);\n}", "    my $encoded = \"\
    \";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map\
    \ { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } (\"a\"..\"z\");\n  \
    \  my %letters_upper = map { $_ => 1 } (\"A\"..\"Z\");\n    my %letters_lower\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper_lower = map { $_ =>\
    \ 1 } (\"A\"..\"Z\", \"a\"..\"z\");\n    my %letters_lower_upper = map { $_ =>\
    \ 1 } (\"a\"..\"z\", \"A\"..\"Z\");\n    my %letters_lower_upper_lower = map {\
    \ $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\", \"a\"..\"z\");\n    my %letters_upper_lower_upper\
    \ = map { $_ => 1 } (\"A\"..\"Z\", \"a\"..\"z\", \"A\"..\"Z\");\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o =", "    my @message = split(//, $message);\n    my\
    \ @vowels = qw(a e i o u);\n    my @encoded;\n    foreach my $char (@message)\
    \ {\n        if (grep {$_ eq lc($char)} @vowels) {\n            my $index = first_index\
    \ {$_ eq lc($char)} @vowels;\n            my $new_index = ($index + 2) % 5;\n\
    \            push @encoded, uc($vowels[$new_index]);\n        } else {\n     \
    \       push @encoded, uc($char);\n        }\n    }\n    return join(\"\", @encoded);\n\
    }", "    my @letters = split(//, $message);\n    my @encoded_letters;\n    my\
    \ %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@letters)\
    \ {\n        if (exists $vowels{$letter}) {\n            push @encoded_letters,\
    \ $vowels{$letter};\n        } elsif ($letter =~ /[A-Z]/) {\n            push\
    \ @encoded_letters, lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n   \
    \         push @encoded_letters, uc($letter);\n        } else {\n            push\
    \ @encoded_letters, $letter;\n        }\n    }\n    return join('', @encoded_letters);\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = @vowels;\n    my $message_length = length($message);\n    my $message_index\
    \ = 0;\n    my $message_char = \"\";\n    my $message_char_upper = \"\";\n   \
    \ my $message_char_lower = \"\";\n    my $vowel_char = \"\";\n    my $vowel_char_upper\
    \ = \"\";\n    my $vowel_char_lower = \"\";\n    my $vowel_char_next = \"\";\n\
    \    my $vowel_char_next_upper = \"\";\n    my $vowel_char_next_lower = \"\";\n\
    \    my $vowel_char_next_next = \"\";\n    my $vowel_char_next_next_upper = \"\
    \";\n    my $vowel_char_next_next_lower = \"\";\n    my $vowel_char_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_upper = \"\";\n    my $vowel_char_next_next_next_lower\
    \ = \"\";\n    my $vowel_char_next_next_next_next = \"\";\n    my $vowel_char_next_next_next_next_upper\
    \ = \"\";\n    my $vowel_char_next_next_next_next_lower = \"\";\n    my $vowel_char_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_upper = \"\";\n    my $vowel_char_next_next_next_next_next_lower\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next = \"\";\n    my $vowel_char_next_next_next_next_next_next_upper\
    \ = \"\";\n    my", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n  \
    \  my $vowels_hash = {};\n    my $vowels_array = [];\n    my $vowels_array_length\
    \ = 0;\n    my $vowels_hash_length = 0;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $char = \"\";\n    my $char_lower = \"\";\n    my $char_upper\
    \ = \"\";\n    my $char_next = \"\";\n    my $char_next_lower = \"\";\n    my\
    \ $char_next_upper = \"\";\n    my $char_next_next = \"\";\n    my $char_next_next_lower\
    \ = \"\";\n    my $char_next_next_upper = \"\";\n    my $char_next_next_next =\
    \ \"\";\n    my $char_next_next_next_lower = \"\";\n    my $char_next_next_next_upper\
    \ = \"\";\n    my $char_next_next_next_next = \"\";\n    my $char_next_next_next_next_lower\
    \ = \"\";\n    my $char_next_next_next_next_upper = \"\";\n    my $char_next_next_next_next_next\
    \ = \"\";\n    my $char_next_next_next_next_next_lower = \"\";\n    my $char_next_next_next_next_next_upper\
    \ = \"\";\n    my $char_next_next_next_next_next_next = \"\";\n    my $char_next_next_next_next_next_next_lower\
    \ = \"\";\n    my $char_next_next_next_next_next_next_upper = \"\";\n    my $char_next_next_next_next_next_next_next\
    \ = \"\";\n    my $char_next_next_next_next_next_next_next_lower = \"\";\n   \
    \ my $char_next_next_next_next_next_next_next_upper = \"\";\n    my $char_next_next_next_next_next_next_next_next\
    \ = \"", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n    my %alphabet_hash\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    my @message_array = split\
    \ //, $message;\n    foreach my $letter (@message_array) {\n        if ($vowel_hash{$letter})\
    \ {\n            $encoded_message .= $alphabet_hash{$letter};\n        } else\
    \ {\n            $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n        \"e\" =>\
    \ \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"\
    y\",\n    );\n    foreach my $char (split(//, $message)) {\n        if (grep(/^$char$/,\
    \ @vowels)) {\n            $encoded_message .= $vowel_map{$char};\n        } else\
    \ {\n            $encoded_message .= $char;\n        }\n    }\n    return uc($encoded_message);\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_encoded = map\
    \ { $_ => 1 } (\"c\", \"g\", \"k\", \"o\", \"s\");\n    my %vowels_encoded_map\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"o\",\n        \"u\" => \"s\",\n    );\n    my @message_array\
    \ = split(\"\", $message);\n    for (my $i = 0; $i < scalar(@message_array); $i++)\
    \ {\n        my $letter = $message_array[$i];\n        if ($vowels{$letter}) {\n\
    \            $encoded .= $vowels_encoded_map{$letter};\n        } elsif ($vowels_encoded{$letter})\
    \ {\n            $encoded .= $vowels_encoded_map{$letter};\n        } else {\n\
    \            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_upper = \"\
    AEIOU\";\n    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_upper =\
    \ \"CGJLN\";\n    my $i = 0;\n    while ($i < length($message)) {\n        my\
    \ $char = substr($message, $i, 1);\n        if (index($vowels, $char) != -1) {\n\
    \            $encoded .= substr($vowels_encoded, index($vowels, $char), 1);\n\
    \        } elsif (index($vowels_upper, $char) != -1) {\n            $encoded .=\
    \ substr($vowels_encoded_upper, index($vowels_upper, $char), 1);\n        } else\
    \ {\n            $encoded .= $char;\n        }\n        $i++;\n    }\n    return\
    \ $encoded;\n}", "    my @vowels = ('a'..'z');\n    my @vowels_upper = ('A'..'Z');\n\
    \    my $vowels_string = join('', @vowels);\n    my $vowels_upper_string = join('',\
    \ @vowels_upper);\n    my $vowels_string_2 = $vowels_string . $vowels_string;\n\
    \    my $vowels_upper_string_2 = $vowels_upper_string . $vowels_upper_string;\n\
    \    my $message_encoded = $message;\n    $message_encoded =~ tr/a-zA-Z/$vowels_string_2$vowels_upper_string_2/;\n\
    \    return $message_encoded;\n}", "    my $encoded_message = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $k;\n    my $char;\n   \
    \ my $char_index;\n    my $char_is_vowel;\n    my $char_is_upper;\n    my $char_is_lower;\n\
    \    my $char_is_letter;\n    my $char_is_not_letter;\n    my $char_is_not_vowel;\n\
    \    my $char_is_not_upper;\n    my $char_is_not_lower;\n    my $char_is_not_letter;\n\
    \    my $char_is_not_vowel;\n    my $char_is_not_upper;\n    my $char_is_not_lower;\n\
    \    my $char_is_not_letter;\n    my $char_is_not_vowel;\n    my $char_is_not_upper;\n\
    \    my $char_is_not_lower;\n    my $char_is_not_letter;\n    my $char_is_not_vowel;\n\
    \    my $char_is_not_upper;\n    my $char_is_not_lower;\n    my $char_is_not_letter;\n\
    \    my $char_is_not_vowel;\n    my $char_is_not_upper;\n    my $char_is_not_lower;\n\
    \    my $char_is_not_letter;\n    my $char_is_not_vowel;\n    my $char_is_not_upper;\n\
    \    my $char_is_not_lower;\n    my $char_is_not_letter;\n    my $char_is_not_vowel;\n\
    \    my $char_is_not_upper;\n    my $char_is_not_lower", "    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    for\
    \ (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) >= 0) {\n            $encoded .=\
    \ substr($vowels_encoded, index($vowels, $char), 1);\n        } else {\n     \
    \       $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach my $letter\
    \ (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n            }\n       \
    \     else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n       \
    \     if ($letter =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/EIOUA/;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = (\"a\",\"e\",\"i\",\"o\"\
    ,\"u\");\n    my %vowels_hash = map {$_ => 1} @vowels;\n    my %alphabet_hash\
    \ = map {$_ => 1} (\"a\"..\"z\");\n    my @alphabet = (\"a\"..\"z\");\n    my\
    \ $alphabet_size = scalar @alphabet;\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_position = 0;\n    my $alphabet_position = 0;\n    my $vowel_position_plus_two\
    \ = 0;\n    my $alphabet_position_plus_two = 0;\n    my $vowel_position_plus_two_mod_alphabet_size\
    \ = 0;\n    my $alphabet_position_plus_two_mod_alphabet_size = 0;\n    my $vowel_position_plus_two_mod_alphabet_size_index\
    \ = 0;\n    my $alphabet_position_plus_two_mod_alphabet_size_index = 0;\n    my\
    \ $vowel_position_plus_two_mod_alphabet_size_letter = \"\";\n    my $alphabet_position_plus_two_mod_alphabet_size_letter\
    \ = \"\";\n    my $message_letter = \"\";\n    my $message_letter_upper = \"\"\
    ;\n    my $message_letter_lower = \"\";\n    my $message_letter_upper_index =\
    \ 0;\n    my $message_letter_lower_index = 0;\n    my $message_letter_upper_position\
    \ = 0;\n    my $message_letter_lower_position = 0;\n    my $message_letter_upper_position_plus_two\
    \ = 0;\n    my $message_letter_lower_position_plus_two = 0;\n    my $message_letter_upper_position_plus_two_mod_alphabet_size\
    \ = 0;\n    my $message_letter_lower_position_plus_two_mod_alphabet_size = 0;\n\
    \    my $message_letter_upper_position_", "    my $encoded = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-zA-Z]/) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            } else {\n\
    \                $char =~ tr/A-Z/a-z/;\n            }\n            if ($vowels{lc($char)})\
    \ {\n                $vowel_index = ($vowel_index + 2) % $vowel_count;\n     \
    \           $char = $vowels[$vowel_index];\n            }\n        }\n       \
    \ $encoded .= $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n   \
    \ my $vowel_found = 0;\n    my $vowel_count = 0;\n    my $vowel_pos = 0;\n   \
    \ my $vowel_char = \"\";\n    my $char = \"\";\n    my $char_pos = 0;\n    my\
    \ $char_count = 0;\n    my $char_index = 0;\n    my $char_found = 0;\n    my $char_char\
    \ = \"\";\n    my $char_code = 0;\n    my $char_code_new = 0;\n    my $char_code_new_str\
    \ = \"\";\n    my $char_code_new_str_len = 0;\n    my $char_code_new_str_char\
    \ = \"\";\n    my $char_code_new_str_char_code = 0;\n    my $char_code_new_str_char_code_new\
    \ = 0;\n    my $char_code_new_str_char_code_new_str = \"\";\n    my $char_code_new_str_char_code_new_str_len\
    \ = 0;\n    my $char_code_new_str_char_code_new_str_char = \"\";\n    my $char_code_new_str_char_code_new_str_char_code\
    \ = 0;\n    my $char_code_new_str_char_code_new_str_char_code_new = 0;\n    my\
    \ $char_code_new_str_char_code_new_str_char_code_new_str = \"\";\n    my $char_code_new_str_char_code_new_str_char_code_new_str_len\
    \ = 0;\n    my $char_code_new_str_char_code_new_str_char_code_new_str_char = \"\
    \";\n    my $char_code_new_str_char_code_new_str_char_code_new_str_char_code =\
    \ 0;\n    my $", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_letter = \"\";\n    my $vowel_letter_index\
    \ = 0;\n    my $vowel_letter_count = 0;\n    my $vowel_letter_found = 0;\n   \
    \ my $vowel_letter_next = \"\";\n    my $vowel_letter_next_index = 0;\n    my\
    \ $vowel_letter_next_count = 0;\n    my $vowel_letter_next_found = 0;\n    my\
    \ $vowel_letter_next_next = \"\";\n    my $vowel_letter_next_next_index = 0;\n\
    \    my $vowel_letter_next_next_count = 0;\n    my $vowel_letter_next_next_found\
    \ = 0;\n    my $vowel_letter_next_next_next = \"\";\n    my $vowel_letter_next_next_next_index\
    \ = 0;\n    my $vowel_letter_next_next_next_count = 0;\n    my $vowel_letter_next_next_next_found\
    \ = 0;\n    my $vowel_letter_next_next_next_next = \"\";\n    my $vowel_letter_next_next_next_next_index\
    \ = 0;\n    my $vowel_letter_next_next_next_next_count = 0;\n    my $vowel_letter_next_next_next_next_found\
    \ = 0;\n    my $vowel_letter_next_next_next_next_next = \"\";\n    my $vowel_letter_next_next_next_next_next_index\
    \ = 0;\n    my $vowel_letter_next_next_next_next_next_count = 0;\n    my $vowel_letter_next_next_next_next_next_found\
    \ =", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my @alphabet = qw(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z);\n    my %alphabet = map { $alphabet[$_] => $_ }\
    \ 0..$#alphabet;\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-zA-Z]/) {\n            my $index = $alphabet{lc $char};\n            if\
    \ ($vowels{lc $char}) {\n                $index += 2;\n                $index\
    \ -= 26 if $index > 25;\n            }\n            $char = $alphabet[$index];\n\
    \            $char = uc $char if $char =~ /[a-z]/;\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    my @message = split(//, $message);\n\
    \    my @encoded_message;\n    my %vowels = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    foreach my $char (@message) {\n        if (exists $vowels{$char}) {\n\
    \            push @encoded_message, $vowels{$char};\n        } elsif ($char =~\
    \ /[A-Z]/) {\n            push @encoded_message, lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            push @encoded_message, uc($char);\n        } else\
    \ {\n            push @encoded_message, $char;\n        }\n    }\n    return join('',\
    \ @encoded_message);\n}", "    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    foreach my $char (split(//, $message)) {\n        if (grep(/^$char$/,\
    \ @vowels)) {\n            $encoded_message .= $vowel_map{$char};\n        } else\
    \ {\n            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            my\
    \ $new_letter = $letter;\n            if ($letter =~ /[a-z]/) {\n            \
    \    $new_letter =~ tr/a-z/b-za/;\n            } else {\n                $new_letter\
    \ =~ tr/A-Z/B-ZA/;\n            }\n            if ($new_letter =~ /[aeiou]/i)\
    \ {\n                $new_letter =~ tr/aeiou/eioua/;\n            }\n        \
    \    $encoded .= $new_letter;\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_index\
    \ = 0;\n    my $vowels_index = 0;\n    my $char;\n    my $char_index;\n    my\
    \ $char_encoded;\n    my $char_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel;\n    my $vowel_encoded;\n    my $vowel_encoded_index;\n    my\
    \ $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n   ",
  "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ (\"a\"..\"z\");\n    my @alphabet = (\"a\"..\"z\");\n    my $i = 0;\n    for\
    \ my $char (split //, $message) {\n        if ($alphabet{$char}) {\n         \
    \   if ($vowels{$char}) {\n                $i = 0;\n                while ($i\
    \ < @alphabet) {\n                    if ($char eq $alphabet[$i]) {\n        \
    \                $encoded .= $alphabet[$i+2];\n                        last;\n\
    \                    }\n                    $i++;\n                }\n       \
    \     } else {\n                $encoded .= uc($char);\n            }\n      \
    \  } else {\n            $encoded .= lc($char);\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split(//, $message);\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my @encoded;\n    foreach my $letter (@message) {\n\
    \        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n    \
    \        push(@encoded, $letter);\n        } elsif ($letter =~ /[A-Z]/) {\n  \
    \          $letter =~ tr/A-Z/a-z/;\n            push(@encoded, $letter);\n   \
    \     } else {\n            push(@encoded, $letter);\n        }\n    }\n    my\
    \ $encoded = join('', @encoded);\n    foreach my $vowel (@vowels) {\n        my\
    \ $next_vowel = $vowels[($vowels[0] eq $vowel) ? 1 : 0];\n        $encoded =~\
    \ s/$vowel/$next_vowel/g;\n    }\n    return $encoded;\n}", "    my @message =\
    \ split(//, $message);\n    my $encoded = \"\";\n    my %vowels = (\n        \"\
    a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\"\
    \ => \"q\",\n        \"u\" => \"y\",\n    );\n    for my $letter (@message) {\n\
    \        if (exists $vowels{$letter}) {\n            $encoded .= $vowels{$letter};\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $encoded .= chr(ord($letter)\
    \ + 2);\n        } elsif ($letter =~ /[A-Z]/) {\n            $encoded .= chr(ord($letter)\
    \ + 2 - ord(\"A\") + ord(\"a\"));\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_2 = \"cgjkqsxyz\";\n    my $vowels_3 =\
    \ \"bdfhjlnprtvxz\";\n    my $vowels_4 = \"aeiou\";\n    my $vowels_5 = \"aeiou\"\
    ;\n    my $vowels_6 = \"aeiou\";\n    my $vowels_7 = \"aeiou\";\n    my $vowels_8\
    \ = \"aeiou\";\n    my $vowels_9 = \"aeiou\";\n    my $vowels_10 = \"aeiou\";\n\
    \    my $vowels_11 = \"aeiou\";\n    my $vowels_12 = \"aeiou\";\n    my $vowels_13\
    \ = \"aeiou\";\n    my $vowels_14 = \"aeiou\";\n    my $vowels_15 = \"aeiou\"\
    ;\n    my $vowels_16 = \"aeiou\";\n    my $vowels_17 = \"aeiou\";\n    my $vowels_18\
    \ = \"aeiou\";\n    my $vowels_19 = \"aeiou\";\n    my $vowels_20 = \"aeiou\"\
    ;\n    my $vowels_21 = \"aeiou\";\n    my $vowels_22 = \"aeiou\";\n    my $vowels_23\
    \ = \"aeiou\";\n    my $vowels_24 = \"aeiou\";\n    my $vowels_25 = \"aeiou\"\
    ;\n    my $vowels_26 = \"aeiou\";\n    my $vowels_27 = \"aeiou\";\n    my $vowels_28\
    \ = \"aeiou\";\n    my $vowels_29 = \"aeiou\";\n    my $vowels_30 = \"aeiou\"\
    ;\n    my $vowels_31 = \"aeiou\";\n    my $vowels_32 = \"aeiou\";\n    my $vowels_33\
    \ = \"aeiou\";", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my $i =\
    \ 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/) {\n            if\
    \ ($char =~ /[a-z]/) {\n                $char = uc($char);\n            } else\
    \ {\n                $char = lc($char);\n            }\n            if ($char\
    \ =~ /[aeiou]/) {\n                $char = $vowels_encoded_hash->{$char};\n  \
    \          }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper = uc($alphabet);\n \
    \   my $alphabet_lower = lc($alphabet);\n    my $vowels_upper = uc($vowels);\n\
    \    my $vowels_lower = lc($vowels);\n    my $vowels_upper_2 = substr($vowels_upper,\
    \ 2) . substr($vowels_upper, 0, 2);\n    my $vowels_lower_2 = substr($vowels_lower,\
    \ 2) . substr($vowels_lower, 0, 2);\n    my $alphabet_upper_2 = substr($alphabet_upper,\
    \ 2) . substr($alphabet_upper, 0, 2);\n    my $alphabet_lower_2 = substr($alphabet_lower,\
    \ 2) . substr($alphabet_lower, 0, 2);\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            if (index($vowels_upper, $char) != -1) {\n    \
    \            $encoded .= substr($vowels_upper_2, index($vowels_upper, $char),\
    \ 1);\n            } else {\n                $encoded .= substr($vowels_lower_2,\
    \ index($vowels_lower, $char), 1);\n            }\n        } elsif (index($alphabet,\
    \ $char) != -1) {\n            if (index($alphabet_upper, $char) != -1) {\n  \
    \              $encoded .= substr($alphabet_upper_2, index($alphabet_upper, $char),\
    \ 1);\n            } else {\n                $encoded .= substr($alphabet_lower_2,\
    \ index($alphabet_lower, $char), 1);\n            }\n        } else {\n      \
    \      $encoded .= $char;\n        }\n    }\n    return", "    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_2_ahead = \"cgkmoqsuwy\";\n \
    \   my %vowels_hash = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n  \
    \      \"i\" => \"k\",\n        \"o\" => \"m\",\n        \"u\" => \"q\",\n   \
    \     \"y\" => \"w\",\n    );\n    for my $char (split //, $message) {\n     \
    \   if ($char =~ /[a-z]/i) {\n            if ($char =~ /[A-Z]/) {\n          \
    \      $encoded .= lc($char);\n            } else {\n                $encoded\
    \ .= uc($char);\n            }\n        }\n        if ($char =~ /[$vowels]/i)\
    \ {\n            $encoded .= $vowels_hash{lc($char)};\n        } else {\n    \
    \        $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "   \
    \ my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"\
    cgjkr\";\n    my $vowels_encoded_upper = \"CGJKR\";\n    for (my $i = 0; $i <\
    \ length($message); $i++) {\n        my $char = substr($message, $i, 1);\n   \
    \     my $index = index($vowels, $char);\n        if ($index != -1) {\n      \
    \      $encoded .= substr($vowels_encoded, $index, 1);\n        } else {\n   \
    \         $index = index($vowels, uc($char));\n            if ($index != -1) {\n\
    \                $encoded .= substr($vowels_encoded_upper, $index, 1);\n     \
    \       } else {\n                $encoded .= $char;\n            }\n        }\n\
    \    }\n    return $encoded;\n}", "    my @message = split(//, $message);\n  \
    \  my @encoded_message;\n    my $vowels = \"aeiou\";\n    my $vowels_index = 0;\n\
    \    my $vowels_length = length($vowels);\n    my $message_length = scalar @message;\n\
    \    my $message_index = 0;\n    my $char;\n    my $char_index;\n    my $char_is_vowel;\n\
    \    my $char_is_upper;\n    my $char_is_lower;\n    my $char_is_letter;\n   \
    \ my $char_is_digit;\n    my $char_is_punctuation;\n    my $char_is_whitespace;\n\
    \    my $char_is_control;\n    my $char_is_print;\n    my $char_is_ascii;\n  \
    \  my $char_is_utf8;\n    my $char_is_utf8_c;\n    my $char_is_utf8_c_safe;\n\
    \    my $char_is_utf8_c_strict;\n    my $char_is_utf8_c_strict_not_nul;\n    my\
    \ $char_is_utf8_c_strict_not_nul_not_surrogate;\n    my $char_is_utf8_c_strict_not_nul_not_surrogate_not_noncharacter;\n\
    \    my $char_is_utf8_c_strict_not_nul_not_surrogate_not_noncharacter_not_private;\n\
    \    my $char_is_utf8_c_strict_not_nul_not_surrogate_not_noncharacter_not_private_not_reserved;\n\
    \    my $char_is_utf8_c_strict_not_nul_not_surrogate_not_noncharacter_not_private_not_reserved_not_control;\n\
    \    my $char_is_utf8_c_strict_not_nul_not_surrogate_not_noncharacter_not_private_not_reserved_not_control_not_",
  "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $message_length = length($message);\n\
    \    for (my $i = 0; $i < $message_length; $i++) {\n        my $character = substr($message,\
    \ $i, 1);\n        my $character_index = index($alphabet, $character);\n     \
    \   if ($character_index != -1) {\n            my $character_is_vowel = index($vowels,\
    \ $character) != -1;\n            my $character_is_upper = uc($character) eq $character;\n\
    \            my $new_character_index = ($character_index + 2) % $alphabet_length;\n\
    \            my $new_character = substr($alphabet, $new_character_index, 1);\n\
    \            if ($character_is_vowel) {\n                $new_character = uc($new_character);\n\
    \            }\n            if ($character_is_upper) {\n                $new_character\
    \ = uc($new_character);\n            }\n            $encoded_message .= $new_character;\n\
    \        } else {\n            $encoded_message .= $character;\n        }\n  \
    \  }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n  \
    \  my %alphabet = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' =>\
    \ 'e',\n        'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n      \
    \  'g' => 'i',\n        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n\
    \        'k' => 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' =>\
    \ 'p',\n        'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n      \
    \  'r' => 't',\n        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n\
    \        'v' => 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' =>\
    \ 'a',\n        'z' => 'b',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($vowels{$char}) {\n            $encoded .= $alphabet{$char};\n  \
    \      } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    };\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_hash = {};\n    my $alphabet_array = split(//, $alphabet);\n\
    \    for (my $i = 0; $i < scalar(@$alphabet_array); $i++) {\n        $alphabet_hash->{$alphabet_array->[$i]}\
    \ = $alphabet_array->[($i + 2) % 26];\n    }\n    my $message_array = split(//,\
    \ $message);\n    for (my $i = 0; $i < scalar(@$message_array); $i++) {\n    \
    \    if (index($vowels, $message_array->[$i]) != -1) {\n            $encoded .=\
    \ $vowels_hash->{$message_array->[$i]};\n        } elsif (index($alphabet, $message_array->[$i])\
    \ != -1) {\n            $encoded .= $alphabet_hash->{$message_array->[$i]};\n\
    \        } else {\n            $encoded .= $message_array->[$i];\n        }\n\
    \    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_index = map { $alphabet{$_}\
    \ => $_ } keys %alphabet;\n    my $alphabet_length = scalar keys %alphabet;\n\
    \    my $alphabet_index = 0;\n    foreach my $letter (split //, $message) {\n\
    \        if ($letter =~ /[A-Z]/) {\n            $letter = lc($letter);\n     \
    \   }\n        if ($letter =~ /[a-z]/) {\n            if ($vowels{$letter}) {\n\
    \                $alphabet_index = $alphabet{$letter};\n                $alphabet_index\
    \ += 2;\n                $alphabet_index -= $alphabet_length if $alphabet_index\
    \ > $alphabet_length;\n                $letter = $alphabet_index{$alphabet_index};\n\
    \            }\n            $letter = uc($letter);\n        }\n        $encoded\
    \ .= $letter;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n   \
    \ my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char = uc($char);\n            } else {\n  \
    \              $char = lc($char);\n            }\n            my $index = index($vowels,\
    \ lc($char));\n            if ($index != -1) {\n                $char = substr($vowels_encoded,\
    \ $index, 1);\n            }\n        }\n        $encoded .= $char;\n    }\n \
    \   return $encoded;\n}", "    my $encoded = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($letter =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my $vowels = \"aeiouAEIOU\";\n    my\
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n  \
    \  my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found\
    \ = 0;\n    my $vowel_pos = 0;\n    my $vowel_char = \"\";\n    my $vowel_char_next\
    \ = \"\";\n    my $vowel_char_next_next = \"\";\n    my $vowel_char_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next = \"\";\n    my $vowel_char_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next = \"\";\n    my $vowel_char_next_next_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next_next_next = \"\";\n\
    \    my $vowel_char_next_next_next_next_next_next_next_next_next = \"\";\n   \
    \ my $vowel_char_next_next_next_next_next_next_next_next_next_next = \"\";\n \
    \   my $vowel_char_next_next_next_next_next_next_next_next_next_next_next = \"\
    \";\n    my $vowel_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";", "    my $encoded_message = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my $vowel_count = 0;\n    my $vowel_index = 0;\n    my $vowel_position =\
    \ 0;\n    my $vowel_position_plus_two = 0;\n    my $vowel_position_plus_two_char\
    \ = \"\";\n    my $vowel_position_plus_two_index = 0;\n    my $vowel_position_plus_two_index_plus_one\
    \ = 0;\n    my $vowel_position_plus_two_index_plus_one_char = \"\";\n    my $vowel_position_plus_two_index_plus_one_index\
    \ = 0;\n    my $vowel_position_plus_two_index_plus_one_index_plus_one = 0;\n \
    \   my $vowel_position_plus_two_index_plus_one_index_plus_one_char = \"\";\n \
    \   my $vowel_position_plus_two_index_plus_one_index_plus_one_index = 0;\n   \
    \ my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one = 0;\n\
    \    my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one_char\
    \ = \"\";\n    my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one_index\
    \ = 0;\n    my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one_index_plus_one\
    \ = 0;\n    my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one_index_plus_one_char\
    \ = \"\";\n    my $vowel_position_plus_two_index_plus_one_index_plus_one_index_plus_one_index_plus_one_index\
    \ = 0;\n    my $vow", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    my $char;\n\
    \    my $next_char;\n    my $next_next_char;\n    my $next_next_next_char;\n \
    \   my $next_next_next_next_char;\n    my $next_next_next_next_next_char;\n  \
    \  my $next_next_next_next_next_next_char;\n    my $next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_char;\n    my $next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_next_next_char;\n    my $next_next_next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_next_next_next_next_char;\n \
    \   my $next_next_next_next_next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_char;\n\
    \    my $next_next_next_next_next_next_next_", "    my $encoded = \"\";\n    my\
    \ @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_position_count\
    \ = 0;\n    my $vowel_position_found = 0;\n    my $vowel_position_index = 0;\n\
    \    my $vowel_position_index_count = 0;\n    my $vowel_position_index_found =\
    \ 0;\n    my $vowel_position_index_position = 0;\n    my $vowel_position_index_position_count\
    \ = 0;\n    my $vowel_position_index_position_found = 0;\n    my $vowel_position_index_position_index\
    \ = 0;\n    my $vowel_position_index_position_index_count = 0;\n    my $vowel_position_index_position_index_found\
    \ = 0;\n    my $vowel_position_index_position_index_position = 0;\n    my $vowel_position_index_position_index_position_count\
    \ = 0;\n    my $vowel_position_index_position_index_position_found = 0;\n    my\
    \ $vowel_position_index_position_index_position_index = 0;\n    my $vowel_position_index_position_index_position_index_count\
    \ = 0;\n    my $vowel_position_index_position_index_position_index_found = 0;\n\
    \    my $vowel_position_index_position_index_position_index_position = 0;\n  \
    \  my $vowel_position_index_position_index_position_index_position_count = 0;\n\
    \    my $vowel_position_index_position_index_position_index_position_found = 0;\n\
    \    my $vowel_position_index_position_index_position_index_position_index = 0;\n\
    \    my $vowel_position_index_", "    my $encoded = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %letters = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_up = map {\
    \ $_ => 1 } (\"A\"..\"Z\");\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if (exists $letters{$char})\
    \ {\n            $encoded .= uc($char);\n        } elsif (exists $letters_up{$char})\
    \ {\n            $encoded .= lc($char);\n        } else {\n            $encoded\
    \ .= $char;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < length($encoded))\
    \ {\n        my $char = substr($encoded, $i, 1);\n        if (exists $vowels{$char})\
    \ {\n            my $next_char = substr($encoded, $i+1, 1);\n            if (exists\
    \ $vowels{$next_char}) {\n                substr($encoded, $i, 1) = $next_char;\n\
    \                substr($encoded, $i+1, 1) = $char;\n                $i++;\n \
    \           }\n        }\n        $i++;\n    }\n    return $encoded;\n}", "  \
    \  my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_up = map { $_ => 1 } ('A'..'Z');\n    my $i = 0;\n    while ($i\
    \ < length($message)) {\n        my $char = substr($message, $i, 1);\n       \
    \ if (exists $letters{$char}) {\n            if ($char eq 'z') {\n           \
    \     $char = 'a';\n            } else {\n                $char = chr(ord($char)\
    \ + 1);\n            }\n        } elsif (exists $letters_up{$char}) {\n      \
    \      if ($char eq 'Z') {\n                $char = 'A';\n            } else {\n\
    \                $char = chr(ord($char) + 1);\n            }\n        }\n    \
    \    if (exists $vowels{$char}) {\n            if ($char eq 'u') {\n         \
    \       $char = 'a';\n            } else {\n                $char = chr(ord($char)\
    \ + 1);\n            }\n            if ($char eq 'u') {\n                $char\
    \ = 'a';\n            } else {\n                $char = chr(ord($char) + 1);\n\
    \            }\n        }\n        $encoded .= $char;\n        $i++;\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            my $ascii = ord($letter);\n            if ($ascii >= 65 && $ascii\
    \ <= 90) {\n                $ascii += 2;\n                if ($ascii > 90) {\n\
    \                    $ascii -= 26;\n                }\n            } elsif ($ascii\
    \ >= 97 && $ascii <= 122) {\n                $ascii += 2;\n                if\
    \ ($ascii > 122) {\n                    $ascii -= 26;\n                }\n   \
    \         }\n            $letter = chr($ascii);\n        }\n        $encoded .=\
    \ $letter;\n    }\n    return $encoded;\n}", "    my @chars = split //, $message;\n\
    \    my $encoded = \"\";\n    foreach my $char (@chars) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($char =~ /[aeiou]/i) {\n                $char =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    foreach my $letter (@message_array) {\n        if ($letter =~ /[a-z]/) {\n\
    \            $letter =~ tr/a-z/A-Z/;\n            $letter =~ tr/A-Z/N-ZA-M/;\n\
    \            $encoded_message .= $letter;\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            $letter =~ tr/A-Z/a-z/;\n            $letter =~ tr/a-z/n-za-m/;\n\
    \            $encoded_message .= $letter;\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $encoded_message .= chr(ord($letter)\
    \ - 32);\n        } elsif ($letter =~ /[A-Z]/) {\n            $encoded_message\
    \ .= chr(ord($letter) + 32);\n        } else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    $encoded_message =~ s/[aeiou]/chr(ord($&) +\
    \ 2)/eg;\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    for my $c (split //,\
    \ $message) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[A-Z]/) {\n\
    \                $c = lc($c);\n            } else {\n                $c = uc($c);\n\
    \            }\n        }\n        if ($c =~ /[aeiou]/i) {\n            my $index\
    \ = index($vowels, lc($c));\n            $c = substr($vowels_encoded, $index,\
    \ 1);\n        }\n        $encoded .= $c;\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n\
    \    my $vowel_index_found = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_found\
    \ = 0;\n    my $vowel_index_plus_two_found_index = 0;\n    my $vowel_index_plus_two_found_index_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found_index\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found_index_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found_index_plus_one_found\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found_index_plus_one_found_index\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_found_index_plus_one_found_index_plus_one_found_index_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_found_index_plus_one_", "    my $encoded\
    \ = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n    my $vowel_found_index\
    \ = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_index_count = 0;\n\
    \    my $vowel_found_index_count_index = 0;\n    my $vowel_found_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index = 0;\n    my $vowel_found_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index = 0;\n \
    \   my $vowel_found_index_count_index_count_index_count_index_count = 0;\n   \
    \ my $vowel_found_index_count_index_count_index_count_index_count_index = 0;\n\
    \    my $vowel_found_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_", "    my $result = \"\";\n    my @vowels = (\"a\"\
    ,\"e\",\"i\",\"o\",\"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_flag = 0;\n    my $vowel_flag_2 = 0;\n    my $vowel_flag_3 = 0;\n\
    \    my $vowel_flag_4 = 0;\n    my $vowel_flag_5 = 0;\n    my $vowel_flag_6 =\
    \ 0;\n    my $vowel_flag_7 = 0;\n    my $vowel_flag_8 = 0;\n    my $vowel_flag_9\
    \ = 0;\n    my $vowel_flag_10 = 0;\n    my $vowel_flag_11 = 0;\n    my $vowel_flag_12\
    \ = 0;\n    my $vowel_flag_13 = 0;\n    my $vowel_flag_14 = 0;\n    my $vowel_flag_15\
    \ = 0;\n    my $vowel_flag_16 = 0;\n    my $vowel_flag_17 = 0;\n    my $vowel_flag_18\
    \ = 0;\n    my $vowel_flag_19 = 0;\n    my $vowel_flag_20 = 0;\n    my $vowel_flag_21\
    \ = 0;\n    my $vowel_flag_22 = 0;\n    my $vowel_flag_23 = 0;\n    my $vowel_flag_24\
    \ = 0;\n    my $vowel_flag_25 = 0;\n    my $vowel_flag_26 = 0;\n    my $vowel_flag_27\
    \ = 0;\n    my $vowel_flag_28 = 0;\n    my $vowel_flag_29 = 0;\n    my $vowel_flag_30\
    \ = 0;\n    my $vowel_flag_31 = 0;\n    my $vowel_flag_32 = 0;\n    my $vowel_flag_33\
    \ = 0;\n", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $message_length = length($message);\n\
    \    my $index = 0;\n    my $vowel_index = 0;\n    my $vowel_index_plus_two =\
    \ 0;\n    my $vowel_index_plus_two_mod_length = 0;\n    my $vowel_index_plus_two_mod_length_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_mod_length_plus_one_char = \"\";\n    my\
    \ $vowel_index_plus_two_mod_length_plus_one_char_upper = \"\";\n    my $vowel_index_plus_two_mod_length_plus_one_char_lower\
    \ = \"\";\n    my $char = \"\";\n    my $char_upper = \"\";\n    my $char_lower\
    \ = \"\";\n    my $char_index = 0;\n    my $char_index_plus_one = 0;\n    my $char_index_plus_one_mod_length\
    \ = 0;\n    my $char_index_plus_one_mod_length_plus_one = 0;\n    my $char_index_plus_one_mod_length_plus_one_char\
    \ = \"\";\n    my $char_index_plus_one_mod_length_plus_one_char_upper = \"\";\n\
    \    my $char_index_plus_one_mod_length_plus_one_char_lower = \"\";\n    for($index\
    \ = 0; $index < $message_length; $index++) {\n        $char = substr($message,\
    \ $index, 1);\n        $char_upper = uc($char);\n        $char_lower = lc($char);\n\
    \        $char_index = index($alphabet, $char_lower);\n        $char_index_plus_one\
    \ = $char_index + 1;\n       ", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            my $char_encoded = $char;\n            if ($char =~ /[a-z]/)\
    \ {\n                $char_encoded = uc($char);\n            } else {\n      \
    \          $char_encoded = lc($char);\n            }\n            if ($vowels\
    \ =~ /$char/i) {\n                my $index = index($vowels, $char);\n       \
    \         $char_encoded = substr($vowels_encoded, $index, 1);\n            }\n\
    \            $encoded .= $char_encoded;\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash = {\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    };\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char = uc\
    \ $char;\n            } else {\n                $char = lc $char;\n          \
    \  }\n            if ($vowels =~ /$char/i) {\n                $char = $vowels_hash->{lc\
    \ $char};\n            }\n        }\n        $encoded_message .= $char;\n    }\n\
    \    return $encoded_message;\n}", "    my @message = split //, $message;\n  \
    \  my @encoded;\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            my $encoded = chr(ord($letter) + 2);\n            if ($encoded\
    \ =~ /[aeiou]/) {\n                $encoded = chr(ord($encoded) + 2);\n      \
    \      }\n            push @encoded, $encoded;\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            my $encoded = chr(ord($letter) + 2);\n            if ($encoded\
    \ =~ /[AEIOU]/) {\n                $encoded = chr(ord($encoded) + 2);\n      \
    \      }\n            push @encoded, $encoded;\n        } else {\n           \
    \ push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n}",
  "    my @message = split(\"\", $message);\n    my @vowels = (\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n    my @encoded;\n    foreach my $letter (@message) {\n    \
    \    if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n        \
    \    push(@encoded, $letter);\n        } elsif ($letter =~ /[A-Z]/) {\n      \
    \      $letter =~ tr/A-Z/a-z/;\n            push(@encoded, $letter);\n       \
    \ } else {\n            push(@encoded, $letter);\n        }\n    }\n    my $encoded\
    \ = join(\"\", @encoded);\n    foreach my $vowel (@vowels) {\n        my $next\
    \ = chr(ord($vowel) + 2);\n        $encoded =~ s/$vowel/$next/g;\n    }\n    return\
    \ $encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e' =>\
    \ 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n\
    \    my @letters = split(//, $message);\n    foreach my $letter (@letters) {\n\
    \        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message .=\
    \ $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        'a' =>\
    \ 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n      \
    \  'u' => 'y',\n    };\n    foreach my $char (split //, $message) {\n        if\
    \ ($vowels =~ m/$char/i) {\n            $encoded_message .= $vowels_hash->{lc($char)};\n\
    \        }\n        else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index\
    \ = 0;\n    my $vowels_index = 0;\n    my $char;\n    my $char_index;\n    my\
    \ $char_encoded;\n    my $char_encoded_index;\n    my $char_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_offset;\n    my $char_encoded_index_mod_offset_mod;\n\
    \    my $char_encoded_index_mod_offset_mod_offset;\n    my $char_encoded_index_mod_offset_mod_offset_mod;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset;\n    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset;\n   \
    \ my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod;\n  \
    \  my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset;\n\
    \    my $char_encoded_index_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod;\n\
    \    my $char_enc", "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my\
    \ $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n\
    \    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my\
    \ $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n\
    \    my $h;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n \
    \       \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n  \
    \      \"u\" => \"y\",\n    );\n    for my $char (split //, $message) {\n    \
    \    if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @chars = split(//,\
    \ $message);\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= $char eq uc($char) ? lc($char) : uc($char);\n   \
    \     } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my @letters = split(//, $message);\n    my $encoded_message = \"\";\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $encoded_message .= chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n   \
    \     } else {\n            $encoded_message .= $letter;\n        }\n    }\n \
    \   return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my %vowels_map = (\n      \
    \  \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"j\",\n       \
    \ \"o\" => \"k\",\n        \"u\" => \"r\",\n    );\n    for my $char (split //,\
    \ $message) {\n        if (index($vowels, $char) != -1) {\n            $encoded\
    \ .= $vowels_map{$char};\n        } else {\n            $encoded .= uc($char);\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_shifted = \"cgkosw\";\n    my $vowels_hash\
    \ = {};\n    my $vowels_shifted_hash = {};\n    my $i = 0;\n    foreach my $v\
    \ (split(//, $vowels)) {\n        $vowels_hash->{$v} = 1;\n        $vowels_shifted_hash->{$v}\
    \ = substr($vowels_shifted, $i, 1);\n        $i++;\n    }\n    foreach my $c (split(//,\
    \ $message)) {\n        if ($vowels_hash->{lc($c)}) {\n            $encoded .=\
    \ $vowels_shifted_hash->{lc($c)};\n        } else {\n            $encoded .= $c;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = ('a','e','i','o','u');\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_hash = {};\n    my $vowel_hash_count = 0;\n    my $vowel_hash_key\
    \ = \"\";\n    my $vowel_hash_value = \"\";\n    my $vowel_hash_key_value = \"\
    \";\n    my $vowel_hash_key_value_count = 0;\n    my $vowel_hash_key_value_count_key\
    \ = \"\";\n    my $vowel_hash_key_value_count_value = \"\";\n    my $vowel_hash_key_value_count_key_value\
    \ = \"\";\n    my $vowel_hash_key_value_count_key_value_count = 0;\n    my $vowel_hash_key_value_count_key_value_count_key\
    \ = \"\";\n    my $vowel_hash_key_value_count_key_value_count_value = \"\";\n\
    \    my $vowel_hash_key_value_count_key_value_count_key_value = \"\";\n    my\
    \ $vowel_hash_key_value_count_key_value_count_key_value_count = 0;\n    my $vowel_hash_key_value_count_key_value_count_key_value_count_key\
    \ = \"\";\n    my $vowel_hash_key_value_count_key_value_count_key_value_count_value\
    \ = \"\";\n    my $vowel_hash_key_value_count_key_value_count_key_value_count_key_value\
    \ = \"\";\n    my $vowel_hash_key_value_count_key_value_count_key_value_count_key_value_count\
    \ = 0;\n    my $vowel_hash_key_value_count_key_value_count_key_value_count_key_value_count_key\
    \ = \"\";\n   ", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_found = 0;\n    my\
    \ $vowel_count = 0;\n    my $vowel_position = 0;\n    my $vowel_position_plus_two\
    \ = 0;\n    my $vowel_position_plus_two_char = \"\";\n    my $vowel_position_plus_two_char_ascii\
    \ = 0;\n    my $vowel_position_plus_two_char_ascii_plus_two = 0;\n    my $vowel_position_plus_two_char_ascii_plus_two_char\
    \ = \"\";\n    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii = 0;\n\
    \    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two = 0;\n\
    \    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two_char\
    \ = \"\";\n    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii\
    \ = 0;\n    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two\
    \ = 0;\n    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char\
    \ = \"\";\n    my $vowel_position_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii\
    \ = 0;\n    my $vowel_position_plus_two_char_ascii_plus_two_char_asci", "    my\
    \ $encoded_message = \"\";\n    my @letters = split(//, $message);\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_index = 0;\n    my $vowel_index = 0;\n    my $vowel\
    \ = \"\";\n    my $vowel_position = 0;\n    my $vowel_position_2 = 0;\n    my\
    \ $vowel_position_3 = 0;\n    my $vowel_position_4 = 0;\n    my $vowel_position_5\
    \ = 0;\n    my $vowel_position_6 = 0;\n    my $vowel_position_7 = 0;\n    my $vowel_position_8\
    \ = 0;\n    my $vowel_position_9 = 0;\n    my $vowel_position_10 = 0;\n    my\
    \ $vowel_position_11 = 0;\n    my $vowel_position_12 = 0;\n    my $vowel_position_13\
    \ = 0;\n    my $vowel_position_14 = 0;\n    my $vowel_position_15 = 0;\n    my\
    \ $vowel_position_16 = 0;\n    my $vowel_position_17 = 0;\n    my $vowel_position_18\
    \ = 0;\n    my $vowel_position_19 = 0;\n    my $vowel_position_20 = 0;\n    my\
    \ $vowel_position_21 = 0;\n    my $vowel_position_22 = 0;\n    my $vowel_position_23\
    \ = 0;\n    my $vowel_position_24 = 0;\n    my $vowel_position_25 = 0;\n    my\
    \ $vowel_position_26 = 0;\n    my $vowel_position_27 = 0;\n    my $vowel_position_28\
    \ = 0;\n    my $vowel_position_29 = 0;\n    my $vowel_position_30 = 0;\n    my\
    \ $vowel_position_31 = 0;\n    my $vowel_position", "    my $encoded = \"\";\n\
    \    my $i = 0;\n    while ($i < length($message)) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char =~ tr/a-z/A-Z/;\n            } else {\n           \
    \     $char =~ tr/A-Z/a-z/;\n            }\n            if ($char =~ /[aeiou]/i)\
    \ {\n                $char =~ tr/aeiou/eioua/;\n            }\n        }\n   \
    \     $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n}", "  \
    \  my @message = split(//, $message);\n    my $encoded_message = \"\";\n    my\
    \ %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n\
    \                $letter = uc($letter);\n            } else {\n              \
    \  $letter = lc($letter);\n            }\n        }\n        if ($letter =~ /[aeiou]/i)\
    \ {\n            $letter = $vowels{lc($letter)};\n        }\n        $encoded_message\
    \ .= $letter;\n    }\n    return $encoded_message;\n}", "    my @chars = split\
    \ //, $message;\n    my @encoded;\n    foreach my $char (@chars) {\n        if\
    \ ($char =~ /[a-z]/i) {\n            my $encoded_char = $char;\n            if\
    \ ($char =~ /[a-z]/) {\n                $encoded_char =~ tr/a-z/b-za/;\n     \
    \       } else {\n                $encoded_char =~ tr/A-Z/B-ZA/;\n           \
    \ }\n            if ($encoded_char =~ /[aeiou]/i) {\n                $encoded_char\
    \ =~ tr/aeiou/eioua/;\n            }\n            push @encoded, $encoded_char;\n\
    \        } else {\n            push @encoded, $char;\n        }\n    }\n    return\
    \ join '', @encoded;\n}", "    my @message_array = split(//, $message);\n    my\
    \ @encoded_message;\n    foreach my $letter (@message_array) {\n        if ($letter\
    \ =~ /[a-z]/) {\n            my $ascii_code = ord($letter);\n            if ($ascii_code\
    \ >= 97 && $ascii_code <= 100) {\n                $ascii_code += 23;\n       \
    \     } elsif ($ascii_code >= 101 && $ascii_code <= 122) {\n                $ascii_code\
    \ -= 3;\n            }\n            push(@encoded_message, chr($ascii_code));\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            my $ascii_code = ord($letter);\n\
    \            if ($ascii_code >= 65 && $ascii_code <= 68) {\n                $ascii_code\
    \ += 23;\n            } elsif ($ascii_code >= 69 && $ascii_code <= 90) {\n   \
    \             $ascii_code -= 3;\n            }\n            push(@encoded_message,\
    \ chr($ascii_code));\n        } else {\n            push(@encoded_message, $letter);\n\
    \        }\n    }\n    return join(\"\", @encoded_message);\n}", "    my $encoded_message\
    \ = \"\";\n    my @message_array = split(//, $message);\n    foreach my $letter\
    \ (@message_array) {\n        if ($letter =~ /[A-Z]/) {\n            $letter =\
    \ lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n            $letter =\
    \ uc($letter);\n        }\n        if ($letter =~ /[aeiou]/) {\n            $letter\
    \ =~ tr/aeiou/efghj/;\n        }\n        $encoded_message .= $letter;\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels =\
    \ \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash\
    \ = {};\n    my @vowels_encoded_array = split(//, $vowels_encoded);\n    my @vowels_array\
    \ = split(//, $vowels);\n    for (my $i = 0; $i < scalar(@vowels_array); $i++)\
    \ {\n        $vowels_encoded_hash->{$vowels_array[$i]} = $vowels_encoded_array[$i];\n\
    \    }\n    my @message_array = split(//, $message);\n    for (my $i = 0; $i <\
    \ scalar(@message_array); $i++) {\n        if ($vowels =~ /$message_array[$i]/)\
    \ {\n            $encoded .= $vowels_encoded_hash->{$message_array[$i]};\n   \
    \     }\n        else {\n            if ($message_array[$i] =~ /[A-Z]/) {\n  \
    \              $encoded .= lc($message_array[$i]);\n            }\n          \
    \  else {\n                $encoded .= uc($message_array[$i]);\n            }\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = map { $_ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n\
    \    my $alphabet_length = scalar @alphabet;\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            my $index = 0;\n          \
    \  for (my $i = 0; $i < $alphabet_length; $i++) {\n                if ($char eq\
    \ $alphabet[$i]) {\n                    $index = $i;\n                    last;\n\
    \                }\n            }\n            $encoded .= $alphabet[($index +\
    \ 2) % $alphabet_length];\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index\
    \ = 0;\n    my $vowels_index = 0;\n    my $message_index = 0;\n    my $message_length\
    \ = length($message);\n    while ($message_index < $message_length) {\n      \
    \  my $char = substr($message, $message_index, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n            $vowels_index = index($vowels,\
    \ $char);\n            if ($vowels_index >= 0) {\n                $vowels_encoded_index\
    \ = $vowels_index * 2;\n                $char = substr($vowels_encoded, $vowels_encoded_index,\
    \ 1);\n            }\n            $char =~ tr/A-Z/a-z/;\n        }\n        $encoded\
    \ .= $char;\n        $message_index++;\n    }\n    return $encoded;\n}", "   \
    \ my $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach my\
    \ $letter (@letters) {\n        my $encoded_letter = $letter;\n        if ($letter\
    \ =~ /[a-z]/i) {\n            $encoded_letter =~ tr/A-Za-z/N-ZA-Mn-za-m/;\n  \
    \          if ($encoded_letter =~ /[aeiou]/i) {\n                $encoded_letter\
    \ =~ tr/aeiou/cdfgh/;\n            }\n        }\n        $encoded .= $encoded_letter;\n\
    \    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n\
    \    my $vowel_found_index = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_count_index\
    \ = 0;\n    my $vowel_found_count_index_count = 0;\n    my $vowel_found_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count = 0;\n    my $vowel_found_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count = 0;\n \
    \   my $vowel_found_count_index_count_index_count_index_count_index = 0;\n   \
    \ my $vowel_found_count_index_count_index_count_index_count_index_count = 0;\n\
    \    my $vowel_found_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_", "    my $encoded = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash\
    \ = {};\n    my $vowels_hash = {};\n    my @vowels_encoded_array = split(\"\"\
    , $vowels_encoded);\n    my @vowels_array = split(\"\", $vowels);\n    for(my\
    \ $i = 0; $i < @vowels_array; $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_encoded_array[$i];\n        $vowels_encoded_hash->{$vowels_encoded_array[$i]}\
    \ = $vowels_array[$i];\n    }\n    my @message_array = split(\"\", $message);\n\
    \    for(my $i = 0; $i < @message_array; $i++) {\n        if(exists($vowels_hash->{$message_array[$i]}))\
    \ {\n            $encoded .= $vowels_hash->{$message_array[$i]};\n        } elsif(exists($vowels_encoded_hash->{$message_array[$i]}))\
    \ {\n            $encoded .= $vowels_encoded_hash->{$message_array[$i]};\n   \
    \     } else {\n            $encoded .= $message_array[$i];\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded_message = \"\";\n    my $vowels =\
    \ \"aeiou\";\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\"\
    \ => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" =>\
    \ \"w\",\n    };\n    my @message_array = split(//, $message);\n    foreach my\
    \ $char (@message_array) {\n        if ($vowels =~ m/$char/i) {\n            $encoded_message\
    \ .= $vowels_hash->{lc($char)};\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        'a' =>\
    \ 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n      \
    \  'u' => 'y',\n    };\n    for my $char (split //, $message) {\n        if ($vowels\
    \ =~ /$char/) {\n            $encoded_message .= $vowels_hash->{$char};\n    \
    \    } else {\n            $encoded_message .= $char;\n        }\n    }\n    return\
    \ uc $encoded_message;\n}", "    my $encoded_message = \"\";\n    my $vowels =\
    \ \"aeiou\";\n    my $letters = \"abcdefghijklmnopqrstuvwxyz\";\n    my $letters_upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels_upper = \"AEIOU\";\n    my\
    \ $vowels_upper_encoded = \"CGFKQ\";\n    my $vowels_encoded = \"cgfkq\";\n  \
    \  my $letters_encoded = \"cdefghijklmnopqrstuvwxyzb\";\n    my $letters_upper_encoded\
    \ = \"CDEFGHIJKLMNOPQRSTUVWXYZB\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($letters,\
    \ $char) != -1) {\n            $encoded_message .= substr($letters_encoded, index($letters,\
    \ $char), 1);\n        } elsif (index($letters_upper, $char) != -1) {\n      \
    \      $encoded_message .= substr($letters_upper_encoded, index($letters_upper,\
    \ $char), 1);\n        } elsif (index($vowels, $char) != -1) {\n            $encoded_message\
    \ .= substr($vowels_encoded, index($vowels, $char), 1);\n        } elsif (index($vowels_upper,\
    \ $char) != -1) {\n            $encoded_message .= substr($vowels_upper_encoded,\
    \ index($vowels_upper, $char), 1);\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded\
    \ = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 's',\n    );\n    my @letters =\
    \ split //, $message;\n    foreach my $letter (@letters) {\n        if ($vowels{$letter})\
    \ {\n            $encoded .= $vowels_map{$letter};\n        } else {\n       \
    \     $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\"\
    ;\n    my $vowels_encoded_hash = {};\n    for(my $i = 0; $i < length($vowels);\
    \ $i++) {\n        $vowels_encoded_hash->{substr($vowels, $i, 1)} = substr($vowels_encoded,\
    \ $i, 1);\n    }\n    for(my $i = 0; $i < length($message); $i++) {\n        my\
    \ $char = substr($message, $i, 1);\n        if($char =~ /[a-zA-Z]/) {\n      \
    \      if($char =~ /[a-z]/) {\n                $char = uc($char);\n          \
    \  } else {\n                $char = lc($char);\n            }\n            if($char\
    \ =~ /[aeiou]/) {\n                $char = $vowels_encoded_hash->{$char};\n  \
    \          }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkr\";\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            $encoded .= uc($char) eq $char ? lc($char) : uc($char);\n\
    \        }\n        if ($char =~ /[$vowels]/i) {\n            my $index = index($vowels,\
    \ lc($char));\n            $encoded .= substr($vowels_encoded, $index, 1);\n \
    \       }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my @letters\
    \ = split(//, $message);\n    foreach my $letter (@letters) {\n        if ($letter\
    \ =~ /[a-z]/i) {\n            my $ascii = ord($letter);\n            if ($ascii\
    \ >= 65 && $ascii <= 90) {\n                $ascii += 2;\n                if ($ascii\
    \ > 90) {\n                    $ascii -= 26;\n                }\n            }\
    \ elsif ($ascii >= 97 && $ascii <= 122) {\n                $ascii += 2;\n    \
    \            if ($ascii > 122) {\n                    $ascii -= 26;\n        \
    \        }\n            }\n            $letter = chr($ascii);\n        }\n   \
    \     $encoded .= $letter;\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_lower\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_lower_2 = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) != -1) {\n            $encoded .=\
    \ substr($alphabet_lower_2, index($alphabet_lower, $char), 1);\n        } elsif\
    \ (index($alphabet_upper, $char) != -1) {\n            $encoded .= substr($alphabet_upper,\
    \ index($alphabet, $char), 1);\n        } elsif (index($alphabet_lower, $char)\
    \ != -1) {\n            $encoded .= substr($alphabet_lower, index($alphabet, $char),\
    \ 1);\n        } else {\n            $encoded .= $char;\n        }\n    }\n  \
    \  return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"\
    c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\"\
    \ => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" =>\
    \ \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"\
    n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\"\
    ,\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n\
    \        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n \
    \       \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n  \
    \      \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $letter (split\
    \ //, $message) {\n        if ($vowels{$letter}) {\n            $encoded .= $alphabet{$letter};\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            $encoded .= lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $encoded .= uc($letter);\n\
    \        } else {\n            $encoded .= $letter;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_encoded = \"cgjkr\";\n    my $i = 0;\n    my $j = 0;\n    my $char =\
    \ \"\";\n    my $char_encoded = \"\";\n    my $is_vowel = 0;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    for ($i = 0; $i < length($message); $i++) {\n\
    \        $char = substr($message, $i, 1);\n        $is_upper = ($char eq uc($char));\n\
    \        $is_lower = ($char eq lc($char));\n        $is_vowel = 0;\n        for\
    \ ($j = 0; $j < length($vowels); $j++) {\n            if ($char eq substr($vowels,\
    \ $j, 1)) {\n                $is_vowel = 1;\n                $char_encoded = substr($vowels_encoded,\
    \ $j, 1);\n                last;\n            }\n        }\n        if ($is_vowel)\
    \ {\n            if ($is_upper) {\n                $char_encoded = uc($char_encoded);\n\
    \            }\n            elsif ($is_lower) {\n                $char_encoded\
    \ = lc($char_encoded);\n            }\n        }\n        else {\n           \
    \ if ($is_upper) {\n                $char_encoded = lc($char);\n            }\n\
    \            elsif ($is_lower) {\n                $char_encoded = uc($char);\n\
    \            }\n        }\n        $encoded = $encoded . $char_encoded;\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = qw(a e i\
    \ o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_hash = (\n\
    \        a => 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n\
    \        u => 'y',\n    );\n    foreach my $char (split //, $message) {\n    \
    \    if ($vowels{lc $char}) {\n            $encoded .= $vowels_hash{lc $char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ uc $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n  \
    \  my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         my $index = index($vowels, lc($char));\n            if ($index >= 0)\
    \ {\n                $char = substr($vowels_encoded, $index, 1);\n           \
    \ }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"cgjkqsxyz\"\
    ;\n    my $vowels_3 = \"bdfhjlnprtvxz\";\n    my $vowels_4 = \"aeiou\";\n    my\
    \ $vowels_5 = \"aeiou\";\n    my $vowels_6 = \"aeiou\";\n    my $vowels_7 = \"\
    aeiou\";\n    my $vowels_8 = \"aeiou\";\n    my $vowels_9 = \"aeiou\";\n    my\
    \ $vowels_10 = \"aeiou\";\n    my $vowels_11 = \"aeiou\";\n    my $vowels_12 =\
    \ \"aeiou\";\n    my $vowels_13 = \"aeiou\";\n    my $vowels_14 = \"aeiou\";\n\
    \    my $vowels_15 = \"aeiou\";\n    my $vowels_16 = \"aeiou\";\n    my $vowels_17\
    \ = \"aeiou\";\n    my $vowels_18 = \"aeiou\";\n    my $vowels_19 = \"aeiou\"\
    ;\n    my $vowels_20 = \"aeiou\";\n    my $vowels_21 = \"aeiou\";\n    my $vowels_22\
    \ = \"aeiou\";\n    my $vowels_23 = \"aeiou\";\n    my $vowels_24 = \"aeiou\"\
    ;\n    my $vowels_25 = \"aeiou\";\n    my $vowels_26 = \"aeiou\";\n    my $vowels_27\
    \ = \"aeiou\";\n    my $vowels_28 = \"aeiou\";\n    my $vowels_29 = \"aeiou\"\
    ;\n    my $vowels_30 = \"aeiou\";\n    my $vowels_31 = \"aeiou\";\n    my $vowels_32\
    \ = \"aeiou\";\n    my $vowels_33 = \"aeiou\";", "    my $encoded = \"\";\n  \
    \  my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my $i = 0;\n    foreach\
    \ my $vowel (split(//, $vowels)) {\n        $vowels_hash->{$vowel} = $vowels[($i\
    \ + 2) % 5];\n        $i++;\n    }\n    foreach my $char (split(//, $message))\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n\
    \                $encoded .= uc($char);\n            } else {\n              \
    \  $encoded .= lc($char);\n            }\n            if ($char =~ /[aeiou]/)\
    \ {\n                $encoded =~ s/$char/$vowels_hash->{$char}/;\n           \
    \ }\n        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_encoded = \"cgjln\";\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        my $vowel_index = index($vowels,\
    \ $char);\n        if ($vowel_index >= 0) {\n            $char = substr($vowels_encoded,\
    \ $vowel_index, 1);\n        }\n        $encoded .= $char;\n        $i++;\n  \
    \  }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map {$_ => 1} @vowels;\n \
    \   my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n     \
    \   \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n      \
    \  \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n       \
    \ \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"\
    l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\"\
    \ => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" =>\
    \ \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"\
    w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\"\
    ,\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $letter\
    \ (split(//, $message)) {\n        if ($vowels{lc($letter)}) {\n            $encoded\
    \ .= $alphabet{lc($letter)};\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ =>\
    \ 1 } @vowels;\n    my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" =>\
    \ \"d\",\n        \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"\
    g\",\n        \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\"\
    ,\n        \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n\
    \        \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n \
    \       \"o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n  \
    \      \"r\" => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n   \
    \     \"u\" => \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n    \
    \    \"x\" => \"z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return uc($encoded);\n}", "    my $encoded\
    \ = \"\";\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z);\n    foreach my $letter (split //,\
    \ $message) {\n        my $index = 0;\n        my $found = 0;\n        foreach\
    \ my $vowel (@vowels) {\n            if ($letter eq $vowel) {\n              \
    \  $found = 1;\n                last;\n            }\n            $index++;\n\
    \        }\n        if ($found) {\n            $encoded .= $vowels[($index + 2)\
    \ % 5];\n        } else {\n            $index = 0;\n            foreach my $alpha\
    \ (@alphabet) {\n                if ($letter eq $alpha) {\n                  \
    \  $found = 1;\n                    last;\n                }\n               \
    \ $index++;\n            }\n            if ($found) {\n                if ($letter\
    \ eq uc($letter)) {\n                    $encoded .= uc($alphabet[($index + 2)\
    \ % 26]);\n                } else {\n                    $encoded .= $alphabet[($index\
    \ + 2) % 26];\n                }\n            } else {\n                $encoded\
    \ .= $letter;\n            }\n        }\n    }\n    return $encoded;\n}", "  \
    \  my @message = split //, $message;\n    my @encoded;\n    for my $letter (@message)\
    \ {\n        my $encoded = $letter;\n        if ($letter =~ /[a-z]/i) {\n    \
    \        if ($letter =~ /[a-z]/) {\n                $encoded = uc $letter;\n \
    \           } else {\n                $encoded = lc $letter;\n            }\n\
    \        }\n        if ($letter =~ /[aeiou]/i) {\n            my $index = index\
    \ \"aeiou\", lc $letter;\n            $index = ($index + 2) % 5;\n           \
    \ $encoded = substr \"aeiou\", $index, 1;\n        }\n        push @encoded, $encoded;\n\
    \    }\n    return join \"\", @encoded;\n}", "    my @message = split(//, $message);\n\
    \    my @encoded;\n    my $vowels = \"aeiou\";\n    foreach my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            my $index = index($vowels, lc($char));\n            $index = ($index\
    \ + 2) % 5;\n            $char = substr($vowels, $index, 1);\n        }\n    \
    \    push(@encoded, $char);\n    }\n    return join(\"\", @encoded);\n}", "  \
    \  my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\",\
    \ \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"s\",\n        \"u\" => \"y\"\
    ,\n    );\n    my @message_array = split(//, $message);\n    foreach my $letter\
    \ (@message_array) {\n        if (grep {$_ eq $letter} @vowels) {\n          \
    \  $encoded_message .= $vowel_map{$letter};\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n\
    \    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n    my $i = 0;\n\
    \    foreach my $vowel (split(//, $vowels)) {\n        $vowels_hash->{$vowel}\
    \ = 1;\n        $vowels_encoded_hash->{$vowel} = substr($vowels_encoded, $i, 1);\n\
    \        $i++;\n    }\n    foreach my $char (split(//, $message)) {\n        if\
    \ ($vowels_hash->{$char}) {\n            $encoded .= $vowels_encoded_hash->{$char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowel_hash = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n\
    \    my $vowel_count = scalar @vowels;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n\
    \                $char = uc $char;\n            } else {\n                $char\
    \ = lc $char;\n            }\n            if ($vowel_hash{lc $char}) {\n     \
    \           $char = $vowels[($vowel_index + 2) % $vowel_count];\n            \
    \    $vowel_index = ($vowel_index + 1) % $vowel_count;\n            }\n      \
    \  }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char\
    \ (split //, $message) {\n        if (grep {$_ eq $char} @vowels) {\n        \
    \    $encoded_message .= $vowel_map{$char};\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my @letters\
    \ = split(//, $message);\n    my $encoded_message = \"\";\n    foreach my $letter\
    \ (@letters) {\n        if ($letter =~ /[A-Z]/) {\n            $encoded_message\
    \ .= lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n            $encoded_message\
    \ .= uc($letter);\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    $encoded_message =~ s/[aeiou]/shift_vowel($&)/ge;\n   \
    \ return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z);\n    my %vowel_map = (\n        a => 'c',\n        e => 'g',\n   \
    \     i => 'k',\n        o => 'q',\n        u => 'w',\n    );\n    my %alphabet_map\
    \ = ();\n    for(my $i = 0; $i < scalar(@alphabet); $i++) {\n        $alphabet_map{$alphabet[$i]}\
    \ = $alphabet[($i + 2) % scalar(@alphabet)];\n    }\n    for(my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if(grep {$_ eq\
    \ $char} @vowels) {\n            $encoded .= $vowel_map{$char};\n        } elsif(grep\
    \ {$_ eq $char} @alphabet) {\n            $encoded .= $alphabet_map{$char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split //, $message;\n    my @vowels = qw(a\
    \ e i o u);\n    my @encoded_message;\n    for my $letter (@message) {\n     \
    \   if (grep {$_ eq lc $letter} @vowels) {\n            my $index = firstidx {$_\
    \ eq lc $letter} @vowels;\n            my $new_index = ($index + 2) % 5;\n   \
    \         push @encoded_message, uc $vowels[$new_index];\n        }\n        else\
    \ {\n            push @encoded_message, uc $letter;\n        }\n    }\n    return\
    \ join \"\", @encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels =\
    \ \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    for my $char (split //,\
    \ $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char = uc($char);\n            } else {\n              \
    \  $char = lc($char);\n            }\n            if ($vowels =~ /$char/) {\n\
    \                my $index = index($vowels, $char);\n                $char = substr($vowels_encoded,\
    \ $index, 1);\n            }\n        }\n        $encoded .= $char;\n    }\n \
    \   return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    foreach my $char (split(//, $message)) {\n        if ($vowels{$char}) {\n\
    \            $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= uc($char);\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels =\
    \ ('a','e','i','o','u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $letter (split //, $message) {\n        if\
    \ ($vowels{$letter}) {\n            $encoded .= $alphabet{$letter};\n        }\
    \ else {\n            $encoded .= $letter;\n        }\n    }\n    return uc($encoded);\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n    my %letter_hash\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letter_hash_upper = map { $_ => 1\
    \ } (\"A\"..\"Z\");\n    my %letter_hash_lower = map { $_ => 1 } (\"a\"..\"z\"\
    );\n    my %letter_hash_lower_2 = map { $_ => 1 } (\"c\"..\"z\");\n    my %letter_hash_lower_3\
    \ = map { $_ => 1 } (\"d\"..\"z\");\n    my %letter_hash_lower_4 = map { $_ =>\
    \ 1 } (\"e\"..\"z\");\n    my %letter_hash_lower_5 = map { $_ => 1 } (\"f\"..\"\
    z\");\n    my %letter_hash_lower_6 = map { $_ => 1 } (\"g\"..\"z\");\n    my %letter_hash_lower_7\
    \ = map { $_ => 1 } (\"h\"..\"z\");\n    my %letter_hash_lower_8 = map { $_ =>\
    \ 1 } (\"i\"..\"z\");\n    my %letter_hash_lower_9 = map { $_ => 1 } (\"j\"..\"\
    z\");\n    my %letter_hash_lower_10 = map { $_ => 1 } (\"k\"..\"z\");\n    my\
    \ %letter_hash_lower_11 = map { $_ => 1 } (\"l\"..\"z\");\n    my %letter_hash_lower_12\
    \ = map { $_ => 1 } (\"m\"..\"z\");\n    my %letter_hash_lower_13 = map { $_ =>\
    \ 1 } (\"n\"..\"z\");\n    my %letter_hash_lower_14 = map { $_ => 1 } (\"o\"..\"\
    z\");\n    my %letter_hash_lower_15 = map { $_ => 1 } (\"p\"..\"z\");\n    my\
    \ %letter_hash_lower_16 = map { $_ => 1 } (\"q\"..\"z\");\n    my %letter_hash_lower_17\
    \ = map { $_", "    my @message = split(//, $message);\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my @encoded;\n    foreach my $letter (@message) {\n\
    \        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n    \
    \        if (grep {$_ eq $letter} @vowels) {\n                my $index = first_index\
    \ {$_ eq $letter} @vowels;\n                $index = ($index + 2) % 5;\n     \
    \           $letter = $vowels[$index];\n            }\n        }\n        push(@encoded,\
    \ $letter);\n    }\n    return join('', @encoded);\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    foreach my $char\
    \ (split(//, $message)) {\n        if (grep {$_ eq $char} @vowels) {\n       \
    \     $encoded_message .= $vowel_map{$char};\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return uc($encoded_message);\n}", "    my $encoded\
    \ = \"\";\n    my @letters = split //, $message;\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n\
    \                $letter =~ tr/a-z/A-Z/;\n            } else {\n             \
    \   $letter =~ tr/A-Z/a-z/;\n            }\n            if ($letter =~ /[aeiou]/i)\
    \ {\n                $letter =~ tr/aeiou/EIOUA/;\n            }\n        }\n \
    \       $encoded .= $letter;\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map {\
    \ $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n\
    \    my $vowel_map = {};\n    for my $vowel (@vowels) {\n        $vowel_map->{$vowel}\
    \ = $vowels[($vowel_index + 2) % $vowel_count];\n    }\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= uc\
    \ $vowel_map->{lc $char};\n        } else {\n            $encoded .= uc $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my @letters = split(//, $message);\n\
    \    my @encoded;\n    foreach my $letter (@letters) {\n        if ($letter =~\
    \ /[a-z]/) {\n            push(@encoded, chr(ord($letter) - 32));\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            push(@encoded, chr(ord($letter) + 32));\n\
    \        } else {\n            push(@encoded, $letter);\n        }\n    }\n  \
    \  my $encoded_message = join('', @encoded);\n    $encoded_message =~ s/[aeiou]/chr(ord($&)\
    \ + 2)/eg;\n    return $encoded_message;\n}", "    my $encoded_message = \"\"\
    ;\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $char_index\
    \ = index($alphabet, $char);\n        my $encoded_char = \"\";\n        if ($char_index\
    \ != -1) {\n            if (index($vowels, $char) != -1) {\n                $encoded_char\
    \ = substr($alphabet, ($char_index + 2) % $alphabet_length, 1);\n            }\
    \ else {\n                $encoded_char = substr($alphabet, ($char_index + $alphabet_length\
    \ - 2) % $alphabet_length, 1);\n            }\n        } else {\n            $encoded_char\
    \ = $char;\n        }\n        $encoded_message .= $encoded_char;\n    }\n   \
    \ return $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_hash = {};\n   \
    \ for (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (exists $vowels_hash->{$char})\
    \ {\n            $encoded .= $vowels_hash->{$char};\n        } elsif ($char =~\
    \ /[a-z]/) {\n            $encoded .= chr(ord($char) - 32);\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded .= chr(ord($char) + 32);\n        } else\
    \ {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %encoding = (\n        'a' => 'c',\n    \
    \    'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 's',\n\
    \    );\n    foreach my $char (split(//, $message)) {\n        if ($vowels{lc($char)})\
    \ {\n            $encoded .= $encoding{lc($char)};\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my\
    \ $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n    my\
    \ $vowel_found_index = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_index_2\
    \ = 0;\n    my $vowel_found_count_2 = 0;\n    my $vowel_found_index_3 = 0;\n \
    \   my $vowel_found_count_3 = 0;\n    my $vowel_found_index_4 = 0;\n    my $vowel_found_count_4\
    \ = 0;\n    my $vowel_found_index_5 = 0;\n    my $vowel_found_count_5 = 0;\n \
    \   my $vowel_found_index_6 = 0;\n    my $vowel_found_count_6 = 0;\n    my $vowel_found_index_7\
    \ = 0;\n    my $vowel_found_count_7 = 0;\n    my $vowel_found_index_8 = 0;\n \
    \   my $vowel_found_count_8 = 0;\n    my $vowel_found_index_9 = 0;\n    my $vowel_found_count_9\
    \ = 0;\n    my $vowel_found_index_10 = 0;\n    my $vowel_found_count_10 = 0;\n\
    \    my $vowel_found_index_11 = 0;\n    my $vowel_found_count_11 = 0;\n    my\
    \ $vowel_found_index_12 = 0;\n    my $vowel_found_count_12 = 0;\n    my $vowel_found_index_13\
    \ = 0;\n    my $vowel_found_count_13 = 0;\n    my $vowel_found_index_14 = 0;\n\
    \    my $vowel_found_count_14 =", "    my $encoded_message = \"\";\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_found_index = 0;\n    my $vowel_found_count\
    \ = 0;\n    my $vowel_found_index_count = 0;\n    my $vowel_found_index_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count = 0;\n    my $vowel_found_index_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count = 0;\n    my $vowel_found_index_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count =\
    \ 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_found_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $vowel_", "    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $index = 0;\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_found = 0;\n    my $char = \"\";\n    my $char_index = 0;\n\
    \    my $char_index_in_alphabet = 0;\n    my $char_index_in_vowels = 0;\n    my\
    \ $char_index_in_encoded_message = 0;\n    my $char_in_encoded_message = \"\"\
    ;\n    my $char_in_vowels = \"\";\n    my $char_in_alphabet = \"\";\n    my $char_in_message\
    \ = \"\";\n    my $char_in_message_index = 0;\n    my $char_in_message_index_in_alphabet\
    \ = 0;\n    my $char_in_message_index_in_vowels = 0;\n    my $char_in_message_index_in_encoded_message\
    \ = 0;\n    my $char_in_message_in_encoded_message = \"\";\n    my $char_in_message_in_vowels\
    \ = \"\";\n    my $char_in_message_in_alphabet = \"\";\n    my $char_in_message_in_message\
    \ = \"\";\n    my $char_in_message_in_message_index = 0;\n    my $char_in_message_in_message_index_in_alphabet\
    \ = 0;\n    my $char_in_message_in_message_index_in_vowels = 0;\n    my $char_in_message_in_message_index_in_encoded_message\
    \ = 0;\n    my $char_in_message_in_message_in_encoded_message = \"\";\n    my",
  "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded =\
    \ \"cgjkr\";\n    my $vowels_hash = {};\n    for (my $i = 0; $i < length($vowels);\
    \ $i++) {\n        $vowels_hash->{substr($vowels, $i, 1)} = substr($vowels_encoded,\
    \ $i, 1);\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n       \
    \ my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n    \
    \        if ($char =~ /[a-z]/) {\n                $char = uc($char);\n       \
    \     } else {\n                $char = lc($char);\n            }\n          \
    \  if (exists($vowels_hash->{$char})) {\n                $char = $vowels_hash->{$char};\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n     \
    \   \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\",\n      \
    \  \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n       \
    \ \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n        \"\
    j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n        \"m\"\
    \ => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n        \"p\" =>\
    \ \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n        \"s\" => \"\
    u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n        \"v\" => \"x\"\
    ,\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n        \"y\" => \"a\",\n\
    \        \"z\" => \"b\",\n    );\n    for my $char (split //, $message) {\n  \
    \      if ($vowels{lc($char)}) {\n            $encoded .= $alphabet{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_map = (\n       \
    \ \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"\
    o\" => \"q\",\n        \"u\" => \"s\",\n    );\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            my $lower = lc($char);\n  \
    \          if ($lower =~ /[$vowels]/) {\n                $encoded .= $vowel_map{$lower};\n\
    \            } else {\n                $encoded .= $lower;\n            }\n  \
    \      } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n \
    \       \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n  \
    \      \"u\" => \"s\",\n    );\n    for my $char (split //, $message) {\n    \
    \    if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return uc($encoded_message);\n}", "    my $encoded_message = \"\";\n    my\
    \ @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n    \
    \    \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n     \
    \   \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    for my $letter (split\
    \ //, $message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter\
    \ =~ /[a-z]/) {\n                $letter = uc($letter);\n            } else {\n\
    \                $letter = lc($letter);\n            }\n            if (grep {$_\
    \ eq lc($letter)} @vowels) {\n                $letter = $vowel_map{lc($letter)};\n\
    \            }\n        }\n        $encoded_message .= $letter;\n    }\n    return\
    \ $encoded_message;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            my $index = index($vowels, lc($char));\n\
    \            if ($index > -1) {\n                $char = substr($vowels_encoded,\
    \ $index, 1);\n            }\n        }\n        $encoded .= $char;\n    }\n \
    \   return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    foreach my $letter\
    \ (split(//, $message)) {\n        if ($vowels{lc($letter)}) {\n            $encoded\
    \ .= chr(ord($letter) + 2);\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n", "    my $encoded_message =\
    \ \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2_ahead = \"cgkmoqsuwy\"\
    ;\n    my $vowels_hash = {};\n    my $vowels_2_ahead_hash = {};\n    my @vowels_array\
    \ = split(//, $vowels);\n    my @vowels_2_ahead_array = split(//, $vowels_2_ahead);\n\
    \    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_2_ahead_array[$i];\n        $vowels_2_ahead_hash->{$vowels_2_ahead_array[$i]}\
    \ = $vowels_array[$i];\n    }\n    my @message_array = split(//, $message);\n\
    \    for (my $i = 0; $i < scalar(@message_array); $i++) {\n        if ($vowels_hash->{lc($message_array[$i])})\
    \ {\n            $encoded_message .= $vowels_hash->{lc($message_array[$i])};\n\
    \        } elsif ($vowels_2_ahead_hash->{lc($message_array[$i])}) {\n        \
    \    $encoded_message .= $vowels_2_ahead_hash->{lc($message_array[$i])};\n   \
    \     } else {\n            $encoded_message .= $message_array[$i];\n        }\n\
    \    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %encoding\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 's',\n    );\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            $encoded .= $encoding{lc $char};\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my\
    \ %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } ('a'..'z');\n\
    \    for my $letter (split //, $message) {\n        if ($alphabet{$letter}) {\n\
    \            if ($vowels{$letter}) {\n                $letter = chr(ord($letter)\
    \ + 2);\n            }\n            $letter = uc($letter) if $letter eq lc($letter);\n\
    \        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ (\"a\"..\"z\");\n    my @alphabet = (\"a\"..\"z\");\n    my $alphabet_size =\
    \ scalar(@alphabet);\n    my $vowel_size = scalar(@vowels);\n    my $message_size\
    \ = length($message);\n    for (my $i = 0; $i < $message_size; $i++) {\n     \
    \   my $char = substr($message, $i, 1);\n        if ($alphabet{$char}) {\n   \
    \         my $char_index = 0;\n            for (my $j = 0; $j < $alphabet_size;\
    \ $j++) {\n                if ($char eq $alphabet[$j]) {\n                   \
    \ $char_index = $j;\n                    last;\n                }\n          \
    \  }\n            if ($vowels{$char}) {\n                my $vowel_index = 0;\n\
    \                for (my $j = 0; $j < $vowel_size; $j++) {\n                 \
    \   if ($char eq $vowels[$j]) {\n                        $vowel_index = $j;\n\
    \                        last;\n                    }\n                }\n   \
    \             $char = $vowels[($vowel_index + 2) % $vowel_size];\n           \
    \ }\n            $char = $alphabet[($char_index + 13) % $alphabet_size];\n   \
    \     }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n  \
    \  my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n\
    \    my $vowel_found_index = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_index_plus_two\
    \ = 0;\n    my $vowel_found_index_plus_two_count = 0;\n    my $vowel_found_index_plus_two_found\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index = 0;\n    my $vowel_found_index_plus_two_found_count\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two_count\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two_found = 0;\n \
    \   my $vowel_found_index_plus_two_found_index_plus_two_found_index = 0;\n   \
    \ my $vowel_found_index_plus_two_found_index_plus_two_found_count = 0;\n    my\
    \ $vowel_found_index_plus_two_found_index_plus_two_found_index_plus_two = 0;\n\
    \    my $vowel_found_index_plus_two_found_index_plus_two_found_index_plus_two_count\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two_found_index_plus_two_found\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two_found_index_plus_two_found_index\
    \ = 0;\n    my $vowel_found_index_plus_two_found_index_plus_two_found_index_"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
