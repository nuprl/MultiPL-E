name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return\
    \ $l->[$m];\n    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my\
    \ @s = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return ($s[$n/2]\
    \ + $s[$n/2-1])/2;\n    } else {\n        return $s[$n/2];\n    }\n}", "    my\
    \ @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 == 0)\
    \ {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n \
    \       return $sorted[$n/2];\n    }\n}", "    my $n = @$l;\n    my $m = $n /\
    \ 2;\n    if ($n % 2 == 0) {\n        return ($l->[$m-1] + $l->[$m]) / 2;\n  \
    \  } else {\n        return $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m\
    \ = int($n/2);\n    if ($n % 2 == 0) {\n        return ($l->[$m-1] + $l->[$m])\
    \ / 2;\n    } else {\n        return $l->[$m];\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\
    \        return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
    \    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=>\
    \ $b } @$l;\n    if ($n % 2) {\n        return $s[$m];\n    } else {\n       \
    \ return ($s[$m - 1] + $s[$m]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len / 2);\n    my $median;\n    if ($len % 2 == 0) {\n   \
    \     $median = ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        $median\
    \ = $l->[$mid];\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n\
    \    my $median;\n    my $mid = int($len/2);\n    if ($len % 2 == 0) {\n     \
    \   $median = ($l->[$mid-1] + $l->[$mid])/2;\n    } else {\n        $median =\
    \ $l->[$mid];\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n \
    \   my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n        return ($l->[$mid]\
    \ + $l->[$mid-1]) / 2;\n    } else {\n        return $l->[$mid];\n    }\n}", " \
    \   my $n = @$l;\n    if ($n % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1])\
    \ / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $s = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n\
    \    return $l->[$s - 1];\n}", "    my $len = scalar(@$l);\n    my $mid = int($len\
    \ / 2);\n    my $median;\n    if ($len % 2 == 0) {\n        $median = ($l->[$mid\
    \ - 1] + $l->[$mid]) / 2;\n    } else {\n        $median = $l->[$mid];\n    }\n\
    \    return $median;\n}", "    my $len = scalar(@$l);\n    my $median = 0;\n \
    \   my $i = 0;\n    my @sorted = sort {$a <=> $b} @$l;\n    if ($len % 2 == 0)\
    \ {\n        $median = ($sorted[$len/2] + $sorted[$len/2 - 1]) / 2;\n    } else\
    \ {\n        $median = $sorted[$len/2];\n    }\n    return $median;\n}", "   \
    \ my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
    \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n       \
    \ return $l->[$mid];\n    }\n}", "    my $len = scalar(@$l);\n    return undef\
    \ if $len == 0;\n    my $m = $len / 2;\n    if ($len % 2 == 0) {\n        return\
    \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n\
    }", "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n\
    \    if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n\
    \    } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}",
  "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
    \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    return ($n % 2) ? $l->[$m]\
    \ : ($l->[$m-1] + $l->[$m])/2;\n}", "    my $n = @$l;\n    my $median;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
