name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes a list of integers as an input.\n# it returns\
  \ True if there are three distinct elements in the list that\n# sum to zero, and\
  \ False otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($i, $j, $k);\n    for ($i = 0; $i < @$l - 2; $i++) {\n     \
    \   for ($j = $i + 1; $j < @$l - 1; $j++) {\n            for ($k = $j + 1; $k\
    \ < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = scalar(@$l);\n \
    \   for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            for ($k = $j + 1; $k < $len; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $n = @$l;\n    my $found = 0;\n    while\
    \ ($i < $n && !$found) {\n        $j = $i + 1;\n        while ($j < $n && !$found)\
    \ {\n            $k = $j + 1;\n            while ($k < $n && !$found) {\n    \
    \            if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    $found\
    \ = 1;\n                }\n                $k++;\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $found;\n}", "    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $len = scalar(@$l);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            for ($k = $j + 1; $k < $len; $k++) {\n                $sum =\
    \ $l->[$i] + $l->[$j] + $l->[$k];\n                if ($sum == 0) {\n        \
    \            return 1;\n                }\n            }\n        }\n    }\n \
    \   return \"\";\n}", "    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $sum = 0;\n    my $len = @$l;\n    while ($i < $len) {\n        $j = $i + 1;\n\
    \        while ($j < $len) {\n            $k = $j + 1;\n            while ($k\
    \ < $len) {\n                $sum = @$l[$i] + @$l[$j] + @$l[$k];\n           \
    \     if ($sum == 0) {\n                    return 1;\n                }\n   \
    \             $k++;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    my $len\
    \ = scalar(@$l);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i +\
    \ 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k < $len; $k++) {\n  \
    \              if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < scalar(@$l);\
    \ $i++) {\n        for ($j = $i + 1; $j < scalar(@$l); $j++) {\n            for\
    \ ($k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $n = @$l;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n\
    \    for ($i = 0; $i < @$l - 2; $i++) {\n        for ($j = $i + 1; $j < @$l -\
    \ 1; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n              \
    \  if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    my $len = scalar\
    \ @list;\n    for (my $i = 0; $i < $len; $i++) {\n        for (my $j = $i + 1;\
    \ $j < $len; $j++) {\n            for (my $k = $j + 1; $k < $len; $k++) {\n  \
    \              if ($list[$i] + $list[$j] + $list[$k] == 0) {\n               \
    \     return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    my $n = @$l;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my $n = @$l;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $found = 0;\n\
    \    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n    \
    \        $k = $j + 1;\n            while ($k < $n) {\n                $sum = $l->[$i]\
    \ + $l->[$j] + $l->[$k];\n                if ($sum == 0) {\n                 \
    \   $found = 1;\n                    last;\n                }\n              \
    \  $k++;\n            }\n            if ($found) {\n                last;\n  \
    \          }\n            $j++;\n        }\n        if ($found) {\n          \
    \  last;\n        }\n        $i++;\n    }\n    return $found;\n}", "    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = scalar(@$l);\n    while ($i\
    \ < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n            $k = $j\
    \ + 1;\n            while ($k < $n) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \           $k = $k + 1;\n            }\n            $j = $j + 1;\n        }\n\
    \        $i = $i + 1;\n    }\n    return \"\";\n}", "    my @list = @$l;\n   \
    \ my $len = @list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $sum\
    \ = 0;\n    while ($i < $len) {\n        $j = $i + 1;\n        while ($j < $len)\
    \ {\n            $k = $j + 1;\n            while ($k < $len) {\n             \
    \   $sum = $list[$i] + $list[$j] + $list[$k];\n                if ($sum == 0)\
    \ {\n                    return 1;\n                }\n                $k = $k\
    \ + 1;\n            }\n            $j = $j + 1;\n        }\n        $i = $i +\
    \ 1;\n    }\n    return \"\";\n}", "    my @list = @$l;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $len = scalar @list;\n   \
    \ for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            for ($k = $j + 1; $k < $len; $k++) {\n                $sum =\
    \ $list[$i] + $list[$j] + $list[$k];\n                if ($sum == 0) {\n     \
    \               return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my $n = @$l;\n    return \"\" if $n < 3;\n    my $i\
    \ = 0;\n    while ($i < $n) {\n        my $j = $i + 1;\n        while ($j < $n)\
    \ {\n            my $k = $j + 1;\n            while ($k < $n) {\n            \
    \    return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n                $k++;\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
