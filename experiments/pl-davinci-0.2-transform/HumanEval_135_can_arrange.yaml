name: HumanEval_135_can_arrange
language: pl
prompt: "# Create a function which returns the largest index of an element which\n\
  # is not greater than or equal to the element immediately preceding it. If\n# no\
  \ such element exists then return -1. The given array will not contain\n# duplicate\
  \ values.\n# Examples:\n# >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1,\
  \ 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4,\
  \ 5]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 8, 5, 7, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([]),-1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = -1;\n    my $max_index = -1;\n    for (my $i = 0; $i\
    \ < @$arr; $i++) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    return $max_index;\n}", " \
    \   my $i = $#{$arr};\n    while ($i > 0) {\n        if ($arr->[$i] < $arr->[$i\
    \ - 1]) {\n            return $i - 1;\n        }\n        $i--;\n    }\n    return\
    \ -1;\n}", "    my $i = 0;\n    my $max = -1;\n    my $max_index = -1;\n    for\
    \ my $i (0 .. $#$arr) {\n        if ($arr->[$i] > $max) {\n            $max =\
    \ $arr->[$i];\n            $max_index = $i;\n        }\n    }\n    return $max_index;\n\
    }", "    my $max = $arr->[0];\n    my $max_idx = 0;\n    for my $i (1 .. $#$arr)\
    \ {\n        if ($arr->[$i] < $max) {\n            return $i - 1;\n        }\n\
    \        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n          \
    \  $max_idx = $i;\n        }\n    }\n    return -1;\n}", "    my $max = $arr->[0];\n\
    \    my $max_index = 0;\n    for my $i (1 .. $#$arr) {\n        if ($arr->[$i]\
    \ < $max) {\n            return $i - 1;\n        }\n        if ($arr->[$i] > $max)\
    \ {\n            $max = $arr->[$i];\n            $max_index = $i;\n        }\n\
    \    }\n    return -1;\n}", "    my $len = scalar @$arr;\n    my $i = $len - 1;\n\
    \    while ($i > 0) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n          \
    \  return $i - 1;\n        }\n        $i--;\n    }\n    return -1;\n}", "    my\
    \ $len = scalar @$arr;\n    my $max_index = $len - 1;\n    my $max_value = $arr->[$max_index];\n\
    \    my $max_index_so_far = $max_index;\n    for (my $i = $len - 2; $i >= 0; $i--)\
    \ {\n        if ($arr->[$i] > $max_value) {\n            $max_value = $arr->[$i];\n\
    \            $max_index_so_far = $i;\n        }\n        elsif ($arr->[$i] ==\
    \ $max_value) {\n            $max_index_so_far = $i;\n        }\n        else\
    \ {\n            return $max_index_so_far;\n        }\n    }\n    return -1;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = $n - 1;\n    while ($i > 0) {\n \
    \       if ($arr->[$i] < $arr->[$i - 1]) {\n            return $i - 1;\n     \
    \   }\n        $i--;\n    }\n    return -1;\n}", "    my $i = 0;\n    my $max\
    \ = -1;\n    my $max_index = -1;\n    while ($i < scalar(@$arr)) {\n        if\
    \ ($arr->[$i] <= $max) {\n            return $max_index;\n        }\n        $max\
    \ = $arr->[$i];\n        $max_index = $i;\n        $i++;\n    }\n    return -1;\n\
    }", "    my $max = -1;\n    my $max_idx = -1;\n    for my $i (0 .. $#$arr - 1)\
    \ {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n      \
    \      $max_idx = $i;\n        }\n        if ($arr->[$i + 1] < $arr->[$i]) {\n\
    \            return $max_idx;\n        }\n    }\n    return -1;\n}", "    my $max\
    \ = -1;\n    for my $i (0 .. $#$arr - 1) {\n        if ($arr->[$i] >= $arr->[$i\
    \ + 1]) {\n            $max = $i;\n        }\n    }\n    return $max;\n}", " \
    \   my $max = -1;\n    for (my $i = 0; $i < @$arr; $i++) {\n        if ($i > 0\
    \ && $arr->[$i] <= $arr->[$i - 1]) {\n            $max = $i;\n        }\n    }\n\
    \    return $max;\n}", "    my $max = -1;\n    my $max_index = -1;\n    for my\
    \ $i (0 .. $#$arr) {\n        if ($arr->[$i] <= $max) {\n            return $max_index;\n\
    \        }\n        $max = $arr->[$i];\n        $max_index = $i;\n    }\n    return\
    \ -1;\n}", "    my $max = -1;\n    my $max_index = -1;\n    for my $i (0 .. $#$arr\
    \ - 1) {\n        if ($arr->[$i] >= $max) {\n            $max = $arr->[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    return $max_index;\n}", " \
    \   my $max = -1;\n    my $max_index = -1;\n    for (my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        if ($arr->[$i] <= $max) {\n            return $max_index;\n\
    \        }\n        $max = $arr->[$i];\n        $max_index = $i;\n    }\n    return\
    \ -1;\n}", "    my $i = 0;\n    my $max = -1;\n    my $max_i = -1;\n    for my\
    \ $j (1..$#$arr) {\n        if ($arr->[$j] < $arr->[$i]) {\n            if ($max_i\
    \ == -1 || $arr->[$j] > $arr->[$max_i]) {\n                $max_i = $j;\n    \
    \        }\n        } else {\n            $i = $j;\n        }\n    }\n    return\
    \ $max_i;\n}", "    my $max = $arr->[0];\n    my $max_idx = 0;\n    for my $i\
    \ (1 .. $#$arr) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \            $max_idx = $i;\n        }\n        elsif ($arr->[$i] < $max) {\n\
    \            return $i - 1;\n        }\n    }\n    return -1;\n}", "    my $i\
    \ = 0;\n    my $j = 1;\n    my $max = -1;\n    my $max_index = -1;\n    while\
    \ ($j < scalar(@$arr)) {\n        if ($arr->[$i] > $arr->[$j]) {\n           \
    \ if ($arr->[$i] > $max) {\n                $max = $arr->[$i];\n             \
    \   $max_index = $i;\n            }\n        }\n        $i++;\n        $j++;\n\
    \    }\n    return $max_index;\n}", "    my $max_index = -1;\n    for my $i (0\
    \ .. $#$arr - 1) {\n        if ($arr->[$i] >= $arr->[$i + 1]) {\n            $max_index\
    \ = $i;\n        }\n    }\n    return $max_index;\n}", "    my $i = $#{$arr};\n\
    \    while ($i > 0) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n          \
    \  return $i - 1;\n        }\n        $i--;\n    }\n    return -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
