name: HumanEval_89_encrypt
language: pl
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"\
  et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n\
  \        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"\
  ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $r = \"\";\n    my $i;\n    for $i (0..length($s)-1) {\n   \
    \     $r .= chr(ord(substr($s, $i, 1)) + 2*2);\n    }\n    return $r;\n}", " \
    \   my $result = \"\";\n    my $i = 0;\n    while ($i < length($s)) {\n      \
    \  my $c = substr($s, $i, 1);\n        my $n = ord($c) + 2 * 2;\n        $result\
    \ .= chr($n);\n        $i++;\n    }\n    return $result;\n}", "    my $enc = \"\
    \";\n    my $i;\n    for ($i = 0; $i < length($s); $i++) {\n        $enc .= chr(ord(substr($s,\
    \ $i, 1)) + 2 * 2);\n    }\n    return $enc;\n}", "    my @chars = split(//, $s);\n\
    \    my @new_chars = ();\n    foreach my $c (@chars) {\n        my $new_char =\
    \ chr(ord($c) + 2 * 2);\n        push(@new_chars, $new_char);\n    }\n    return\
    \ join(\"\", @new_chars);\n}", "    my $s2 = \"\";\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            $c = chr(ord($c) + 2 * 2);\n            if ($c gt \"z\") {\n    \
    \            $c = chr(ord($c) - 26);\n            }\n        }\n        $s2 .=\
    \ $c;\n    }\n    return $s2;\n}", "    my $r = \"\";\n    for my $c (split //,\
    \ $s) {\n        $r .= chr(ord($c) + 2 * 2);\n    }\n    return $r;\n}", "   \
    \ my $e = \"\";\n    for my $c (split //, $s) {\n        my $i = ord($c) - ord('a');\n\
    \        $i = ($i + 2) % 26;\n        $e .= chr($i + ord('a'));\n    }\n    return\
    \ $e;\n}", "    my $r = \"\";\n    for my $c (split //, $s) {\n        my $n =\
    \ ord($c) - ord('a');\n        $n = ($n + 2) % 26;\n        $r .= chr($n + ord('a'));\n\
    \    }\n    return $r;\n}", "    my $enc = \"\";\n    for my $c (split //, $s)\
    \ {\n        my $i = ord($c) - ord('a');\n        $i = ($i + 2 * 2) % 26;\n  \
    \      $enc .= chr($i + ord('a'));\n    }\n    return $enc;\n}", "    my $r =\
    \ \"\";\n    for my $c (split //, $s) {\n        $r .= chr(ord($c) + 2 * 2);\n\
    \    }\n    return $r;\n}", "    my @chars = split(//, $s);\n    my @new_chars\
    \ = ();\n    foreach my $c (@chars) {\n        my $new_char = chr(ord($c) + 2\
    \ * 2);\n        push(@new_chars, $new_char);\n    }\n    return join(\"\", @new_chars);\n\
    }", "    my $r = \"\";\n    for my $c (split //, $s) {\n        $r .= chr(ord($c)\
    \ + 2 * 2);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for my $c (split\
    \ //, $s) {\n        $r .= chr(ord($c) + 2 * 2);\n    }\n    return $r;\n}", " \
    \   my $r = \"\";\n    for(my $i = 0; $i < length($s); $i++) {\n        my $c\
    \ = substr($s, $i, 1);\n        my $n = ord($c) - ord('a');\n        $n = ($n\
    \ + 2 * 2) % 26;\n        $r .= chr($n + ord('a'));\n    }\n    return $r;\n}",
  "    my $enc = \"\";\n    for my $c (split //, $s) {\n        my $i = ord($c) -\
    \ ord('a');\n        $i = ($i + 2 * 2) % 26;\n        $enc .= chr($i + ord('a'));\n\
    \    }\n    return $enc;\n}", "    my $r = \"\";\n    for my $c (split //, $s)\
    \ {\n        my $i = ord($c) - ord('a');\n        $i = ($i + 2) % 26;\n      \
    \  $r .= chr($i + ord('a'));\n    }\n    return $r;\n}", "    my $r = \"\";\n\
    \    for my $c (split //, $s) {\n        $r .= chr(ord($c) + 2 * 2);\n    }\n\
    \    return $r;\n}", "    my $enc = \"\";\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        my $n = ord($c) - ord('a');\n\
    \        $n = ($n + 2) % 26;\n        $enc .= chr($n + ord('a'));\n    }\n   \
    \ return $enc;\n}", "    my @chars = split(//, $s);\n    my @new_chars = ();\n\
    \    foreach my $char (@chars) {\n        my $new_char = chr(ord($char) + 2 *\
    \ 2);\n        push(@new_chars, $new_char);\n    }\n    return join(\"\", @new_chars);\n\
    }", "    my $r = \"\";\n    for my $c (split //, $s) {\n        my $i = ord($c)\
    \ - ord('a');\n        $i = ($i + 2) % 26;\n        $r .= chr($i + ord('a'));\n\
    \    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
