name: HumanEval_129_minPath
language: pl
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered lists of the values on the\
  \ cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n# than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j]\
  \ = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n# Examples:\
  \    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [map\
    \ {[map {[undef, undef]} (0 .. $m - 1)]} (0 .. $n - 1)];\n    my $min_path = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $min_val = undef;\n            for my $d (0\
    \ .. $k - 1) {\n                my $val = $grid->[$i][$j];\n                if\
    \ (defined $min_val) {\n                    if ($val < $min_val) {\n         \
    \               $min_val = $val;\n                        $path = [$val];\n  \
    \                  } elsif ($val == $min_val) {\n                        push\
    \ @$path, $val;\n                    }\n                } else {\n           \
    \         $min_val = $val;\n                    $path = [$val];\n            \
    \    }\n                if ($i > 0) {\n                    my $prev_min = $min->[$i\
    \ - 1][$j];\n                    if (defined $prev_min->[0]) {\n             \
    \           my $prev_val = $prev_min->[0];\n                        if ($prev_val\
    \ < $min_val) {\n                            $min_val = $prev_val;\n         \
    \                   $path = [@{$prev_min->[1]}, $val];\n                     \
    \   } elsif ($prev_val == $min_val) {\n                            push @$path,\
    \ @{$prev_min->[1]}, $val;\n                        }\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $prev_min\
    \ = $min->[$i][$j - 1];\n                    if (defined $prev_min->[0]) {\n \
    \                       my $prev_val = $prev_min->[0];\n                     \
    \   if ($prev_val < $min_val) {\n                            $min_val = $prev_val;\n\
    \                            $path = [@{$prev_min->[1]}, $val];\n            \
    \            }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $start = 0;\n    my $end = $n *\
    \ $m - 1;\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n\
    \    my $minPath = [];\n    my $minPaths = [];\n    my $visited = [];\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         push @$visited, 0;\n        }\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        push @$minPath, $min;\n    }\n    push @$minPaths, $minPath;\n  \
    \  while ($start <= $end) {\n        my $mid = int(($start + $end) / 2);\n   \
    \     my $paths = [];\n        for (my $i = 0; $i < $n; $i++) {\n            for\
    \ (my $j = 0; $j < $m; $j++) {\n                $visited->[$i * $m + $j] = 0;\n\
    \            }\n        }\n        for (my $i = 0; $i < $n; $i++) {\n        \
    \    for (my $j = 0; $j < $m; $j++) {\n                if ($grid->[$i][$j] <=\
    \ $mid) {\n                    my $path = [];\n                    dfs($grid,\
    \ $i, $j, $k, $mid, $visited, $path, $paths);\n                }\n           \
    \ }\n        }\n        if (@$paths) {\n            $end = $mid - 1;\n       \
    \     $minPaths = $paths;\n        } else {\n            $start = $mid + 1;\n\
    \        }\n    }\n    return $minPaths->[0];\n}", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n\
    \    my $minPathSum2 = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum4\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum8\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum9 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum12 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum14 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum17 = $n * $n * $k;\n    my $minPath18 = [];\n    my $minPathSum18\
    \ = $n * $n * $k;\n    my", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $pathSum = 0;\n            my $visited = {};\n\
    \            my $queue = [[$i, $j]];\n            while (@$queue) {\n        \
    \        my $pos = shift @$queue;\n                my($x, $y) = @$pos;\n     \
    \           if ($x < 0 || $x >= $n || $y < 0 || $y >= $m) {\n                \
    \    next;\n                }\n                my $key = \"$x,$y\";\n        \
    \        if ($visited->{$key}) {\n                    next;\n                }\n\
    \                $visited->{$key} = 1;\n                push @$path, $grid->[$x][$y];\n\
    \                $pathSum += $grid->[$x][$y];\n                if (@$path == $k)\
    \ {\n                    if ($pathSum < $minPathSum) {\n                     \
    \   $minPath = $path;\n                        $minPathSum = $pathSum;\n     \
    \               }\n                    last;\n                }\n            \
    \    push @$queue, [$x - 1, $y];\n                push @$queue, [$x + 1, $y];\n\
    \                push @$queue, [$x, $y - 1];\n                push @$queue, [$x,\
    \ $y + 1];\n            }\n        }\n    }\n    return $minPath;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath =\
    \ [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum19\
    \ = $n * $n +", "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n \
    \   my $min_path = [$min];\n    my $min_paths = [$min_path];\n    my $paths =\
    \ [[0, 0]];\n    my $visited = {};\n    my $i = 0;\n    while ($i < $k) {\n  \
    \      my $new_paths = [];\n        my $new_min_paths = [];\n        foreach my\
    \ $path (@$paths) {\n            my $x = $path->[-1]->[0];\n            my $y\
    \ = $path->[-1]->[1];\n            my $visited_key = \"$x,$y\";\n            if\
    \ (exists $visited->{$visited_key}) {\n                next;\n            }\n\
    \            $visited->{$visited_key} = 1;\n            my $val = $grid->[$x][$y];\n\
    \            if ($val < $min) {\n                $min = $val;\n              \
    \  $min_path = $path;\n                $min_paths = [$min_path];\n           \
    \ } elsif ($val == $min) {\n                push @$min_paths, $path;\n       \
    \     }\n            if ($x > 0) {\n                my $new_path = [@$path, [$x\
    \ - 1, $y]];\n                push @$new_paths, $new_path;\n                push\
    \ @$new_min_paths, $new_path;\n            }\n            if ($x < $n - 1) {\n\
    \                my $new_path = [@$path, [$x + 1, $y]];\n                push\
    \ @$new_paths, $new_path;\n                push @$new_min_paths, $new_path;\n\
    \            }\n            if ($y > 0) {\n                my $new_path = [@$path,\
    \ [$x, $y - 1]];\n                push @$new_paths, $new_path;\n             \
    \   push @$new_min_paths, $new_path;\n            }\n           ", "    my $n\
    \ = @$grid;\n    my @path;\n    my $min = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $n - 1) {\n            my @path = ($grid->[$i][$j]);\n\
    \            my $sum = $grid->[$i][$j];\n            my $min_sum = $min;\n   \
    \         my $min_path = [];\n            minPathHelper($grid, $i, $j, $k - 1,\
    \ $sum, \\@path, \\$min_sum, $min_path);\n            if ($min_sum < $min) {\n\
    \                $min = $min_sum;\n                @path = @$min_path;\n     \
    \       }\n        }\n    }\n    return @path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $n;\n    my $minPathSum2\
    \ = $n * $n * $n;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $n;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $n;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $n;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $n;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $n;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $n;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $n;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $n;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $n;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $n;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $n;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $n;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $n;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $n;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $n;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $n;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n *", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_val = [];\n    my $min_path_len = $k\
    \ + 1;\n    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my\
    \ $path_val = [];\n            my $path_len = 0;\n            _minPath($grid,\
    \ $i, $j, $k, $visited, $path, $path_val, $path_len, $min_path, $min_path_val,\
    \ $min_path_len);\n        }\n    }\n    return $min_path_val;\n}", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum =\
    \ $n * $m * $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n     \
    \   }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $visited, $path, $sum, $i, $j, $k, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     $visited->[$i]->[$j] = 1;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $sum);\n            $visited->[$i]->[$j] = 0;\n            if ($sum <\
    \ $min_sum) {\n                $min_sum = $sum;\n                $min = $path;\n\
    \            }\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max = $n * $n;\n    my $min_path_sum_found_count_max_max\
    \ = $min_path_sum_found_count_max * $min_path_sum_found_count_max;\n    my $min_path_sum_found_count_max_max_max\
    \ = $min_path_sum_found_count_max_max * $min_path_sum_found_count_max_max;\n \
    \   my $min_path_sum_found_count_max_max_max_max = $min_path_sum_found_count_max_max_max\
    \ * $min_path_sum_found_count_max_max_max;\n    my $min_path_sum_found_count_max_max_max_max_max\
    \ = $min_path_sum_found_count_max_max_max_max * $min_path_sum_found_count_max_max_max_max;\n\
    \    my $min_path_sum_found_count_max_max_max_max_max_max = $min_path_sum_found_count_max_max_max_max_max\
    \ * $min_path_sum_found_count_max_max_max_max_max;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max\
    \ = $min_path_sum_found_count_max_max_max_max_max_max * $min_path_sum_found_count_max_max_max_max_max_max;\n\
    \    my $min_path_sum_found_count_max_max_max_max_max_max_max_max = $min_path_sum_found_count_max_max_max_",
  "    my $n = scalar(@$grid);\n    my $minPath = [];\n    my $minPathSum = $n * $n\
    \ + 1;\n    my $minPathSumIndex = 0;\n    for (my $i = 0; $i < $n; $i++) {\n \
    \       for (my $j = 0; $j < $n; $j++) {\n            my $path = [];\n       \
    \     my $pathSum = 0;\n            my $pathSumIndex = 0;\n            my $visited\
    \ = [];\n            for (my $i = 0; $i < $n; $i++) {\n                for (my\
    \ $j = 0; $j < $n; $j++) {\n                    $visited->[$i][$j] = 0;\n    \
    \            }\n            }\n            $visited->[$i][$j] = 1;\n         \
    \   push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $pathSumIndex = $grid->[$i][$j];\n            my $result = minPathHelper($grid,\
    \ $k - 1, $i, $j, $visited, $path, $pathSum, $pathSumIndex);\n            if ($result->[0]\
    \ < $minPathSum) {\n                $minPathSum = $result->[0];\n            \
    \    $minPathSumIndex = $result->[1];\n                $minPath = $result->[2];\n\
    \            } elsif ($result->[0] == $minPathSum) {\n                if ($result->[1]\
    \ < $minPathSumIndex) {\n                    $minPathSumIndex = $result->[1];\n\
    \                    $minPath = $result->[2];\n                }\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $path = [];\n    my $min = [];\n \
    \   my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $min_path_sum =\
    \ $n * $n + 1;\n    my $min_path_idx = -1;\n    my $min_path_sum_idx = -1;\n \
    \   my $min_path_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum = $n * $n + 1;\n\
    \    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_id", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n \
    \   for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
    \ = [];\n            my $visited = [];\n            for my $x (0..$n-1) {\n  \
    \              for my $y (0..$m-1) {\n                    $visited->[$x][$y] =\
    \ 0;\n                }\n            }\n            dfs($grid, $i, $j, $k, $path,\
    \ $visited, $min);\n        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m * $k;\n\
    \    my $visited = [];\n    my $path = [];\n    my $sum = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $dir = 0;\n    my $dirs = [[-1, 0], [0, 1], [1, 0], [0,\
    \ -1]];\n    my $dfs = sub {\n        if ($i < 0 || $i >= $n || $j < 0 || $j >=\
    \ $m) {\n            return;\n        }\n        if ($visited->[$i][$j]) {\n \
    \           return;\n        }\n        $visited->[$i][$j] = 1;\n        push\
    \ @$path, $grid->[$i][$j];\n        $sum += $grid->[$i][$j];\n        if (@$path\
    \ == $k) {\n            if ($sum < $min_sum) {\n                $min_sum = $sum;\n\
    \                $min = [@$path];\n            }\n            $sum -= pop @$path;\n\
    \            $visited->[$i][$j] = 0;\n            return;\n        }\n       \
    \ for (my $d = 0; $d < 4; $d++) {\n            my $x = $i + $dirs->[$d][0];\n\
    \            my $y = $j + $dirs->[$d][1];\n            $dfs->($x, $y);\n     \
    \   }\n        $sum -= pop @$path;\n        $visited->[$i][$j] = 0;\n    };\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $dfs->($i, $j);\n        }\n    }\n    return $min;\n}", "  \
    \  my @minPath;\n    my $minSum = $k * ($k + 1) / 2;\n    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPaths = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $paths = [];\n\
    \            for my $p (0 .. $k - 1) {\n                push @$paths, [$grid->[$i][$j]];\n\
    \            }\n            $minPaths->[$i][$j] = $paths;\n        }\n    }\n\
    \    for my $p (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n          \
    \  for my $j (0 .. $m - 1) {\n                my $minPath = $minPaths->[$i][$j][$p];\n\
    \                my $minSum = sum($minPath);\n                for my $d (0 ..\
    \ 3) {\n                    my $i1 = $i + $delta[$d][0];\n                   \
    \ my $j1 = $j + $delta[$d][1];\n                    if ($i1 >= 0 && $i1 < $n &&\
    \ $j1 >= 0 && $j1 < $m) {\n                        my $path = $minPaths->[$i1][$j1][$p\
    \ - 1];\n                        my $sum = sum($path);\n                     \
    \   if ($sum < $minSum) {\n                            $minPath = $path;\n   \
    \                         $minSum = $sum;\n                        }\n       \
    \             }\n                }\n                push @$minPath, $grid->[$i][$j];\n\
    \                $minPaths->[$i][$j][$p] = $minPath;\n            }\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = $minPaths->[$i][$j][$k - 1];\n            my $sum = sum($path);",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minPathSum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            my $path = [];\n            my $pathSum = 0;\n\
    \            my $visited = [];\n            for my $x (0 .. $n - 1) {\n      \
    \          for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y] =\
    \ 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            $path->[0] = $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $found = 0;\n            my $stack = [[$i, $j]];\n           \
    \ while (@$stack > 0) {\n                my $cur = pop @$stack;\n            \
    \    my $x = $cur->[0];\n                my $y = $cur->[1];\n                if\
    \ (@$path == $k) {\n                    if ($pathSum < $minPathSum) {\n      \
    \                  $minPathSum = $pathSum;\n                        $minPath =\
    \ $path;\n                    }\n                    $found = 1;\n           \
    \         last;\n                }\n                if ($x > 0 && !$visited->[$x\
    \ - 1][$y]) {\n                    $visited->[$x - 1][$y] = 1;\n             \
    \       push @$path, $grid->[$x - 1][$y];\n                    $pathSum += $grid->[$x\
    \ - 1][$y];\n                    push @$stack, [$x - 1, $y];\n               \
    \ }\n                if ($x < $n - 1 && !$visited->[$x + 1][$y]) {\n         \
    \           $visited->[$x + 1][$y] = 1;\n                    push @$path, $grid->[$x\
    \ + 1][$y];\n                    $pathSum += $grid->[$x + 1][$y", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n   \
    \ my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3 =\
    \ [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
