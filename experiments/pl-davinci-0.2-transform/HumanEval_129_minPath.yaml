name: HumanEval_129_minPath
language: pl
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered lists of the values on the\
  \ cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n# than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j]\
  \ = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n# Examples:\
  \    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [map\
    \ {[map {[undef, undef]} (0 .. $m - 1)]} (0 .. $n - 1)];\n    my $min_path = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $min_val = undef;\n            for my $d (0\
    \ .. $k - 1) {\n                my $val = $grid->[$i][$j];\n                if\
    \ (defined $min_val) {\n                    if ($val < $min_val) {\n         \
    \               $min_val = $val;\n                        $path = [$val];\n  \
    \                  } elsif ($val == $min_val) {\n                        push\
    \ @$path, $val;\n                    }\n                } else {\n           \
    \         $min_val = $val;\n                    $path = [$val];\n            \
    \    }\n                if ($i > 0) {\n                    my $prev_min = $min->[$i\
    \ - 1][$j];\n                    if (defined $prev_min->[0]) {\n             \
    \           my $prev_val = $prev_min->[0];\n                        if ($prev_val\
    \ < $min_val) {\n                            $min_val = $prev_val;\n         \
    \                   $path = [@{$prev_min->[1]}, $val];\n                     \
    \   } elsif ($prev_val == $min_val) {\n                            push @$path,\
    \ @{$prev_min->[1]}, $val;\n                        }\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $prev_min\
    \ = $min->[$i][$j - 1];\n                    if (defined $prev_min->[0]) {\n \
    \                       my $prev_val = $prev_min->[0];\n                     \
    \   if ($prev_val < $min_val) {\n                            $min_val = $prev_val;\n\
    \                            $path = [@{$prev_min->[1]}, $val];\n            \
    \            }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $start = 0;\n    my $end = $n *\
    \ $m - 1;\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n\
    \    my $minPath = [];\n    my $minPaths = [];\n    my $visited = [];\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         push @$visited, 0;\n        }\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        push @$minPath, $min;\n    }\n    push @$minPaths, $minPath;\n  \
    \  while ($start <= $end) {\n        my $mid = int(($start + $end) / 2);\n   \
    \     my $paths = [];\n        for (my $i = 0; $i < $n; $i++) {\n            for\
    \ (my $j = 0; $j < $m; $j++) {\n                $visited->[$i * $m + $j] = 0;\n\
    \            }\n        }\n        for (my $i = 0; $i < $n; $i++) {\n        \
    \    for (my $j = 0; $j < $m; $j++) {\n                if ($grid->[$i][$j] <=\
    \ $mid) {\n                    my $path = [];\n                    dfs($grid,\
    \ $i, $j, $k, $mid, $visited, $path, $paths);\n                }\n           \
    \ }\n        }\n        if (@$paths) {\n            $end = $mid - 1;\n       \
    \     $minPaths = $paths;\n        } else {\n            $start = $mid + 1;\n\
    \        }\n    }\n    return $minPaths->[0];\n}", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n\
    \    my $minPathSum2 = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum4\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum8\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum9 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum12 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum14 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum17 = $n * $n * $k;\n    my $minPath18 = [];\n    my $minPathSum18\
    \ = $n * $n * $k;\n    my", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $pathSum = 0;\n            my $visited = {};\n\
    \            my $queue = [[$i, $j]];\n            while (@$queue) {\n        \
    \        my $pos = shift @$queue;\n                my($x, $y) = @$pos;\n     \
    \           if ($x < 0 || $x >= $n || $y < 0 || $y >= $m) {\n                \
    \    next;\n                }\n                my $key = \"$x,$y\";\n        \
    \        if ($visited->{$key}) {\n                    next;\n                }\n\
    \                $visited->{$key} = 1;\n                push @$path, $grid->[$x][$y];\n\
    \                $pathSum += $grid->[$x][$y];\n                if (@$path == $k)\
    \ {\n                    if ($pathSum < $minPathSum) {\n                     \
    \   $minPath = $path;\n                        $minPathSum = $pathSum;\n     \
    \               }\n                    last;\n                }\n            \
    \    push @$queue, [$x - 1, $y];\n                push @$queue, [$x + 1, $y];\n\
    \                push @$queue, [$x, $y - 1];\n                push @$queue, [$x,\
    \ $y + 1];\n            }\n        }\n    }\n    return $minPath;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath =\
    \ [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum19\
    \ = $n * $n +", "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n \
    \   my $min_path = [$min];\n    my $min_paths = [$min_path];\n    my $paths =\
    \ [[0, 0]];\n    my $visited = {};\n    my $i = 0;\n    while ($i < $k) {\n  \
    \      my $new_paths = [];\n        my $new_min_paths = [];\n        foreach my\
    \ $path (@$paths) {\n            my $x = $path->[-1]->[0];\n            my $y\
    \ = $path->[-1]->[1];\n            my $visited_key = \"$x,$y\";\n            if\
    \ (exists $visited->{$visited_key}) {\n                next;\n            }\n\
    \            $visited->{$visited_key} = 1;\n            my $val = $grid->[$x][$y];\n\
    \            if ($val < $min) {\n                $min = $val;\n              \
    \  $min_path = $path;\n                $min_paths = [$min_path];\n           \
    \ } elsif ($val == $min) {\n                push @$min_paths, $path;\n       \
    \     }\n            if ($x > 0) {\n                my $new_path = [@$path, [$x\
    \ - 1, $y]];\n                push @$new_paths, $new_path;\n                push\
    \ @$new_min_paths, $new_path;\n            }\n            if ($x < $n - 1) {\n\
    \                my $new_path = [@$path, [$x + 1, $y]];\n                push\
    \ @$new_paths, $new_path;\n                push @$new_min_paths, $new_path;\n\
    \            }\n            if ($y > 0) {\n                my $new_path = [@$path,\
    \ [$x, $y - 1]];\n                push @$new_paths, $new_path;\n             \
    \   push @$new_min_paths, $new_path;\n            }\n           ", "    my $n\
    \ = @$grid;\n    my @path;\n    my $min = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $n - 1) {\n            my @path = ($grid->[$i][$j]);\n\
    \            my $sum = $grid->[$i][$j];\n            my $min_sum = $min;\n   \
    \         my $min_path = [];\n            minPathHelper($grid, $i, $j, $k - 1,\
    \ $sum, \\@path, \\$min_sum, $min_path);\n            if ($min_sum < $min) {\n\
    \                $min = $min_sum;\n                @path = @$min_path;\n     \
    \       }\n        }\n    }\n    return @path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $n;\n    my $minPathSum2\
    \ = $n * $n * $n;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $n;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $n;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $n;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $n;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $n;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $n;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $n;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $n;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $n;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $n;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $n;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $n;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $n;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $n;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $n;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $n;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n *", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_val = [];\n    my $min_path_len = $k\
    \ + 1;\n    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my\
    \ $path_val = [];\n            my $path_len = 0;\n            _minPath($grid,\
    \ $i, $j, $k, $visited, $path, $path_val, $path_len, $min_path, $min_path_val,\
    \ $min_path_len);\n        }\n    }\n    return $min_path_val;\n}", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum =\
    \ $n * $m * $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n     \
    \   }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $visited, $path, $sum, $i, $j, $k, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     $visited->[$i]->[$j] = 1;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $sum);\n            $visited->[$i]->[$j] = 0;\n            if ($sum <\
    \ $min_sum) {\n                $min_sum = $sum;\n                $min = $path;\n\
    \            }\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max = $n * $n;\n    my $min_path_sum_found_count_max_max\
    \ = $min_path_sum_found_count_max * $min_path_sum_found_count_max;\n    my $min_path_sum_found_count_max_max_max\
    \ = $min_path_sum_found_count_max_max * $min_path_sum_found_count_max_max;\n \
    \   my $min_path_sum_found_count_max_max_max_max = $min_path_sum_found_count_max_max_max\
    \ * $min_path_sum_found_count_max_max_max;\n    my $min_path_sum_found_count_max_max_max_max_max\
    \ = $min_path_sum_found_count_max_max_max_max * $min_path_sum_found_count_max_max_max_max;\n\
    \    my $min_path_sum_found_count_max_max_max_max_max_max = $min_path_sum_found_count_max_max_max_max_max\
    \ * $min_path_sum_found_count_max_max_max_max_max;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max\
    \ = $min_path_sum_found_count_max_max_max_max_max_max * $min_path_sum_found_count_max_max_max_max_max_max;\n\
    \    my $min_path_sum_found_count_max_max_max_max_max_max_max_max = $min_path_sum_found_count_max_max_max_",
  "    my $n = scalar(@$grid);\n    my $minPath = [];\n    my $minPathSum = $n * $n\
    \ + 1;\n    my $minPathSumIndex = 0;\n    for (my $i = 0; $i < $n; $i++) {\n \
    \       for (my $j = 0; $j < $n; $j++) {\n            my $path = [];\n       \
    \     my $pathSum = 0;\n            my $pathSumIndex = 0;\n            my $visited\
    \ = [];\n            for (my $i = 0; $i < $n; $i++) {\n                for (my\
    \ $j = 0; $j < $n; $j++) {\n                    $visited->[$i][$j] = 0;\n    \
    \            }\n            }\n            $visited->[$i][$j] = 1;\n         \
    \   push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $pathSumIndex = $grid->[$i][$j];\n            my $result = minPathHelper($grid,\
    \ $k - 1, $i, $j, $visited, $path, $pathSum, $pathSumIndex);\n            if ($result->[0]\
    \ < $minPathSum) {\n                $minPathSum = $result->[0];\n            \
    \    $minPathSumIndex = $result->[1];\n                $minPath = $result->[2];\n\
    \            } elsif ($result->[0] == $minPathSum) {\n                if ($result->[1]\
    \ < $minPathSumIndex) {\n                    $minPathSumIndex = $result->[1];\n\
    \                    $minPath = $result->[2];\n                }\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $path = [];\n    my $min = [];\n \
    \   my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $min_path_sum =\
    \ $n * $n + 1;\n    my $min_path_idx = -1;\n    my $min_path_sum_idx = -1;\n \
    \   my $min_path_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum = $n * $n + 1;\n\
    \    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = -1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_id", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n \
    \   for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
    \ = [];\n            my $visited = [];\n            for my $x (0..$n-1) {\n  \
    \              for my $y (0..$m-1) {\n                    $visited->[$x][$y] =\
    \ 0;\n                }\n            }\n            dfs($grid, $i, $j, $k, $path,\
    \ $visited, $min);\n        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m * $k;\n\
    \    my $visited = [];\n    my $path = [];\n    my $sum = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $dir = 0;\n    my $dirs = [[-1, 0], [0, 1], [1, 0], [0,\
    \ -1]];\n    my $dfs = sub {\n        if ($i < 0 || $i >= $n || $j < 0 || $j >=\
    \ $m) {\n            return;\n        }\n        if ($visited->[$i][$j]) {\n \
    \           return;\n        }\n        $visited->[$i][$j] = 1;\n        push\
    \ @$path, $grid->[$i][$j];\n        $sum += $grid->[$i][$j];\n        if (@$path\
    \ == $k) {\n            if ($sum < $min_sum) {\n                $min_sum = $sum;\n\
    \                $min = [@$path];\n            }\n            $sum -= pop @$path;\n\
    \            $visited->[$i][$j] = 0;\n            return;\n        }\n       \
    \ for (my $d = 0; $d < 4; $d++) {\n            my $x = $i + $dirs->[$d][0];\n\
    \            my $y = $j + $dirs->[$d][1];\n            $dfs->($x, $y);\n     \
    \   }\n        $sum -= pop @$path;\n        $visited->[$i][$j] = 0;\n    };\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $dfs->($i, $j);\n        }\n    }\n    return $min;\n}", "  \
    \  my @minPath;\n    my $minSum = $k * ($k + 1) / 2;\n    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPaths = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $paths = [];\n\
    \            for my $p (0 .. $k - 1) {\n                push @$paths, [$grid->[$i][$j]];\n\
    \            }\n            $minPaths->[$i][$j] = $paths;\n        }\n    }\n\
    \    for my $p (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n          \
    \  for my $j (0 .. $m - 1) {\n                my $minPath = $minPaths->[$i][$j][$p];\n\
    \                my $minSum = sum($minPath);\n                for my $d (0 ..\
    \ 3) {\n                    my $i1 = $i + $delta[$d][0];\n                   \
    \ my $j1 = $j + $delta[$d][1];\n                    if ($i1 >= 0 && $i1 < $n &&\
    \ $j1 >= 0 && $j1 < $m) {\n                        my $path = $minPaths->[$i1][$j1][$p\
    \ - 1];\n                        my $sum = sum($path);\n                     \
    \   if ($sum < $minSum) {\n                            $minPath = $path;\n   \
    \                         $minSum = $sum;\n                        }\n       \
    \             }\n                }\n                push @$minPath, $grid->[$i][$j];\n\
    \                $minPaths->[$i][$j][$p] = $minPath;\n            }\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = $minPaths->[$i][$j][$k - 1];\n            my $sum = sum($path);",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minPathSum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            my $path = [];\n            my $pathSum = 0;\n\
    \            my $visited = [];\n            for my $x (0 .. $n - 1) {\n      \
    \          for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y] =\
    \ 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            $path->[0] = $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $found = 0;\n            my $stack = [[$i, $j]];\n           \
    \ while (@$stack > 0) {\n                my $cur = pop @$stack;\n            \
    \    my $x = $cur->[0];\n                my $y = $cur->[1];\n                if\
    \ (@$path == $k) {\n                    if ($pathSum < $minPathSum) {\n      \
    \                  $minPathSum = $pathSum;\n                        $minPath =\
    \ $path;\n                    }\n                    $found = 1;\n           \
    \         last;\n                }\n                if ($x > 0 && !$visited->[$x\
    \ - 1][$y]) {\n                    $visited->[$x - 1][$y] = 1;\n             \
    \       push @$path, $grid->[$x - 1][$y];\n                    $pathSum += $grid->[$x\
    \ - 1][$y];\n                    push @$stack, [$x - 1, $y];\n               \
    \ }\n                if ($x < $n - 1 && !$visited->[$x + 1][$y]) {\n         \
    \           $visited->[$x + 1][$y] = 1;\n                    push @$path, $grid->[$x\
    \ + 1][$y];\n                    $pathSum += $grid->[$x + 1][$y", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n   \
    \ my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3 =\
    \ [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_at\
    \ = 0;\n    my $min_path_sum_found_at_i = 0;\n    my $min_path_sum_found_at_j\
    \ = 0;\n    my $min_path_sum_found_at_k = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            for (my $k = 0; $k\
    \ < $n * $m; $k++) {\n                my $path = [];\n                my $path_sum\
    \ = 0;\n                my $path_sum_found = 0;\n                my $path_sum_found_at\
    \ = 0;\n                my $path_sum_found_at_i = 0;\n                my $path_sum_found_at_j\
    \ = 0;\n                my $path_sum_found_at_k = 0;\n                my $path_sum_found_at_l\
    \ = 0;\n                my $path_sum_found_at_m = 0;\n                my $path_sum_found_at_n\
    \ = 0;\n                my $path_sum_found_at_o = 0;\n                my $path_sum_found_at_p\
    \ = 0;\n                my $path_sum_found_at_q = 0;\n                my $path_sum_found_at_r\
    \ = 0;\n                my $path_sum_found_at_s = 0;\n                my $path_sum_found_at_t\
    \ = 0;\n                my $path_sum_found_at_u = 0;\n                my $path_sum_found_at_v\
    \ = 0;\n                my $path_sum_found_at_w = 0;\n                my $path_sum_found_at_x\
    \ = 0;\n                my $path_sum", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths =\
    \ [[$min]];\n    my $min_paths_len = 1;\n    my $min_paths_len_prev = 0;\n   \
    \ my $min_paths_len_prev_prev = 0;\n    my $min_paths_len_prev_prev_prev = 0;\n\
    \    my $min_paths_len_prev_prev_prev_prev = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n \
    \   my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    my\
    \ $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    my\
    \ $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_paths_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0", "    my @path;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ @visited;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n      \
    \      $visited[$i][$j] = 0;\n        }\n    }\n    my $min = $grid->[0][0];\n\
    \    my $min_i = 0;\n    my $min_j = 0;\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            if ($grid->[$i][$j] < $min) {\n             \
    \   $min = $grid->[$i][$j];\n                $min_i = $i;\n                $min_j\
    \ = $j;\n            }\n        }\n    }\n    my @min_path;\n    my $min_sum =\
    \ 0;\n    my @stack;\n    push @stack, [$min_i, $min_j, $min, 0];\n    while (@stack)\
    \ {\n        my $top = pop @stack;\n        my $i = $top->[0];\n        my $j\
    \ = $top->[1];\n        my $sum = $top->[3];\n        if ($sum == $k) {\n    \
    \        if ($sum < $min_sum || $min_sum == 0) {\n                $min_sum = $sum;\n\
    \                @min_path = @path;\n            }\n            next;\n      \
    \  }\n        if ($sum > $k) {\n            next;\n        }\n        if ($i >\
    \ 0 && !$visited[$i-1][$j]) {\n            push @stack, [$i-1, $j, $grid->[$i-1][$j],\
    \ $sum+1];\n        }\n        if ($i < $n-1 && !$visited[$i+1][$j]) {\n     \
    \       push @stack, [$i+1, $j, $grid->[$i+1][$j], $sum+1];\n        }\n     \
    \   if ($j", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathValue = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $m; $j++) {\n            my $currPath = [];\n            my\
    \ $currPathValue = [];\n            my $currMinPath = [];\n            my $currMinPathValue\
    \ = [];\n            my $currMinPathValueSum = 0;\n            my $currMinPathValueSum2\
    \ = 0;\n            my $currMinPathValueSum3 = 0;\n            my $currMinPathValueSum4\
    \ = 0;\n            my $currMinPathValueSum5 = 0;\n            my $currMinPathValueSum6\
    \ = 0;\n            my $currMinPathValueSum7 = 0;\n            my $currMinPathValueSum8\
    \ = 0;\n            my $currMinPathValueSum9 = 0;\n            my $currMinPathValueSum10\
    \ = 0;\n            my $currMinPathValueSum11 = 0;\n            my $currMinPathValueSum12\
    \ = 0;\n            my $currMinPathValueSum13 = 0;\n            my $currMinPathValueSum14\
    \ = 0;\n            my $currMinPathValueSum15 = 0;\n            my $currMinPathValueSum16\
    \ = 0;\n            my $currMinPathValueSum17 = 0;\n            my $currMinPathValueSum18\
    \ = 0;\n            my $currMinPathValueSum19 = 0;\n            my $currMinPathValueSum20\
    \ = 0;\n            my $currMinPathValueSum21 = 0;\n            my $currMinPathValueSum22\
    \ = 0;\n            my $currMinPathValueSum23 = 0;\n            my $currMinPathValueSum24\
    \ = 0;\n            my $currMinPathValueSum25 = 0;\n            my $currMinPathValueSum26\
    \ = 0;\n            my $currMinPathValueSum27 = 0;\n            my $currMin",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n \
    \   my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
    \ = $minSum;\n    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n\
    \    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPathSum9 = $minSum;\n\
    \    my $minPathSum10 = $minSum;\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
    \ = $minSum;\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n\
    \    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my $minPathSum17\
    \ = $minSum;\n    my $minPathSum18 = $minSum;\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPathSum21 = $minSum;\n    my $minPathSum22\
    \ = $minSum;\n    my $minPathSum23 = $minSum;\n    my $minPathSum24 = $minSum;\n\
    \    my $minPathSum25 = $minSum;\n    my $minPathSum26 = $minSum;\n    my $minPathSum27\
    \ = $minSum;\n    my $minPathSum28 = $minSum;\n    my $minPathSum29 = $minSum;\n\
    \    my $minPathSum30 = $minSum;\n    my $", "    my $n = scalar(@$grid);\n  \
    \  my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minSum = $n\
    \ * $n * $k;\n    my $minPathSum = $minSum;\n    my $minPathGrid = [];\n    my\
    \ $minPathGridSum = $minSum;\n    my $minPathGridSum2 = $minSum;\n    my $minPathGridSum3\
    \ = $minSum;\n    my $minPathGridSum4 = $minSum;\n    my $minPathGridSum5 = $minSum;\n\
    \    my $minPathGridSum6 = $minSum;\n    my $minPathGridSum7 = $minSum;\n    my\
    \ $minPathGridSum8 = $minSum;\n    my $minPathGridSum9 = $minSum;\n    my $minPathGridSum10\
    \ = $minSum;\n    my $minPathGridSum11 = $minSum;\n    my $minPathGridSum12 =\
    \ $minSum;\n    my $minPathGridSum13 = $minSum;\n    my $minPathGridSum14 = $minSum;\n\
    \    my $minPathGridSum15 = $minSum;\n    my $minPathGridSum16 = $minSum;\n  \
    \  my $minPathGridSum17 = $minSum;\n    my $minPathGridSum18 = $minSum;\n    my\
    \ $minPathGridSum19 = $minSum;\n    my $minPathGridSum20 = $minSum;\n    my $minPathGridSum21\
    \ = $minSum;\n    my $minPathGridSum22 = $minSum;\n    my $minPathGridSum23 =\
    \ $minSum;\n    my $minPathGridSum24 = $minSum;\n    my $minPathGridSum25 = $minSum;\n\
    \    my $minPathGridSum26 = $minSum;\n    my $minPathGridSum27 = $minSum;\n  \
    \  my $minPathGridSum28 = $minSum;\n    my $minPathGridSum29 = $minSum;\n    my\
    \ $minPathGridSum30 = $minSum;\n    my $minPathGridSum31 = $minSum;\n    my",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found = 0;\n\
    \    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_found = 0;\n    my\
    \ $visited = [];\n    my $visited_sum = 0;\n    my $visited_sum_found = 0;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $d = 0;\n    my $d_max = $k - 1;\n    my\
    \ $d_min = 0;\n    my $d_min_found = 0;\n    my $d_max_found = 0;\n    my $d_min_sum\
    \ = 0;\n    my $d_min_sum_found = 0;\n    my $d_max_sum = 0;\n    my $d_max_sum_found\
    \ = 0;\n    my $d_min_sum_found_count = 0;\n    my $d_max_sum_found_count = 0;\n\
    \    my $d_min_sum_found_count_max = 0;\n    my $d_max_sum_found_count_max = 0;\n\
    \    my $d_min_sum_found_count_max_found = 0;\n    my $d_max_sum_found_count_max_found\
    \ = 0;\n    my $d_min_sum_found_count_max_found_count = 0;\n    my $d_max_sum_found_count_max_found_count\
    \ = 0;\n    my $d_min_sum_found_count_max_found_count_max = 0;\n    my $d_max_sum_found_count_max_found_count_max\
    \ = 0;\n    my $d_min_sum_found_count_max_found_count_max_found = 0;\n    my $d_max_sum_found_count_max_found_count_max_found\
    \ = 0;\n    my", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my @path;\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_lex = $n\
    \ * $n + 1;\n    my $min_lex_path = [];\n    my $min_lex_sum = $n * $n + 1;\n\
    \    my $min_lex_lex = $n * $n + 1;\n    my $min_lex_lex_path = [];\n    my $min_lex_lex_sum\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex = $n * $n + 1;\n    my $min_lex_lex_lex_path\
    \ = [];\n    my $min_lex_lex_lex_sum = $n * $n + 1;\n    my $min_lex_lex_lex_lex\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_lex_sum\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex_path\
    \ = [];\n    my $min_lex_lex_lex_lex_lex_sum = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex_lex\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_lex_lex_lex_sum\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex_lex_lex = $n * $n + 1;\n   \
    \ my $min_lex_lex_lex_lex_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_lex_lex_lex_lex_sum\
    \ = $n * $n + 1;\n    my $min_lex_lex_lex_lex_lex", "    my $n = scalar(@$grid);\n\
    \    my @path;\n    my $min_path;\n    my $min_sum = $n * $n + 1;\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            my $sum =\
    \ $grid->[$i][$j];\n            my @path = ($grid->[$i][$j]);\n            my\
    \ $path_len = 1;\n            my $i_next = $i;\n            my $j_next = $j;\n\
    \            while ($path_len < $k) {\n                my $min_val = $n * $n +\
    \ 1;\n                my $min_i;\n                my $min_j;\n               \
    \ for my $i_delta (-1 .. 1) {\n                    for my $j_delta (-1 .. 1) {\n\
    \                        if ($i_delta == 0 && $j_delta == 0) {\n             \
    \               next;\n                        }\n                        my $i_new\
    \ = $i_next + $i_delta;\n                        my $j_new = $j_next + $j_delta;\n\
    \                        if ($i_new < 0 || $i_new >= $n || $j_new < 0 || $j_new\
    \ >= $n) {\n                            next;\n                        }\n   \
    \                     if ($grid->[$i_new][$j_new] < $min_val) {\n            \
    \                $min_val = $grid->[$i_new][$j_new];\n                       \
    \     $min_i = $i_new;\n                            $min_j = $j_new;\n       \
    \                 }\n                    }\n                }\n              \
    \  $i_next = $min_i;\n                $j_next = $min_j;\n                $sum\
    \ += $min_val;\n                push @path, $min_val;\n                $path_len++;\n\
    \            }\n            if ($sum < $min_sum) {\n                $min_sum =\
    \ $sum;\n                $min_path = \\@path;\n            }\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $path_sum = 0;\n            my $visited = [];\n            for\
    \ my $row (0 .. $n - 1) {\n                for my $col (0 .. $m - 1) {\n     \
    \               $visited->[$row][$col] = 0;\n                }\n            }\n\
    \            dfs($grid, $i, $j, $k, $path, $path_sum, $visited);\n           \
    \ if ($path_sum < $min_path_sum) {\n                $min_path_sum = $path_sum;\n\
    \                $min_path = $path;\n            }\n        }\n    }\n    return\
    \ $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $min_path_sum_idx = 0;\n    my $min_path_sum_dir = 0;\n    my $min_path_sum_i\
    \ = 0;\n    my $min_path_sum_j = 0;\n    my $min_path_sum_k = 0;\n    my $min_path_sum_l\
    \ = 0;\n    my $min_path_sum_m = 0;\n    my $min_path_sum_n = 0;\n    my $min_path_sum_o\
    \ = 0;\n    my $min_path_sum_p = 0;\n    my $min_path_sum_q = 0;\n    my $min_path_sum_r\
    \ = 0;\n    my $min_path_sum_s = 0;\n    my $min_path_sum_t = 0;\n    my $min_path_sum_u\
    \ = 0;\n    my $min_path_sum_v = 0;\n    my $min_path_sum_w = 0;\n    my $min_path_sum_x\
    \ = 0;\n    my $min_path_sum_y = 0;\n    my $min_path_sum_z = 0;\n    my $min_path_sum_a\
    \ = 0;\n    my $min_path_sum_b = 0;\n    my $min_path_sum_c = 0;\n    my $min_path_sum_d\
    \ = 0;\n    my $min_path_sum_e = 0;\n    my $min_path_sum_f = 0;\n    my $min_path_sum_g\
    \ = 0;\n    my $min_path_sum_h = 0;\n    my $min_path_sum_i = 0;\n    my $min_path_sum_j\
    \ = 0;\n    my $min_path_sum_k = 0;\n    my $min_path_sum_l", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minSum = $n\
    \ * $n + 1;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j\
    \ < $m; $j++) {\n            my $path = [];\n            my $sum = 0;\n      \
    \      dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $minSum) {\n\
    \                $minSum = $sum;\n                $minPath = $path;\n        \
    \    }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_val\
    \ = [];\n    my $min_path_len = $k + 1;\n    my $min_path_sum = $k * ($k + 1)\
    \ / 2;\n    my $min_path_sum_val = [];\n    my $min_path_sum_len = $k + 1;\n \
    \   my $min_path_sum_val_len = $k + 1;\n    my $min_path_sum_val_len_val = [];\n\
    \    my $min_path_sum_val_len_val_len = $k + 1;\n    my $min_path_sum_val_len_val_len_val\
    \ = [];\n    my $min_path_sum_val_len_val_len_val_len = $k + 1;\n    my $min_path_sum_val_len_val_len_val_len_val\
    \ = [];\n    my $min_path_sum_val_len_val_len_val_len_val_len = $k + 1;\n    my\
    \ $min_path_sum_val_len_val_len_val_len_val_len_val = [];\n    my $min_path_sum_val_len_val_len_val_len_val_len_val_len\
    \ = $k + 1;\n    my $min_path_sum_val_len_val_len_val_len_val_len_val_len_val\
    \ = [];\n    my $min_path_sum_val_len_val_len_val_len_val_len_val_len_val_len\
    \ = $k + 1;\n    my $min_path_sum_val_len_val_len_val_len_val_len_val_len_val_len_val\
    \ = [];\n    my $min_path_sum_val_len_val_len_val_len_val_len_val_len_val_len_val_len\
    \ = $k + 1;\n    my $min_path_sum_val_len_val_", "    my $n = scalar(@$grid);\n\
    \    my $min = [map {[map {[0, []]} (0 .. $n - 1)]} (0 .. $n - 1)];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            if ($i ==\
    \ 0 && $j == 0) {\n                $min->[$i][$j] = [$grid->[$i][$j], [$grid->[$i][$j]]];\n\
    \            } elsif ($i == 0) {\n                $min->[$i][$j] = [$min->[$i][$j\
    \ - 1]->[0] + $grid->[$i][$j],\n                                  [@{$min->[$i][$j\
    \ - 1]->[1]}, $grid->[$i][$j]]];\n            } elsif ($j == 0) {\n          \
    \      $min->[$i][$j] = [$min->[$i - 1][$j]->[0] + $grid->[$i][$j],\n        \
    \                          [@{$min->[$i - 1][$j]->[1]}, $grid->[$i][$j]]];\n \
    \           } else {\n                my $min_prev = $min->[$i - 1][$j]->[0] <\
    \ $min->[$i][$j - 1]->[0] ?\n                               $min->[$i - 1][$j]\
    \ : $min->[$i][$j - 1];\n                $min->[$i][$j] = [$min_prev->[0] + $grid->[$i][$j],\n\
    \                                  [@{$min_prev->[1]}, $grid->[$i][$j]]];\n  \
    \          }\n        }\n    }\n    return $min->[$n - 1][$n - 1]->[1];\n}", " \
    \   my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = {};\n    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my\
    \ $min_path_sum_path = [];\n    my $min_path_sum_path_sum = 0;\n    my $min_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum = 0;\n    my $min_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum = 0;\n    my $min_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum = 0;\n    my\
    \ $min_path_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = 0;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = 0;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = 0;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $visited = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $pathSum = 0;\n   \
    \         $visited->[$i][$j] = 1;\n            $path->[0] = $grid->[$i][$j];\n\
    \            $pathSum += $grid->[$i][$j];\n            dfs($grid, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum, $i, $j, $k, 1);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n *\
    \ $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n  \
    \  }\n    dfs($grid, $k, 0, 0, 0, $visited, $min, \\$min_sum);\n    return $min;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum19\
    \ = $n * $n +", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $minPath, $minSum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum\
    \ * $k;\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_k =\
    \ 0;\n    my $path_len = 0;\n    my $path_len_k = 0;\n    my $path_len_k_min =\
    \ $k;\n    my $path_len_k_max = $k;\n    my $path_len_k_min_sum = $min_path_sum_k;\n\
    \    my $path_len_k_max_sum = $min_path_sum_k;\n    my $path_len_k_min_sum_k =\
    \ $min_path_sum_k;\n    my $path_len_k_max_sum_k = $min_path_sum_k;\n    my $path_len_k_min_sum_k_len\
    \ = $k;\n    my $path_len_k_max_sum_k_len = $k;\n    my $path_len_k_min_sum_k_len_sum\
    \ = $min_path_sum_k;\n    my $path_len_k_max_sum_k_len_sum = $min_path_sum_k;\n\
    \    my $path_len_k_min_sum_k_len_sum_k = $min_path_sum_k;\n    my $path_len_k_max_sum_k_len_sum_k\
    \ = $min_path_sum_k;\n    my $path_len_k_min_sum_k_len_sum_k_len", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum =\
    \ $n * $m + 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $m + 1;\n\
    \    my $min_path_len = $n * $m + 1;\n    my $min_path_len_sum = $n * $m + 1;\n\
    \    my $min_path_len_sum_path = [];\n    my $min_path_len_sum_path_sum = $n *\
    \ $m + 1;\n    my $min_path_len_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum\
    \ = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_sum_path = [];\n    my\
    \ $min_path_len_sum_path_sum_path_sum_path_sum = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum = $n * $m\
    \ + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum = $n *\
    \ $m + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n   \
    \ my $min = [map { [map { [$_] } @$_] } @$grid];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            for my $d (0 .. $k - 1) {\n\
    \                for my $d1 (0 .. $d - 1) {\n                    my $d2 = $d -\
    \ $d1 - 1;\n                    if ($d1 > 0) {\n                        if ($i\
    \ > 0) {\n                            if ($min->[$i - 1][$j][$d1] < $min->[$i][$j][$d])\
    \ {\n                                $min->[$i][$j][$d] = $min->[$i - 1][$j][$d1];\n\
    \                            }\n                        }\n                  \
    \      if ($i < $n - 1) {\n                            if ($min->[$i + 1][$j][$d1]\
    \ < $min->[$i][$j][$d]) {\n                                $min->[$i][$j][$d]\
    \ = $min->[$i + 1][$j][$d1];\n                            }\n                \
    \        }\n                    }\n                    if ($d2 > 0) {\n      \
    \                  if ($j > 0) {\n                            if ($min->[$i][$j\
    \ - 1][$d2] < $min->[$i][$j][$d]) {\n                                $min->[$i][$j][$d]\
    \ = $min->[$i][$j - 1][$d2];\n                            }\n                \
    \        }\n                        if ($j < $m - 1) {\n                     \
    \       if ($min->[$i][$j + 1][$d2] < $min->[$i][$j][$d]) {\n                \
    \                $min->[$i][$j][$d] = $min->[$i][$j + 1][$d2];\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return $", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n * $k;\n    my $minPathSumIndex = -1;\n    my $minPathSumIndex2 = -1;\n\
    \    my $minPathSumIndex3 = -1;\n    my $minPathSumIndex4 = -1;\n    my $minPathSumIndex5\
    \ = -1;\n    my $minPathSumIndex6 = -1;\n    my $minPathSumIndex7 = -1;\n    my\
    \ $minPathSumIndex8 = -1;\n    my $minPathSumIndex9 = -1;\n    my $minPathSumIndex10\
    \ = -1;\n    my $minPathSumIndex11 = -1;\n    my $minPathSumIndex12 = -1;\n  \
    \  my $minPathSumIndex13 = -1;\n    my $minPathSumIndex14 = -1;\n    my $minPathSumIndex15\
    \ = -1;\n    my $minPathSumIndex16 = -1;\n    my $minPathSumIndex17 = -1;\n  \
    \  my $minPathSumIndex18 = -1;\n    my $minPathSumIndex19 = -1;\n    my $minPathSumIndex20\
    \ = -1;\n    my $minPathSumIndex21 = -1;\n    my $minPathSumIndex22 = -1;\n  \
    \  my $minPathSumIndex23 = -1;\n    my $minPathSumIndex24 = -1;\n    my $minPathSumIndex25\
    \ = -1;\n    my $minPathSumIndex26 = -1;\n    my $minPathSumIndex27 = -1;\n  \
    \  my $minPathSumIndex28 = -1;\n    my $minPathSumIndex29 = -1;\n    my $minPathSumIndex30\
    \ = -1;\n    my $minPathSumIndex31 = -1;\n    my $minPathSumIndex32 = -1;\n  \
    \  my $minPathSumIndex33 = -1;\n    my $minPathSumIndex34 = -1;\n    my $minPathSumIndex35\
    \ = -1;\n   ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $m * $k;\n    my $min_path_sum_found = 0;\n\
    \    my $min_path_found = 0;\n    my $min_path_sum_found_at = 0;\n    my $min_path_found_at\
    \ = 0;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_found = 0;\n\
    \    my $path_found = 0;\n    my $path_sum_found_at = 0;\n    my $path_found_at\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $l = 0;\n    my $r = 0;\n    my\
    \ $u = 0;\n    my $d = 0;\n    my $l_sum = 0;\n    my $r_sum = 0;\n    my $u_sum\
    \ = 0;\n    my $d_sum = 0;\n    my $l_found = 0;\n    my $r_found = 0;\n    my\
    \ $u_found = 0;\n    my $d_found = 0;\n    my $l_found_at = 0;\n    my $r_found_at\
    \ = 0;\n    my $u_found_at = 0;\n    my $d_found_at = 0;\n    my $l_sum_found\
    \ = 0;\n    my $r_sum_found = 0;\n    my $u_sum_found = 0;\n    my $d_sum_found\
    \ = 0;\n    my $l_sum_found_at = 0;\n    my $r_sum_found_at = 0;\n    my $u_sum_found_at\
    \ = 0;\n    my $d_sum_found_at = 0;\n    my $l_path = [];\n    my $r_path = [];\n\
    \    my $u_path = [];\n    my $d_path = [];\n    my $l_path_sum = 0;\n    my $r_path_sum\
    \ =", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my\
    \ $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $path = [];\n   \
    \ my $pathSum = 0;\n    my $visited = [];\n    for my $i (0..$n-1) {\n       \
    \ for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $path =\
    \ [];\n            $pathSum = 0;\n            $visited->[$i][$j] = 1;\n      \
    \      push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k-1, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
    \ $path = [];\n            my $path_sum = 0;\n            my $visited = {};\n\
    \            my $dfs = sub {\n                my($i, $j, $k) = @_;\n         \
    \       if ($k == 0) {\n                    my $sum = 0;\n                   \
    \ for my $x (@$path) {\n                        $sum += $x;\n                \
    \    }\n                    if ($sum < $min_sum) {\n                        $min_sum\
    \ = $sum;\n                        $min_path = $path;\n                    }\n\
    \                    return;\n                }\n                for my $d ([-1,\
    \ 0], [1, 0], [0, -1], [0, 1]) {\n                    my $x = $i + $d->[0];\n\
    \                    my $y = $j + $d->[1];\n                    if ($x >= 0 &&\
    \ $x < $n && $y >= 0 && $y < $m && !$visited->{\"$x,$y\"}) {\n               \
    \         $visited->{\"$x,$y\"} = 1;\n                        push @$path, $grid->[$x][$y];\n\
    \                        $dfs->($x, $y, $k - 1);\n                        pop\
    \ @$path;\n                        $visited->{\"$x,$y\"} = 0;\n              \
    \      }\n                }\n            };\n            $dfs->($i, $j, $k);\n\
    \        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n    my $m\
    \ = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            my $visited = [];\n \
    \           for my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1)\
    \ {\n                    $visited->[$x][$y] = 0;\n                }\n        \
    \    }\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n         \
    \   if ($sum < $min_sum) {\n                $min_sum = $sum;\n               \
    \ $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $min_path = [$min];\n    my $min_paths = {};\n    my $paths = {};\n  \
    \  my $path = [];\n    my $paths_to_check = [{path => $path, i => 0, j => 0}];\n\
    \    my $i;\n    my $j;\n    my $path_to_check;\n    my $new_path;\n    my $new_paths_to_check;\n\
    \    my $new_path_to_check;\n    my $new_i;\n    my $new_j;\n    my $new_path_key;\n\
    \    my $new_path_value;\n    my $new_path_value_key;\n    my $new_path_value_value;\n\
    \    my $path_key;\n    my $path_value;\n    my $path_value_key;\n    my $path_value_value;\n\
    \    my $path_value_value_key;\n    my $path_value_value_value;\n    my $path_value_value_value_key;\n\
    \    my $path_value_value_value_value;\n    while (@$paths_to_check) {\n     \
    \   $path_to_check = shift @$paths_to_check;\n        $i = $path_to_check->{i};\n\
    \        $j = $path_to_check->{j};\n        $path = $path_to_check->{path};\n\
    \        if (@$path == $k) {\n            $path_key = join('', @$path);\n    \
    \        if (exists $paths->{$path_key}) {\n                $path_value = $paths->{$path_key};\n\
    \                for $path_value_key (keys %$path_value) {\n                 \
    \   $path_value_value = $path_value->{$path_value_key};\n                    for\
    \ $path_value_value_key (keys %$path_value_value) {\n                        $path_value",
  "    my $n = scalar(@$grid);\n    my @path;\n    my $min_path;\n    my $min_path_sum\
    \ = $n * $n * $n;\n    my $min_path_val = $n * $n;\n    my $min_path_val_sum =\
    \ $n * $n * $n;\n    my $min_path_val_sum_sum = $n * $n * $n;\n    my $min_path_val_sum_sum_sum\
    \ = $n * $n * $n;\n    my $min_path_val_sum_sum_sum_sum = $n * $n * $n;\n    my\
    \ $min_path_val_sum_sum_sum_sum_sum = $n * $n * $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum\
    \ = $n * $n * $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum_sum = $n * $n\
    \ * $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $n;\n\
    \    my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $n;\n  \
    \  my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $n;\n\
    \    my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n *\
    \ $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ $n * $n * $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $n * $n * $n;\n    my $min_path_val_sum_sum_sum_sum_sum_sum", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n         \
    \   $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my\
    \ $minPath = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2 = $max\
    \ * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $max * $k;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $max * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $max * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $max * $k;\n   \
    \ my $minPath6 = [];\n    my $minPathSum7 = $max * $k;\n    my $minPath7 = [];\n\
    \    my $minPathSum8 = $max * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $max * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $max * $k;\n  \
    \  my $minPath10 = [];\n    my $minPathSum11 = $max * $k;\n    my $minPath11 =\
    \ [];\n    my $minPathSum12 = $max * $k;\n    my $minPath12 = [];\n    my $minPathSum13\
    \ = $max * $k;\n    my $minPath13 = [];\n    my $minPathSum14 = $max * $k;\n \
    \   my $minPath14 = [];\n    my $minPathSum15 = $max * $k;\n    my $minPath15\
    \ =", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $m * ($n * $m + 1) / 2;\n    my $min_path_sum = 0;\n \
    \   my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path\
    \ = [];\n            my $path_sum = 0;\n            $visited->[$i][$j] = 1;\n\
    \            $path_sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            if ($k == 1) {\n                if ($path_sum < $min_sum) {\n   \
    \                 $min_sum = $path_sum;\n                    $min_path = $path;\n\
    \                }\n            } else {\n                my $ret = minPathHelper($grid,\
    \ $k - 1, $i, $j, $visited, $path, $path_sum);\n                if ($ret->[0]\
    \ < $min_sum) {\n                    $min_sum = $ret->[0];\n                 \
    \   $min_path = $ret->[1];\n                }\n            }\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n *\
    \ $m * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_at = 0;\n\
    \    my $min_path_sum_found_at_i = 0;\n    my $min_path_sum_found_at_j = 0;\n\
    \    my $min_path_sum_found_at_dir = 0;\n    my $min_path_sum_found_at_dir_i =\
    \ 0;\n    my $min_path_sum_found_at_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_i = 0;\n    my $min_path_sum_found_at_dir_dir_j\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir = 0;\n    my $min_path_sum_found_at_dir_dir_dir_i\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_i = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_j\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_i\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum = $n\
    \ * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n \
    \           if ($sum < $min_sum) {\n                $min_sum = $sum;\n       \
    \         $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = @$grid;\n    my @path;\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n    my $min_path_sum_len\
    \ = $n * $n + 1;\n    my $min_path_sum_len_path = [];\n    my $min_path_sum_len_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_len_path_len = $n * $n + 1;\n    my $min_path_sum_len_path_sum_len\
    \ = $n * $n + 1;\n    my $min_path_sum_len_path_sum_len_path = [];\n    my $min_path_sum_len_path_sum_len_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_len_path_sum_len_path_len = $n * $n + 1;\n\
    \    my $min_path_sum_len_path_sum_len_path_sum_len = $n * $n + 1;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path\
    \ = [];\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum = $n * $n\
    \ + 1;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_len = $n * $n\
    \ + 1;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum_len = $n *\
    \ $n + 1;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum_len_path\
    \ = [];\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum_len_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_len_path_sum_len", "    my $n = @$grid;\n\
    \    my @path = ();\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_lex = [];\n    my $min_lex_sum = $n * $n + 1;\n    my $min_lex_path\
    \ = [];\n    my $min_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex = [];\n\
    \    my $min_lex_path_lex_sum = $n * $n + 1;\n    my $min_lex_path_lex_path =\
    \ [];\n    my $min_lex_path_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex\
    \ = [];\n    my $min_lex_path_lex_path_lex_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path\
    \ = [];\n    my $min_lex_path_lex_path_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex\
    \ = [];\n    my $min_lex_path_lex_path_lex_path_lex_sum = $n * $n + 1;\n    my\
    \ $min_lex_path_lex_path_lex_path_lex_path = [];\n    my $min_lex_path_lex_path_lex_path_lex_path_sum\
    \ = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex_path_lex = [];\n\
    \    my $min_lex_path_lex_path_lex_path_lex_path_lex_sum = $n * $n + 1;\n    my\
    \ $min_lex_path_lex_path_lex_path_lex_path_lex_path = [];\n    my $min_lex_path_lex_path_lex_path_lex_path_lex_path_sum\
    \ = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex_", "    my $n = @$grid;\n\
    \    my @path;\n    my $min_path = $grid->[0][0];\n    my $min_path_index = 0;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n          \
    \  if ($grid->[$i][$j] < $min_path) {\n                $min_path = $grid->[$i][$j];\n\
    \                $min_path_index = $i * $n + $j;\n            }\n        }\n \
    \   }\n    my $x = $min_path_index / $n;\n    my $y = $min_path_index % $n;\n\
    \    push @path, $min_path;\n    for my $i (1 .. $k - 1) {\n        my $min_path\
    \ = $grid->[$x][$y];\n        my $min_path_index = $x * $n + $y;\n        if ($x\
    \ > 0 && $grid->[$x - 1][$y] < $min_path) {\n            $min_path = $grid->[$x\
    \ - 1][$y];\n            $min_path_index = ($x - 1) * $n + $y;\n        }\n  \
    \      if ($x < $n - 1 && $grid->[$x + 1][$y] < $min_path) {\n            $min_path\
    \ = $grid->[$x + 1][$y];\n            $min_path_index = ($x + 1) * $n + $y;\n\
    \        }\n        if ($y > 0 && $grid->[$x][$y - 1] < $min_path) {\n       \
    \     $min_path = $grid->[$x][$y - 1];\n            $min_path_index = $x * $n\
    \ + $y - 1;\n        }\n        if ($y < $n - 1 && $grid->[$x][$y + 1] < $min_path)\
    \ {\n            $min_path = $grid->[$x][$y + 1];\n            $min_path_index\
    \ = $x * $n + $y +", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n      \
    \      my $pathSum = 0;\n            my $visited = [];\n            for my $x\
    \ (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n               \
    \     $visited->[$x][$y] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $result = dfs($grid, $n, $m, $i, $j, $k - 1, $path, $pathSum,\
    \ $visited);\n            if ($result->[0] < $minPathSum) {\n                $minPathSum\
    \ = $result->[0];\n                $minPath = $result->[1];\n            }\n \
    \       }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my $min = [map { [map { [$_] } @$_] } @$grid];\n\
    \    my $min_path = [map { [map { [$_] } @$_] } @$grid];\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k\
    \ - 1) {\n                for my $d (0 .. 3) {\n                    my $x = $i\
    \ + $dx[$d];\n                    my $y = $j + $dy[$d];\n                    if\
    \ ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n                        if ($min->[$x][$y][$l]\
    \ > $min->[$i][$j][$l - 1] + $grid->[$x][$y]) {\n                            $min->[$x][$y][$l]\
    \ = $min->[$i][$j][$l - 1] + $grid->[$x][$y];\n                            $min_path->[$x][$y][$l]\
    \ = [@{$min_path->[$i][$j][$l - 1]}, $grid->[$x][$y]];\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return $min_path->[0][0][$k - 1];\n}", "    my $n = scalar(@$grid);\n\
    \    my @path = ();\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path_sum = $min_sum;\n    my $min_path_len = $k + 1;\n    my $min_path_sum_len\
    \ = $min_path_len;\n    my $min_path_sum_len_sum = $min_sum;\n    my $min_path_sum_len_sum_len\
    \ = $min_path_len;\n    my $min_path_sum_len_sum_len_sum = $min_sum;\n    my $min_path_sum_len_sum_len_sum_len\
    \ = $min_path_len;\n    my $min_path_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n    my $min_path_sum_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n  \
    \  my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n   \
    \ my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n\
    \    my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathEnd\
    \ = [0, 0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n      \
    \      $visited->[$i][$j] = 1;\n            my $path = [];\n            my $pathSum\
    \ = $grid->[$i][$j];\n            my $pathEnd = [$i, $j];\n            push @$path,\
    \ $grid->[$i][$j];\n            my $pathLen = 1;\n            while ($pathLen\
    \ < $k) {\n                my $min = $n * $m * $k;\n                my $minCell\
    \ = [0, 0];\n                for my $i (0..$n-1) {\n                    for my\
    \ $j (0..$m-1) {\n                        if ($visited->[$i][$j] == 0) {\n   \
    \                         my $sum = $pathSum + $grid->[$i][$j];\n            \
    \                if ($sum < $min) {\n                                $min = $sum;\n\
    \                                $minCell = [$i, $j];\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \                $visited->[$minCell->[0]][$minCell->[1]] = 1;\n             \
    \   $pathSum += $grid->[$minCell->[0]][$minCell->[1]];\n                $pathEnd\
    \ = $minCell;\n                push @$path, $grid->[$minCell->[0]][$minCell->[1]];\n\
    \                $pathLen++;\n            }\n            if ($pathSum < $minPathSum)\
    \ {\n                $min", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [];\n            my $pathSum = 0;\n      \
    \      my $pathSum2 = 0;\n            my $path2 = [];\n            my $pathSum3\
    \ = 0;\n            my $path3 = [];\n            my $paths = [];\n           \
    \ my $paths2 = [];\n            my $paths3 = [];\n            my $pathsSum = [];\n\
    \            my $pathsSum2 = [];\n            my $pathsSum3 = [];\n          \
    \  my $paths2Sum = [];\n            my $paths2Sum2 = [];\n            my $paths2Sum3\
    \ = [];\n            my $paths3Sum = [];\n            my $paths3Sum2 = [];\n \
    \           my $paths3Sum3 = [];\n            my $paths4Sum = [];\n          \
    \  my $paths4Sum2 = [];\n            my $paths4Sum3 = [];\n            my $paths5Sum\
    \ = [];\n            my $paths5Sum2 = [];\n            my $paths5Sum3 = [];\n\
    \            my $paths6Sum = [];\n            my $paths6Sum2 = [];\n         \
    \   my $paths6Sum3 = [];\n            my $paths7Sum = [];\n            my $paths7Sum2\
    \ = [];\n            my $paths7Sum3 = [];\n            my $paths8Sum = [];\n \
    \           my $paths8Sum2 = [];\n            my $paths8Sum3 = [];\n         \
    \   my $paths9Sum = [];\n            my $paths9Sum2 = [];\n            my $paths9Sum3\
    \ = [];\n            my $paths10Sum = [];\n            my $path", "    my $n =\
    \ scalar(@$grid);\n    my @path;\n    my $min_path = [];\n    my $min_sum = $n\
    \ * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_lex = $min_sum;\n\
    \    my $min_path_lex_sum = $min_sum;\n    my $min_path_lex_sum_path = [];\n \
    \   my $min_path_lex_sum_path_sum = $min_sum;\n    my $min_path_lex_sum_path_sum_lex\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path = [];\n    my $min_path_lex_sum_path_sum_lex_path_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex = $min_sum;\n\
    \    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path = [];\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex_path\
    \ = [];\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex_path_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex_path_sum_lex\
    \ = $min_sum;\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex_path_sum_lex_path\
    \ = [];\n    my $min_path_lex_sum_path_sum_lex_path_sum_lex_path_sum_lex_path_sum_lex_path_",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2\
    \ = [];\n    my $minPath3 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath19 = [];\n    my $minPathSum19\
    \ = $n *", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_set\
    \ = 0;\n    my $min_path_set = 0;\n    my $min_path_sum_set_k = 0;\n    my $min_path_set_k\
    \ = 0;\n    my $min_path_sum_set_k_1 = 0;\n    my $min_path_set_k_1 = 0;\n   \
    \ my $min_path_sum_set_k_2 = 0;\n    my $min_path_set_k_2 = 0;\n    my $min_path_sum_set_k_3\
    \ = 0;\n    my $min_path_set_k_3 = 0;\n    my $min_path_sum_set_k_4 = 0;\n   \
    \ my $min_path_set_k_4 = 0;\n    my $min_path_sum_set_k_5 = 0;\n    my $min_path_set_k_5\
    \ = 0;\n    my $min_path_sum_set_k_6 = 0;\n    my $min_path_set_k_6 = 0;\n   \
    \ my $min_path_sum_set_k_7 = 0;\n    my $min_path_set_k_7 = 0;\n    my $min_path_sum_set_k_8\
    \ = 0;\n    my $min_path_set_k_8 = 0;\n    my $min_path_sum_set_k_9 = 0;\n   \
    \ my $min_path_set_k_9 = 0;\n    my $min_path_sum_set_k_10 = 0;\n    my $min_path_set_k_10\
    \ = 0;\n    my $min_path_sum_set_k_11 = 0;\n    my $min_path_set_k_11 = 0;\n \
    \   my $min_path_sum_set_k_12 = 0;\n    my $min", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $min_path = [$min];\n\
    \    my $min_paths = {};\n    my $paths = {};\n    my $path = [];\n    my $paths_to_check\
    \ = [[0, 0]];\n    my $paths_to_check_next = [];\n    my $path_length = 0;\n \
    \   while ($path_length < $k) {\n        for my $path_to_check (@$paths_to_check)\
    \ {\n            my $i = $path_to_check->[0];\n            my $j = $path_to_check->[1];\n\
    \            my $path_key = join(',', @$path_to_check);\n            if (exists\
    \ $paths->{$path_key}) {\n                next;\n            }\n            $paths->{$path_key}\
    \ = 1;\n            my $val = $grid->[$i][$j];\n            if ($val < $min) {\n\
    \                $min = $val;\n                $min_path = [$val];\n         \
    \       $min_paths = {};\n            }\n            elsif ($val == $min) {\n\
    \                push @$min_path, $val;\n            }\n            $path = [@$path,\
    \ $val];\n            my $path_key = join(',', @$path);\n            if (exists\
    \ $min_paths->{$path_key}) {\n                next;\n            }\n         \
    \   $min_paths->{$path_key} = 1;\n            if ($i > 0) {\n                push\
    \ @$paths_to_check_next, [$i - 1, $j];\n            }\n            if ($i < $n\
    \ - 1) {\n                push @$paths_to_check_next, [$i + 1, $j];\n        \
    \    }\n            if ($j > 0) {\n                push @$paths_to_check_next,\
    \ [$i, $j - 1];\n            }\n            if ($j", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n\
    \    my $min_path_sum_found_at = 0;\n    my $min_path_found_at = 0;\n    my $path_sum\
    \ = 0;\n    my $path = [];\n    my $path_found = 0;\n    my $path_sum_found =\
    \ 0;\n    my $path_found_at = 0;\n    my $path_sum_found_at = 0;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $l = 0;\n    my $m = 0;\n    my $p = 0;\n    my $q\
    \ = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my\
    \ $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n  \
    \  my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n +", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $path_sum = 0;\n            my $visited = {};\n            my\
    \ $q = [[$i, $j]];\n            while (@$q) {\n                my $cur = shift\
    \ @$q;\n                my($x, $y) = @$cur;\n                next if $visited->{\"\
    $x,$y\"};\n                $visited->{\"$x,$y\"} = 1;\n                push @$path,\
    \ $grid->[$x][$y];\n                $path_sum += $grid->[$x][$y];\n          \
    \      if (scalar(@$path) == $k) {\n                    if ($path_sum < $min_path_sum)\
    \ {\n                        $min_path_sum = $path_sum;\n                    \
    \    $min_path = $path;\n                    }\n                    last;\n  \
    \              }\n                for my $dx (-1, 0, 1) {\n                  \
    \  for my $dy (-1, 0, 1) {\n                        next if $dx == 0 && $dy ==\
    \ 0;\n                        my $nx = $x + $dx;\n                        my $ny\
    \ = $y + $dy;\n                        next if $nx < 0 || $nx >= $n || $ny < 0\
    \ || $ny >= $m;\n                        push @$q, [$nx, $ny];\n             \
    \       }\n                }\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $pathSum\
    \ = 0;\n            my $pathSum2 = 0;\n            my $path2 = [];\n         \
    \   my $visited2 = [];\n            for (my $i = 0; $i < $n; $i++) {\n       \
    \         for (my $j = 0; $j < $m; $j++) {\n                    $visited2->[$i][$j]\
    \ = 0;\n                }\n            }\n            dfs($grid, $i, $j, $k, $path,\
    \ $pathSum, $pathSum2, $path2, $visited2);\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n            if ($pathSum2 < $minPathSum2) {\n                $minPathSum2\
    \ = $pathSum2;\n                $minPath2 = $path2;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_sum_sum = $n * $n * $k;\n    my $min_path_sum_sum_sum_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_sum_sum_sum_sum = $n * $n * $k;\n    my\
    \ $min_path_sum_sum_sum_sum_sum_sum = $n * $n * $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n\
    \ * $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $k;\n\
    \    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $k;\n  \
    \  my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n * $k;\n\
    \    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $n * $n *\
    \ $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ $n * $n * $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_sum_sum_sum_sum_sum_sum_sum_", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $m * $k;\n    my $path = [];\n    my $path_sum = 0;\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            $path = [];\n         \
    \   $path_sum = 0;\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $n, $m, $path, $path_sum, $visited, $min_path, $min_path_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my @path;\n    my $min_path = $grid->[0][0];\n\
    \    my $min_path_length = $k;\n    my $min_path_index = 0;\n    my $min_path_index_length\
    \ = 0;\n    my $min_path_index_length_index = 0;\n    my $min_path_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index = 0;\n    my $min_path_index_length_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index = 0;\n \
    \   my $min_path_index_length_index_length_index_length_index_length = 0;\n  \
    \  my $min_path_index_length_index_length_index_length_index_length_index = 0;\n\
    \    my $min_path_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length_index\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    my $min_path_index_length_index_length_index_length_index_length_index_length_index_length_",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
    \ $min_sum = $n * $m * $k;\n    my $sum = 0;\n    my $path = [];\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            $sum = 0;\n           \
    \ $path = [];\n            $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n\
    \            push @$path, $grid->[$i][$j];\n            dfs($grid, $k - 1, $i,\
    \ $j, $sum, $path, $visited, $min_sum, $min_path);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k =\
    \ $n * $n + 1;\n    my $min_path_k = [];\n    my $min_path_sum_k_1 = $n * $n +\
    \ 1;\n    my $min_path_k_1 = [];\n    my $min_path_sum_k_2 = $n * $n + 1;\n  \
    \  my $min_path_k_2 = [];\n    my $min_path_sum_k_3 = $n * $n + 1;\n    my $min_path_k_3\
    \ = [];\n    my $min_path_sum_k_4 = $n * $n + 1;\n    my $min_path_k_4 = [];\n\
    \    my $min_path_sum_k_5 = $n * $n + 1;\n    my $min_path_k_5 = [];\n    my $min_path_sum_k_6\
    \ = $n * $n + 1;\n    my $min_path_k_6 = [];\n    my $min_path_sum_k_7 = $n *\
    \ $n + 1;\n    my $min_path_k_7 = [];\n    my $min_path_sum_k_8 = $n * $n + 1;\n\
    \    my $min_path_k_8 = [];\n    my $min_path_sum_k_9 = $n * $n + 1;\n    my $min_path_k_9\
    \ = [];\n    my $min_path_sum_k_10 = $n * $n + 1;\n    my $min_path_k_10 = [];\n\
    \    my $min_path_sum_k_11 = $n * $n + 1;\n    my $min_path_k_11 = [];\n    my\
    \ $min_path_sum_k_12 = $n * $n + 1;", "    my $n = scalar(@$grid);\n    my $m\
    \ = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_len\
    \ = $n * $n + 1;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_len\
    \ = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if\
    \ ($visited->[$i][$j] == 0) {\n                $visited->[$i][$j] = 1;\n     \
    \           $path_sum += $grid->[$i][$j];\n                $path_len += 1;\n \
    \               push @$path, [$i, $j];\n                if ($path_len == $k) {\n\
    \                    if ($path_sum < $min_path_sum) {\n                      \
    \  $min_path_sum = $path_sum;\n                        $min_path_len = $path_len;\n\
    \                        $min_path = $path;\n                    }\n         \
    \           elsif ($path_sum == $min_path_sum) {\n                        if ($path_len\
    \ < $min_path_len) {\n                            $min_path_sum = $path_sum;\n\
    \                            $min_path_len = $path_len;\n                    \
    \        $min_path = $path;\n                        }\n                     \
    \   elsif ($path_len == $min_path_len) {\n                            my $path_min\
    \ = [];\n                            for my $i (0 .. $path_len - 1) {\n      \
    \                          push @$path_min, $grid->[$path->[$i][0]][$path->[$",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_value = [];\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n      \
    \      my $path_value = [];\n            dfs($grid, $i, $j, $k, $path, $path_value);\n\
    \            if (scalar(@$path) == $k) {\n                if (scalar(@$min_path)\
    \ == 0 ||\n                    less($path_value, $min_path_value)) {\n       \
    \             $min_path = $path;\n                    $min_path_value = $path_value;\n\
    \                }\n            }\n        }\n    }\n    return $min_path;\n}",
  "    my $n = @$grid;\n    my @path;\n    my $min_path;\n    my $min_sum = $n * $n\
    \ * $n;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = 0;\n   \
    \ my $min_path_sum_idx_end = 0;\n    my $min_path_sum_idx_start = 0;\n    my $min_path_sum_idx_start_end\
    \ = 0;\n    my $min_path_sum_idx_start_end_sum = $min_sum;\n    my $min_path_sum_idx_start_end_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_start_end_sum_idx_end = 0;\n    my $min_path_sum_idx_start_end_sum_idx_start\
    \ = 0;\n    my $min_path_sum_idx_start_end_sum_idx_start_end = 0;\n    my $min_path_sum_idx_start_end_sum_idx_start_end_sum\
    \ = $min_sum;\n    my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx =\
    \ 0;\n    my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx_end = 0;\n\
    \    my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx_start = 0;\n   \
    \ my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx_start_end = 0;\n  \
    \  my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx_start_end_sum = $min_sum;\n\
    \    my $min_path_sum_idx_start_end_sum_idx_start_end_sum_idx_start_end_sum_idx\
    \ = 0;\n    my", "    my $n = @$grid;\n    my @path;\n    my $min_path;\n    my\
    \ $min_sum = $n * $n * $n;\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $n - 1) {\n            my $sum = 0;\n            my @path = ($grid->[$i][$j]);\n\
    \            my $x = $i;\n            my $y = $j;\n            for my $l (1 ..\
    \ $k - 1) {\n                my $min_val = $n * $n;\n                my $min_x;\n\
    \                my $min_y;\n                for my $dx (-1 .. 1) {\n        \
    \            for my $dy (-1 .. 1) {\n                        next if $dx == 0\
    \ && $dy == 0;\n                        my $x1 = $x + $dx;\n                 \
    \       my $y1 = $y + $dy;\n                        next if $x1 < 0 || $x1 >=\
    \ $n || $y1 < 0 || $y1 >= $n;\n                        if ($grid->[$x1][$y1] <\
    \ $min_val) {\n                            $min_val = $grid->[$x1][$y1];\n   \
    \                         $min_x = $x1;\n                            $min_y =\
    \ $y1;\n                        }\n                    }\n                }\n\
    \                $sum += $min_val;\n                $x = $min_x;\n           \
    \     $y = $min_y;\n                push @path, $min_val;\n            }\n   \
    \         if ($sum < $min_sum) {\n                $min_sum = $sum;\n         \
    \       $min_path = \\@path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n\
    \    my $minPathSum3 = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPath4 = [];\n    my $minPath5 = [];\n    my $minPath6 = [];\n\
    \    my $minPath7 = [];\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my\
    \ $minPath10 = [];\n    my $minPath11 = [];\n    my $minPath12 = [];\n    my $minPath13\
    \ = [];\n    my $minPath14 = [];\n    my $minPath15 = [];\n    my $minPath16 =\
    \ [];\n    my $minPath17 = [];\n    my $minPath18 = [];\n    my $minPath19 = [];\n\
    \    my $minPath20 = [];\n    my $minPath21 = [];\n    my $minPath22 = [];\n \
    \   my $minPath23 = [];\n    my $minPath24 = [];\n    my $minPath25 = [];\n  \
    \  my $minPath26 = [];\n    my $minPath27 = [];\n    my $minPath28 = [];\n   \
    \ my $minPath29 = [];\n    my $minPath30 = [];\n    my $minPath31 = [];\n    my\
    \ $minPath32 = [];\n    my $minPath33 = [];\n    my $minPath34 = [];\n    my $minPath35\
    \ = [];\n    my $minPath36 = [];\n    my $minPath37 = [];\n    my $minPath38 =\
    \ [];\n    my $minPath39 = [];\n    my $minPath40 = [];\n    my $minPath41 = [];\n\
    \    my $minPath42 = [];\n    my $minPath43 = [];\n    my $minPath44 = [];\n \
    \   my $minPath45 = [];\n    my $minPath46 = [];\n    my $minPath47 = [];\n  \
    \  my $minPath", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min\
    \ = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths = {};\n    my\
    \ $paths = {};\n    my $path = [];\n    my $paths_to_visit = [{path => $path,\
    \ i => 0, j => 0}];\n    while (@$paths_to_visit) {\n        my $path_to_visit\
    \ = shift @$paths_to_visit;\n        my $path = $path_to_visit->{path};\n    \
    \    my $i = $path_to_visit->{i};\n        my $j = $path_to_visit->{j};\n    \
    \    my $cell = $grid->[$i][$j];\n        push @$path, $cell;\n        if (@$path\
    \ == $k) {\n            my $path_str = join(',', @$path);\n            if (!exists\
    \ $paths->{$path_str}) {\n                $paths->{$path_str} = $path;\n     \
    \           if ($path->[0] < $min) {\n                    $min = $path->[0];\n\
    \                    $min_path = $path;\n                }\n            }\n  \
    \      }\n        else {\n            if ($i > 0) {\n                my $new_path\
    \ = [@$path];\n                push @$paths_to_visit, {path => $new_path, i =>\
    \ $i - 1, j => $j};\n            }\n            if ($i < $n - 1) {\n         \
    \       my $new_path = [@$path];\n                push @$paths_to_visit, {path\
    \ => $new_path, i => $i + 1, j => $j};\n            }\n            if ($j > 0)\
    \ {\n                my $new_path = [@$path];\n                push @$paths_to_visit,\
    \ {path => $new_path, i => $i, j => $j - 1};\n            }\n            if ($j\
    \ < $m", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n  \
    \  my $path = [];\n    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n\
    \    my $minPathSum2 = $n * $n + 1;\n    my $minPathSum3 = $n * $n + 1;\n    my\
    \ $minPathSum4 = $n * $n + 1;\n    my $minPathSum5 = $n * $n + 1;\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPathSum7 = $n * $n + 1;\n    my $minPathSum8 = $n\
    \ * $n + 1;\n    my $minPathSum9 = $n * $n + 1;\n    my $minPathSum10 = $n * $n\
    \ + 1;\n    my $minPathSum11 = $n * $n + 1;\n    my $minPathSum12 = $n * $n +\
    \ 1;\n    my $minPathSum13 = $n * $n + 1;\n    my $minPathSum14 = $n * $n + 1;\n\
    \    my $minPathSum15 = $n * $n + 1;\n    my $minPathSum16 = $n * $n + 1;\n  \
    \  my $minPathSum17 = $n * $n + 1;\n    my $minPathSum18 = $n * $n + 1;\n    my\
    \ $minPathSum19 = $n * $n + 1;\n    my $minPathSum20 = $n * $n + 1;\n    my $minPathSum21\
    \ = $n * $n + 1;\n    my $minPathSum22 = $n * $n + 1;\n    my $minPathSum23 =\
    \ $n * $n + 1;\n    my $minPathSum24 = $n * $n + 1;\n    my $minPathSum25 = $n\
    \ * $n + 1;\n    my $minPathSum26 = $n * $n + 1;\n    my $minPathSum27 = $n *\
    \ $n + 1;\n    my $minPathSum28", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $visited = {};\n\
    \    my $min_path_ref = \\$min_path;\n    my $min_ref = \\$min;\n    my $visited_ref\
    \ = \\$visited;\n    my $k_ref = \\$k;\n    my $n_ref = \\$n;\n    my $m_ref =\
    \ \\$m;\n    my $grid_ref = \\$grid;\n    my $min_path_ref = \\$min_path;\n  \
    \  my $min_ref = \\$min;\n    my $visited_ref = \\$visited;\n    my $k_ref = \\\
    $k;\n    my $n_ref = \\$n;\n    my $m_ref = \\$m;\n    my $grid_ref = \\$grid;\n\
    \    my $min_path_ref = \\$min_path;\n    my $min_ref = \\$min;\n    my $visited_ref\
    \ = \\$visited;\n    my $k_ref = \\$k;\n    my $n_ref = \\$n;\n    my $m_ref =\
    \ \\$m;\n    my $grid_ref = \\$grid;\n    my $min_path_ref = \\$min_path;\n  \
    \  my $min_ref = \\$min;\n    my $visited_ref = \\$visited;\n    my $k_ref = \\\
    $k;\n    my $n_ref = \\$n;\n    my $m_ref = \\$m;\n    my $grid_ref = \\$grid;\n\
    \    my $min_path_ref = \\$min_path;\n    my $min_ref = \\$min;\n    my $visited_ref\
    \ = \\$visited;\n    my $k_ref = \\$k;\n    my $n_ref = \\$n;\n    my $m_ref =\
    \ \\$m;\n    my $grid_ref = \\$grid;\n   ", "    my $n = @$grid;\n    my $path\
    \ = [];\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_index = 0;\n    my $min_path_index_sum = $min_sum;\n\
    \    my $min_path_index_sum_index = 0;\n    my $min_path_index_sum_index_sum =\
    \ $min_sum;\n    my $min_path_index_sum_index_sum_index = 0;\n    my $min_path_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_index_sum_index_sum_index_sum_index = 0;\n   \
    \ my $min_path_index_sum_index_sum_index_sum_index_sum = $min_sum;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum = $min_sum;\n\
    \    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index = 0;\n\
    \    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum", "    my @path;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_i = 0;\n    my $min_j = 0;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($grid->[$i][$j]\
    \ < $min) {\n                $min = $grid->[$i][$j];\n                $min_i =\
    \ $i;\n                $min_j = $j;\n            }\n        }\n    }\n    my @visited;\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited[$i][$j]\
    \ = 0;\n        }\n    }\n    my @stack;\n    push @stack, [$min_i, $min_j, $min];\n\
    \    while (@stack) {\n        my $e = pop @stack;\n        my ($i, $j, $val)\
    \ = @$e;\n        if ($visited[$i][$j]) {\n            next;\n        }\n    \
    \    $visited[$i][$j] = 1;\n        push @path, $val;\n        if (@path == $k)\
    \ {\n            return @path;\n        }\n        for my $d (0..3) {\n      \
    \      my $ni = $i + $delta[$d][0];\n            my $nj = $j + $delta[$d][1];\n\
    \            if ($ni >= 0 && $ni < $n && $nj >= 0 && $nj < $m && !$visited[$ni][$nj])\
    \ {\n                push @stack, [$ni, $nj, $grid->[$ni][$nj]];\n           \
    \ }\n        }\n    }\n    return @path;\n}", "    return [1] if $k == 1;\n  \
    \  my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $min_i = 0;\n    my $min_j = 0;\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            if ($grid->[$i][$j] < $min) {\n             \
    \   $min = $grid->[$i][$j];\n                $min_i = $i;\n                $min_j\
    \ = $j;\n            }\n        }\n    }\n    my $min_path = [$min];\n    my $visited\
    \ = {};\n    my $queue = [[$min_i, $min_j, $min_path]];\n    while (@$queue) {\n\
    \        my $cur = shift @$queue;\n        my ($i, $j, $path) = @$cur;\n     \
    \   if (@$path == $k) {\n            return $path;\n        }\n        for my\
    \ $delta_i (-1..1) {\n            for my $delta_j (-1..1) {\n                next\
    \ if $delta_i == 0 && $delta_j == 0;\n                my $new_i = $i + $delta_i;\n\
    \                my $new_j = $j + $delta_j;\n                next if $new_i <\
    \ 0 || $new_i >= $n || $new_j < 0 || $new_j >= $m;\n                next if $visited->{\"\
    $new_i,$new_j\"};\n                my $new_path = [@$path, $grid->[$new_i][$new_j]];\n\
    \                $visited->{\"$new_i,$new_j\"} = 1;\n                push @$queue,\
    \ [$new_i, $new_j, $new_path];\n            }\n        }\n    }\n}", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n \
    \   my $min_sum = $n * $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $sum,\
    \ $path) = @_;\n        if ($sum > $min_sum) {\n            return;\n        }\n\
    \        if ($sum == $min_sum) {\n            if ($path lt $min) {\n         \
    \       $min = $path;\n            }\n            return;\n        }\n       \
    \ if ($i < 0 || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n     \
    \   }\n        if ($visited->[$i]->[$j]) {\n            return;\n        }\n \
    \       $visited->[$i]->[$j] = 1;\n        $dfs->($i - 1, $j, $sum + $grid->[$i]->[$j],\
    \ $path . $grid->[$i]->[$j]);\n        $dfs->($i + 1, $j, $sum + $grid->[$i]->[$j],\
    \ $path . $grid->[$i]->[$j]);\n        $dfs->($i, $j - 1, $sum + $grid->[$i]->[$j],\
    \ $path . $grid->[$i]->[$j]);\n        $dfs->($i, $j + 1, $sum + $grid->[$i]->[$j],\
    \ $path . $grid->[$i]->[$j]);\n        $visited->[$i]->[$j] = 0;\n    };\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $m + 1;\n    my $min_path_len\
    \ = $n * $m + 1;\n    my $min_path_len_sum = $n * $m + 1;\n    my $min_path_len_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_len = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_len_sum\
    \ = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_len_sum_path = [];\n\
    \    my $min_path_len_sum_path_sum_path_len_sum_path_len = $n * $m + 1;\n    my\
    \ $min_path_len_sum_path_sum_path_len_sum_path_len_sum = $n * $m + 1;\n    my\
    \ $min_path_len_sum_path_sum_path_len_sum_path_len_sum_path = [];\n    my $min_path_len_sum_path_sum_path_len_sum_path_len_sum_path_len\
    \ = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_len_sum_path_len_sum_path_len_sum\
    \ = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path_len_sum_path_len_sum_path_len_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_len_sum_path_len_sum_path_len_sum_path_len\
    \ =", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my\
    \ @path;\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_len = $k + 1;\n    my $min_path_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum = $min_sum;\n    my $min_path_sum_len_sum_len =\
    \ $min_path_len;\n    my $min_path_sum_len_sum_len_sum = $min_sum;\n    my $min_path_sum_len_sum_len_sum_len\
    \ = $min_path_len;\n    my $min_path_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n    my $min_path_sum_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n  \
    \  my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $min_path_len;\n\
    \    my $min_path_sum_len_sum_len_sum_len_sum_len_sum_len_sum", "    my @path;\n\
    \    my $N = scalar(@$grid);\n    my $M = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $N * $N + 1;\n    my $min_path_len = $N * $N +\
    \ 1;\n    my $min_path_val = $N * $N + 1;\n    my $min_path_val_idx = $N * $N\
    \ + 1;\n    my $min_path_val_idx_sum = $N * $N + 1;\n    my $min_path_val_idx_len\
    \ = $N * $N + 1;\n    my $min_path_val_idx_len_sum = $N * $N + 1;\n    my $min_path_val_idx_len_sum_val\
    \ = $N * $N + 1;\n    my $min_path_val_idx_len_sum_val_idx = $N * $N + 1;\n  \
    \  my $min_path_val_idx_len_sum_val_idx_sum = $N * $N + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val\
    \ = $N * $N + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val_idx = $N *\
    \ $N + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val_idx_sum = $N * $N\
    \ + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val_idx_sum_val = $N * $N\
    \ + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val_idx_sum_val_idx = $N\
    \ * $N + 1;\n    my $min_path_val_idx_len_sum_val_idx_sum_val_idx_sum_val_idx_",
  "    my $n = scalar(@$grid);\n    my @minPath;\n    my @minPathValues;\n    my @minPathValuesIndices;\n\
    \    my @minPathValuesIndicesIndices;\n    my @minPathValuesIndicesIndicesIndices;\n\
    \    my $minPathValuesIndicesIndicesIndicesIndex = 0;\n    my $minPathValuesIndicesIndicesIndex\
    \ = 0;\n    my $minPathValuesIndicesIndex = 0;\n    my $minPathValuesIndex = 0;\n\
    \    my $minPathIndex = 0;\n    my $minPathValue = 0;\n    my $minPathValueIndex\
    \ = 0;\n    my $minPathValueIndexIndex = 0;\n    my $minPathValueIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndex = 0;\n    my $minPathValueIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndex = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  \
    \  my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n    my\
    \ $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n    my\
    \ $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n\
    \    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    my $minPathValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     $visited->[$i][$j] = 1;\n            dfs($grid, $i, $j, $k, $path, $sum,\
    \ $visited);\n            $visited->[$i][$j] = 0;\n            if ($sum < $min_sum)\
    \ {\n                $min_sum = $sum;\n                $min_path = $path;\n  \
    \          }\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my @dp;\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $dp[$i][$j] = [$grid->[$i][$j]];\n\
    \        }\n    }\n    for my $i (1 .. $k - 1) {\n        for my $j (0 .. $n -\
    \ 1) {\n            for my $l (0 .. $m - 1) {\n                my $min = $dp[$j][$l];\n\
    \                if ($j > 0) {\n                    my $tmp = $dp[$j - 1][$l];\n\
    \                    if ($tmp->[0] < $min->[0] or\n                        ($tmp->[0]\
    \ == $min->[0] and\n                         $tmp->[$i] < $min->[$i])) {\n   \
    \                     $min = $tmp;\n                    }\n                }\n\
    \                if ($j < $n - 1) {\n                    my $tmp = $dp[$j + 1][$l];\n\
    \                    if ($tmp->[0] < $min->[0] or\n                        ($tmp->[0]\
    \ == $min->[0] and\n                         $tmp->[$i] < $min->[$i])) {\n   \
    \                     $min = $tmp;\n                    }\n                }\n\
    \                if ($l > 0) {\n                    my $tmp = $dp[$j][$l - 1];\n\
    \                    if ($tmp->[0] < $min->[0] or\n                        ($tmp->[0]\
    \ == $min->[0] and\n                         $tmp->[$i] < $min->[$i])) {\n   \
    \                     $min = $tmp;\n                    }\n                }\n\
    \                if ($l < $m - 1) {\n                    my $tmp = $dp[$j][$l\
    \ + 1];\n                    if ($tmp->[0] < $min->[0] or\n                  \
    \      ($tmp->[0] == $min->[0] and\n                         $tmp->[$i] < $min->[",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_val = [];\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n        \
    \    my $path_val = [];\n            my $visited = [];\n            for (my $i\
    \ = 0; $i < $n; $i++) {\n                for (my $j = 0; $j < $m; $j++) {\n  \
    \                  $visited->[$i][$j] = 0;\n                }\n            }\n\
    \            $visited->[$i][$j] = 1;\n            $path->[0] = [$i, $j];\n   \
    \         $path_val->[0] = $grid->[$i][$j];\n            my $min_path_len = $k\
    \ + 1;\n            my $min_path_val_len = $k + 1;\n            my $path_len =\
    \ 1;\n            my $path_val_len = 1;\n            while ($path_len > 0) {\n\
    \                my $curr_cell = pop(@$path);\n                my $curr_cell_val\
    \ = pop(@$path_val);\n                $path_len--;\n                $path_val_len--;\n\
    \                if ($path_len == $k) {\n                    if ($path_val_len\
    \ < $min_path_val_len) {\n                        $min_path = $path;\n       \
    \                 $min_path_val = $path_val;\n                        $min_path_len\
    \ = $path_len;\n                        $min_path_val_len = $path_val_len;\n \
    \                   } elsif ($path_val_len == $min_path_val_len) {\n         \
    \               my $less = 0;\n                        for (my $i = 0; $i < $path_val_len;\
    \ $i++) {\n                            if ($path_val->[$i] < $min_path_val->[",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $visited = {};\n    my $path\
    \ = [];\n    my $pathSum = 0;\n    my $i = 0;\n    my $j = 0;\n    my $dir = 0;\n\
    \    my $dirs = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    my $dfs = sub {\n   \
    \     my($i, $j, $k, $pathSum, $path) = @_;\n        if ($k == 0) {\n        \
    \    if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n            return;\n     \
    \   }\n        for (my $d = 0; $d < 4; $d++) {\n            my $ii = $i + $dirs->[$d]->[0];\n\
    \            my $jj = $j + $dirs->[$d]->[1];\n            if ($ii >= 0 && $ii\
    \ < $n && $jj >= 0 && $jj < $m && !$visited->{\"$ii,$jj\"}) {\n              \
    \  $visited->{\"$ii,$jj\"} = 1;\n                push(@$path, $grid->[$ii]->[$jj]);\n\
    \                $dfs->($ii, $jj, $k - 1, $pathSum + $grid->[$ii]->[$jj], $path);\n\
    \                pop(@$path);\n                $visited->{\"$ii,$jj\"} = 0;\n\
    \            }\n        }\n    };\n    $visited->{\"0,0\"} = 1;\n    push(@$path,\
    \ $grid->[0]->[0]);\n    $dfs->(0, 0, $k - 1, $grid->[0]->[0], $path);\n    return\
    \ $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPathSum3 = $n * $n * $k;\n    my $minPathSum4 =\
    \ $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $n * $n * $k;\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n\
    \    my $minPath9 = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11\
    \ = $n * $n * $k;\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n\
    \    my $minPath13 = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16 = [];\n\
    \    my $minPath17 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPathSum18\
    \ = $n * $n * $k;\n    my $minPath", "    my $n = scalar(@$grid);\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $n - 1) {\n            my $path = [];\n            my\
    \ $path_sum = 0;\n            my $visited = {};\n            my $found = 0;\n\
    \            dfs($i, $j, $k, $path, $path_sum, $visited, $found);\n          \
    \  if ($found && $path_sum < $min_path_sum) {\n                $min_path = $path;\n\
    \                $min_path_sum = $path_sum;\n            }\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath18 = [];\n    my",
  "    my $n = scalar(@$grid);\n    my @path;\n    my $min_path;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count = 0;\n    my $min_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path;\n    my $min_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count = 0;\n    my $min_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max =\
    \ 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path;\n\
    \    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max_path;\n\
    \    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_val = [];\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n        \
    \    my $path_val = [];\n            my $visited = [];\n            for (my $i\
    \ = 0; $i < $n; $i++) {\n                for (my $j = 0; $j < $m; $j++) {\n  \
    \                  $visited->[$i][$j] = 0;\n                }\n            }\n\
    \            $visited->[$i][$j] = 1;\n            $path->[0] = [$i, $j];\n   \
    \         $path_val->[0] = $grid->[$i][$j];\n            dfs($grid, $i, $j, $k,\
    \ $path, $path_val, $visited, $min_path, $min_path_val);\n        }\n    }\n \
    \   return $min_path_val;\n}", "    my $n = scalar(@$grid);\n    my @path;\n \
    \   my $min_path;\n    my $min_path_sum = $n * $n + 1;\n    my @visited;\n   \
    \ my @queue;\n    my $i;\n    my $j;\n    my $sum;\n    my $curr;\n    my $next;\n\
    \    my $row;\n    my $col;\n    my $row_next;\n    my $col_next;\n    my $row_prev;\n\
    \    my $col_prev;\n    my $row_prev_prev;\n    my $col_prev_prev;\n    my $row_prev_prev_prev;\n\
    \    my $col_prev_prev_prev;\n    my $row_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $row_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $col_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $pathSum\
    \ = 0;\n            my $pathSum2 = 0;\n            my $path2 = [];\n         \
    \   my $visited2 = [];\n            for (my $i = 0; $i < $n; $i++) {\n       \
    \         for (my $j = 0; $j < $m; $j++) {\n                    $visited2->[$i][$j]\
    \ = 0;\n                }\n            }\n            dfs($grid, $i, $j, $k, $path,\
    \ $pathSum, $pathSum2, $path2, $visited2);\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n            if ($pathSum2 < $minPathSum2) {\n                $minPathSum2\
    \ = $pathSum2;\n                $minPath2 = $path2;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $visited = [];\n            for my $x\
    \ (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n               \
    \     $visited->[$x][$y] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n  \
    \          if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n\
    \                $min_path = $res->[1];\n            }\n        }\n    }\n   \
    \ return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_value = [];\n    my $min_path_value_sum\
    \ = 0;\n    my $min_path_value_sum_min = $n * $n * $k;\n    my $visited = [];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $path = [];\n\
    \    my $path_value = [];\n    my $path_value_sum = 0;\n    my $path_value_sum_min\
    \ = $n * $n * $k;\n    my $path_length = 0;\n    my $path_length_min = $k;\n \
    \   my $path_length_max = $k;\n    my $path_length_min_max = $k;\n    my $path_length_max_min\
    \ = $k;\n    my $path_length_min_max_min = $k;\n    my $path_length_max_min_min\
    \ = $k;\n    my $path_length_min_max_min_min = $k;\n    my $path_length_max_min_min_min\
    \ = $k;\n    my $path_length_min_max_min_min_min = $k;\n    my $path_length_max_min_min_min_min\
    \ = $k;\n    my $path_length_min_max_min_min_min_min = $k;\n    my $path_length_max_min_min_min_min_min\
    \ = $k;\n    my $path_length_min_max_min_min_min_min_min = $k;\n    my $path_length_max_min_min_min_min_min_min\
    \ = $k;\n    my $path_length_min_max_min_min_min_min_min_min = $k;\n   ", "  \
    \  my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    my $visited = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $pathSum = 0;\n   \
    \         dfs($grid, $i, $j, $k, $visited, $path, $pathSum);\n            if ($pathSum\
    \ < $minPathSum) {\n                $minPathSum = $pathSum;\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return $minPath;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $minPath = [];\n    my $minPathSum = $n * $n +\
    \ 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3\
    \ = $n * $n + 1;\n    my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n\
    \    my $minPath4 = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5\
    \ = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7\
    \ = $n * $n + 1;\n    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n\
    \    my $minPath8 = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9\
    \ = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath10 = [];\n    my\
    \ $minPathSum11 = $n * $n + 1;\n    my $minPath11 = [];\n    my $minPathSum12\
    \ = $n * $n + 1;\n    my $minPath12 = [];\n    my $minPathSum13 = $n * $n + 1;\n\
    \    my $minPath13 = [];\n    my $minPathSum14 = $n * $n + 1;\n    my $minPath14\
    \ = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath15 = [];\n    my\
    \ $minPathSum16 = $n * $n + 1;\n    my $minPath16 = [];\n    my $minPathSum17\
    \ = $n * $n + 1;\n    my $minPath17 = [];\n    my $minPathSum18 = $n * $n + 1;\n\
    \    my $minPath18 = [];\n    my $minPathSum19 = $n * $n + 1;\n    my $minPath19\
    \ = [];\n    my $minPathSum", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPathSum3 = $n * $n * $k;\n    my $minPathSum4 =\
    \ $n * $n * $k;\n    my $minPathSum5 = $n * $n * $k;\n    my $minPathSum6 = $n\
    \ * $n * $k;\n    my $minPathSum7 = $n * $n * $k;\n    my $minPathSum8 = $n *\
    \ $n * $k;\n    my $minPathSum9 = $n * $n * $k;\n    my $minPathSum10 = $n * $n\
    \ * $k;\n    my $minPathSum11 = $n * $n * $k;\n    my $minPathSum12 = $n * $n\
    \ * $k;\n    my $minPathSum13 = $n * $n * $k;\n    my $minPathSum14 = $n * $n\
    \ * $k;\n    my $minPathSum15 = $n * $n * $k;\n    my $minPathSum16 = $n * $n\
    \ * $k;\n    my $minPathSum17 = $n * $n * $k;\n    my $minPathSum18 = $n * $n\
    \ * $k;\n    my $minPathSum19 = $n * $n * $k;\n    my $minPathSum20 = $n * $n\
    \ * $k;\n    my $minPathSum21 = $n * $n * $k;\n    my $minPathSum22 = $n * $n\
    \ * $k;\n    my $minPathSum23 = $n * $n * $k;\n    my $minPathSum24 = $n * $n\
    \ * $k;\n    my $minPathSum25 = $n * $n * $k;\n    my $minPathSum26 = $n * $n\
    \ * $k;\n    my $minPath", "    my $n = @$grid;\n    my @path;\n    my $min_path\
    \ = [];\n    my $min_val = $n * $n + 1;\n    my $min_path_val = $min_val;\n  \
    \  my $min_path_len = $k + 1;\n    my @visited;\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $n - 1) {\n            $visited[$i][$j] = 0;\n      \
    \  }\n    }\n    my $visited_ref = \\@visited;\n    my $path_ref = \\@path;\n\
    \    my $min_path_ref = \\$min_path;\n    my $min_path_val_ref = \\$min_path_val;\n\
    \    my $min_path_len_ref = \\$min_path_len;\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $n - 1) {\n            $$visited_ref[$i][$j] = 1;\n \
    \           push @$path_ref, $grid->[$i][$j];\n            dfs($grid, $visited_ref,\
    \ $path_ref, $min_path_ref, $min_path_val_ref, $min_path_len_ref, $i, $j, $k -\
    \ 1);\n            pop @$path_ref;\n            $$visited_ref[$i][$j] = 0;\n \
    \       }\n    }\n    return @$min_path_ref;\n}", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n   \
    \ my $path = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         $path = [];\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
    \ $i, $j, $k, $path, $visited, $min, $min_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my @path = ();\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx = 0;\n    my $min_path_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx = 0;\n    my\
    \ $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum =\
    \ 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my $min_path;\n    my $min_path_val;\n \
    \   my $min_path_val_str;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            my $path = [$grid->[$i][$j]];\n            my $path_val = $grid->[$i][$j];\n\
    \            my $path_val_str = $grid->[$i][$j];\n            my $path_len = 1;\n\
    \            my $visited = {};\n            $visited->{\"$i,$j\"} = 1;\n     \
    \       my $queue = [[$i, $j]];\n            while (scalar(@$queue) > 0) {\n \
    \               my $cur = shift(@$queue);\n                my $i = $cur->[0];\n\
    \                my $j = $cur->[1];\n                for my $dir ([-1, 0], [1,\
    \ 0], [0, -1], [0, 1]) {\n                    my $i2 = $i + $dir->[0];\n     \
    \               my $j2 = $j + $dir->[1];\n                    if ($i2 >= 0 &&\
    \ $i2 < $n && $j2 >= 0 && $j2 < $m && !$visited->{\"$i2,$j2\"}) {\n          \
    \              push(@$path, $grid->[$i2][$j2]);\n                        $path_val\
    \ += $grid->[$i2][$j2];\n                        $path_val_str .= $grid->[$i2][$j2];\n\
    \                        $path_len++;\n                        if ($path_len ==\
    \ $k) {\n                            if (!defined($min_path) || $path_val < $min_path_val\
    \ || ($path_val == $min_path_val && $path_val_str lt $min_path_val_str)) {\n \
    \                               $min_path = $path;\n                         \
    \       $min_path_val = $path_", "    my @result;\n    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $min_i = 0;\n    my\
    \ $min_j = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n    \
    \        if ($grid->[$i][$j] < $min) {\n                $min = $grid->[$i][$j];\n\
    \                $min_i = $i;\n                $min_j = $j;\n            }\n \
    \       }\n    }\n    my @path;\n    my @visited;\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited[$i][$j] = 0;\n        }\n\
    \    }\n    $visited[$min_i][$min_j] = 1;\n    push @path, [$min_i, $min_j];\n\
    \    my $path_length = 0;\n    while (@path) {\n        my $node = pop @path;\n\
    \        my $i = $node->[0];\n        my $j = $node->[1];\n        $path_length++;\n\
    \        if ($path_length == $k) {\n            push @result, $grid->[$i][$j];\n\
    \            last;\n        }\n        if ($i > 0 && !$visited[$i-1][$j]) {\n\
    \            push @path, [$i-1, $j];\n            $visited[$i-1][$j] = 1;\n  \
    \      }\n        if ($i < $n-1 && !$visited[$i+1][$j]) {\n            push @path,\
    \ [$i+1, $j];\n            $visited[$i+1][$j] = 1;\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j-1]) {\n            push @path, [$i, $j-1];\n       \
    \     $visited[$i", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath;\n\
    \    my $minPathSum = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            my $path = [];\n            my $pathSum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            findMinPath($grid, $visited, $i, $j, $k, $path, $pathSum, $minPath,\
    \ $minPathSum);\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k\
    \ = $n * $n + 1;\n    my $min_path_k = [];\n    my $min_path_sum_k_1 = $n * $n\
    \ + 1;\n    my $min_path_k_1 = [];\n    my $min_path_sum_k_2 = $n * $n + 1;\n\
    \    my $min_path_k_2 = [];\n    my $min_path_sum_k_3 = $n * $n + 1;\n    my $min_path_k_3\
    \ = [];\n    my $min_path_sum_k_4 = $n * $n + 1;\n    my $min_path_k_4 = [];\n\
    \    my $min_path_sum_k_5 = $n * $n + 1;\n    my $min_path_k_5 = [];\n    my $min_path_sum_k_6\
    \ = $n * $n + 1;\n    my $min_path_k_6 = [];\n    my $min_path_sum_k_7 = $n *\
    \ $n + 1;\n    my $min_path_k_7 = [];\n    my $min_path_sum_k_8 = $n * $n + 1;\n\
    \    my $min_path_k_8 = [];\n    my $min_path_sum_k_9 = $n * $n + 1;\n    my $min_path_k_9\
    \ = [];\n    my $min_path_sum_k_10 = $n * $n + 1;\n    my $min_path_k_10 = [];\n\
    \    my $min_path_sum_k_11 = $n * $n + 1;\n    my $min_path_k_11 = [];\n    my\
    \ $min_path_sum_k_12 = $n * $n + 1;\n    my $min_path_k_12 = [];\n    my", " \
    \   my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n       \
    \ for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum =\
    \ 0;\n            my $visited = {};\n            my $dfs = sub {\n           \
    \     my($i, $j, $k) = @_;\n                if ($k == 0) {\n                 \
    \   if ($sum < $min_sum) {\n                        $min_sum = $sum;\n       \
    \                 $min = $path;\n                    }\n                    return;\n\
    \                }\n                for my $dir ([-1, 0], [1, 0], [0, -1], [0,\
    \ 1]) {\n                    my($x, $y) = ($i + $dir->[0], $j + $dir->[1]);\n\
    \                    if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->{\"\
    $x,$y\"}) {\n                        $visited->{\"$x,$y\"} = 1;\n            \
    \            push @$path, $grid->[$x][$y];\n                        $sum += $grid->[$x][$y];\n\
    \                        $dfs->($x, $y, $k - 1);\n                        pop\
    \ @$path;\n                        $sum -= $grid->[$x][$y];\n                \
    \        delete $visited->{\"$x,$y\"};\n                    }\n              \
    \  }\n            };\n            $dfs->($i, $j, $k);\n        }\n    }\n    return\
    \ $min;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found\
    \ = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_found_at = 0;\n    my\
    \ $min_path_found_at = 0;\n    my $min_path_sum_found_at_x = 0;\n    my $min_path_found_at_x\
    \ = 0;\n    my $min_path_sum_found_at_y = 0;\n    my $min_path_found_at_y = 0;\n\
    \    my $min_path_sum_found_at_d = 0;\n    my $min_path_found_at_d = 0;\n    my\
    \ $min_path_sum_found_at_k = 0;\n    my $min_path_found_at_k = 0;\n    my $min_path_sum_found_at_i\
    \ = 0;\n    my $min_path_found_at_i = 0;\n    my $min_path_sum_found_at_j = 0;\n\
    \    my $min_path_found_at_j = 0;\n    my $min_path_sum_found_at_l = 0;\n    my\
    \ $min_path_found_at_l = 0;\n    my $min_path_sum_found_at_p = 0;\n    my $min_path_found_at_p\
    \ = 0;\n    my $min_path_sum_found_at_q = 0;\n    my $min_path_found_at_q = 0;\n\
    \    my $min_path_sum_found_at_r = 0;\n    my $min_path_found_at_r = 0;\n    my\
    \ $min_path_sum_found_at_s = 0;\n    my $min_path_found_at_s = 0;\n    my $min_path_sum_found_at_t\
    \ = 0;\n    my $min", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ $min_path = [];\n    my $min_path_sum = $n * $m + 1;\n    my $visited = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $path = [];\n            my\
    \ $path_sum = 0;\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n            dfs($grid,\
    \ $visited, $i, $j, $k - 1, $path, $path_sum, $min_path, $min_path_sum);\n   \
    \         $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n}",
  "    my $n = scalar(@$grid);\n    my $min_path = [];\n    my $min_sum = $n * $n\
    \ + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_hash = {};\n    my\
    \ $min_path_hash_sum = {};\n    my $min_path_hash_sum_sum = {};\n    my $min_path_hash_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum = {};\n    my $min_path_hash_sum_sum_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = {};\n\
    \    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = {};\n   \
    \ my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = {};\n  \
    \  my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = {};\n\
    \    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = {};\n    my $min_path_hash_sum_sum_sum_sum_sum_sum_sum_sum_sum", "    my @result;\n\
    \    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n    my $min_i = 0;\n\
    \    my $min_j = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n\
    \            if ($grid->[$i][$j] < $min) {\n                $min = $grid->[$i][$j];\n\
    \                $min_i = $i;\n                $min_j = $j;\n            }\n \
    \       }\n    }\n    my @path = ($min);\n    my $i = $min_i;\n    my $j = $min_j;\n\
    \    while (scalar(@path) < $k) {\n        my $min = $grid->[$i][$j];\n      \
    \  my $min_i = $i;\n        my $min_j = $j;\n        if ($i > 0 && $grid->[$i-1][$j]\
    \ < $min) {\n            $min = $grid->[$i-1][$j];\n            $min_i = $i-1;\n\
    \            $min_j = $j;\n        }\n        if ($i < $n-1 && $grid->[$i+1][$j]\
    \ < $min) {\n            $min = $grid->[$i+1][$j];\n            $min_i = $i+1;\n\
    \            $min_j = $j;\n        }\n        if ($j > 0 && $grid->[$i][$j-1]\
    \ < $min) {\n            $min = $grid->[$i][$j-1];\n            $min_i = $i;\n\
    \            $min_j = $j-1;\n        }\n        if ($j < $n-1 && $grid->[$i][$j+1]\
    \ < $min) {\n            $min = $grid->[$i][$j+1];\n            $min_i = $i;\n\
    \            $min_j = $j+1;\n        }\n        push @path, $min", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n * $k;\n    my $minPathSumGrid = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $minPathSumGrid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            if ($i > 0) {\n                my $newSum\
    \ = $minPathSumGrid->[$i - 1]->[$j] + $grid->[$i]->[$j];\n                if ($newSum\
    \ < $minPathSumGrid->[$i]->[$j]) {\n                    $minPathSumGrid->[$i]->[$j]\
    \ = $newSum;\n                }\n            }\n            if ($j > 0) {\n  \
    \              my $newSum = $minPathSumGrid->[$i]->[$j - 1] + $grid->[$i]->[$j];\n\
    \                if ($newSum < $minPathSumGrid->[$i]->[$j]) {\n              \
    \      $minPathSumGrid->[$i]->[$j] = $newSum;\n                }\n           \
    \ }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $newSum = $minPathSumGrid->[$i]->[$j] + $grid->[$i]->[$j];\n\
    \            if ($newSum < $minPathSum) {\n                $minPathSum = $newSum;\n\
    \                $minPath = [$grid->[$i]->[$j]];\n            }\n        }\n \
    \   }\n    return $minPath;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $visited = [];\n            for my $x\
    \ (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n               \
    \     $visited->[$x][$y] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n  \
    \          if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n\
    \                $min_path = $res->[1];\n            }\n        }\n    }\n   \
    \ return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n  \
    \  my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum =\
    \ $min_sum;\n    my $min_path_sum_index = 0;\n    my $min_path_sum_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index = 0;\n    my $min_path_sum_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index = 0;\n    my $min_path_sum_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_sum_index_index_index_index_index_index_index_index = 0;\n \
    \   my $min_path_sum_index_index_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_sum_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2\
    \ = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3 = [];\n    my $minPathSum4\
    \ = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5 = $n * $n + 1;\n\
    \    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath6\
    \ = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7 = [];\n    my $minPathSum8\
    \ = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9 = $n * $n + 1;\n\
    \    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath10\
    \ = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11 = [];\n    my\
    \ $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my $minPathSum13\
    \ = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14 = $n * $n + 1;\n\
    \    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath15\
    \ = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16 = [];\n    my\
    \ $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum19 = $n * $n + 1;\n\
    \    my $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my @path;\n    my $min_path;\n    my $min_sum = $n * $n + 1;\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $sum =\
    \ 0;\n            my @path;\n            my $path_ref = \\@path;\n           \
    \ my $visited = [];\n            for my $i (0 .. $n - 1) {\n                for\
    \ my $j (0 .. $m - 1) {\n                    $visited->[$i][$j] = 0;\n       \
    \         }\n            }\n            $visited->[$i][$j] = 1;\n            $path_ref->[0]\
    \ = $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n            dfs($grid,\
    \ $i, $j, $visited, $path_ref, $sum, $k, $min_sum, $min_path);\n        }\n  \
    \  }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSumIndex\
    \ = 0;\n    my $minPathSumIndex2 = 0;\n    my $minPathSumIndex3 = 0;\n    my $minPathSumIndex4\
    \ = 0;\n    my $minPathSumIndex5 = 0;\n    my $minPathSumIndex6 = 0;\n    my $minPathSumIndex7\
    \ = 0;\n    my $minPathSumIndex8 = 0;\n    my $minPathSumIndex9 = 0;\n    my $minPathSumIndex10\
    \ = 0;\n    my $minPathSumIndex11 = 0;\n    my $minPathSumIndex12 = 0;\n    my\
    \ $minPathSumIndex13 = 0;\n    my $minPathSumIndex14 = 0;\n    my $minPathSumIndex15\
    \ = 0;\n    my $minPathSumIndex16 = 0;\n    my $minPathSumIndex17 = 0;\n    my\
    \ $minPathSumIndex18 = 0;\n    my $minPathSumIndex19 = 0;\n    my $minPathSumIndex20\
    \ = 0;\n    my $minPathSumIndex21 = 0;\n    my $minPathSumIndex22 = 0;\n    my\
    \ $minPathSumIndex23 = 0;\n    my $minPathSumIndex24 = 0;\n    my $minPathSumIndex25\
    \ = 0;\n    my $minPathSumIndex26 = 0;\n    my $minPathSumIndex27 = 0;\n    my\
    \ $minPathSumIndex28 = 0;\n    my $minPathSumIndex29 = 0;\n    my $minPathSumIndex30\
    \ = 0;\n    my $minPathSumIndex31 = 0;\n    my $minPathSumIndex32 = 0;\n    my\
    \ $minPathSumIndex33 = 0;\n    my $minPathSumIndex34 = 0;\n    my $minPathSumIndex35\
    \ = 0;\n    my $minPathSumIndex36 = 0;\n    my $minPathSumIndex37 = 0;\n    my\
    \ $minPathSumIndex38 = 0;\n", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $m * $k;\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n      \
    \      my $path_sum = 0;\n            $visited->[$i][$j] = 1;\n            $path_sum\
    \ += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n           \
    \ dfs($grid, $i, $j, $k - 1, $path, $path_sum, $visited, $min_path, $min_path_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my\
    \ $min_sum = $n * $m * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited);\n     \
    \       $visited->[$i][$j] = 0;\n            if ($sum < $min_sum) {\n        \
    \        $min_sum = $sum;\n                $min = $path;\n            }\n    \
    \    }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n    my $m =\
    \ scalar(@{$grid->[0]});\n    my $min = undef;\n    my $min_path = undef;\n  \
    \  for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
    \ = [$grid->[$i][$j]];\n            my $paths = {};\n            $paths->{$i}{$j}\
    \ = 1;\n            my $min_path_candidate = minPathHelper($grid, $i, $j, $k-1,\
    \ $path, $paths);\n            if (!defined($min) || $min_path_candidate < $min)\
    \ {\n                $min = $min_path_candidate;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @minPath;\n\
    \    my $minSum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [$grid->[$i][$j]];\n            my\
    \ $sum = $grid->[$i][$j];\n            my $visited = [[$i, $j]];\n           \
    \ my $paths = [[$i, $j]];\n            while (scalar(@$path) < $k) {\n       \
    \         my $newPaths = [];\n                for my $path (@$paths) {\n     \
    \               my $i = $path->[0];\n                    my $j = $path->[1];\n\
    \                    if ($i > 0 && !grep {$_->[0] == $i - 1 && $_->[1] == $j}\
    \ @$visited) {\n                        push @$newPaths, [$i - 1, $j];\n     \
    \                   push @$visited, [$i - 1, $j];\n                    }\n   \
    \                 if ($i < $n - 1 && !grep {$_->[0] == $i + 1 && $_->[1] == $j}\
    \ @$visited) {\n                        push @$newPaths, [$i + 1, $j];\n     \
    \                   push @$visited, [$i + 1, $j];\n                    }\n   \
    \                 if ($j > 0 && !grep {$_->[0] == $i && $_->[1] == $j - 1} @$visited)\
    \ {\n                        push @$newPaths, [$i, $j - 1];\n                \
    \        push @$visited, [$i, $j - 1];\n                    }\n              \
    \      if ($j < $m - 1 && !grep {$_->[0] == $i && $_->[1] == $j + 1} @$visited)\
    \ {\n                        push @$newPaths, [$i, $j + 1];\n                \
    \        push @$visited,", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $m * $k;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = {};\n            my $queue =\
    \ [[$i, $j]];\n            while (@$queue) {\n                my $cur = shift\
    \ @$queue;\n                my($x, $y) = @$cur;\n                if ($visited->{\"\
    $x,$y\"}) {\n                    next;\n                }\n                $visited->{\"\
    $x,$y\"} = 1;\n                push @$path, $grid->[$x][$y];\n               \
    \ $sum += $grid->[$x][$y];\n                if (@$path == $k) {\n            \
    \        if ($sum < $minSum) {\n                        $minSum = $sum;\n    \
    \                    $minPath = $path;\n                    }\n              \
    \      last;\n                }\n                for my $d (0 .. 3) {\n      \
    \              my $x1 = $x + $dx[$d];\n                    my $y1 = $y + $dy[$d];\n\
    \                    if ($x1 >= 0 && $x1 < $n && $y1 >= 0 && $y1 < $m) {\n   \
    \                     push @$queue, [$x1, $y1];\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return $minPath;\n}", "  \
    \  my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n * $k;\n    my $path = [];\n    my $path_sum\
    \ = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n   \
    \ my $dfs = sub {\n        my($i, $j, $k) = @_;\n        if ($k == 0) {\n    \
    \        if ($path_sum < $min_path_sum) {\n                $min_path_sum = $path_sum;\n\
    \                $min_path = [@$path];\n            }\n            return;\n \
    \       }\n        if ($i > 0 && !$visited->[$i - 1][$j]) {\n            $visited->[$i\
    \ - 1][$j] = 1;\n            push @$path, $grid->[$i - 1][$j];\n            $path_sum\
    \ += $grid->[$i - 1][$j];\n            $dfs->($i - 1, $j, $k - 1);\n         \
    \   pop @$path;\n            $path_sum -= $grid->[$i - 1][$j];\n            $visited->[$i\
    \ - 1][$j] = 0;\n        }\n        if ($i < $n - 1 && !$visited->[$i + 1][$j])\
    \ {\n            $visited->[$i + 1][$j] = 1;\n            push @$path, $grid->[$i\
    \ + 1][$j];\n            $path_sum += $grid->[$i + 1][$j];\n            $dfs->($i\
    \ + 1, $j, $k - 1);\n            pop @$path;\n            $path_sum -= $grid->[$i\
    \ + 1][$j];\n            $visited->[$i + 1][$j] = 0;", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m *\
    \ $n * $m;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j <\
    \ $m; $j++) {\n            my $path = [];\n            my $sum = 0;\n        \
    \    $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n    \
    \        $sum += $grid->[$i][$j];\n            dfs($grid, $visited, $path, $sum,\
    \ $i, $j, $k, $min_path, $min_sum);\n            $visited->[$i][$j] = 0;\n   \
    \     }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                my $row = [];\n\
    \                for my $j (0 .. $m - 1) {\n                    push @$row, 0;\n\
    \                }\n                push @$visited, $row;\n            }\n   \
    \         dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my\
    \ $minSum = $n * $m * $n * $m;\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my\
    \ $sum = 0;\n            $visited->[$i][$j] = 1;\n            $path->[0] = $grid->[$i][$j];\n\
    \            $sum += $grid->[$i][$j];\n            my $ret = dfs($grid, $visited,\
    \ $path, $sum, $i, $j, $k, $n, $m);\n            if ($ret->[0] < $minSum) {\n\
    \                $minSum = $ret->[0];\n                $minPath = $ret->[1];\n\
    \            }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n +", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths =\
    \ {};\n    my $paths = {};\n    my $path = [];\n    my $paths_to_check = [];\n\
    \    my $paths_to_check_next = [];\n    my $paths_to_check_next_next = [];\n \
    \   my $paths_to_check_next_next_next = [];\n    my $paths_to_check_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next = [];\n   \
    \ my $paths_to_check_next_next_next_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n   ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath18 = [];\n    my", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $m + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $x (0 .. $n - 1) {\n                for my $y (0 ..\
    \ $m - 1) {\n                    $visited->[$x][$y] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n            my $res\
    \ = dfs($grid, $i, $j, $k - 1, $path, $sum, $visited);\n            if ($res->[0]\
    \ < $min_sum) {\n                $min_sum = $res->[0];\n                $min_path\
    \ = $res->[1];\n            }\n        }\n    }\n    return $min_path;\n}", " \
    \   my $n = @$grid;\n    my @path = ();\n    my $min = $n * $n + 1;\n    my @minPath\
    \ = ();\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n  \
    \          my @path = ($grid->[$i][$j]);\n            my $min = $n * $n + 1;\n\
    \            my @minPath = ();\n            dfs($grid, $i, $j, $k, \\@path, \\\
    $min, \\@minPath);\n            if ($min <= $k) {\n                return @minPath;\n\
    \            }\n        }\n    }\n    return @minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my @path = ();\n    my $min = $n * $n + 1;\n    my @minPath = ();\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            my @path\
    \ = ();\n            my $val = $grid->[$i][$j];\n            push @path, $val;\n\
    \            my $path = _minPath($grid, $i, $j, $k - 1, \\@path);\n          \
    \  if ($path < $min) {\n                $min = $path;\n                @minPath\
    \ = @path;\n            }\n        }\n    }\n    return @minPath;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath =\
    \ [];\n    my $minPathSum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $pathSum\
    \ = 0;\n            my $visited = [];\n            for my $i (0 .. $n - 1) {\n\
    \                for my $j (0 .. $m - 1) {\n                    $visited->[$i][$j]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum);\n        \
    \    if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    my $n = @$grid;\n    my @path;\n    my $min = $n * $n;\n\
    \    my @min_path;\n    my $min_path_found = 0;\n    my @visited;\n    my @queue;\n\
    \    my $queue_size = 0;\n    my $i;\n    my $j;\n    my $x;\n    my $y;\n   \
    \ my $v;\n    my $w;\n    my $path_len;\n    my $path_sum;\n    my $path_sum_found;\n\
    \    my $path_sum_min;\n    my $path_sum_min_found;\n    my $path_sum_min_path;\n\
    \    my $path_sum_min_path_found;\n    my $path_sum_min_path_len;\n    my $path_sum_min_path_len_found;\n\
    \    my $path_sum_min_path_len_path;\n    my $path_sum_min_path_len_path_found;\n\
    \    my $path_sum_min_path_len_path_sum;\n    my $path_sum_min_path_len_path_sum_found;\n\
    \    my $path_sum_min_path_len_path_sum_path;\n    my $path_sum_min_path_len_path_sum_path_found;\n\
    \    my $path_sum_min_path_len_path_sum_path_len;\n    my $path_sum_min_path_len_path_sum_path_len_found;\n\
    \    my $path_sum_min_path_len_path_sum_path_len_path;\n    my $path_sum_min_path_len_path_sum_path_len_path_found;\n\
    \    my $path_sum_min_path_len_path_sum_path_len_path_sum;\n    my $path_sum_min_path_len_path_sum_path_len_path_sum_found;\n\
    \    my $path_sum_min_path_len_path_sum_path_len_path_sum_path;\n    my $path_sum_min",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
    \ $min_path_sum = $n * $m * $k;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_dir\
    \ = 0;\n    my $min_path_sum_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir =\
    \ 0;\n    my $min_path_sum_dir_idx_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx = 0;\n  \
    \  my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_", "    my $n = @$grid;\n    my $m =\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n  \
    \  my $min_path_sum = $min_sum;\n    my $min_path_sum_index = 0;\n    my $min_path_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index = 0;\n    my $min_path_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index = 0;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_", "    my\
    \ $n = scalar(@$grid);\n    my @path;\n    my $min_path = $grid->[0][0];\n   \
    \ my $min_path_index = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1)\
    \ {\n            if ($grid->[$i][$j] < $min_path) {\n                $min_path\
    \ = $grid->[$i][$j];\n                $min_path_index = $i * $n + $j;\n      \
    \      }\n        }\n    }\n    my $i = $min_path_index / $n;\n    my $j = $min_path_index\
    \ % $n;\n    my @visited = ($min_path_index);\n    my $min_path_value = $min_path;\n\
    \    my $min_path_length = 1;\n    my $min_path_count = 1;\n    my $min_path_sum\
    \ = $min_path;\n    my $min_path_sum_count = 1;\n    my $min_path_sum_value =\
    \ $min_path;\n    my $min_path_sum_length = 1;\n    my $min_path_sum_index = $min_path_index;\n\
    \    my $min_path_sum_visited = [$min_path_index];\n    my $min_path_sum_path\
    \ = [$min_path];\n    my $min_path_sum_path_index = 0;\n    my $min_path_sum_path_visited\
    \ = [$min_path_index];\n    my $min_path_sum_path_count = 1;\n    my $min_path_sum_path_value\
    \ = $min_path;\n    my $min_path_sum_path_length = 1;\n    my $min_path_sum_path_sum\
    \ = $min_path;\n    my $min_path_sum_path_sum_count = 1;\n    my $min_path_sum_path_sum_value\
    \ = $min_path;\n    my $min_path_sum_path_sum_length = 1;\n   ", "    my $n =\
    \ @$grid;\n    my @path;\n    my $min_path;\n    my $min_path_sum = $n * $n +\
    \ 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n     \
    \       my $path = [$grid->[$i][$j]];\n            my $path_sum = $grid->[$i][$j];\n\
    \            my $path_len = 1;\n            my $visited = {};\n            $visited->{\"\
    $i,$j\"} = 1;\n            find_path($grid, $i, $j, $path, $path_sum, $path_len,\
    \ $k, $visited);\n            if ($path_sum < $min_path_sum) {\n             \
    \   $min_path_sum = $path_sum;\n                $min_path = $path;\n         \
    \   }\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $min_path = [$min];\n\
    \    my $min_paths = {};\n    my $paths = {};\n    my $path = [];\n    my $paths_to_check\
    \ = [];\n    my $paths_to_check_next = [];\n    my $paths_to_check_next_next =\
    \ [];\n    my $paths_to_check_next_next_next = [];\n    my $paths_to_check_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next = [];\n   \
    \ my $paths_to_check_next_next_next_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n   ", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPathSum3 =\
    \ $minSum;\n    my $minPath3 = [];\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          my $path = [];\n            my $pathSum = 0;\n            my $pathSum2\
    \ = 0;\n            my $path2 = [];\n            my $pathSum3 = 0;\n         \
    \   my $path3 = [];\n            my $pathSum4 = 0;\n            my $path4 = [];\n\
    \            my $pathSum5 = 0;\n            my $path5 = [];\n            my $pathSum6\
    \ = 0;\n            my $path6 = [];\n            my $pathSum7 = 0;\n         \
    \   my $path7 = [];\n            my $pathSum8 = 0;\n            my $path8 = [];\n\
    \            my $pathSum9 = 0;\n            my $path9 = [];\n            my $pathSum10\
    \ = 0;\n            my $path10 = [];\n            my $pathSum11 = 0;\n       \
    \     my $path11 = [];\n            my $pathSum12 = 0;\n            my $path12\
    \ = [];\n            my $pathSum13 = 0;\n            my $path13 = [];\n      \
    \      my $pathSum14 = 0;\n            my $path14 = [];\n            my $pathSum15\
    \ = 0;\n            my $path15 = [];\n            my $pathSum16 = 0;\n       \
    \     my $path16 = [];\n            my $pathSum17 = 0;\n            my $path17\
    \ = [];\n            my $pathSum18 = 0;\n            my $path18 = [];\n      \
    \      my $pathSum19 = 0;\n            my $path19 = [];\n            my $pathSum20\
    \ = 0", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n   \
    \ my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n\
    \    my $path = [];\n    my $path_sum = 0;\n    my $visited = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $k)\
    \ = @_;\n        if ($k == 0) {\n            if ($path_sum < $min_path_sum) {\n\
    \                $min_path_sum = $path_sum;\n                $min_path = [@$path];\n\
    \            }\n            return;\n        }\n        if ($i > 0 && !$visited->[$i\
    \ - 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n            push @$path,\
    \ $grid->[$i - 1][$j];\n            $path_sum += $grid->[$i - 1][$j];\n      \
    \      $dfs->($i - 1, $j, $k - 1);\n            pop @$path;\n            $path_sum\
    \ -= $grid->[$i - 1][$j];\n            $visited->[$i - 1][$j] = 0;\n        }\n\
    \        if ($i < $n - 1 && !$visited->[$i + 1][$j]) {\n            $visited->[$i\
    \ + 1][$j] = 1;\n            push @$path, $grid->[$i + 1][$j];\n            $path_sum\
    \ += $grid->[$i + 1][$j];\n            $dfs->($i + 1, $j, $k - 1);\n         \
    \   pop @$path;\n            $path_sum -= $grid->[$i + 1][$j];", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my\
    \ $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3 = [];\n\
    \    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum19\
    \ = $n * $n +", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathValue = [];\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n\
    \            my $pathValue = [];\n            my $visited = [];\n            for\
    \ (my $i = 0; $i < $n; $i++) {\n                for (my $j = 0; $j < $m; $j++)\
    \ {\n                    $visited->[$i][$j] = 0;\n                }\n        \
    \    }\n            $visited->[$i][$j] = 1;\n            $path->[0] = [$i, $j];\n\
    \            $pathValue->[0] = $grid->[$i][$j];\n            findMinPath($grid,\
    \ $k, $i, $j, $path, $pathValue, $visited, $minPath, $minPathValue);\n       \
    \ }\n    }\n    return $minPathValue;\n}", "    my $n = @$grid;\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $n - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $m + 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $m + 1;\n\
    \    my $min_path_len = $n * $m + 1;\n    my $min_path_len_sum = $n * $m + 1;\n\
    \    my $min_path_len_path = [];\n    my $min_path_len_path_sum = $n * $m + 1;\n\
    \    my $min_path_len_path_len = $n * $m + 1;\n    my $min_path_len_path_len_sum\
    \ = $n * $m + 1;\n    my $min_path_len_path_len_path = [];\n    my $min_path_len_path_len_path_sum\
    \ = $n * $m + 1;\n    my $min_path_len_path_len_path_len = $n * $m + 1;\n    my\
    \ $min_path_len_path_len_path_len_sum = $n * $m + 1;\n    my $min_path_len_path_len_path_len_path\
    \ = [];\n    my $min_path_len_path_len_path_len_path_sum = $n * $m + 1;\n    my\
    \ $min_path_len_path_len_path_len_path_len = $n * $m + 1;\n    my $min_path_len_path_len_path_len_path_len_sum\
    \ = $n * $m + 1;\n    my $min_path_len_path_len_path_len_path_len_path = [];\n\
    \    my $min_path_len_path_len_path_len_path_len_path_sum = $n * $m + 1;\n   \
    \ my $min_path_len_path_len_path_len_path_len_path_len = $n * $m + 1;\n    my\
    \ $min_path_len_path_len_path", "    my $n = @$grid;\n    my @path;\n    my $min\
    \ = $n * $n;\n    my @minPath;\n    my $minPath = \\@minPath;\n    my $path =\
    \ \\@path;\n    my $i = 0;\n    my $j = 0;\n    my $visited = {};\n    my $visitedRef\
    \ = \\$visited;\n    my $minRef = \\$min;\n    my $minPathRef = \\$minPath;\n\
    \    my $pathRef = \\$path;\n    my $gridRef = \\$grid;\n    my $nRef = \\$n;\n\
    \    my $iRef = \\$i;\n    my $jRef = \\$j;\n    my $kRef = \\$k;\n    my $result\
    \ = [];\n    my $resultRef = \\$result;\n    my $result = dfs($gridRef, $nRef,\
    \ $iRef, $jRef, $kRef, $pathRef, $visitedRef, $minRef, $minPathRef, $resultRef);\n\
    \    return @$result;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                  \
    \  if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n     \
    \               }\n                }\n                if ($i < $n - 1) {\n   \
    \                 my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j >\
    \ 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $m - 1) {\n                    my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_2 = $n * $n\
    \ * $k;\n    my $min_path_sum_3 = $n * $n * $k;\n    my $min_path_sum_4 = $n *\
    \ $n * $k;\n    my $min_path_sum_5 = $n * $n * $k;\n    my $min_path_sum_6 = $n\
    \ * $n * $k;\n    my $min_path_sum_7 = $n * $n * $k;\n    my $min_path_sum_8 =\
    \ $n * $n * $k;\n    my $min_path_sum_9 = $n * $n * $k;\n    my $min_path_sum_10\
    \ = $n * $n * $k;\n    my $min_path_sum_11 = $n * $n * $k;\n    my $min_path_sum_12\
    \ = $n * $n * $k;\n    my $min_path_sum_13 = $n * $n * $k;\n    my $min_path_sum_14\
    \ = $n * $n * $k;\n    my $min_path_sum_15 = $n * $n * $k;\n    my $min_path_sum_16\
    \ = $n * $n * $k;\n    my $min_path_sum_17 = $n * $n * $k;\n    my $min_path_sum_18\
    \ = $n * $n * $k;\n    my $min_path_sum_19 = $n * $n * $k;\n    my $min_path_sum_20\
    \ = $n * $n * $k;\n    my $min_path_sum_21 = $n * $n * $k;\n    my $min_path_sum_22\
    \ = $n * $n * $k;\n    my $min_path_sum_23 =", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    my $queue = [];\n    push @$queue, [0,\
    \ 0, $grid->[0]->[0]];\n    $min_path_sum_grid->[0]->[0] = $grid->[0]->[0];\n\
    \    while (scalar(@$queue) > 0) {\n        my $curr = shift @$queue;\n      \
    \  my($i, $j, $sum) = @$curr;\n        if ($i == $n - 1 && $j == $m - 1) {\n \
    \           if ($sum < $min_path_sum) {\n                $min_path_sum = $sum;\n\
    \                $min_path = [$grid->[$i]->[$j]];\n            }\n        }\n\
    \        if ($i > 0 && $sum + $grid->[$i - 1]->[$j] < $min_path_sum_grid->[$i\
    \ - 1]->[$j]) {\n            push @$queue, [$i - 1, $j, $sum + $grid->[$i - 1]->[$j]];\n\
    \            $min_path_sum_grid->[$i - 1]->[$j] = $sum + $grid->[$i - 1]->[$j];\n\
    \        }\n        if ($i < $n - 1 && $sum + $grid->[$i + 1]->[$j] < $min_path_sum_grid->[$i\
    \ + 1]->[$j]) {\n            push @$queue, [$i + 1, $j, $sum + $grid->", "   \
    \ my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
    \ $min_path_sum = $n * $m * $k;\n    my $path = [];\n    my $path_sum = 0;\n \
    \   my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $path_sum = $grid->[$i][$j];\n\
    \            dfs($grid, $n, $m, $i, $j, $k, $visited, $path, $path_sum, $min_path,\
    \ $min_path_sum);\n            $visited->[$i][$j] = 0;\n        }\n    }\n   \
    \ return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n  \
    \  my $path = [];\n    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my\
    \ $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_len\
    \ = $n * $n * $k;\n    my $min_path_sum_len = $n * $n * $k;\n    my $min_path_sum_len_path\
    \ = [];\n    my $min_path_sum_len_path_sum = $n * $n * $k;\n    my $min_path_sum_len_path_len\
    \ = $n * $n * $k;\n    my $min_path_sum_len_path_sum_len = $n * $n * $k;\n   \
    \ my $min_path_sum_len_path_sum_len_path = [];\n    my $min_path_sum_len_path_sum_len_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_len_path_sum_len_path_len = $n * $n *\
    \ $k;\n    my $min_path_sum_len_path_sum_len_path_sum_len = $n * $n * $k;\n  \
    \  my $min_path_sum_len_path_sum_len_path_sum_len_path = [];\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_len\
    \ = $n * $n * $k;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum_len\
    \ = $n * $n * $k;\n    my $min_path_sum_len_path_sum_len_path_sum_len_path_sum_len_path\
    \ = [];\n    my $min_path", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_value = $n * $n;\n    my $min_path_length\
    \ = $k;\n    my $min_path_sum = $k * $min_path_value;\n    my $path = [];\n  \
    \  my $path_value = 0;\n    my $path_length = 0;\n    my $path_sum = 0;\n    my\
    \ $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $dfs = sub\
    \ {\n        my($i, $j) = @_;\n        if ($path_length == $k) {\n           \
    \ if ($path_value < $min_path_value) {\n                $min_path_value = $path_value;\n\
    \                $min_path_length = $path_length;\n                $min_path_sum\
    \ = $path_sum;\n                $min_path = [@$path];\n            } elsif ($path_value\
    \ == $min_path_value) {\n                if ($path_length < $min_path_length)\
    \ {\n                    $min_path_value = $path_value;\n                    $min_path_length\
    \ = $path_length;\n                    $min_path_sum = $path_sum;\n          \
    \          $min_path = [@$path];\n                } elsif ($path_length == $min_path_length)\
    \ {\n                    if ($path_sum < $min_path_sum) {\n                  \
    \      $min_path_value = $path_value;\n                        $min_path_length\
    \ = $path_length;\n                        $min_path_sum = $path_sum;\n      \
    \                  $min_path = [@$path];\n                    }\n            \
    \    }\n            }\n            return;\n        }\n        if ($i > 0 && !$visited->[$i\
    \ - 1][$j]) {\n            $visited->[$i - 1", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $pathSum = 0;\n           \
    \ my $visited = [];\n            for my $i (0 .. $n - 1) {\n                for\
    \ my $j (0 .. $m - 1) {\n                    $visited->[$i][$j] = 0;\n       \
    \         }\n            }\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $pathSum);\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $pathSum = 0;\n           \
    \ my $visited = [];\n            for my $i (0 .. $n - 1) {\n                for\
    \ my $j (0 .. $m - 1) {\n                    $visited->[$i][$j] = 0;\n       \
    \         }\n            }\n            dfs($grid, $i, $j, $k, $path, $pathSum,\
    \ $visited, $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPaths = [];\n\
    \    my $minPathsSum = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $paths = [];\n    \
    \        my $pathSum = 0;\n            my $pathsSum = [];\n            my $sum\
    \ = 0;\n            my $pathsCount = 0;\n            my $pathsCounts = [];\n \
    \           my $pathsCountsSum = [];\n            my $pathsCountsSumCount = 0;\n\
    \            my $pathsCountsSumCounts = [];\n            my $pathsCountsSumCountsSum\
    \ = [];\n            my $pathsCountsSumCountsSumCount = 0;\n            my $pathsCountsSumCountsSumCounts\
    \ = [];\n            my $pathsCountsSumCountsSumCountsSum = [];\n            my\
    \ $pathsCountsSumCountsSumCountsSumCount = 0;\n            my $pathsCountsSumCountsSumCountsSumCounts\
    \ = [];\n            my $pathsCountsSumCountsSumCountsSumCountsSum = [];\n   \
    \         my $pathsCountsSumCountsSumCountsSumCountsSumCount = 0;\n          \
    \  my $pathsCountsSumCountsSumCountsSumCountsSumCounts = [];\n            my $pathsCountsSumCountsSumCountsSumCountsSumCountsSum\
    \ = [];\n            my $pathsCountsSumCountsSumCountsSumCountsSumCountsSumCount\
    \ = 0;\n            my $pathsCountsSumCountsSumCountsSumCountsSumCountsSumCounts\
    \ = [];\n            my $pathsCountsSumCountsSumCountsSumCountsSumCountsSumCountsSum\
    \ = [];\n            my $pathsCountsSumCountsSumCountsSumCountsSumCountsSumCountsSumCount\
    \ = 0;\n            my $pathsCountsSumCountsSum", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n   \
    \ my $min_path = [];\n    my $min_path_sum = $n * $m + 1;\n    my $min_path_len\
    \ = $n * $m + 1;\n    my $min_path_len_sum = $n * $m + 1;\n    my $min_path_len_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum = $n * $m + 1;\n    my $min_path_len_sum_path_sum_path\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          my $path = [];\n            my $path_sum = 0;\n            my $path_len\
    \ = 0;\n            my $path_len_sum = 0;\n            my $path_len_sum_path =\
    \ [];\n            my $path_len_sum_path_sum = 0;\n            my $path_len_sum_path_sum_path\
    \ = [];\n            my $visited = {};\n            my $queue = [[$i, $j]];\n\
    \            while (@$queue) {\n                my $cell = shift @$queue;\n  \
    \              my($x, $y) = @$cell;\n                if ($visited->{\"$x,$y\"\
    }) {\n                    next;\n                }\n                $visited->{\"\
    $x,$y\"} = 1;\n                push @$path, $grid->[$x][$y];\n               \
    \ $path_sum += $grid->[$x][$y];\n                $path_len++;\n              \
    \  if ($path_len == $k) {\n                    if ($path_sum < $min_sum) {\n \
    \                       $min = $path;\n                        $min_sum = $path_sum;\n\
    \                    }\n                    if ($path_len_sum < $min_path_len_sum)\
    \ {\n                        $min_path = $path_len_sum_path;\n               \
    \         $min_", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_k = $n * $n + 1;\n    my $min_path_k =\
    \ [];\n    my $min_path_sum_k_index = 0;\n    my $min_path_sum_k_index_k = 0;\n\
    \    my $min_path_sum_k_index_k_min = 0;\n    my $min_path_sum_k_index_k_min_k\
    \ = 0;\n    my $min_path_sum_k_index_k_min_k_min = 0;\n    my $min_path_sum_k_index_k_min_k_min_k\
    \ = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k\
    \ = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k_min = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k_min_k\
    \ = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k_min_k_min = 0;\n    my\
    \ $min_path_sum_k_index_k_min_k_min_k_min_k_min_k_min_k = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k_min_k_min_k_min\
    \ = 0;\n    my $min_path_sum_k_index_k_min_k_min_k_min_k_min_k_min_k_min_k = 0;\n",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     $visited->[$i]->[$j] = 1;\n            dfs($grid, $i, $j, $k, $path, $sum,\
    \ $visited, $min, $min_sum);\n            $visited->[$i]->[$j] = 0;\n        }\n\
    \    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = {};\n    my $minPath = [];\n    my $minPathSum = $n * $n +\
    \ 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum4\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum8\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum9 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum12 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum14 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum17 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum18\
    \ = $n * $n + 1;\n    my $minPath", "    my @minPath;\n    my $minPathSum = 0;\n\
    \    my $minPathSumIndex = 0;\n    my $minPathSumIndex2 = 0;\n    my $minPathSumIndex3\
    \ = 0;\n    my $minPathSumIndex4 = 0;\n    my $minPathSumIndex5 = 0;\n    my $minPathSumIndex6\
    \ = 0;\n    my $minPathSumIndex7 = 0;\n    my $minPathSumIndex8 = 0;\n    my $minPathSumIndex9\
    \ = 0;\n    my $minPathSumIndex10 = 0;\n    my $minPathSumIndex11 = 0;\n    my\
    \ $minPathSumIndex12 = 0;\n    my $minPathSumIndex13 = 0;\n    my $minPathSumIndex14\
    \ = 0;\n    my $minPathSumIndex15 = 0;\n    my $minPathSumIndex16 = 0;\n    my\
    \ $minPathSumIndex17 = 0;\n    my $minPathSumIndex18 = 0;\n    my $minPathSumIndex19\
    \ = 0;\n    my $minPathSumIndex20 = 0;\n    my $minPathSumIndex21 = 0;\n    my\
    \ $minPathSumIndex22 = 0;\n    my $minPathSumIndex23 = 0;\n    my $minPathSumIndex24\
    \ = 0;\n    my $minPathSumIndex25 = 0;\n    my $minPathSumIndex26 = 0;\n    my\
    \ $minPathSumIndex27 = 0;\n    my $minPathSumIndex28 = 0;\n    my $minPathSumIndex29\
    \ = 0;\n    my $minPathSumIndex30 = 0;\n    my $minPathSumIndex31 = 0;\n    my\
    \ $minPathSumIndex32 = 0;\n    my $minPathSumIndex33 = 0;\n    my $minPathSumIndex34\
    \ = 0;\n    my $minPathSumIndex35 = 0;\n    my $minPathSumIndex36 = 0;\n    my\
    \ $minPathSumIndex37 = 0;\n    my $minPathSumIndex38 = 0;\n    my $minPathSumIndex39\
    \ = 0;\n    my $minPathSumIndex40 = 0;\n    my $minPathSumIndex41 = 0;\n    my\
    \ $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my\
    \ $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $minSumPath = [];\n \
    \   my $minSumPaths = [];\n    my $minSumPathsSum = [];\n    my $minSumPathsSumPath\
    \ = [];\n    my $minSumPathsSumPaths = [];\n    my $minSumPathsSumPathsSum = [];\n\
    \    my $minSumPathsSumPathsSumPath = [];\n    my $minSumPathsSumPathsSumPaths\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            my $path = [];\n            my $sum = $grid->[$i][$j];\n\
    \            my $sumPath = [];\n            my $sumPaths = [];\n            my\
    \ $sumPathsSum = [];\n            my $sumPathsSumPath = [];\n            my $sumPathsSumPaths\
    \ = [];\n            my $sumPathsSumPathsSum = [];\n            my $sumPathsSumPathsSumPath\
    \ = [];\n            my $sumPathsSumPathsSumPaths = [];\n            push @$path,\
    \ $grid->[$i][$j];\n            push @$sumPath, $grid->[$i][$j];\n           \
    \ push @$sumPaths, $sumPath;\n            push @$sumPathsSum, $sum;\n        \
    \    push @$sumPathsSumPath, $sumPath;\n            push @$sumPathsSumPaths, $sumPaths;\n\
    \            push @$sumPathsSumPathsSum, $sum;\n            push @$sumPathsSumPathsSumPath,\
    \ $sumPath;\n            push @$sumPathsSumPathsSumPaths, $sumPaths;\n       \
    \     my $stack = [];\n            push @$stack, [$i, $j, $path, $sum, $sumPath,\
    \ $sumPaths, $sumPathsSum, $sumPathsSumPath, $sumPathsSumPath", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathVal\
    \ = [];\n    my $minPathValHash = {};\n    my $minPathValHash2 = {};\n    my $minPathValHash3\
    \ = {};\n    my $minPathValHash4 = {};\n    my $minPathValHash5 = {};\n    my\
    \ $minPathValHash6 = {};\n    my $minPathValHash7 = {};\n    my $minPathValHash8\
    \ = {};\n    my $minPathValHash9 = {};\n    my $minPathValHash10 = {};\n    my\
    \ $minPathValHash11 = {};\n    my $minPathValHash12 = {};\n    my $minPathValHash13\
    \ = {};\n    my $minPathValHash14 = {};\n    my $minPathValHash15 = {};\n    my\
    \ $minPathValHash16 = {};\n    my $minPathValHash17 = {};\n    my $minPathValHash18\
    \ = {};\n    my $minPathValHash19 = {};\n    my $minPathValHash20 = {};\n    my\
    \ $minPathValHash21 = {};\n    my $minPathValHash22 = {};\n    my $minPathValHash23\
    \ = {};\n    my $minPathValHash24 = {};\n    my $minPathValHash25 = {};\n    my\
    \ $minPathValHash26 = {};\n    my $minPathValHash27 = {};\n    my $minPathValHash28\
    \ = {};\n    my $minPathValHash29 = {};\n    my $minPathValHash30 = {};\n    my\
    \ $minPathValHash31 = {};\n    my $minPathValHash32 = {};\n    my $minPathValHash33\
    \ = {};\n    my $minPathValHash34 = {};\n    my $minPathValHash35 = {};\n    my\
    \ $minPathValHash36 = {};\n    my $minPathValHash37 = {};\n    my $minPathValHash38\
    \ = {};\n    my $minPathValHash39", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath18 = [];\n    my",
  "    my $n = scalar(@$grid);\n    my $minPath = [];\n    my $minPathSum = $n * $n\
    \ + 1;\n    my $minPathSumIndex = 0;\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $n - 1) {\n            my $path = [];\n            my $pathSum =\
    \ 0;\n            my $pathSumIndex = 0;\n            my $pathSumIndexes = [];\n\
    \            my $pathSumIndexesIndex = 0;\n            my $pathSumIndexesIndexes\
    \ = [];\n            my $pathSumIndexesIndexesIndex = 0;\n            my $pathSumIndexesIndexesIndexes\
    \ = [];\n            my $pathSumIndexesIndexesIndexesIndex = 0;\n            my\
    \ $pathSumIndexesIndexesIndexesIndexes = [];\n            my $pathSumIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n            my $pathSumIndexesIndexesIndexesIndexesIndexes = [];\n   \
    \         my $pathSumIndexesIndexesIndexesIndexesIndexesIndex = 0;\n         \
    \   my $pathSumIndexesIndexesIndexesIndexesIndexesIndexes = [];\n            my\
    \ $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n            my\
    \ $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n          \
    \  my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  \
    \          my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n            my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n            my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n            my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n            my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n            my $pathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n            my $pathSumIndexes", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minSum = $n * $n\
    \ * $k;\n    my $minPathSum = 0;\n    my $minPathGrid = [];\n    my $minPathGridSum\
    \ = 0;\n    my $minPathGridSum2 = 0;\n    my $minPathGridSum3 = 0;\n    my $minPathGridSum4\
    \ = 0;\n    my $minPathGridSum5 = 0;\n    my $minPathGridSum6 = 0;\n    my $minPathGridSum7\
    \ = 0;\n    my $minPathGridSum8 = 0;\n    my $minPathGridSum9 = 0;\n    my $minPathGridSum10\
    \ = 0;\n    my $minPathGridSum11 = 0;\n    my $minPathGridSum12 = 0;\n    my $minPathGridSum13\
    \ = 0;\n    my $minPathGridSum14 = 0;\n    my $minPathGridSum15 = 0;\n    my $minPathGridSum16\
    \ = 0;\n    my $minPathGridSum17 = 0;\n    my $minPathGridSum18 = 0;\n    my $minPathGridSum19\
    \ = 0;\n    my $minPathGridSum20 = 0;\n    my $minPathGridSum21 = 0;\n    my $minPathGridSum22\
    \ = 0;\n    my $minPathGridSum23 = 0;\n    my $minPathGridSum24 = 0;\n    my $minPathGridSum25\
    \ = 0;\n    my $minPathGridSum26 = 0;\n    my $minPathGridSum27 = 0;\n    my $minPathGridSum28\
    \ = 0;\n    my $minPathGridSum29 = 0;\n    my $minPathGridSum30 = 0;\n    my $minPathGridSum31\
    \ = 0;\n    my $minPathGridSum32 = 0;\n    my $minPathGridSum33 = 0;\n    my $minPathGridSum34\
    \ = 0;\n    my $minPathGridSum35 = 0;\n    my $minPathGridSum36 = 0;\n    my $minPathGrid",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minSum = $n * $m + 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2 =\
    \ $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
    \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
    \ $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n  \
    \  my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n\
    \    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10\
    \ = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
    \ = $minSum;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my\
    \ $minPath15 = [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n\
    \    my $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n\
    \    my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 =\
    \ [];\n    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my\
    \ $minPath20 = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n\
    \    my $minPathSum22 = $minSum", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my @path = ();\n    my @min_path = ();\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path_found = 0;\n    my $path_sum = 0;\n    my $path_len = 0;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $next_i = 0;\n    my $next_j = 0;\n   \
    \ my $next_sum = 0;\n    my $next_path_len = 0;\n    my $next_path_sum = 0;\n\
    \    my $next_path_found = 0;\n    my $next_path_valid = 0;\n    my $next_path_min\
    \ = 0;\n    my $next_path_min_sum = 0;\n    my $next_path_min_len = 0;\n    my\
    \ $next_path_min_found = 0;\n    my $next_path_min_valid = 0;\n    my @next_path\
    \ = ();\n    my @next_path_min = ();\n    my $next_path_min_sum_found = 0;\n \
    \   my $next_path_min_sum_valid = 0;\n    my @next_path_min_sum = ();\n    my\
    \ $next_path_min_len_found = 0;\n    my $next_path_min_len_valid = 0;\n    my\
    \ @next_path_min_len = ();\n    my $next_path_min_found_valid = 0;\n    my @next_path_min_found\
    \ = ();\n    my $next_path_min_valid_found = 0;\n    my @next_path_min_valid =\
    \ ();\n    my $next_path_found_valid = 0;\n    my @next_path_found = ();\n   \
    \ my $next_path_valid_found = 0;\n    my @next_path_valid = ();\n    my $next_path_sum_found\
    \ = 0;\n    my $next_path_sum_valid = 0;\n    my @next_path_sum", "    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [map { [map { [$_] } @$_]\
    \ } @$grid];\n    my $min_val = [map { [map { [$_] } @$_] } @$grid];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for my\
    \ $l (0 .. $k - 1) {\n                if ($i > 0) {\n                    if ($min_val->[$i\
    \ - 1][$j][$l] < $min_val->[$i][$j][$l]) {\n                        $min->[$i][$j][$l]\
    \ = [@{$min->[$i - 1][$j][$l]}];\n                        $min_val->[$i][$j][$l]\
    \ = $min_val->[$i - 1][$j][$l];\n                    }\n                    if\
    \ ($min_val->[$i - 1][$j][$l] == $min_val->[$i][$j][$l]) {\n                 \
    \       if (cmp_path($min->[$i - 1][$j][$l], $min->[$i][$j][$l]) < 0) {\n    \
    \                        $min->[$i][$j][$l] = [@{$min->[$i - 1][$j][$l]}];\n \
    \                           $min_val->[$i][$j][$l] = $min_val->[$i - 1][$j][$l];\n\
    \                        }\n                    }\n                }\n       \
    \         if ($j > 0) {\n                    if ($min_val->[$i][$j - 1][$l] <\
    \ $min_val->[$i][$j][$l]) {\n                        $min->[$i][$j][$l] = [@{$min->[$i][$j\
    \ - 1][$l]}];\n                        $min_val->[$i][$j][$l] = $min_val->[$i][$j\
    \ - 1", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n   \
    \ my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 =\
    \ $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n \
    \   my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 =\
    \ [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n +", "    my $n = @$grid;\n    my @path = ();\n    my\
    \ $min = $n * $n;\n    my $min_path = [];\n    my $min_path_str = '';\n    my\
    \ $min_path_str_len = $n * $n;\n    my $path_str = '';\n    my $path_str_len =\
    \ 0;\n    my $path_str_len_diff = 0;\n    my $i = 0;\n    my $j = 0;\n    my $x\
    \ = 0;\n    my $y = 0;\n    my $x_diff = 0;\n    my $y_diff = 0;\n    my $x_diff_abs\
    \ = 0;\n    my $y_diff_abs = 0;\n    my $x_diff_abs_sum = 0;\n    my $y_diff_abs_sum\
    \ = 0;\n    my $x_diff_abs_sum_diff = 0;\n    my $y_diff_abs_sum_diff = 0;\n \
    \   my $x_diff_abs_sum_diff_abs = 0;\n    my $y_diff_abs_sum_diff_abs = 0;\n \
    \   my $x_diff_abs_sum_diff_abs_sum = 0;\n    my $y_diff_abs_sum_diff_abs_sum\
    \ = 0;\n    my $x_diff_abs_sum_diff_abs_sum_diff = 0;\n    my $y_diff_abs_sum_diff_abs_sum_diff\
    \ = 0;\n    my $x_diff_abs_sum_diff_abs_sum_diff_abs = 0;\n    my $y_diff_abs_sum_diff_abs_sum_diff_abs\
    \ = 0;\n    my $x_diff_abs_sum_diff_abs_sum_diff_abs_sum = 0;\n    my $y_diff_abs_sum_diff_abs_sum_diff_abs_sum\
    \ = 0;\n    my $x_diff_abs_sum_diff_abs_sum_diff_abs_sum_diff = 0;\n    my $y_diff_abs_sum_diff_abs_sum_diff_abs_sum_",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $min->[$i][$j] = [];\n        }\n    }\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n          \
    \  if ($visited->[$i][$j] == 0) {\n                $visited->[$i][$j] = 1;\n \
    \               my $path = [$grid->[$i][$j]];\n                my $min_path =\
    \ dfs($grid, $visited, $min, $i, $j, $path, $k);\n                $min->[$i][$j]\
    \ = $min_path;\n            }\n        }\n    }\n    return $min->[0][0];\n}",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $path = [];\n    my $min\
    \ = [];\n    my $min_val = [];\n    my $min_path = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $path->[$i][$j] = [];\n\
    \            $min->[$i][$j] = [];\n            $min_val->[$i][$j] = [];\n    \
    \        $min_path->[$i][$j] = [];\n        }\n    }\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            $path->[$i][$j][0] = [$grid->[$i][$j]];\n\
    \            $min->[$i][$j][0] = $grid->[$i][$j];\n            $min_val->[$i][$j][0]\
    \ = $grid->[$i][$j];\n            $min_path->[$i][$j][0] = [$grid->[$i][$j]];\n\
    \        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            for my $l (1 .. $k - 1) {\n                $path->[$i][$j][$l]\
    \ = [];\n                $min->[$i][$j][$l] = [];\n                $min_val->[$i][$j][$l]\
    \ = [];\n                $min_path->[$i][$j][$l] = [];\n                if ($i\
    \ > 0) {\n                    my $val = $min->[$i - 1][$j][$l - 1] + $grid->[$i][$j];\n\
    \                    my $path_val = $min_val->[$i - 1][$j][$l - 1] + $grid->[$i][$j];\n\
    \                    if ($path_val < $min_val->[$i][", "    my $n = scalar(@$grid);\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $n;\n    my $min_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max = $n * $n * $n;\n    my $min_path_sum_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max = $n * $n * $n;\n    my $min_path_sum_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max = $n * $n * $n;\n \
    \   my $min_path_sum_count_max_count_max_count_max_count = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max\
    \ = $n * $n * $n;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max\
    \ = $n * $n * $n;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = $n * $n * $n;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = $n * $n * $n;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n   ", "    my @minPath;\n    my $minSum = 0;\n    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ if ($visited->[$i][$j] == 0) {\n                my @path;\n                my\
    \ $sum = 0;\n                dfs($grid, $k, $i, $j, $visited, \\@path, \\$sum);\n\
    \                if (@path > 0 && ($sum < $minSum || @minPath == 0)) {\n     \
    \               @minPath = @path;\n                    $minSum = $sum;\n     \
    \           }\n            }\n        }\n    }\n    return @minPath;\n}", "  \
    \  my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my @path;\n    my $min = $grid->[0][0];\n\
    \    my $min_path = [$min];\n    my $min_path_len = 1;\n    my $min_path_hash\
    \ = {$min => 1};\n    my $min_path_hash_len = 1;\n    my $min_path_hash_key =\
    \ \"$min\";\n    my $min_path_hash_key_len = 1;\n    my $min_path_hash_key_len_max\
    \ = 1;\n    my $min_path_hash_key_len_max_hash = {$min_path_hash_key => 1};\n\
    \    my $min_path_hash_key_len_max_hash_len = 1;\n    my $min_path_hash_key_len_max_hash_key\
    \ = \"$min_path_hash_key\";\n    my $min_path_hash_key_len_max_hash_key_len =\
    \ 1;\n    my $min_path_hash_key_len_max_hash_key_len_max = 1;\n    my $min_path_hash_key_len_max_hash_key_len_max_hash\
    \ = {$min_path_hash_key_len_max_hash_key => 1};\n    my $min_path_hash_key_len_max_hash_key_len_max_hash_len\
    \ = 1;\n    my $min_path_hash_key_len_max_hash_key_len_max_hash_key = \"$min_path_hash_key_len_max_hash_key\"\
    ;\n    my $min_path_hash_key_len_max_hash_key_len_max_hash_key_len = 1;\n    my\
    \ $min_path_hash_key_len_max_hash_key_len_max_hash_key_len_max = 1;\n    my $min_path_hash_key_len_max_hash_key_len_max_hash_key_len_max_hash\
    \ = {$min_path_hash_key_len_", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $path = [];\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n  \
    \  my $min_path_len_sum = $n * $n + 1;\n    my $min_path_len_sum_min = $n * $n\
    \ + 1;\n    my $min_path_len_sum_min_min = $n * $n + 1;\n    my $min_path_len_sum_min_min_min\
    \ = $n * $n + 1;\n    my $min_path_len_sum_min_min_min_min = $n * $n + 1;\n  \
    \  my $min_path_len_sum_min_min_min_min_min = $n * $n + 1;\n    my $min_path_len_sum_min_min_min_min_min_min\
    \ = $n * $n + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min = $n *\
    \ $n + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min_min = $n * $n\
    \ + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min_min_min = $n * $n\
    \ + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min_min_min_min = $n\
    \ * $n + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min_min_min_min_min\
    \ = $n * $n + 1;\n    my $min_path_len_sum_min_min_min_min_min_min_min_min_min_min_min_min\
    \ = $n * $n", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $visited =\
    \ {};\n    my $path = [];\n    my $pathSum = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $dirs = [\n        [0, 1],\n        [0, -1],\n        [1, 0],\n      \
    \  [-1, 0]\n    ];\n    my $dfs = sub {\n        my($i, $j, $pathSum, $path) =\
    \ @_;\n        if ($pathSum >= $minPathSum) {\n            return;\n        }\n\
    \        if (scalar(@$path) == $k) {\n            $minPathSum = $pathSum;\n  \
    \          $minPath = $path;\n            return;\n        }\n        for my $dir\
    \ (@$dirs) {\n            my $i1 = $i + $dir->[0];\n            my $j1 = $j +\
    \ $dir->[1];\n            if ($i1 >= 0 && $i1 < $n && $j1 >= 0 && $j1 < $m &&\
    \ !$visited->{\"$i1,$j1\"}) {\n                $visited->{\"$i1,$j1\"} = 1;\n\
    \                push @$path, $grid->[$i1][$j1];\n                $dfs->($i1,\
    \ $j1, $pathSum + $grid->[$i1][$j1], $path);\n                pop @$path;\n  \
    \              $visited->{\"$i1,$j1\"} = 0;\n            }\n        }\n    };\n\
    \    push @$path, $grid->[$i][$j];\n    $visited->{\"$i,$j\"} = 1;\n    $dfs->($i,\
    \ $j, $pathSum + $grid->[$i][$j], $path);\n    return $minPath;\n}", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx\
    \ = 0;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_idx = 0;\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $path_sum = 0;\n            $path_sum_idx = 0;\n      \
    \      $path = [];\n            for (my $i = 0; $i < $n; $i++) {\n           \
    \     for (my $j = 0; $j < $m; $j++) {\n                    $visited->[$i][$j]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n\
    \            $path_sum_idx++;\n            dfs($grid, $i, $j, $k, $n, $m, $visited,\
    \ $path, $path_sum, $path_sum_idx, $min_path, $min_sum, $min_path_sum, $min_path_sum_idx);\n\
    \        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n \
    \   my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $x (0 .. $n - 1) {\n                for my $y (0 ..\
    \ $m - 1) {\n                    $visited->[$x][$y] = 0;\n                }\n\
    \            }\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n \
    \           if ($sum < $min_sum) {\n                $min_sum = $sum;\n       \
    \         $min = $path;\n            }\n        }\n    }\n    return $min;\n}",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
    \ $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
    \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
    \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
    \ $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n  \
    \  my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n\
    \    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10\
    \ = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
    \ = $minSum;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my\
    \ $minPath15 = [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n\
    \    my $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n\
    \    my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 =\
    \ [];\n    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my\
    \ $minPath20 = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n\
    \    my $minPathSum22 = $min", "    my $n = @$grid;\n    my @path = ();\n    my\
    \ @minPath = ();\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $n * $n\
    \ + 1;\n    my $minPath = [];\n    my $minPathRef = \\@minPath;\n    my $pathRef\
    \ = \\@path;\n    my $gridRef = \\@$grid;\n    my $minPathSumRef = \\$minPathSum;\n\
    \    my $minPathRefRef = \\$minPathRef;\n    my $minSumRef = \\$minSum;\n    my\
    \ $nRef = \\$n;\n    my $kRef = \\$k;\n    my $gridRefRef = \\$gridRef;\n    my\
    \ $pathRefRef = \\$pathRef;\n    my $minPathRefRefRef = \\$minPathRefRef;\n  \
    \  my $minSumRefRef = \\$minSumRef;\n    my $minPathSumRefRef = \\$minPathSumRef;\n\
    \    my $nRefRef = \\$nRef;\n    my $kRefRef = \\$kRef;\n    my $gridRefRefRef\
    \ = \\$gridRefRef;\n    my $pathRefRefRef = \\$pathRefRef;\n    my $minPathRefRefRefRef\
    \ = \\$minPathRefRefRef;\n    my $minSumRefRefRef = \\$minSumRefRef;\n    my $minPathSumRefRefRef\
    \ = \\$minPathSumRefRef;\n    my $nRefRefRef = \\$nRefRef;\n    my $kRefRefRef\
    \ = \\$kRefRef;\n    my $gridRefRefRefRef = \\$gridRefRefRef;\n    my $pathRefRefRefRef\
    \ = \\$pathRefRefRef;\n    my $minPathRefRefRefRefRef = \\$minPathRefRefRefRef;\n\
    \    my $minSumRefRefRefRef = \\$minSumRefRefRef;\n    my $minPathSumRefRefRefRef\
    \ = \\$minPathSumRefRefRef;\n    my $nRefRefRefRef = \\$nRefRefRef;\n    my $kRefRefRefRef\
    \ = \\$kRefRefRef;\n   ", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPathSum3 = $n * $n * $k;\n    my $minPathSum4 =\
    \ $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPath6 = [];\n    my $minPath7 = [];\n\
    \    my $minPath8 = [];\n    my $minPath9 = [];\n    my $minPath10 = [];\n   \
    \ my $minPath11 = [];\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPath16 = [];\n    my $minPath17\
    \ = [];\n    my $minPath18 = [];\n    my $minPath19 = [];\n    my $minPath20 =\
    \ [];\n    my $minPath21 = [];\n    my $minPath22 = [];\n    my $minPath23 = [];\n\
    \    my $minPath24 = [];\n    my $minPath25 = [];\n    my $minPath26 = [];\n \
    \   my $minPath27 = [];\n    my $minPath28 = [];\n    my $minPath29 = [];\n  \
    \  my $minPath30 = [];\n    my $minPath31 = [];\n    my $minPath32 = [];\n   \
    \ my $minPath33 = [];\n    my $minPath34 = [];\n    my $minPath35 = [];\n    my\
    \ $minPath36 = [];\n    my $minPath37 = [];\n    my $minPath38 = [];\n    my $minPath39\
    \ = [];\n    my $minPath40 = [];\n    my $minPath41 = [];\n    my $minPath42 =\
    \ [];\n    my $minPath43 = [];\n    my $minPath44 = [];\n    my $minPath45 = [];\n\
    \    my $minPath", "    my @path;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_i = 0;\n    my $min_j = 0;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($grid->[$i][$j]\
    \ < $min) {\n                $min = $grid->[$i][$j];\n                $min_i =\
    \ $i;\n                $min_j = $j;\n            }\n        }\n    }\n    my $i\
    \ = $min_i;\n    my $j = $min_j;\n    push @path, $min;\n    for my $l (1..$k-1)\
    \ {\n        my $min = $grid->[$i][$j];\n        my $min_i = $i;\n        my $min_j\
    \ = $j;\n        if ($i > 0 && $grid->[$i-1][$j] < $min) {\n            $min =\
    \ $grid->[$i-1][$j];\n            $min_i = $i-1;\n            $min_j = $j;\n \
    \       }\n        if ($i < $n-1 && $grid->[$i+1][$j] < $min) {\n            $min\
    \ = $grid->[$i+1][$j];\n            $min_i = $i+1;\n            $min_j = $j;\n\
    \        }\n        if ($j > 0 && $grid->[$i][$j-1] < $min) {\n            $min\
    \ = $grid->[$i][$j-1];\n            $min_i = $i;\n            $min_j = $j-1;\n\
    \        }\n        if ($j < $m-1 && $grid->[$i][$j+1] < $min) {\n           \
    \ $min = $grid->[$i][$j+1];\n            $min_i = $i;\n            $min_j = $j+1;",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path;\n\
    \    my $min_path_sum;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [$grid->[$i][$j]];\n            my $path_sum\
    \ = $grid->[$i][$j];\n            my $path_len = 1;\n            my $visited =\
    \ {};\n            $visited->{\"$i,$j\"} = 1;\n            my $q = [[$i, $j]];\n\
    \            while (@$q) {\n                my $cur = shift @$q;\n           \
    \     my($x, $y) = @$cur;\n                for my $dx (-1, 0, 1) {\n         \
    \           for my $dy (-1, 0, 1) {\n                        next if $dx == 0\
    \ && $dy == 0;\n                        my $nx = $x + $dx;\n                 \
    \       my $ny = $y + $dy;\n                        next if $nx < 0 || $nx >=\
    \ $n || $ny < 0 || $ny >= $m;\n                        next if $visited->{\"$nx,$ny\"\
    };\n                        $visited->{\"$nx,$ny\"} = 1;\n                   \
    \     push @$path, $grid->[$nx][$ny];\n                        $path_sum += $grid->[$nx][$ny];\n\
    \                        $path_len++;\n                        if ($path_len ==\
    \ $k) {\n                            if (!defined($min_path_sum) || $path_sum\
    \ < $min_path_sum) {\n                                $min_path = $path;\n   \
    \                             $min_path_sum = $path_sum;\n                   \
    \         }\n                        }\n                        else {\n     \
    \                       push @$q, [$nx, $ny];\n                        }\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ $min_path;\n}", "    my $n = scalar(@$grid);\n    my $min = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            my $path\
    \ = [$grid->[$i][$j]];\n            my $visited = [[$i, $j]];\n            my\
    \ $min_path = dfs($grid, $i, $j, $k - 1, $path, $visited);\n            if (!@$min\
    \ || $min_path < $min) {\n                $min = $min_path;\n            }\n \
    \       }\n    }\n    return $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
    \    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21 = $minSum;\n    my $minPathSum22 = $min", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    my $min_sum_path = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $path = [];\n            my\
    \ $sum = 0;\n            my $sum_path = [];\n            my $visited = [];\n \
    \           for my $i (0 .. $n - 1) {\n                for my $j (0 .. $m - 1)\
    \ {\n                    $visited->[$i][$j] = 0;\n                }\n        \
    \    }\n            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            push @$sum_path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $sum_path, $visited);\n \
    \           if ($sum < $min_sum) {\n                $min_sum = $sum;\n       \
    \         $min_path = $path;\n                $min_sum_path = $sum_path;\n   \
    \         } elsif ($sum == $min_sum) {\n                my $cmp = lexicographic_cmp($sum_path,\
    \ $min_sum_path);\n                if ($cmp < 0) {\n                    $min_path\
    \ = $path;\n                    $min_sum_path = $sum_path;\n                }\n\
    \            }\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n    my $minPath2 = [];\n\
    \    my $minPathSum3 = $n * $n * $k;\n    my $minPath3 = [];\n    my $minPathSum4\
    \ = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5 = $n * $n * $k;\n\
    \    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath6\
    \ = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7 = [];\n    my $minPathSum8\
    \ = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9 = $n * $n * $k;\n\
    \    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath10\
    \ = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11 = [];\n    my\
    \ $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my $minPathSum13\
    \ = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14 = $n * $n * $k;\n\
    \    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPath15\
    \ = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16 = [];\n    my\
    \ $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $n * $n * $k;\n    my $minPath", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = {};\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n\
    \    my $minSumPath = [];\n    my $minSumPaths = [];\n    my $minSumPathsSum =\
    \ [];\n    my $minSumPathsSumPath = [];\n    my $minSumPathsSumPaths = [];\n \
    \   my $minSumPathsSumPathsSum = [];\n    my $minSumPathsSumPathsSumPath = [];\n\
    \    my $minSumPathsSumPathsSumPaths = [];\n    my $minSumPathsSumPathsSumPathsSum\
    \ = [];\n    my $minSumPathsSumPathsSumPathsSumPath = [];\n    my $minSumPathsSumPathsSumPathsSumPaths\
    \ = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSum = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPath\
    \ = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPaths = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSum\
    \ = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPath = [];\n  \
    \  my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPaths = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSum\
    \ = [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPath =\
    \ [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPaths = [];\n\
    \    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSum = [];\n\
    \    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPath =\
    \ [];\n    my $minSumPathsSumPathsSumPathsSumPathsSumPathsSumPathsSumPath", " \
    \   my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $path_sum = 0;\n          \
    \  my $visited = [];\n            for my $x (0 .. $n - 1) {\n                for\
    \ my $y (0 .. $m - 1) {\n                    $visited->[$x][$y] = 0;\n       \
    \         }\n            }\n            $visited->[$i][$j] = 1;\n            push\
    \ @$path, $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n      \
    \      dfs($grid, $i, $j, $k - 1, $path, $path_sum, $visited, $min_path, $min_path_sum);\n\
    \        }\n    }\n    return $min_path;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
