name: HumanEval_20_find_closest_elements
language: pl
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0,\
  \ 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $closest_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for\
    \ my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $closest = [$numbers->[0], $numbers->[1]];\n    my $closest_distance\
    \ = abs($closest->[0] - $closest->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $distance\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest = [$numbers->[$i], $numbers->[$j]];\n          \
    \      $closest_distance = $distance;\n            }\n        }\n    }\n    return\
    \ $closest;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n   \
    \ my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_elements =\
    \ [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n   \
    \     for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_elements = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_elements;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < @numbers - 1; $i++) {\n        my $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers[$min_diff_index],\
    \ $numbers[$min_diff_index + 1]];\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $closest_distance = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $closest_elements = [$numbers->[0], $numbers->[1]];\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $distance = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance\
    \ < $closest_distance) {\n                $closest_distance = $distance;\n   \
    \             $closest_elements = [$numbers->[$i], $numbers->[$j]];\n        \
    \    }\n        }\n    }\n    return $closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest_pair;\n\
    }", "    my($min_diff, $min_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($smallest_difference) = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index)\
    \ = 0;\n    for (my($i) = 1; $i < @$numbers - 1; $i++) {\n        my($difference)\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference)\
    \ {\n            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($smallest_difference, $smallest_difference_pair)\
    \ = (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j\
    \ ($i + 1 .. $#$numbers) {\n            my $difference = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if (!defined($smallest_difference) || $difference\
    \ < $smallest_difference) {\n                $smallest_difference = $difference;\n\
    \                $smallest_difference_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $smallest_difference_pair;\n}", " \
    \   my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = $numbers->[$j] - $numbers->[$i];\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
