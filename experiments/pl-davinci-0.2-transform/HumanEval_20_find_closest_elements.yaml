name: HumanEval_20_find_closest_elements
language: pl
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0,\
  \ 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $closest_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for\
    \ my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $closest = [$numbers->[0], $numbers->[1]];\n    my $closest_distance\
    \ = abs($closest->[0] - $closest->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $distance\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest = [$numbers->[$i], $numbers->[$j]];\n          \
    \      $closest_distance = $distance;\n            }\n        }\n    }\n    return\
    \ $closest;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n   \
    \ my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_elements =\
    \ [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n   \
    \     for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_elements = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_elements;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < @numbers - 1; $i++) {\n        my $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers[$min_diff_index],\
    \ $numbers[$min_diff_index + 1]];\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $closest_distance = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $closest_elements = [$numbers->[0], $numbers->[1]];\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $distance = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance\
    \ < $closest_distance) {\n                $closest_distance = $distance;\n   \
    \             $closest_elements = [$numbers->[$i], $numbers->[$j]];\n        \
    \    }\n        }\n    }\n    return $closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest_pair;\n\
    }", "    my($min_diff, $min_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($smallest_difference) = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index)\
    \ = 0;\n    for (my($i) = 1; $i < @$numbers - 1; $i++) {\n        my($difference)\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference)\
    \ {\n            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($smallest_difference, $smallest_difference_pair)\
    \ = (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j\
    \ ($i + 1 .. $#$numbers) {\n            my $difference = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if (!defined($smallest_difference) || $difference\
    \ < $smallest_difference) {\n                $smallest_difference = $difference;\n\
    \                $smallest_difference_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $smallest_difference_pair;\n}", " \
    \   my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = $numbers->[$j] - $numbers->[$i];\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        my\
    \ $diff = $numbers->[$i + 1] - $numbers->[$i];\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_pair = [$numbers->[$i],\
    \ $numbers->[$i + 1]];\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n \
    \   my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff)\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_index = $i;\n     \
    \   }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair)\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers - 1;\
    \ $i++) {\n        for (my($j) = $i + 1; $j < @$numbers; $j++) {\n           \
    \ my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $closest_distance = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n      \
    \      if ($distance < $closest_distance) {\n                $closest_distance\
    \ = $distance;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n       \
    \ for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my($smallest_difference)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index) =\
    \ 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff, $min_diff_pair) =\
    \ (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_pair = [$numbers->[$i],\
    \ $numbers->[$i + 1]];\n        }\n    }\n    return $min_diff_pair;\n}", "  \
    \  my $closest = $numbers->[0] - $numbers->[1];\n    my $closest_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest) {\n                $closest\
    \ = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i\
    \ (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = $numbers->[$i+1] - $numbers->[$i];\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for\
    \ my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my($smallest_difference,\
    \ $smallest_difference_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers - 1)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $difference =\
    \ abs($numbers->[$i] - $numbers->[$j]);\n            if ($difference < $smallest_difference)\
    \ {\n                $smallest_difference = $difference;\n                $smallest_difference_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $smallest_difference_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for my $i (0\
    \ .. $#{$numbers} - 1) {\n        for my $j ($i + 1 .. $#{$numbers}) {\n     \
    \       my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                @closest_elements\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ @closest_elements;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    my @min_pair = ($numbers[0], $numbers[1]);\n    for (my\
    \ $i = 0; $i < @numbers; $i++) {\n        for (my $j = $i + 1; $j < @numbers;\
    \ $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n        \
    \    if ($diff < $min_diff) {\n                $min_diff = $diff;\n          \
    \      @min_pair = ($numbers[$i], $numbers[$j]);\n            }\n        }\n \
    \   }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n \
    \           my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my @result = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @result = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @result;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n\
    \    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @closest_elements\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                @closest_elements = ($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return @closest_elements;\n\
    }", "    my($closest_diff, $closest_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my @sorted_numbers = sort {$a <=> $b}\
    \ @$numbers;\n    my $min_diff = abs($sorted_numbers[0] - $sorted_numbers[1]);\n\
    \    my @closest_elements = ($sorted_numbers[0], $sorted_numbers[1]);\n    for\
    \ (my $i = 0; $i < scalar(@sorted_numbers) - 1; $i++) {\n        my $diff = abs($sorted_numbers[$i]\
    \ - $sorted_numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            @closest_elements = ($sorted_numbers[$i], $sorted_numbers[$i\
    \ + 1]);\n        }\n    }\n    return @closest_elements;\n}", "    my($min_distance)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_distance_index) = 0;\n  \
    \  for my $i (1 .. $#$numbers - 1) {\n        my($distance) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_distance_index = $i;\n      \
    \  }\n    }\n    return [$numbers->[$min_distance_index], $numbers->[$min_distance_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (0..$#$numbers-1) {\n        my $diff =\
    \ abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $closest = $numbers->[0] - $numbers->[1];\n    my $closest_pair =\
    \ [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers) {\n       \
    \ for my $j ($i+1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest) {\n                $closest\
    \ = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my($min_diff, $min_diff_pair) = (abs($numbers->[0] - $numbers->[1]),\
    \ [$numbers->[0], $numbers->[1]]);\n    for my $i (0 .. @$numbers - 2) {\n   \
    \     for my $j ($i + 1 .. @$numbers - 1) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_diff_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $closest_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n  \
    \  for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j <\
    \ @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my($min_diff, $closest_pair) = (1e99,\
    \ []);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n      \
    \  }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my($smallest_diff, $smallest_diff_pair) = (undef, undef);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if (!defined($smallest_diff) || $diff < $smallest_diff) {\n               \
    \ $smallest_diff = $diff;\n                $smallest_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $smallest_diff_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my @closest =\
    \ ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @closest = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @closest;\n}",
  "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $closest_diff) {\n                $closest_diff = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_distance = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_distance_index = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my $distance = abs($numbers->[$i] - $numbers->[$i + 1]);\n \
    \       if ($distance < $min_distance) {\n            $min_distance = $distance;\n\
    \            $min_distance_index = $i;\n        }\n    }\n    return [$numbers->[$min_distance_index],\
    \ $numbers->[$min_distance_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = $numbers->[$i+1] - $numbers->[$i];\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my($smallest_diff, $smallest_diff_index);\n    my($i);\n    for($i =\
    \ 0; $i < scalar(@$numbers) - 1; $i++) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if(!defined($smallest_diff) || $diff < $smallest_diff)\
    \ {\n            $smallest_diff = $diff;\n            $smallest_diff_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$smallest_diff_index], $numbers->[$smallest_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff =\
    \ abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $closest_distance = abs($numbers->[0] - $numbers->[1]);\n    my $closest_elements\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $distance\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest_distance = $distance;\n                $closest_elements\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    my @min_pair = ($numbers[0], $numbers[1]);\n    for (my\
    \ $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers;\
    \ $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n        \
    \    if ($diff < $min_diff) {\n                $min_diff = $diff;\n          \
    \      @min_pair = ($numbers[$i], $numbers[$j]);\n            }\n        }\n \
    \   }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n    my\
    \ $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_pair = [$numbers[0],\
    \ $numbers[1]];\n    for (my $i = 0; $i < @numbers - 1; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers[$i], $numbers[$j]];\n      \
    \      }\n        }\n    }\n    return $min_pair;\n}", "    my $smallest_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $smallest_diff_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n \
    \       my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $smallest_diff) {\n            $smallest_diff = $diff;\n            $smallest_diff_pair\
    \ = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return $smallest_diff_pair;\n\
    }", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    my @closest_elements = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i\
    \ < @numbers; $i++) {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n \
    \           my $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                @closest_elements\
    \ = ($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ @closest_elements;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_index = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_index], $numbers->[$min_index + 1]];\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my @numbers = @$numbers;\n    my $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    my $min_index = 0;\n    for my $i (1..$#numbers-1)\
    \ {\n        my $diff = abs($numbers[$i] - $numbers[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return ($numbers[$min_index], $numbers[$min_index+1]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my\
    \ $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my @min_pair = ($numbers->[0], $numbers->[1]);\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          @min_pair = ($numbers->[$i], $numbers->[$j]);\n            }\n    \
    \    }\n    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return $min_diff_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $closest = [0, 1];\n    my $distance\
    \ = $numbers->[1] - $numbers->[0];\n    for my $i (0 .. $#$numbers - 1) {\n  \
    \      for my $j ($i + 1 .. $#$numbers) {\n            my $d = $numbers->[$j]\
    \ - $numbers->[$i];\n            if ($d < $distance) {\n                $distance\
    \ = $d;\n                $closest = [$i, $j];\n            }\n        }\n    }\n\
    \    return [$numbers->[$closest->[0]], $numbers->[$closest->[1]]];\n}", "   \
    \ my($closest) = [$numbers->[0], $numbers->[1]];\n    my($diff) = abs($closest->[0]\
    \ - $closest->[1]);\n    for (my($i) = 0; $i < @$numbers; $i++) {\n        for\
    \ (my($j) = $i + 1; $j < @$numbers; $j++) {\n            my($new_diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($new_diff < $diff) {\n                $diff\
    \ = $new_diff;\n                $closest = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my @closest_elements = ($numbers->[0],\
    \ $numbers->[1]);\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n     \
    \   for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @closest_elements = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @closest_elements;\n\
    }", "    my($min_diff, $min_diff_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_diff_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i\
    \ (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for (my $i = 1; $i < @$numbers - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min) {\n            $min = $diff;\n\
    \            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my @numbers = @$numbers;\n    my $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    my $min_diff_index = 0;\n    for my $i\
    \ (1..$#numbers-1) {\n        my $diff = abs($numbers[$i] - $numbers[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers[$min_diff_index],\
    \ $numbers[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $closest_difference = abs($numbers->[0] - $numbers->[1]);\n    my @closest_elements\
    \ = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $difference\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($difference < $closest_difference)\
    \ {\n                $closest_difference = $difference;\n                @closest_elements\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ @closest_elements;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n \
    \           my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my @min_pair = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @min_pair = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my @numbers =\
    \ @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_pair\
    \ = [$numbers[0], $numbers[1]];\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers[$i], $numbers[$j]];\n      \
    \      }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0;\
    \ $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    @closest_elements = ($numbers->[$i], $numbers->[$j]);\n            }\n  \
    \      }\n    }\n    return @closest_elements;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my @closest = ($numbers->[0], $numbers->[1]);\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @closest = ($numbers->[$i], $numbers->[$j]);\n            }\n \
    \       }\n    }\n    return @closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return $min_diff_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99,\
    \ []);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers - 1) {\n       \
    \ my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_index = $i;\n     \
    \   }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0;\
    \ $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n    \
    \            @closest_elements = ($numbers->[$i], $numbers->[$j]);\n         \
    \   }\n        }\n    }\n    return @closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n \
    \           my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_diff_pair) = (1e99, []);\n    for (my\
    \ $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_diff_pair;\n}", "    my($min_diff, $min_pair)\
    \ = (1e99, []);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $closest_distance = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n      \
    \      if ($distance < $closest_distance) {\n                $closest_distance\
    \ = $distance;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @min_pair\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @min_pair = ($numbers[$i], $numbers[$j]);\n      \
    \      }\n        }\n    }\n    return @min_pair;\n}", "    my($i, $j, $diff,\
    \ $min_diff, $min_i, $min_j);\n    $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    $min_i = 0;\n    $min_j = 1;\n    for ($i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for ($j = $i + 1; $j < @$numbers; $j++) {\n            $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_i = $i;\n                $min_j = $j;\n     \
    \       }\n        }\n    }\n    return ($numbers->[$min_i], $numbers->[$min_j]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $closest = [$numbers->[0], $numbers->[1]];\n\
    \    my $closest_diff = abs($closest->[0] - $closest->[1]);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $closest_diff) {\n                $closest = [$numbers->[$i], $numbers->[$j]];\n\
    \                $closest_diff = $diff;\n            }\n        }\n    }\n   \
    \ return [sort @$closest];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my\
    \ $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my($smaller, $larger) = (0, 1);\n\
    \    my($diff, $smallest_diff) = (0, abs($numbers->[$larger] - $numbers->[$smaller]));\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            $diff = abs($numbers->[$j] - $numbers->[$i]);\n\
    \            if ($diff < $smallest_diff) {\n                $smallest_diff = $diff;\n\
    \                $smaller = $i;\n                $larger = $j;\n            }\n\
    \        }\n    }\n    return [$numbers->[$smaller], $numbers->[$larger]];\n}",
  "    my($smallest_diff, $smallest_diff_pair) = (1, [0, 0]);\n    for (my $i = 0;\
    \ $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $smallest_diff) {\n                $smallest_diff = $diff;\n  \
    \              $smallest_diff_pair = [$numbers->[$i], $numbers->[$j]];\n     \
    \       }\n        }\n    }\n    return $smallest_diff_pair;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @min_pair\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @min_pair = ($numbers[$i], $numbers[$j]);\n      \
    \      }\n        }\n    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $closest_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99,\
    \ [0, 0]);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 ..\
    \ $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my\
    \ $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my @numbers = @$numbers;\n    my $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    my @min_pair = ($numbers[0], $numbers[1]);\n\
    \    for (my $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @min_pair = ($numbers[$i], $numbers[$j]);\n            }\n    \
    \    }\n    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $closest = [$numbers->[0], $numbers->[1]];\n    my $diff = abs($closest->[0]\
    \ - $closest->[1]);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j\
    \ ($i + 1 .. $#$numbers) {\n            my $new_diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($new_diff < $diff) {\n                $diff = $new_diff;\n  \
    \              $closest = [$numbers->[$i], $numbers->[$j]];\n            }\n \
    \       }\n    }\n    return $closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($small, $large);\n    my($diff, $min_diff);\n    $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    $small = $numbers->[0];\n    $large = $numbers->[1];\n\
    \    for(my $i = 0; $i < @$numbers; $i++) {\n        for(my $j = $i + 1; $j <\
    \ @$numbers; $j++) {\n            $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if($diff < $min_diff) {\n                $min_diff = $diff;\n   \
    \             $small = $numbers->[$i];\n                $large = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [$small, $large];\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_elements = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n \
    \       my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_elements =\
    \ [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return $min_elements;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 ..\
    \ $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_diff_pair;\n\
    }", "    my($min_diff, $closest_elements) = (1e99, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $closest_elements\
    \ = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return $closest_elements;\n\
    }", "    my($smallest_difference, $closest_pair) = (1e99, []);\n    for my $i\
    \ (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n      \
    \      my $difference = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min = abs($numbers[0] - $numbers[1]);\n    my @result\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min) {\n                $min = $diff;\n\
    \                @result = ($numbers[$i], $numbers[$j]);\n            }\n    \
    \    }\n    }\n    return @result;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min) {\n            $min = $diff;\n            $min_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my($min_diff, $min_pair) = (1e100, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers-1) {\n        for my\
    \ $j ($i+1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my($min_diff, $min_pair) =\
    \ (1e99, []);\n    for my $i (0 .. @$numbers - 2) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n    my\
    \ $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_index = 0;\n    for\
    \ (my $i = 1; $i < @numbers - 1; $i++) {\n        my $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers[$min_index],\
    \ $numbers[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my($min_diff, $min_diff_pair)\
    \ = (1e100, []);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return $min_diff_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index+1]);\n\
    }", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    my @min_pair = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n        \
    \    my $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @min_pair = ($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return @min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $closest_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i\
    \ < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $closest_diff) {\n                $closest_diff = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (0..$#$numbers\
    \ - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    my $min_index = 0;\n    for my $i (1..$#numbers-1) {\n\
    \        my $diff = abs($numbers[$i] - $numbers[$i+1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_index = $i;\n        }\n\
    \    }\n    return [$numbers[$min_index], $numbers[$min_index+1]];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
