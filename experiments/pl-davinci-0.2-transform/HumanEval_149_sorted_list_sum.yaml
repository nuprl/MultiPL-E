name: HumanEval_149_sorted_list_sum
language: pl
prompt: "# Write a function that accepts a list of strings as a parameter,\n# deletes\
  \ the strings that have odd lengths from it,\n# and returns the resulted list with\
  \ a sorted order,\n# The list is always a list of strings and never an array of\
  \ numbers,\n# and it may contain duplicates.\n# The order of the list should be\
  \ ascending by length of each word, and you\n# should return the list sorted by\
  \ that rule.\n# If two words have the same length, sort the list alphabetically.\n\
  # The function should return a list of strings in sorted order.\n# You may assume\
  \ that all words will have the same length.\n# For example:\n# >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n\
  \        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"\
  ]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"\
  ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @lst = @$lst;\n    my @sorted_lst = sort { length($a) <=> length($b)\
    \ } @lst;\n    return @sorted_lst;\n}", "    my @lst = @$lst;\n    my @ret = ();\n\
    \    my $len = length($lst[0]);\n    my @lst_len = ();\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o =", "    my @lst = @$lst;\n    my @sorted\
    \ = sort {length($a) <=> length($b) || $a cmp $b} @lst;\n    my @result = ();\n\
    \    my $prev_len = 0;\n    for my $i (@sorted) {\n        if (length($i) == $prev_len)\
    \ {\n            push @result, $i;\n        }\n        $prev_len = length($i);\n\
    \    }\n    return @result;\n}", "    my @lst = @$lst;\n    my @result = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = scalar @lst;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (length($lst[$i]) % 2 == 0) {\n\
    \            $result[$j] = $lst[$i];\n            $j++;\n        }\n    }\n  \
    \  @result = sort {length($a) <=> length($b) || $a cmp $b} @result;\n    return\
    \ @result;\n}", "    my @lst = @$lst;\n    my @sorted_list = sort {length($a)\
    \ <=> length($b) or $a cmp $b} @lst;\n    my @result = ();\n    my $prev_length\
    \ = -1;\n    foreach my $word (@sorted_list) {\n        my $length = length($word);\n\
    \        if ($length != $prev_length) {\n            push @result, $word;\n  \
    \          $prev_length = $length;\n        }\n    }\n    return \\@result;\n}",
  "    my @lst = @$lst;\n    my @result = ();\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $k = 0;\n    my $len = scalar @lst;\n    my $len_result = 0;\n    my $len_result_prev\
    \ = 0;\n    my $len_result_next = 0;\n    my $lst_i = \"\";\n    my $lst_j = \"\
    \";\n    my $lst_k = \"\";\n    my $lst_i_len = 0;\n    my $lst_j_len = 0;\n \
    \   my $lst_k_len = 0;\n    my $lst_i_len_prev = 0;\n    my $lst_j_len_prev =\
    \ 0;\n    my $lst_k_len_prev = 0;\n    my $lst_i_len_next = 0;\n    my $lst_j_len_next\
    \ = 0;\n    my $lst_k_len_next = 0;\n    my $lst_i_len_prev_next = 0;\n    my\
    \ $lst_j_len_prev_next = 0;\n    my $lst_k_len_prev_next = 0;\n    my $lst_i_len_next_prev\
    \ = 0;\n    my $lst_j_len_next_prev = 0;\n    my $lst_k_len_next_prev = 0;\n \
    \   my $lst_i_len_prev_next_prev = 0;\n    my $lst_j_len_prev_next_prev = 0;\n\
    \    my $lst_k_len_prev_next_prev = 0;\n    my $lst_i_len_next_prev_next = 0;\n\
    \    my $lst_j_len_next_prev_next = 0;\n    my $lst_k_len_next_prev_next = 0;\n\
    \    my $lst_i_len_prev_next_prev_next = 0;\n    my $lst_j_len_prev_next_prev_next\
    \ = 0;\n    my", "    my @lst = @$lst;\n    my @sorted_list = sort {length($a)\
    \ <=> length($b) || $a cmp $b} @lst;\n    my @result = ();\n    my $prev_len =\
    \ 0;\n    foreach my $str (@sorted_list) {\n        my $len = length($str);\n\
    \        if ($len != $prev_len) {\n            push @result, $str;\n         \
    \   $prev_len = $len;\n        }\n    }\n    return \\@result;\n}", "    my @sorted_list\
    \ = sort { length($a) <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_len\
    \ = -1;\n    for my $word (@sorted_list) {\n        my $len = length($word);\n\
    \        if ($len != $prev_len) {\n            push @result, $word;\n        \
    \    $prev_len = $len;\n        }\n    }\n    return \\@result;\n}", "    my @lst\
    \ = @$lst;\n    my @sorted_lst = sort {length($a) <=> length($b) || $a cmp $b}\
    \ @lst;\n    my @result = ();\n    my $prev_len = -1;\n    for my $i (@sorted_lst)\
    \ {\n        my $len = length($i);\n        if ($len != $prev_len) {\n       \
    \     push @result, $i;\n            $prev_len = $len;\n        }\n    }\n   \
    \ return \\@result;\n}", "    my @lst = @$lst;\n    my @sorted_lst = sort {\n\
    \        if (length($a) == length($b)) {\n            return $a cmp $b;\n    \
    \    } else {\n            return length($a) <=> length($b);\n        }\n    }\
    \ @lst;\n    return @sorted_lst;\n}", "    my @lst = @$lst;\n    my @sorted_lst\
    \ = sort { length($a) <=> length($b) } @lst;\n    my @result;\n    my $prev_len\
    \ = 0;\n    for my $str (@sorted_lst) {\n        my $len = length($str);\n   \
    \     if ($len == $prev_len) {\n            push @result, $str;\n        }\n \
    \       $prev_len = $len;\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n\
    \    my @res = ();\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@lst))\
    \ {\n        if (length($lst[$i]) % 2 == 0) {\n            $res[$j] = $lst[$i];\n\
    \            $j++;\n        }\n        $i++;\n    }\n    return \\@res;\n}", " \
    \   my @lst = @$lst;\n    my @result;\n    my $i = 0;\n    while ($i < @lst) {\n\
    \        my $j = $i + 1;\n        while ($j < @lst) {\n            if (length($lst[$i])\
    \ > length($lst[$j])) {\n                my $tmp = $lst[$i];\n               \
    \ $lst[$i] = $lst[$j];\n                $lst[$j] = $tmp;\n            }\n    \
    \        $j++;\n        }\n        $i++;\n    }\n    my $i = 0;\n    while ($i\
    \ < @lst) {\n        my $j = $i + 1;\n        while ($j < @lst) {\n          \
    \  if (length($lst[$i]) == length($lst[$j])) {\n                if ($lst[$i] gt\
    \ $lst[$j]) {\n                    my $tmp = $lst[$i];\n                    $lst[$i]\
    \ = $lst[$j];\n                    $lst[$j] = $tmp;\n                }\n     \
    \       }\n            $j++;\n        }\n        $i++;\n    }\n    my $i = 0;\n\
    \    while ($i < @lst) {\n        my $j = $i + 1;\n        while ($j < @lst) {\n\
    \            if ($lst[$i] eq $lst[$j]) {\n                splice(@lst, $j, 1);\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ @lst;\n}", "    my @lst = @$lst;\n    my @odd_lst = grep { length($_) % 2 ==\
    \ 1 } @lst;\n    my @even_lst = grep { length($_) % 2 == 0 } @lst;\n    my @sorted_odd_lst\
    \ = sort { length($a) <=> length($b) } @odd_lst;\n    my @sorted_even_lst = sort\
    \ { length($a) <=> length($b) } @even_lst;\n    return @sorted_odd_lst, @sorted_even_lst;\n\
    }", "    my @lst = @$lst;\n    my @sorted_lst = sort {length($a) <=> length($b)\
    \ || $a cmp $b} @lst;\n    my @result = ();\n    my $prev_len = -1;\n    for my\
    \ $word (@sorted_lst) {\n        my $len = length($word);\n        if ($len !=\
    \ $prev_len) {\n            push @result, $word;\n            $prev_len = $len;\n\
    \        }\n    }\n    return \\@result;\n}", "    my @sorted_list = sort { length($a)\
    \ <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_len = -1;\n    foreach\
    \ my $item (@sorted_list) {\n        my $len = length($item);\n        if ($len\
    \ != $prev_len) {\n            push @result, $item;\n            $prev_len = $len;\n\
    \        }\n    }\n    return \\@result;\n}", "    my @sorted_list = sort {length($a)\
    \ <=> length($b) || $a cmp $b} @$lst;\n    my @result;\n    my $prev_len = 0;\n\
    \    for my $item (@sorted_list) {\n        my $len = length($item);\n       \
    \ if ($len != $prev_len) {\n            push @result, $item;\n            $prev_len\
    \ = $len;\n        }\n    }\n    return \\@result;\n}", "    my @sorted_lst =\
    \ sort { length($a) <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_len\
    \ = 0;\n    for my $str (@sorted_lst) {\n        my $len = length($str);\n   \
    \     if ($len != $prev_len) {\n            push @result, $str;\n            $prev_len\
    \ = $len;\n        }\n    }\n    return \\@result;\n}", "    my @sorted_list =\
    \ sort { length($a) <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_len\
    \ = -1;\n    foreach my $item (@sorted_list) {\n        my $len = length($item);\n\
    \        if ($len != $prev_len) {\n            push @result, $item;\n        \
    \    $prev_len = $len;\n        }\n    }\n    return \\@result;\n}", "    my @lst\
    \ = @$lst;\n    my @res = ();\n    my $i = 0;\n    my $j = 0;\n    my $len = scalar\
    \ @lst;\n    while ($i < $len) {\n        if (length($lst[$i]) % 2 == 0) {\n \
    \           $res[$j] = $lst[$i];\n            $j++;\n        }\n        $i++;\n\
    \    }\n    @res = sort {length($a) <=> length($b) || $a cmp $b} @res;\n    return\
    \ @res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
