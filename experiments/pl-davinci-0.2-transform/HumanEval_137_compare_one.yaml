name: HumanEval_137_compare_one
language: pl
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ None if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1,\
  \ \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"\
  1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n\
  \        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
  \ 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
  \ 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"\
  2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($a =~ /^\\d+$/ && $b =~ /^\\d+$/) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+\\.\\d+$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\,\\d+$/\
    \ && $b =~ /^\\d+\\,\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $b;\n    }\n   \
    \ elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\,\\d+$/) {\n        return $b;\n    }\n\
    \    elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+$/) {\n        return $a;\n \
    \   }\n    elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+\\,\\d+$/) {\n        return\
    \ $b;\n    }\n    elsif ($a =~ /^\\d+\\,\\d+$/ && $b =~ /^\\d+$/) {\n        return\
    \ $a;\n    }\n    elsif ($a =~ /^\\d+\\,\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n \
    \       return $a;\n    }\n    else {\n        return undef;\n    }\n}", "   \
    \ my $type = undef;\n    if (defined $a && defined $b) {\n        if (looks_like_number($a)\
    \ && looks_like_number($b)) {\n            if ($a == $b) {\n                return\
    \ undef;\n            }\n            elsif ($a > $b) {\n                $type\
    \ = ref($a);\n                return $a;\n            }\n            else {\n\
    \                $type = ref($b);\n                return $b;\n            }\n\
    \        }\n        elsif (looks_like_number($a) && !looks_like_number($b)) {\n\
    \            return $b;\n        }\n        elsif (!looks_like_number($a) && looks_like_number($b))\
    \ {\n            return $a;\n        }\n        else {\n            return undef;\n\
    \        }\n    }\n    else {\n        return undef;\n    }\n}", "    my $type\
    \ = undef;\n    if (defined $a and defined $b) {\n        if (looks_like_number($a)\
    \ and looks_like_number($b)) {\n            if ($a > $b) {\n                $type\
    \ = ref($a);\n            } elsif ($a < $b) {\n                $type = ref($b);\n\
    \            }\n        } else {\n            if ($a gt $b) {\n              \
    \  $type = ref($a);\n            } elsif ($a lt $b) {\n                $type =\
    \ ref($b);\n            }\n        }\n    }\n    return $type;\n}", "    return\
    \ undef if $a == $b;\n    return $a if $a > $b;\n    return $b;\n}", "    my $a_type\
    \ = ref($a);\n    my $b_type = ref($b);\n    if ($a_type eq 'HASH' || $b_type\
    \ eq 'HASH') {\n        return undef;\n    }\n    if ($a_type eq 'ARRAY' || $b_type\
    \ eq 'ARRAY') {\n        return undef;\n    }\n    if ($a_type eq 'SCALAR' ||\
    \ $b_type eq 'SCALAR') {\n        return undef;\n    }\n    if ($a_type eq 'CODE'\
    \ || $b_type eq 'CODE') {\n        return undef;\n    }\n    if ($a_type eq 'GLOB'\
    \ || $b_type eq 'GLOB') {\n        return undef;\n    }\n    if ($a_type eq 'REF'\
    \ || $b_type eq 'REF') {\n        return undef;\n    }\n    if ($a_type eq 'Regexp'\
    \ || $b_type eq 'Regexp') {\n        return undef;\n    }\n    if ($a_type eq\
    \ 'LVALUE' || $b_type eq 'LVALUE') {\n        return undef;\n    }\n    if ($a_type\
    \ eq 'FORMAT' || $b_type eq 'FORMAT') {\n        return undef;\n    }\n    if\
    \ ($a_type eq 'IO' || $b_type eq 'IO') {\n        return undef;\n    }\n    if\
    \ ($a_type eq 'VSTRING' || $b_type eq 'VSTRING') {\n        return undef;\n  \
    \  }\n    if ($a_type eq 'Math::BigInt' || $b_type eq 'Math::BigInt') {\n    \
    \    return undef;\n    }\n    if ($a_type eq 'Math::BigFloat' || $b_type eq 'Math::BigFloat')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'Math::BigRat' || $b_type\
    \ eq 'Math::BigRat') {\n        return undef;\n    }\n    if ($a_type eq 'Math::Complex'\
    \ || $b_type eq 'Math::Complex')", "    my $a_num = $a + 0;\n    my $b_num = $b\
    \ + 0;\n    if ($a_num > $b_num) {\n        return $a;\n    } elsif ($a_num <\
    \ $b_num) {\n        return $b;\n    } else {\n        return undef;\n    }\n}",
  "    my $type = undef;\n    if (defined $a && defined $b) {\n        $type = ref\
    \ $a;\n        if ($type eq ref $b) {\n            if ($type eq 'HASH') {\n  \
    \              return undef;\n            }\n            elsif ($type eq 'ARRAY')\
    \ {\n                return undef;\n            }\n            elsif ($type eq\
    \ 'SCALAR') {\n                return undef;\n            }\n            elsif\
    \ ($type eq 'CODE') {\n                return undef;\n            }\n        \
    \    elsif ($type eq 'REF') {\n                return undef;\n            }\n\
    \            elsif ($type eq 'GLOB') {\n                return undef;\n      \
    \      }\n            elsif ($type eq 'LVALUE') {\n                return undef;\n\
    \            }\n            elsif ($type eq 'FORMAT') {\n                return\
    \ undef;\n            }\n            elsif ($type eq 'IO') {\n               \
    \ return undef;\n            }\n            elsif ($type eq 'VSTRING') {\n   \
    \             return undef;\n            }\n            elsif ($type eq 'Regexp')\
    \ {\n                return undef;\n            }\n            elsif ($type eq\
    \ 'Math::BigInt') {\n                return undef;\n            }\n          \
    \  elsif ($type eq 'Math::BigFloat') {\n                return undef;\n      \
    \      }\n            elsif ($type eq 'Math::BigRat') {\n                return\
    \ undef;\n            }\n            elsif ($type eq 'B::SPECIAL') {\n       \
    \         return undef;\n            }\n            elsif ($type eq 'B::IV') {\n\
    \                return undef;\n            }\n            elsif ($type eq 'B::PV')\
    \ {\n                return undef;\n            }\n            elsif ($type eq\
    \ 'B::PVIV') {\n                return undef;\n            }\n            elsif\
    \ ($type eq 'B::PVNV') {\n                return undef;\n            }\n     \
    \       elsif ($type eq 'B::PVMG') {\n                return undef;\n        \
    \    }\n            elsif ($type eq 'B::", "    if ($a =~ /^\\d+$/ && $b =~ /^\\\
    d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\\
    d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n \
    \   elsif ($a =~ /^\\d+\\,\\d+$/ && $b =~ /^\\d+\\,\\d+$/) {\n        return $a\
    \ > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+\\,\\\
    d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\,\\\
    d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n \
    \   elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\,\\d+$/) {\n \
    \       return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+$/ &&\
    \ $b =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~\
    \ /^\\d+\\,\\d+$/ && $b =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n  \
    \  }\n    else {\n        return undef;\n    }\n}", "    if ($a =~ /^\\d+$/ &&\
    \ $b =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~\
    \ /^\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $b;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+,\\d+$/) {\n     \
    \   return $b;\n    }\n    elsif ($a =~ /^\\d+,\\d+$/ && $b =~ /^\\d+$/) {\n \
    \       return $a;\n    }\n    elsif ($a =~ /^\\d+,\\d+$/ && $b =~ /^\\d+,\\d+$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    else {\n        return undef;\n\
    \    }\n}", "    if ($a =~ /^\\d+$/ && $b =~ /^\\d+$/) {\n        return $a >\
    \ $b ? $a : $b;\n    } elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n   \
    \     return $b;\n    } elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+,\\d+$/) {\n    \
    \    return $b;\n    } elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+$/) {\n   \
    \     return $a;\n    } elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~ /^\\d+\\.\\d+$/)\
    \ {\n        return $a > $b ? $a : $b;\n    } elsif ($a =~ /^\\d+\\.\\d+$/ &&\
    \ $b =~ /^\\d+,\\d+$/) {\n        return $b;\n    } elsif ($a =~ /^\\d+,\\d+$/\
    \ && $b =~ /^\\d+$/) {\n        return $a;\n    } elsif ($a =~ /^\\d+,\\d+$/ &&\
    \ $b =~ /^\\d+\\.\\d+$/) {\n        return $a;\n    } elsif ($a =~ /^\\d+,\\d+$/\
    \ && $b =~ /^\\d+,\\d+$/) {\n        return $a > $b ? $a : $b;\n    } else {\n\
    \        return undef;\n    }\n}", "    if ($a =~ /^\\d+$/ && $b =~ /^\\d+$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+$/ && $b\
    \ =~ /^\\d+[.,]\\d+$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+[.,]\\\
    d+$/ && $b =~ /^\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+[.,]\\\
    d+$/ && $b =~ /^\\d+[.,]\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n\
    \    else {\n        return undef;\n    }\n}", "    my $a_type = ref $a;\n   \
    \ my $b_type = ref $b;\n    if ($a_type eq 'SCALAR' || $a_type eq 'REF') {\n \
    \       $a = $$a;\n    }\n    if ($b_type eq 'SCALAR' || $b_type eq 'REF') {\n\
    \        $b = $$b;\n    }\n    if ($a_type eq 'ARRAY') {\n        $a = join('',\
    \ @$a);\n    }\n    if ($b_type eq 'ARRAY') {\n        $b = join('', @$b);\n \
    \   }\n    if ($a_type eq 'HASH') {\n        $a = join('', values %$a);\n    }\n\
    \    if ($b_type eq 'HASH') {\n        $b = join('', values %$b);\n    }\n   \
    \ if ($a_type eq 'CODE') {\n        $a = $a->();\n    }\n    if ($b_type eq 'CODE')\
    \ {\n        $b = $b->();\n    }\n    if ($a_type eq 'GLOB') {\n        $a = join('',\
    \ <$a>);\n    }\n    if ($b_type eq 'GLOB') {\n        $b = join('', <$b>);\n\
    \    }\n    if ($a_type eq 'IO') {\n        $a = join('', <$a>);\n    }\n    if\
    \ ($b_type eq 'IO') {\n        $b = join('', <$b>);\n    }\n    if ($a_type eq\
    \ 'FORMAT') {\n        $a = join('', <$a>);\n    }\n    if ($b_type eq 'FORMAT')\
    \ {\n        $b = join('', <$b>);\n    }\n    if ($a_type eq 'LVALUE') {\n   \
    \     $a = join('', <$a>);\n    }\n    if ($b_type eq 'LVALUE') {\n        $b\
    \ = join('', <$b>);\n    }\n    if ($a_type eq 'Regexp') {\n        $a = join('',\
    \ <$a>", "    my $type = undef;\n    if(ref($a) eq 'ARRAY') {\n        $type =\
    \ 'ARRAY';\n    } elsif(ref($a) eq 'HASH') {\n        $type = 'HASH';\n    } elsif(ref($a)\
    \ eq 'SCALAR') {\n        $type = 'SCALAR';\n    } elsif(ref($a) eq 'CODE') {\n\
    \        $type = 'CODE';\n    } elsif(ref($a) eq 'GLOB') {\n        $type = 'GLOB';\n\
    \    } elsif(ref($a) eq 'REF') {\n        $type = 'REF';\n    } elsif(ref($a)\
    \ eq 'Regexp') {\n        $type = 'Regexp';\n    } elsif(ref($a) eq 'LVALUE')\
    \ {\n        $type = 'LVALUE';\n    } elsif(ref($a) eq 'FORMAT') {\n        $type\
    \ = 'FORMAT';\n    } elsif(ref($a) eq 'IO') {\n        $type = 'IO';\n    } elsif(ref($a)\
    \ eq 'VSTRING') {\n        $type = 'VSTRING';\n    } elsif(ref($a) eq 'Regexp')\
    \ {\n        $type = 'Regexp';\n    } elsif(ref($a) eq 'Regexp') {\n        $type\
    \ = 'Regexp';\n    } elsif(ref($a) eq 'Regexp') {\n        $type = 'Regexp';\n\
    \    } elsif(ref($a) eq 'Regexp') {\n        $type = 'Regexp';\n    } elsif(ref($a)\
    \ eq 'Regexp') {\n        $type = 'Regexp';\n    } elsif(ref($a) eq 'Regexp')\
    \ {\n        $type = 'Regexp';\n    } elsif(ref($a) eq 'Regexp') {\n        $type\
    \ = 'Regexp';\n    } elsif(ref($a) eq 'Regexp') {\n        $type", "    if (ref($a)\
    \ eq 'HASH' or ref($b) eq 'HASH') {\n        return undef;\n    }\n    if (ref($a)\
    \ eq 'ARRAY' or ref($b) eq 'ARRAY') {\n        return undef;\n    }\n    if (ref($a)\
    \ eq 'SCALAR' or ref($b) eq 'SCALAR') {\n        return undef;\n    }\n    if\
    \ (ref($a) eq 'CODE' or ref($b) eq 'CODE') {\n        return undef;\n    }\n \
    \   if (ref($a) eq 'REF' or ref($b) eq 'REF') {\n        return undef;\n    }\n\
    \    if (ref($a) eq 'GLOB' or ref($b) eq 'GLOB') {\n        return undef;\n  \
    \  }\n    if (ref($a) eq 'LVALUE' or ref($b) eq 'LVALUE') {\n        return undef;\n\
    \    }\n    if (ref($a) eq 'FORMAT' or ref($b) eq 'FORMAT') {\n        return\
    \ undef;\n    }\n    if (ref($a) eq 'IO' or ref($b) eq 'IO') {\n        return\
    \ undef;\n    }\n    if (ref($a) eq 'VSTRING' or ref($b) eq 'VSTRING') {\n   \
    \     return undef;\n    }\n    if (ref($a) eq 'Regexp' or ref($b) eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if (ref($a) eq 'Math::BigInt' or ref($b)\
    \ eq 'Math::BigInt') {\n        return undef;\n    }\n    if (ref($a) eq 'Math::BigFloat'\
    \ or ref($b) eq 'Math::BigFloat') {\n        return undef;\n    }\n    if (ref($a)\
    \ eq 'Math::BigRat' or ref($b) eq 'Math::BigRat') {\n        return undef;\n \
    \   }\n    if (ref($a) eq 'B::SPECIAL' or ref($b) eq 'B::SPECIAL') {\n       \
    \ return undef;\n   ", "    my $a_type = ref $a;\n    my $b_type = ref $b;\n \
    \   if ($a_type eq 'HASH' || $b_type eq 'HASH') {\n        return undef;\n   \
    \ }\n    if ($a_type eq 'ARRAY' || $b_type eq 'ARRAY') {\n        return undef;\n\
    \    }\n    if ($a_type eq 'SCALAR' || $b_type eq 'SCALAR') {\n        return\
    \ undef;\n    }\n    if ($a_type eq 'CODE' || $b_type eq 'CODE') {\n        return\
    \ undef;\n    }\n    if ($a_type eq 'REF' || $b_type eq 'REF') {\n        return\
    \ undef;\n    }\n    if ($a_type eq 'GLOB' || $b_type eq 'GLOB') {\n        return\
    \ undef;\n    }\n    if ($a_type eq 'LVALUE' || $b_type eq 'LVALUE') {\n     \
    \   return undef;\n    }\n    if ($a_type eq 'FORMAT' || $b_type eq 'FORMAT')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'IO' || $b_type eq 'IO')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'VSTRING' || $b_type eq\
    \ 'VSTRING') {\n        return undef;\n    }\n    if ($a_type eq 'Regexp' || $b_type\
    \ eq 'Regexp') {\n        return undef;\n    }\n    if ($a_type eq 'Math::BigInt'\
    \ || $b_type eq 'Math::BigInt') {\n        return undef;\n    }\n    if ($a_type\
    \ eq 'Math::BigFloat' || $b_type eq 'Math::BigFloat') {\n        return undef;\n\
    \    }\n    if ($a_type eq 'Math::BigRat' || $b_type eq 'Math::BigRat') {\n  \
    \      return undef;\n    }\n    if ($a_type eq 'B::SPECIAL' || $b_type eq 'B::SPECIAL')",
  "    $a =~ s/,/./;\n    $b =~ s/,/./;\n    return $a if $a > $b;\n    return $b\
    \ if $b > $a;\n    return undef;\n}", "    return undef if $a == $b;\n    return\
    \ $a if $a > $b;\n    return $b;\n}", "    my $a_type = ref $a;\n    my $b_type\
    \ = ref $b;\n    if ($a_type eq 'HASH' || $b_type eq 'HASH') {\n        return\
    \ undef;\n    }\n    if ($a_type eq 'ARRAY' || $b_type eq 'ARRAY') {\n       \
    \ return undef;\n    }\n    if ($a_type eq 'SCALAR' || $b_type eq 'SCALAR') {\n\
    \        return undef;\n    }\n    if ($a_type eq 'CODE' || $b_type eq 'CODE')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'GLOB' || $b_type eq 'GLOB')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'REF' || $b_type eq 'REF')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'Regexp' || $b_type eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'LVALUE' || $b_type eq 'LVALUE')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'FORMAT' || $b_type eq 'FORMAT')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'IO' || $b_type eq 'IO')\
    \ {\n        return undef;\n    }\n    if ($a_type eq 'VSTRING' || $b_type eq\
    \ 'VSTRING') {\n        return undef;\n    }\n    if ($a_type eq 'Math::BigInt'\
    \ || $b_type eq 'Math::BigInt') {\n        return undef;\n    }\n    if ($a_type\
    \ eq 'Math::BigFloat' || $b_type eq 'Math::BigFloat') {\n        return undef;\n\
    \    }\n    if ($a_type eq 'Math::BigRat' || $b_type eq 'Math::BigRat') {\n  \
    \      return undef;\n    }\n    if ($a_type eq 'B::SPECIAL' || $b_type eq 'B::SPECIAL')",
  "    my $type = undef;\n    if(ref($a) eq 'HASH' || ref($b) eq 'HASH') {\n     \
    \   return undef;\n    }\n    if(ref($a) eq 'ARRAY' || ref($b) eq 'ARRAY') {\n\
    \        return undef;\n    }\n    if(ref($a) eq 'SCALAR' || ref($b) eq 'SCALAR')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'CODE' || ref($b) eq 'CODE')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'GLOB' || ref($b) eq 'GLOB')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'Regexp' || ref($b) eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'REF' || ref($b) eq 'REF')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'LVALUE' || ref($b) eq 'LVALUE')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'FORMAT' || ref($b) eq 'FORMAT')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'IO' || ref($b) eq 'IO')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'VSTRING' || ref($b) eq 'VSTRING')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'Regexp' || ref($b) eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'Regexp' || ref($b) eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'Regexp' || ref($b) eq 'Regexp')\
    \ {\n        return undef;\n    }\n    if(ref($a) eq 'Regexp' || ref($b) eq 'Regexp')\
    \ {\n        return undef;\n", "    if ($a =~ /^\\d+$/ && $b =~ /^\\d+$/) {\n\
    \        return $a > $b ? $a : $b;\n    } elsif ($a =~ /^\\d+$/ && $b =~ /^\\\
    d+\\.\\d+$/) {\n        return $b;\n    } elsif ($a =~ /^\\d+$/ && $b =~ /^\\\
    d+,\\d+$/) {\n        return $b;\n    } elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~\
    \ /^\\d+$/) {\n        return $a;\n    } elsif ($a =~ /^\\d+\\.\\d+$/ && $b =~\
    \ /^\\d+\\.\\d+$/) {\n        return $a > $b ? $a : $b;\n    } elsif ($a =~ /^\\\
    d+\\.\\d+$/ && $b =~ /^\\d+,\\d+$/) {\n        return $b;\n    } elsif ($a =~\
    \ /^\\d+,\\d+$/ && $b =~ /^\\d+$/) {\n        return $a;\n    } elsif ($a =~ /^\\\
    d+,\\d+$/ && $b =~ /^\\d+\\.\\d+$/) {\n        return $a;\n    } elsif ($a =~\
    \ /^\\d+,\\d+$/ && $b =~ /^\\d+,\\d+$/) {\n        return $a > $b ? $a : $b;\n\
    \    } else {\n        return undef;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
