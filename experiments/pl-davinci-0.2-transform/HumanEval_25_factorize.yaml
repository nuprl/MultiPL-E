name: HumanEval_25_factorize
language: pl
prompt: "# Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
  # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n\
  \        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2,\
  \ 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3,\
  \ 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3,\
  \ 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3,\
  \ 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n  \
    \      }\n        $i++;\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    my $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n         \
    \   push @factors, $i;\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    my $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            push @factors,\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        if ($n %\
    \ $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return @factors;\n}", "   \
    \ my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        while ($n % $i ==\
    \ 0) {\n            push @factors, $i;\n            $n /= $i;\n        }\n   \
    \     $i++;\n    }\n    return @factors;\n}", "    my @factors;\n    while ($n\
    \ % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my $i =\
    \ 3;\n    while ($i <= sqrt($n)) {\n        while ($n % $i == 0) {\n         \
    \   push @factors, $i;\n            $n /= $i;\n        }\n        $i += 2;\n \
    \   }\n    if ($n > 2) {\n        push @factors, $n;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        if ($n %\
    \ $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return @factors;\n}", "   \
    \ my @factors;\n    my $d = 2;\n    while ($n > 1) {\n        while ($n % $d ==\
    \ 0) {\n            push @factors, $d;\n            $n /= $d;\n        }\n   \
    \     $d += 1;\n    }\n    return @factors;\n}", "    my @factors;\n    while\
    \ ($n % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my\
    \ $i = 3;\n    while ($i <= sqrt($n)) {\n        while ($n % $i == 0) {\n    \
    \        push @factors, $i;\n            $n /= $i;\n        }\n        $i += 2;\n\
    \    }\n    if ($n > 2) {\n        push @factors, $n;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        if ($n %\
    \ $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return @factors;\n}", "   \
    \ my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0)\
    \ {\n            push @factors, $i;\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    my $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n         \
    \   push @factors, $i;\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    my $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            push @factors,\
    \ $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    my $i = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            push @factors, $i;\n  \
    \          $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return @factors;\n}", "    my @factors;\n    my $i = 2;\n    while ($n >\
    \ 1) {\n        if ($n % $i == 0) {\n            push @factors, $i;\n        \
    \    $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ @factors;\n}", "    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n   \
    \     if ($n % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n\
    \        $n /= 2;\n    }\n    my $factor = 3;\n    while ($n > 1) {\n        while\
    \ ($n % $factor == 0) {\n            push @factors, $factor;\n            $n /=\
    \ $factor;\n        }\n        $factor += 2;\n    }\n    return @factors;\n}",
  "    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        if ($n % $i ==\
    \ 0) {\n            push @factors, $i;\n            $n /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    my $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n         \
    \   push @factors, $i;\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    while ($n\
    \ % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my $i =\
    \ 3;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            push @factors,\
    \ $i;\n            $n /= $i;\n        } else {\n            $i += 2;\n       \
    \ }\n    }\n    return @factors;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
