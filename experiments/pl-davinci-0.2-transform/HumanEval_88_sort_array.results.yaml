language: pl
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $sum = $sorted_array[0] + $sorted_array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     @sorted_array = sort {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return \\@sorted;\n   \
    \ } else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if(($sorted[0] + $sorted[-1]) % 2 == 0) {\n        return reverse @sorted;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    my $sum\
    \ = $result[0] + $result[-1];\n    if ($sum % 2 == 0) {\n        @result = sort\
    \ {$b <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b} @result;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array > 0 && ($array->[0] + $array->[-1]) % 2 == 0) {\n        return\
    \ reverse @sorted;\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if (scalar(@$array) > 0) {\n        if (($array->[0] + $array->[-1])\
    \ % 2 == 0) {\n            @sorted_array = reverse @sorted_array;\n        }\n\
    \    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a <=> $b\
    \ } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return \\@sorted;\n \
    \   } else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    $sum % 2 ? sort {$a <=> $b} @$array : sort {$b <=> $a} @$array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(@$array == 0 || @$array == 1) {\n        return @$array;\n    }\n    if(($array->[0]\
    \ + $array->[-1]) % 2 == 0) {\n        return reverse @sorted;\n    }\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return [sort { $order * ($a <=> $b) } @sorted];\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if(@$array > 0 && ($array->[0] + $array->[-1]) % 2 == 0) {\n        @sorted\
    \ = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        @sorted = reverse @sorted;\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = ();\n    if(@$array\
    \ == 0) {\n        return @sorted_array;\n    }\n    if(@$array == 1) {\n    \
    \    return @$array;\n    }\n    if(($array->[0] + $array->[-1]) % 2 == 0) {\n\
    \        @sorted_array = sort {$b <=> $a} @$array;\n    } else {\n        @sorted_array\
    \ = sort {$a <=> $b} @$array;\n    }\n    return @sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        @sorted = reverse @sorted;\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<=>' : 'cmp';\n    return [sort {$a->$sort_order($b)}\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "<=>" via package "2" (perhaps you forgot to
    load "2"?) at /tmp/tmpyyqatihr.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort {$a <=> $b}\
    \ @$array;\n    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse\
    \ @sorted_array];\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array > 0 && $array->[0] + $array->[-1] % 2 == 0) {\n        @sorted\
    \ = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $order == 1 ? @sorted : reverse @sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $array->[0] + $array->[-1] % 2 ? @sorted : reverse @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    return $array if $sum == 0;\n    my $order = $sum % 2 == 0 ? 'desc' : 'asc';\n\
    \    my @sorted = sort { $a <=> $b } @$array;\n    return $order eq 'desc' ? reverse\
    \ @sorted : @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = ();\n    if (scalar(@$array)\
    \ == 0) {\n        return @sorted;\n    }\n    if (scalar(@$array) == 1) {\n \
    \       return @$array;\n    }\n    if (($array->[0] + $array->[-1]) % 2 == 0)\
    \ {\n        @sorted = sort {$b <=> $a} @$array;\n    } else {\n        @sorted\
    \ = sort {$a <=> $b} @$array;\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $size = @$array;\n    if ($size\
    \ == 0) {\n        return [];\n    }\n    if ($size == 1) {\n        return [$array->[0]];\n\
    \    }\n    my $sum = $array->[0] + $array->[$size - 1];\n    my $sorted = [sort\
    \ { $a <=> $b } @$array];\n    if ($sum % 2 == 0) {\n        return [reverse @$sorted];\n\
    \    }\n    return $sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $sort_order\
    \ $b } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpdexztd19.pl line 19, near\
    \ \"$a $sort_order\"\n\t(Missing operator before $sort_order?)\nScalar found where\
    \ operator expected at /tmp/tmpdexztd19.pl line 19, near \"$sort_order $b\"\n\t\
    (Missing operator before $b?)\nsyntax error at /tmp/tmpdexztd19.pl line 19, near\
    \ \"$a $sort_order \"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpdexztd19.pl\
    \ line 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n       \
    \ return [reverse @sorted];\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    if\
    \ (scalar(@sorted_array) == 0) {\n        return @sorted_array;\n    }\n    if\
    \ (scalar(@sorted_array) == 1) {\n        return @sorted_array;\n    }\n    if\
    \ (($sorted_array[0] + $sorted_array[-1]) % 2 == 0) {\n        @sorted_array =\
    \ sort {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array = sort\
    \ {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if (@result\
    \ > 0) {\n        if ($result[0] + $result[-1] % 2 == 0) {\n            @result\
    \ = sort {$b <=> $a} @result;\n        } else {\n            @result = sort {$a\
    \ <=> $b} @result;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return \\@sorted;\n   \
    \ } else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        return\
    \ [reverse @sorted_array];\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        @sorted = reverse @sorted;\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2) {\n        return \\@sorted;\n    } else\
    \ {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return \\@sorted;\n   \
    \ } else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ( $sorted[0] + $sorted[-1] % 2 == 0 ) {\n        return \\@sorted;\n \
    \   }\n    else {\n        return [ reverse @sorted ];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $array->[0] + $array->[-1] % 2 ? @sorted : reverse @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [reverse sort {$a <=> $b} @$array];\n\
    \    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return [ reverse @sorted\
    \ ];\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return reverse @sorted;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (scalar(@$array) > 0 && ($array->[0] + $array->[-1]) % 2 == 0) {\n   \
    \     @sorted = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $array->[0] + $array->[-1] % 2 ? @sorted : reverse @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? 1 : -1;\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $sum = $sorted_array[0] + $sorted_array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     @sorted_array = sort {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    $sum % 2 ? sort {$a <=> $b} @$array : sort {$b <=> $a} @$array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    my $sum\
    \ = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n        @result = sort\
    \ {$b <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b} @result;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_func = $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    my\
    \ @sorted = sort $sort_func @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n       \
    \ @sorted = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if(@result)\
    \ {\n        if(($result[0] + $result[-1]) % 2) {\n            @result = sort\
    \ {$a <=> $b} @result;\n        } else {\n            @result = sort {$b <=> $a}\
    \ @result;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if(($sorted[0] + $sorted[-1]) % 2 == 0) {\n        return reverse @sorted;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if(@result)\
    \ {\n        if(($result[0] + $result[-1]) % 2) {\n            @result = sort\
    \ {$a <=> $b} @result;\n        } else {\n            @result = sort {$b <=> $a}\
    \ @result;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? 1 : -1;\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    }\n\
    \    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array && $array->[0] + $array->[-1] % 2 == 0) {\n        @sorted =\
    \ reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    my $sum\
    \ = $result[0] + $result[-1];\n    if ($sum % 2 == 0) {\n        @result = sort\
    \ {$b <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b} @result;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sorted_array = $sum % 2 ? [sort {$a <=> $b} @$array] : [sort {$b <=>\
    \ $a} @$array];\n    return $sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array > 0 && $array->[0] + $array->[-1] % 2 == 0) {\n        @sorted\
    \ = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array == 0 || @$array == 1) {\n        return $array;\n    }\n    if\
    \ ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return \\@sorted;\n    }\n  \
    \  else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (scalar(@$array) > 0 && ($array->[0] + $array->[-1]) % 2 == 0) {\n   \
    \     return [reverse @sorted];\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $array->[0] + $array->[-1] % 2 ? @sorted : reverse @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @array = @$array;\n    my $sum\
    \ = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b\
    \ <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n   \
    \ }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        @sorted_array\
    \ = reverse @sorted_array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a <=> $b\
    \ } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [reverse sort @$array];\n    }\n   \
    \ else {\n        return [sort @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array % 2 == 0) {\n        return \\@sorted;\n    } else {\n      \
    \  return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n       \
    \ return [reverse @sorted];\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first = $array->[0];\n    my $last\
    \ = $array->[-1];\n    my $sum = $first + $last;\n    if ($sum % 2 == 0) {\n \
    \       return [sort {$b <=> $a} @$array];\n    } else {\n        return [sort\
    \ {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        @sorted_array\
    \ = reverse @sorted_array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ( $sorted[0] + $sorted[-1] % 2 == 0 ) {\n        @sorted = reverse @sorted;\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $first_index = $sorted_array[0];\n    my $last_index = $sorted_array[-1];\n\
    \    my $sum = $first_index + $last_index;\n    if ($sum % 2 == 0) {\n       \
    \ @sorted_array = sort {$b <=> $a} @sorted_array;\n    }\n    else {\n       \
    \ @sorted_array = sort {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return \\\
    @sorted_array;\n    } else {\n        return [reverse @sorted_array];\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_func = $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    return\
    \ [sort $sort_func @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ( $array->[0] + $array->[-1] % 2 == 0 ) {\n        return\
    \ \\@sorted_array;\n    }\n    else {\n        return [ reverse @sorted_array\
    \ ];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        @sorted_array\
    \ = reverse @sorted_array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    my $sum\
    \ = $result[0] + $result[-1];\n    if ($sum % 2 == 0) {\n        @result = sort\
    \ {$b <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b} @result;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a <=> $b\
    \ } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $sum = $sorted_array[0] + $sorted_array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     @sorted_array = sort {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (scalar(@$array) > 0 && ($sorted[0] + $sorted[-1]) % 2 == 0) {\n     \
    \   @sorted = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $ascending = $sum % 2 ? 1 : 0;\n    my @sorted = sort { $ascending ? $a\
    \ <=> $b : $b <=> $a } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if (scalar(@result)\
    \ == 0) {\n        return @result;\n    }\n    if (scalar(@result) == 1) {\n \
    \       return @result;\n    }\n    my $sum = $result[0] + $result[-1];\n    if\
    \ ($sum % 2 == 0) {\n        @result = sort {$b <=> $a} @result;\n    } else {\n\
    \        @result = sort {$a <=> $b} @result;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2) {\n        return \\@sorted;\n    } else\
    \ {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $sum = $sorted_array[0] + $sorted_array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     @sorted_array = sort {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array == 0 || @$array == 1) {\n        return $array;\n    }\n    elsif\
    \ ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return \\@sorted;\n    }\n  \
    \  else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ( $array->[0] + $array->[-1] % 2 == 0 ) {\n        return\
    \ reverse @sorted_array;\n    }\n    else {\n        return @sorted_array;\n \
    \   }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    }\n\
    \    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_func = $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    return\
    \ [sort $sort_func @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (@$array == 0 || @$array == 1) {\n        return $array;\n    }\n    else\
    \ {\n        if ($sorted[0] + $sorted[-1] % 2 == 0) {\n            return \\@sorted;\n\
    \        }\n        else {\n            return [reverse @sorted];\n        }\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if (scalar(@result)\
    \ > 0) {\n        my $sum = $result[0] + $result[-1];\n        if ($sum % 2 ==\
    \ 0) {\n            @result = sort {$b <=> $a} @result;\n        } else {\n  \
    \          @result = sort {$a <=> $b} @result;\n        }\n    }\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return reverse @sorted;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if(@$array > 0 && $array->[0] + $array->[-1] % 2 == 0) {\n        @sorted\
    \ = reverse @sorted;\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if (scalar(@$array) > 0 && ($array->[0] + $array->[-1]) % 2\
    \ == 0) {\n        @sorted_array = reverse @sorted_array;\n    }\n    return \\\
    @sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (scalar(@$array) > 0 && ($array->[0] + $array->[-1]) % 2 == 0) {\n   \
    \     return reverse @sorted;\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return $array->[0] + $array->[-1] % 2 ? @sorted : reverse @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return [reverse\
    \ @sorted_array];\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if(($array->[0] + $array->[-1]) % 2 == 0) {\n        return\
    \ [reverse @sorted_array];\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if (scalar(@$array) == 0 || scalar(@$array) == 1) {\n        return @sorted;\n\
    \    }\n    if ($sorted[0] + $sorted[-1] % 2 == 0) {\n        return reverse @sorted;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821498
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpyd9fuwnu.pl line 19, near\
    \ \"$a $order\"\n\t(Missing operator before $order?)\nScalar found where operator\
    \ expected at /tmp/tmpyd9fuwnu.pl line 19, near \"$order $b\"\n\t(Missing operator\
    \ before $b?)\nsyntax error at /tmp/tmpyd9fuwnu.pl line 19, near \"$a $order \"\
    \nBEGIN not safe after errors--compilation aborted at /tmp/tmpyd9fuwnu.pl line\
    \ 22.\n"
  stdout: ''
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort { $a <=> $b\
    \ } @$array;\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return [reverse\
    \ @sorted_array];\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821498
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821498
