name: HumanEval_26_remove_duplicates
language: pl
prompt: "# From a list of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my %seen;\n    my @uniq;\n    foreach my $number (@$numbers) {\n\
    \        if (!$seen{$number}) {\n            push @uniq, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@uniq;\n}", "    my %seen;\n\
    \    my @uniq;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number})\
    \ {\n            push @uniq, $number;\n            $seen{$number} = 1;\n     \
    \   }\n    }\n    return \\@uniq;\n}", "    my %seen;\n    my @result;\n    foreach\
    \ my $number (@$numbers) {\n        if (!$seen{$number}) {\n            push @result,\
    \ $number;\n            $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n\
    }", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n\
    \    my @unique;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number})\
    \ {\n            push @unique, $number;\n            $seen{$number} = 1;\n   \
    \     }\n    }\n    return \\@unique;\n}", "    my %seen;\n    my @unique;\n \
    \   foreach my $number (@$numbers) {\n        if (!$seen{$number}) {\n       \
    \     push @unique, $number;\n            $seen{$number} = 1;\n        }\n   \
    \ }\n    return \\@unique;\n}", "    my %seen;\n    my @result;\n    foreach my\
    \ $number (@$numbers) {\n        if (!$seen{$number}) {\n            push @result,\
    \ $number;\n            $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n\
    }", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n\
    \    my @unique;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number})\
    \ {\n            push @unique, $number;\n            $seen{$number} = 1;\n   \
    \     }\n    }\n    return \\@unique;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n\
    }", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n\
    \    return grep { !$seen{$_}++ } @$numbers;\n}", "    my %seen;\n    return grep\
    \ { !$seen{$_}++ } @$numbers;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers)\
    \ {\n        if (!$seen{$number}) {\n            push @result, $number;\n    \
    \        $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", " \
    \   my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n       \
    \ if (!$seen{$number}) {\n            push @result, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n    my @unique\
    \ = grep { !$seen{$_}++ } @$numbers;\n    return \\@unique;\n}", "    my %seen;\n\
    \    my @unique;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number})\
    \ {\n            push @unique, $number;\n            $seen{$number} = 1;\n   \
    \     }\n    }\n    return \\@unique;\n}", "    my %seen;\n    my @unique;\n \
    \   foreach my $number (@$numbers) {\n        if (!$seen{$number}) {\n       \
    \     push @unique, $number;\n            $seen{$number} = 1;\n        }\n   \
    \ }\n    return \\@unique;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
