name: HumanEval_132_is_nested
language: pl
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return True if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"\
  [][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n\
  # 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n\
  \        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  [][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @stack;\n    my @chars = split //, $string;\n    my $is_nested\
    \ = 0;\n    for my $char (@chars) {\n        if ($char eq '[') {\n           \
    \ push @stack, $char;\n        }\n        elsif ($char eq ']') {\n           \
    \ if (scalar @stack > 0) {\n                pop @stack;\n                $is_nested\
    \ = 1;\n            }\n            else {\n                return \"\";\n    \
    \        }\n        }\n    }\n    return $is_nested;\n}", "    my @stack;\n  \
    \  for my $char (split //, $string) {\n        if ($char eq '[') {\n         \
    \   push @stack, $char;\n        }\n        elsif ($char eq ']') {\n         \
    \   if (@stack) {\n                pop @stack;\n            }\n            else\
    \ {\n                return '';\n            }\n        }\n    }\n    return @stack\
    \ ? '' : 1;\n}", "    my $count = 0;\n    my $nested = 0;\n    my $prev = '';\n\
    \    foreach my $char (split //, $string) {\n        if ($char eq '[') {\n   \
    \         $count++;\n            if ($prev eq '[') {\n                $nested\
    \ = 1;\n            }\n        }\n        elsif ($char eq ']') {\n           \
    \ $count--;\n        }\n        $prev = $char;\n    }\n    return $count == 0\
    \ && $nested;\n}", "    my @array = split(//, $string);\n    my $count = 0;\n\
    \    my $nested = 0;\n    my $i = 0;\n    while ($i < scalar(@array)) {\n    \
    \    if ($array[$i] eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($array[$i] eq ']') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            $nested = 1;\n        }\n        $i++;\n    }\n    if ($count\
    \ == 0 && $nested == 1) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return \"\";\n        }\n    }\n    return $count == 0 ? 1 :\
    \ \"\";\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $count++;\n       \
    \ }\n        elsif ($char eq ']') {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return 0;\n        }\n        if ($count > 0)\
    \ {\n            $nested = 1;\n        }\n    }\n    if ($count == 0 && $nested\
    \ == 1) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
  "    my @stack;\n    my $nested = 0;\n    foreach my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            push @stack, $char;\n        } elsif\
    \ ($char eq ']') {\n            if (@stack) {\n                pop @stack;\n \
    \               $nested = 1;\n            } else {\n                return '';\n\
    \            }\n        }\n    }\n    return $nested;\n}", "    my $count = 0;\n\
    \    my $nested = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            $nested\
    \ = 1;\n        }\n    }\n    return $nested;\n}", "    my $count = 0;\n    my\
    \ $nested = 0;\n    my $last_char = \"\";\n    my $last_last_char = \"\";\n  \
    \  foreach my $char (split //, $string) {\n        if ($char eq \"[\") {\n   \
    \         $count++;\n            if ($last_char eq \"[\" && $last_last_char eq\
    \ \"[\") {\n                $nested = 1;\n            }\n        }\n        $last_last_char\
    \ = $last_char;\n        $last_char = $char;\n    }\n    return $nested;\n}",
  "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    my $i = 0;\n  \
    \  my $len = length($string);\n    while ($i < $len) {\n        if (substr($string,\
    \ $i, 1) eq \"[\") {\n            $open++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq \"]\") {\n            $close++;\n        }\n        if ($open > 0\
    \ && $close > 0) {\n            $nested = 1;\n        }\n        $i++;\n    }\n\
    \    return $nested;\n}", "    my $count = 0;\n    my $nested = 0;\n    my $last_char\
    \ = '';\n    foreach my $char (split //, $string) {\n        if ($char eq '['\
    \ && $last_char eq '[') {\n            $nested = 1;\n        }\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        if ($char eq ']') {\n \
    \           $count--;\n        }\n        $last_char = $char;\n    }\n    if ($count\
    \ == 0 && $nested == 1) {\n        return 1;\n    }\n    return '';\n}", "   \
    \ my $count = 0;\n    my $is_nested = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            $is_nested = 1;\n        }\n    }\n    return $is_nested;\n}",
  "    my $count = 0;\n    my $nested = 0;\n    my $prev_char = '';\n    my $prev_prev_char\
    \ = '';\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $count++;\n            if ($prev_char eq '[' && $prev_prev_char eq\
    \ '[') {\n                $nested = 1;\n            }\n        }\n        $prev_prev_char\
    \ = $prev_char;\n        $prev_char = $char;\n    }\n    return $nested;\n}",
  "    my $count = 0;\n    my $nested = 0;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $char = substr($string, $i, 1);\n        if ($char eq \"\
    [\") {\n            $count++;\n        }\n        elsif ($char eq \"]\") {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"\";\n        }\n        if ($count > 0) {\n            $nested = 1;\n    \
    \    }\n    }\n    if ($count == 0 && $nested == 1) {\n        return 1;\n   \
    \ }\n    else {\n        return \"\";\n    }\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return \"\";\n        }\n    }\n    return\
    \ $count ? \"\" : 1;\n}", "    my $count = 0;\n    my $nested = 0;\n    for my\
    \ $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return 0;\n        }\n        if ($count\
    \ > 0) {\n            $nested = 1;\n        }\n    }\n    return $nested;\n}",
  "    my $count = 0;\n    foreach my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $count == 0;\n}", "    my $count = 0;\n   \
    \ my $nested = 0;\n    for (my $i = 0; $i < length($string); $i++) {\n       \
    \ my $char = substr($string, $i, 1);\n        if ($char eq \"[\") {\n        \
    \    $count++;\n        } elsif ($char eq \"]\") {\n            $count--;\n  \
    \      }\n        if ($count < 0) {\n            $nested = 1;\n        }\n   \
    \ }\n    if ($count == 0 && $nested == 1) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my $count = 0;\n    my $nested = 0;\n \
    \   for my $ch (split //, $string) {\n        if ($ch eq '[') {\n            $count++;\n\
    \        }\n        elsif ($ch eq ']') {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return\
    \ $nested;\n}", "    my $count = 0;\n    my $nested = 0;\n    my $last_char =\
    \ '';\n    foreach my $char (split(//, $string)) {\n        if ($char eq '[')\
    \ {\n            $count++;\n            if ($last_char eq '[') {\n           \
    \     $nested++;\n            }\n        }\n        elsif ($char eq ']') {\n \
    \           $count--;\n        }\n        $last_char = $char;\n    }\n    return\
    \ $count == 0 && $nested > 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
