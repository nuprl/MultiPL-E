name: HumanEval_44_change_base
language: pl
prompt: "# Change numerical base of input number x to base.\n# return string representation\
  \ after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8,\
  \ 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n#\
  \ \"111\"\nsub change_base {\n    my($x, $base) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n\
  \        if(eq_deeply($candidate->(8, 3),\"22\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234,\
  \ 2),\"11101010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(16, 2),\"10000\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
  \ 2),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(2, 3),\"2\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5),\"4\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(5, 6),\"5\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
  \ 8),\"7\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $result = \"\";\n    while ($x > 0) {\n        $result = ($x\
    \ % $base) . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    while ($x > 0) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my $result = '';\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n\
    \        $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while($x > 0) {\n        $result = ($x % $base) . $result;\n  \
    \      $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result\
    \ = '';\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result =\
    \ \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result =\
    \ \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result =\
    \ \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result =\
    \ '';\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n     \
    \   $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n       \
    \ $x = int($x / $base);\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
