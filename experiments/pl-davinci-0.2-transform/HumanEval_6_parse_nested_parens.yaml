name: HumanEval_6_parse_nested_parens
language: pl
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n\
  \        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  () (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nesting = 0;\n\
    \        my $nesting = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq '(') {\n                $nesting++;\n          \
    \      if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        my @chars = split(//, $paren_group);\n        foreach my $char\
    \ (@chars) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach\
    \ my $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"\
    (\") {\n                $paren_level++;\n            } elsif ($paren_char eq \"\
    )\") {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $nesting = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \            } elsif ($char eq ')') {\n                $nesting--;\n         \
    \   }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            } elsif ($char eq \")\") {\n  \
    \              $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_depth;\n    foreach my $group (@paren_groups)\
    \ {\n        my $depth = 0;\n        my $max_depth = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $depth++;\n\
    \            } elsif ($char eq \")\") {\n                $depth--;\n         \
    \   }\n            $max_depth = $depth if ($depth > $max_depth);\n        }\n\
    \        push(@max_depth, $max_depth);\n    }\n    return @max_depth;\n}", " \
    \   my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nested_parens;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $curr_nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $curr_nesting++;\n   \
    \             $max_nesting = $curr_nesting if $curr_nesting > $max_nesting;\n\
    \            } elsif ($char eq \")\") {\n                $curr_nesting--;\n  \
    \          }\n        }\n        push @nested_parens, $max_nesting;\n    }\n \
    \   return @nested_parens;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            } elsif ($char eq \")\") {\n         \
    \       $level--;\n            }\n            $max_level = $level if ($level >\
    \ $max_level);\n        }\n        push(@paren_levels, $max_level);\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            }\n            elsif ($char eq\
    \ \")\") {\n                $level--;\n            }\n            $max_level =\
    \ $level if ($level > $max_level);\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            } elsif ($char eq \")\") {\n        \
    \        $paren_level--;\n            }\n            if ($paren_level > $max_paren_level)\
    \ {\n                $max_paren_level = $paren_level;\n            }\n       \
    \ }\n        push(@paren_levels, $max_paren_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nesting_level\
    \ = 0;\n        my $current_nesting_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
