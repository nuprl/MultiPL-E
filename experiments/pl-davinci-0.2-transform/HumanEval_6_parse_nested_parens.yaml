name: HumanEval_6_parse_nested_parens
language: pl
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n\
  \        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  () (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nesting = 0;\n\
    \        my $nesting = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq '(') {\n                $nesting++;\n          \
    \      if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        my @chars = split(//, $paren_group);\n        foreach my $char\
    \ (@chars) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach\
    \ my $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"\
    (\") {\n                $paren_level++;\n            } elsif ($paren_char eq \"\
    )\") {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $nesting = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \            } elsif ($char eq ')') {\n                $nesting--;\n         \
    \   }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            } elsif ($char eq \")\") {\n  \
    \              $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_depth;\n    foreach my $group (@paren_groups)\
    \ {\n        my $depth = 0;\n        my $max_depth = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $depth++;\n\
    \            } elsif ($char eq \")\") {\n                $depth--;\n         \
    \   }\n            $max_depth = $depth if ($depth > $max_depth);\n        }\n\
    \        push(@max_depth, $max_depth);\n    }\n    return @max_depth;\n}", " \
    \   my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nested_parens;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $curr_nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $curr_nesting++;\n   \
    \             $max_nesting = $curr_nesting if $curr_nesting > $max_nesting;\n\
    \            } elsif ($char eq \")\") {\n                $curr_nesting--;\n  \
    \          }\n        }\n        push @nested_parens, $max_nesting;\n    }\n \
    \   return @nested_parens;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            } elsif ($char eq \")\") {\n         \
    \       $level--;\n            }\n            $max_level = $level if ($level >\
    \ $max_level);\n        }\n        push(@paren_levels, $max_level);\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            }\n            elsif ($char eq\
    \ \")\") {\n                $level--;\n            }\n            $max_level =\
    \ $level if ($level > $max_level);\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            } elsif ($char eq \")\") {\n        \
    \        $paren_level--;\n            }\n            if ($paren_level > $max_paren_level)\
    \ {\n                $max_paren_level = $paren_level;\n            }\n       \
    \ }\n        push(@paren_levels, $max_paren_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nesting_level\
    \ = 0;\n        my $current_nesting_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_depth;\n    foreach\
    \ my $group (@paren_groups) {\n        my $depth = 0;\n        my $max_depth =\
    \ 0;\n        foreach my $char (split(//, $group)) {\n            if ($char eq\
    \ \"(\") {\n                $depth++;\n            } elsif ($char eq \")\") {\n\
    \                $depth--;\n            }\n            $max_depth = $depth if\
    \ ($depth > $max_depth);\n        }\n        push(@max_depth, $max_depth);\n \
    \   }\n    return @max_depth;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $current_nesting = 0;\n        my @paren_chars\
    \ = split(//, $paren_group);\n        foreach my $paren_char (@paren_chars) {\n\
    \            if ($paren_char eq '(') {\n                $current_nesting++;\n\
    \            } elsif ($paren_char eq ')') {\n                $current_nesting--;\n\
    \            }\n            if ($current_nesting > $max_nesting) {\n         \
    \       $max_nesting = $current_nesting;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ }\n            elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            } elsif ($char eq \")\") {\n         \
    \       $level--;\n            }\n            $max_level = $level if $level >\
    \ $max_level;\n        }\n        push @paren_levels, $max_level;\n    }\n   \
    \ return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nesting_levels;\n    foreach my $group (@paren_groups) {\n        my\
    \ $nesting_level = 0;\n        my $max_nesting_level = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting_level++;\n            } elsif ($char eq \")\") {\n            \
    \    $nesting_level--;\n            }\n            if ($nesting_level > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting_level;\n            }\n   \
    \     }\n        push(@nesting_levels, $max_nesting_level);\n    }\n    return\
    \ @nesting_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq ')') {\n     \
    \           $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            } elsif ($char eq \")\") {\n  \
    \              $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_level = 0;\n        my $current_level = 0;\n        foreach\
    \ my $char (split(//, $group)) {\n            if ($char eq '(') {\n          \
    \      $current_level++;\n            } elsif ($char eq ')') {\n             \
    \   $current_level--;\n            }\n            if ($current_level > $max_level)\
    \ {\n                $max_level = $current_level;\n            }\n        }\n\
    \        push @max_levels, $max_level;\n    }\n    return @max_levels;\n}", " \
    \   my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $nesting = 0;\n        my $max_nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting++;\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    for my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        for my $char (split(//, $group)) {\n\
    \            if ($char eq '(') {\n                $level++;\n            }\n \
    \           elsif ($char eq ')') {\n                $level--;\n            }\n\
    \            if ($level > $max_level) {\n                $max_level = $level;\n\
    \            }\n        }\n        push @paren_levels, $max_level;\n    }\n  \
    \  return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  }\n            elsif ($char eq \")\") {\n                $level--;\n      \
    \      }\n            $max_level = $level if ($level > $max_level);\n        }\n\
    \        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @nested_parens;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $nested_parens = 0;\n\
    \        my $paren_count = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq \"(\") {\n                $paren_count++;\n    \
    \            if ($paren_count > $nested_parens) {\n                    $nested_parens\
    \ = $paren_count;\n                }\n            }\n            elsif ($char\
    \ eq \")\") {\n                $paren_count--;\n            }\n        }\n   \
    \     push(@nested_parens, $nested_parens);\n    }\n    return @nested_parens;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n\
    \        my $max_paren_level = 0;\n        foreach my $paren_char (split(//, $paren_group))\
    \ {\n            if ($paren_char eq \"(\") {\n                $paren_level++;\n\
    \            } elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        for (my $i = 0; $i < length($paren_group); $i++) {\n         \
    \   if (substr($paren_group, $i, 1) eq \"(\") {\n                $paren_level++;\n\
    \            }\n            elsif (substr($paren_group, $i, 1) eq \")\") {\n \
    \               $paren_level--;\n            }\n            if ($paren_level >\
    \ $max_paren_level) {\n                $max_paren_level = $paren_level;\n    \
    \        }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    for my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        for my $char (split(//, $group)) {\n\
    \            if ($char eq '(') {\n                $level++;\n            }\n \
    \           elsif ($char eq ')') {\n                $level--;\n            }\n\
    \            $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my\
    \ $paren_group (@paren_groups) {\n        my $max_nesting_level = 0;\n       \
    \ my $current_nesting_level = 0;\n        foreach my $paren (split(//, $paren_group))\
    \ {\n            if ($paren eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting++;\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        my @paren_group_chars = split(//, $paren_group);\n        foreach my\
    \ $paren_group_char (@paren_group_chars) {\n            if ($paren_group_char\
    \ eq \"(\") {\n                $current_nesting_level++;\n            }\n    \
    \        elsif ($paren_group_char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n            if ($current_nesting_level > $max_nesting_level) {\n\
    \                $max_nesting_level = $current_nesting_level;\n            }\n\
    \        }\n        push(@max_nesting_levels, $max_nesting_level);\n    }\n  \
    \  return @max_nesting_levels;\n}", "    my @paren_groups = split(' ', $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $paren_char (split('', $paren_group)) {\n            if ($paren_char\
    \ eq '(') {\n                $current_nesting_level++;\n            } elsif ($paren_char\
    \ eq ')') {\n                $current_nesting_level--;\n            }\n      \
    \      if ($current_nesting_level > $max_nesting_level) {\n                $max_nesting_level\
    \ = $current_nesting_level;\n            }\n        }\n        push(@max_nesting_levels,\
    \ $max_nesting_level);\n    }\n    return @max_nesting_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ '(') {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq ')') {\n                $nesting--;\n            }\n \
    \       }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            }\n            elsif ($char\
    \ eq \")\") {\n                $level--;\n            }\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  }\n            elsif ($char eq \")\") {\n                $level--;\n      \
    \      }\n            if ($level > $max_level) {\n                $max_level =\
    \ $level;\n            }\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            } elsif ($char eq \")\") {\n        \
    \        $paren_level--;\n            }\n            if ($paren_level > $max_paren_level)\
    \ {\n                $max_paren_level = $paren_level;\n            }\n       \
    \ }\n        push(@paren_levels, $max_paren_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            }\n            elsif ($char\
    \ eq \")\") {\n                $level--;\n            }\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split /\\s+/, $paren_string;\n    my @max_nest_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nest_level = 0;\n\
    \        my $current_nest_level = 0;\n        for (my $i = 0; $i < length($paren_group);\
    \ $i++) {\n            if (substr($paren_group, $i, 1) eq \"(\") {\n         \
    \       $current_nest_level++;\n            } elsif (substr($paren_group, $i,\
    \ 1) eq \")\") {\n                $current_nest_level--;\n            }\n    \
    \        if ($current_nest_level > $max_nest_level) {\n                $max_nest_level\
    \ = $current_nest_level;\n            }\n        }\n        push @max_nest_levels,\
    \ $max_nest_level;\n    }\n    return @max_nest_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @nested_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $nested_level = 0;\n        my $max_nested_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $nested_level++;\n          \
    \  } elsif ($paren_char eq \")\") {\n                $nested_level--;\n      \
    \      }\n            if ($nested_level > $max_nested_level) {\n             \
    \   $max_nested_level = $nested_level;\n            }\n        }\n        push(@nested_levels,\
    \ $max_nested_level);\n    }\n    return @nested_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nest_levels;\n    foreach my $paren_group (@paren_groups) {\n   \
    \     my $max_nest_level = 0;\n        my $current_nest_level = 0;\n        foreach\
    \ my $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"\
    (\") {\n                $current_nest_level++;\n                if ($current_nest_level\
    \ > $max_nest_level) {\n                    $max_nest_level = $current_nest_level;\n\
    \                }\n            } elsif ($paren_char eq \")\") {\n           \
    \     $current_nest_level--;\n            }\n        }\n        push(@max_nest_levels,\
    \ $max_nest_level);\n    }\n    return @max_nest_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n\
    \        foreach my $char (split(//, $group)) {\n            if ($char eq \"(\"\
    ) {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "    my @paren_list = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_list) {\n        my $level = 0;\n       \
    \ my $max_level = 0;\n        foreach my $char (split(//, $paren_group)) {\n \
    \           if ($char eq \"(\") {\n                $level++;\n            } elsif\
    \ ($char eq \")\") {\n                $level--;\n            }\n            if\
    \ ($level > $max_level) {\n                $max_level = $level;\n            }\n\
    \        }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n\
    \        my $max_paren_level = 0;\n        foreach my $paren_char (split(//, $paren_group))\
    \ {\n            if ($paren_char eq \"(\") {\n                $paren_level++;\n\
    \            }\n            elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq ')') {\n     \
    \           $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq '(') {\n                $current_nesting++;\n                if ($current_nesting\
    \ > $max_nesting) {\n                    $max_nesting = $current_nesting;\n  \
    \              }\n            }\n            elsif ($char eq ')') {\n        \
    \        $current_nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @nested_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $nested_level = 0;\n        my $max_nested_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $nested_level++;\n            } elsif ($char eq\
    \ \")\") {\n                $nested_level--;\n            }\n            if ($nested_level\
    \ > $max_nested_level) {\n                $max_nested_level = $nested_level;\n\
    \            }\n        }\n        push(@nested_levels, $max_nested_level);\n\
    \    }\n    return \\@nested_levels;\n}", "    my @paren_groups = split(/\\s+/,\
    \ $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        for(my $i = 0;\
    \ $i < length($paren_group); $i++) {\n            my $char = substr($paren_group,\
    \ $i, 1);\n            if($char eq \"(\") {\n                $level++;\n     \
    \       } elsif($char eq \")\") {\n                $level--;\n            }\n\
    \            $max_level = $level if($level > $max_level);\n        }\n       \
    \ push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n}", "  \
    \  my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n   \
    \ foreach my $paren_group (@paren_groups) {\n        my $level = 0;\n        my\
    \ $max_level = 0;\n        foreach my $char (split(//, $paren_group)) {\n    \
    \        if ($char eq '(') {\n                $level++;\n            }\n     \
    \       elsif ($char eq ')') {\n                $level--;\n            }\n   \
    \         if ($level > $max_level) {\n                $max_level = $level;\n \
    \           }\n        }\n        push(@max_levels, $max_level);\n    }\n    return\
    \ @max_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n  \
    \  my @paren_levels;\n    for my $paren_group (@paren_groups) {\n        my $paren_level\
    \ = 0;\n        my $max_paren_level = 0;\n        for my $paren_char (split(//,\
    \ $paren_group)) {\n            if ($paren_char eq '(') {\n                $paren_level++;\n\
    \            } elsif ($paren_char eq ')') {\n                $paren_level--;\n\
    \            }\n            $max_paren_level = $paren_level if $paren_level >\
    \ $max_paren_level;\n        }\n        push @paren_levels, $max_paren_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        for(my $i\
    \ = 0; $i < length($paren_group); $i++) {\n            my $char = substr($paren_group,\
    \ $i, 1);\n            if($char eq \"(\") {\n                $nesting++;\n   \
    \         }\n            elsif($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @max_levels, $max_level;\n    }\n    return @max_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $max_level = 0;\n        my $level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq '(') {\n\
    \                $level++;\n            } elsif ($char eq ')') {\n           \
    \     $level--;\n            }\n            $max_level = $level if $level > $max_level;\n\
    \        }\n        push @max_levels, $max_level;\n    }\n    return @max_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting;\n\
    \    foreach my $group (@paren_groups) {\n        my $nesting = 0;\n        my\
    \ $max_nesting = 0;\n        foreach my $char (split(//, $group)) {\n        \
    \    if ($char eq \"(\") {\n                $nesting++;\n            } elsif ($char\
    \ eq \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting) {\n                $max_nesting = $nesting;\n            }\n\
    \        }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $level = 0;\n     \
    \   my $max_level = 0;\n        foreach my $char (split(//, $paren_group)) {\n\
    \            if ($char eq \"(\") {\n                $level++;\n            }\n\
    \            elsif ($char eq \")\") {\n                $level--;\n           \
    \ }\n            $max_level = $level if ($level > $max_level);\n        }\n  \
    \      push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n   \
    \ foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $current_nesting = 0;\n        foreach my $char\
    \ (split(//, $paren_group)) {\n            if ($char eq '(') {\n             \
    \   $current_nesting++;\n                if ($current_nesting > $max_nesting)\
    \ {\n                    $max_nesting = $current_nesting;\n                }\n\
    \            } elsif ($char eq ')') {\n                $current_nesting--;\n \
    \           }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n \
    \   return @max_nesting;\n}", "    my @paren_array = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_array) {\n        my\
    \ $nesting = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $nesting++;\n\
    \            } elsif ($char eq \")\") {\n                $nesting--;\n       \
    \     }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq '(') {\n                $current_nesting++;\n                if ($current_nesting\
    \ > $max_nesting) {\n                    $max_nesting = $current_nesting;\n  \
    \              }\n            }\n            elsif ($char eq ')') {\n        \
    \        $current_nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \        if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            }\n            elsif ($char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        }\n        push(@paren_levels, $max_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ '(') {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq ')') {\n                $nesting--;\n            }\n \
    \       }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \    } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $paren (split(//, $paren_group)) {\n            if ($paren\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split /\\\
    s+/, $paren_string;\n    my @max_levels;\n    for my $group (@paren_groups) {\n\
    \        my $level = 0;\n        my $max_level = 0;\n        for my $char (split\
    \ //, $group) {\n            if ($char eq '(') {\n                $level++;\n\
    \                $max_level = $level if $level > $max_level;\n            }\n\
    \            elsif ($char eq ')') {\n                $level--;\n            }\n\
    \        }\n        push @max_levels, $max_level;\n    }\n    return @max_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n\
    \        my $max_paren_level = 0;\n        foreach my $paren_char (split(//, $paren_group))\
    \ {\n            if ($paren_char eq \"(\") {\n                $paren_level++;\n\
    \            } elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my\
    \ $paren_group (@paren_groups) {\n        my $max_nesting_level = 0;\n       \
    \ my $current_nesting_level = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting++;\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq ')') {\n     \
    \           $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $nesting_level = 0;\n        foreach\
    \ my $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n  \
    \              $nesting_level++;\n                if ($nesting_level > $max_nesting_level)\
    \ {\n                    $max_nesting_level = $nesting_level;\n              \
    \  }\n            }\n            elsif ($char eq \")\") {\n                $nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $group)) {\n            if ($char eq \"(\"\
    ) {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @nesting_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $nesting_level = 0;\n        my $max_nesting_level = 0;\n    \
    \    foreach my $paren (split(//, $paren_group)) {\n            if ($paren eq\
    \ \"(\") {\n                $nesting_level++;\n            } elsif ($paren eq\
    \ \")\") {\n                $nesting_level--;\n            }\n            if ($nesting_level\
    \ > $max_nesting_level) {\n                $max_nesting_level = $nesting_level;\n\
    \            }\n        }\n        push(@nesting_levels, $max_nesting_level);\n\
    \    }\n    return @nesting_levels;\n}", "    my @paren_groups = split(/\\s+/,\
    \ $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        for (my $i\
    \ = 0; $i < length($group); $i++) {\n            if (substr($group, $i, 1) eq\
    \ \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif (substr($group, $i, 1) eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq ')') {\n     \
    \           $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $group (@paren_groups) {\n      \
    \  my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n      \
    \  foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split /\\\
    s+/, $paren_string;\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        foreach\
    \ my $char (split //, $group) {\n            if ($char eq '(') {\n           \
    \     $current_nesting++;\n                $max_nesting = $current_nesting if\
    \ $current_nesting > $max_nesting;\n            } elsif ($char eq ')') {\n   \
    \             $current_nesting--;\n            }\n        }\n        push @max_nesting,\
    \ $max_nesting;\n    }\n    return @max_nesting;\n}", "    my @paren_list = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_list)\
    \ {\n        my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach\
    \ my $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n  \
    \              $paren_level++;\n            }\n            elsif ($char eq \"\
    )\") {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $nesting\
    \ = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \    }\n            elsif ($char eq \")\") {\n                $nesting--;\n  \
    \          }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \    } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $nesting\
    \ = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \    } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nested_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if ($level > $max_level);\n        }\n        push(@nested_levels,\
    \ $max_level);\n    }\n    return @nested_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            } elsif ($char eq \")\") {\n         \
    \       $level--;\n            }\n            $max_level = $level if $level >\
    \ $max_level;\n        }\n        push @paren_levels, $max_level;\n    }\n   \
    \ return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            if ($level > $max_level) {\n                $max_level = $level;\n\
    \            }\n        }\n        push(@paren_levels, $max_level);\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $paren_group (@paren_groups) {\n       \
    \ my $max_nesting = 0;\n        my $current_nesting = 0;\n        foreach my $char\
    \ (split(//, $paren_group)) {\n            if ($char eq '(') {\n             \
    \   $current_nesting++;\n                if ($current_nesting > $max_nesting)\
    \ {\n                    $max_nesting = $current_nesting;\n                }\n\
    \            } elsif ($char eq ')') {\n                $current_nesting--;\n \
    \           }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n \
    \   return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_depth;\n    foreach my $group (@paren_groups) {\n        my $depth\
    \ = 0;\n        my $max_depth = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $depth++;\n          \
    \  }\n            elsif ($char eq \")\") {\n                $depth--;\n      \
    \      }\n            if ($depth > $max_depth) {\n                $max_depth =\
    \ $depth;\n            }\n        }\n        push(@max_depth, $max_depth);\n \
    \   }\n    return @max_depth;\n}", "    my @paren_list = split(/\\s+/, $paren_string);\n\
    \    my @nested_parens;\n    foreach my $paren (@paren_list) {\n        my $nested_paren\
    \ = 0;\n        my $paren_count = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $paren_count++;\n    \
    \            if ($paren_count > $nested_paren) {\n                    $nested_paren\
    \ = $paren_count;\n                }\n            } elsif ($char eq \")\") {\n\
    \                $paren_count--;\n            }\n        }\n        push(@nested_parens,\
    \ $nested_paren);\n    }\n    return @nested_parens;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my\
    \ $paren_group (@paren_groups) {\n        my $max_nesting_level = 0;\n       \
    \ my $nesting_level = 0;\n        foreach my $paren (split(//, $paren_group))\
    \ {\n            if ($paren eq '(') {\n                $nesting_level++;\n   \
    \         }\n            elsif ($paren eq ')') {\n                $nesting_level--;\n\
    \            }\n            if ($nesting_level > $max_nesting_level) {\n     \
    \           $max_nesting_level = $nesting_level;\n            }\n        }\n \
    \       push(@max_nesting_levels, $max_nesting_level);\n    }\n    return @max_nesting_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            }\n            elsif ($char\
    \ eq \")\") {\n                $level--;\n            }\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_depth;\n    foreach my $group (@paren_groups) {\n        my $depth\
    \ = 0;\n        my $max_depth = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $depth++;\n          \
    \  } elsif ($char eq \")\") {\n                $depth--;\n            }\n    \
    \        $max_depth = $depth if ($depth > $max_depth);\n        }\n        push(@max_depth,\
    \ $max_depth);\n    }\n    return @max_depth;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting++;\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach\
    \ my $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"\
    (\") {\n                $paren_level++;\n            } elsif ($paren_char eq \"\
    )\") {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            if ($level > $max_level) {\n                $max_level = $level;\n\
    \            }\n        }\n        push(@paren_levels, $max_level);\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            }\n            elsif ($char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n     \
    \           $paren_level++;\n            }\n            elsif ($char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren_group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            if ($level > $max_level) {\n                $max_level = $level;\n\
    \            }\n        }\n        push(@paren_levels, $max_level);\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_depth;\n    foreach my $group (@paren_groups) {\n        my $depth\
    \ = 0;\n        my $max_depth = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $depth++;\n          \
    \  } elsif ($char eq \")\") {\n                $depth--;\n            }\n    \
    \        $max_depth = $depth if ($depth > $max_depth);\n        }\n        push(@max_depth,\
    \ $max_depth);\n    }\n    return @max_depth;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_depth;\n    foreach\
    \ my $group (@paren_groups) {\n        my $depth = 0;\n        my $max_depth =\
    \ 0;\n        foreach my $char (split(//, $group)) {\n            if ($char eq\
    \ \"(\") {\n                $depth++;\n            } elsif ($char eq \")\") {\n\
    \                $depth--;\n            }\n            $max_depth = $depth if\
    \ ($depth > $max_depth);\n        }\n        push(@max_depth, $max_depth);\n \
    \   }\n    return @max_depth;\n}", "    my @paren_groups = split /\\s+/, $paren_string;\n\
    \    my @max_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split //, $group)\
    \ {\n            if ($char eq '(') {\n                $level++;\n            \
    \    $max_level = $level if $level > $max_level;\n            } elsif ($char eq\
    \ ')') {\n                $level--;\n            }\n        }\n        push @max_levels,\
    \ $max_level;\n    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_level = 0;\n        my $level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq '(') {\n                $level++;\n\
    \            } elsif ($char eq ')') {\n                $level--;\n           \
    \ }\n            $max_level = $level if $level > $max_level;\n        }\n    \
    \    push @max_levels, $max_level;\n    }\n    return @max_levels;\n}", "    my\
    \ @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach\
    \ my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n        my\
    \ $max_paren_level = 0;\n        foreach my $paren (split(//, $paren_group)) {\n\
    \            if ($paren eq \"(\") {\n                $paren_level++;\n       \
    \     } elsif ($paren eq \")\") {\n                $paren_level--;\n         \
    \   }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $nesting\
    \ = 0;\n        my $max_nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \    } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \        if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        my @paren_chars = split(//, $paren_group);\n        foreach my $paren_char\
    \ (@paren_chars) {\n            if ($paren_char eq '(') {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            }\n            elsif ($paren_char eq ')') {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        my @chars\
    \ = split(//, $paren_group);\n        foreach my $char (@chars) {\n          \
    \  if ($char eq \"(\") {\n                $nesting++;\n                if ($nesting\
    \ > $max_nesting) {\n                    $max_nesting = $nesting;\n          \
    \      }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nest_levels;\n    foreach my $group (@paren_groups) {\n        my\
    \ $nest_level = 0;\n        my $max_nest_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $nest_level++;\n\
    \            } elsif ($char eq \")\") {\n                $nest_level--;\n    \
    \        }\n            if ($nest_level > $max_nest_level) {\n               \
    \ $max_nest_level = $nest_level;\n            }\n        }\n        push(@max_nest_levels,\
    \ $max_nest_level);\n    }\n    return @max_nest_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ } elsif ($paren_char eq \")\") {\n                $paren_level--;\n        \
    \    }\n            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my\
    \ $paren_group (@paren_groups) {\n        my $max_nesting_level = 0;\n       \
    \ my $current_nesting_level = 0;\n        foreach my $paren (split(//, $paren_group))\
    \ {\n            if ($paren eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split /\\\
    s+/, $paren_string;\n    my @paren_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split //, $group) {\n            if ($char eq '(') {\n                $level++;\n\
    \            }\n            elsif ($char eq ')') {\n                $level--;\n\
    \            }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $paren_group)) {\n            if ($char eq \"\
    (\") {\n                $level++;\n            } elsif ($char eq \")\") {\n  \
    \              $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq '(') {\n       \
    \         $nesting++;\n                if ($nesting > $max_nesting) {\n      \
    \              $max_nesting = $nesting;\n                }\n            } elsif\
    \ ($char eq ')') {\n                $nesting--;\n            }\n        }\n  \
    \      push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n \
    \   foreach my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n\
    \        my $max_paren_level = 0;\n        foreach my $paren_char (split(//, $paren_group))\
    \ {\n            if ($paren_char eq \"(\") {\n                $paren_level++;\n\
    \            }\n            elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @nested_parens;\n    foreach my $group\
    \ (@paren_groups) {\n        my $nested_paren = 0;\n        my $max_nested_paren\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $nested_paren++;\n                if ($nested_paren\
    \ > $max_nested_paren) {\n                    $max_nested_paren = $nested_paren;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nested_paren--;\n\
    \            }\n        }\n        push(@nested_parens, $max_nested_paren);\n\
    \    }\n    return @nested_parens;\n}", "    my @paren_groups = split(/\\s+/,\
    \ $paren_string);\n    my @nested_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $nested_level = 0;\n        my $paren_count = 0;\n        foreach\
    \ my $paren (split(//, $paren_group)) {\n            if ($paren eq '(') {\n  \
    \              $paren_count++;\n                if ($paren_count > $nested_level)\
    \ {\n                    $nested_level = $paren_count;\n                }\n  \
    \          } elsif ($paren eq ')') {\n                $paren_count--;\n      \
    \      }\n        }\n        push(@nested_levels, $nested_level);\n    }\n   \
    \ return @nested_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $char (split(//, $paren_group)) {\n            if ($char eq\
    \ \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if ($level > $max_level);\n        }\n\
    \        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting;\n  \
    \  foreach my $group (@paren_groups) {\n        my $max_nesting = 0;\n       \
    \ my $nesting = 0;\n        foreach my $char (split(//, $group)) {\n         \
    \   if ($char eq \"(\") {\n                $nesting++;\n                if ($nesting\
    \ > $max_nesting) {\n                    $max_nesting = $nesting;\n          \
    \      }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting;\n    foreach my $group (@paren_groups) {\n        my $max_nest\
    \ = 0;\n        my $nest_count = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq '(') {\n                $nest_count++;\n       \
    \         if ($nest_count > $max_nest) {\n                    $max_nest = $nest_count;\n\
    \                }\n            } elsif ($char eq ')') {\n                $nest_count--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nest);\n    }\n   \
    \ return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ }\n            elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            $max_paren_level = $paren_level if ($paren_level >\
    \ $max_paren_level);\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            }\n            elsif ($char eq \")\")\
    \ {\n                $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $paren (split(//, $paren_group)) {\n            if\
    \ ($paren eq \"(\") {\n                $current_nesting_level++;\n           \
    \     if ($current_nesting_level > $max_nesting_level) {\n                   \
    \ $max_nesting_level = $current_nesting_level;\n                }\n          \
    \  } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n  \
    \          }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @max_levels, $max_level;\n    }\n    return @max_levels;\n}", "  \
    \  my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n   \
    \ foreach my $group (@paren_groups) {\n        my $max_level = 0;\n        my\
    \ $level = 0;\n        foreach my $char (split(//, $group)) {\n            if\
    \ ($char eq '(') {\n                $level++;\n            } elsif ($char eq ')')\
    \ {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $group (@paren_groups) {\n      \
    \  my $max_nesting_level = 0;\n        my $nesting_level = 0;\n        foreach\
    \ my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n        \
    \        $nesting_level++;\n                if ($nesting_level > $max_nesting_level)\
    \ {\n                    $max_nesting_level = $nesting_level;\n              \
    \  }\n            } elsif ($char eq \")\") {\n                $nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $paren_group)) {\n            if ($char eq '(') {\n       \
    \         $nesting++;\n                if ($nesting > $max_nesting) {\n      \
    \              $max_nesting = $nesting;\n                }\n            } elsif\
    \ ($char eq ')') {\n                $nesting--;\n            }\n        }\n  \
    \      push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n}",
  "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting;\n  \
    \  foreach my $paren_group (@paren_groups) {\n        my $max_nesting = 0;\n \
    \       my $current_nesting = 0;\n        foreach my $paren (split(//, $paren_group))\
    \ {\n            if ($paren eq '(') {\n                $current_nesting++;\n \
    \               if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($paren eq ')')\
    \ {\n                $current_nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $char (split(//, $paren_group)) {\n            if ($char\
    \ eq \"(\") {\n                $paren_level++;\n            }\n            elsif\
    \ ($char eq \")\") {\n                $paren_level--;\n            }\n       \
    \     if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @max_levels, $max_level;\n    }\n    return @max_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $group\
    \ (@paren_groups) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $level++;\n            } elsif ($char eq \")\") {\n         \
    \       $level--;\n            }\n            $max_level = $level if $level >\
    \ $max_level;\n        }\n        push @paren_levels, $max_level;\n    }\n   \
    \ return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $group (@paren_groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @paren_levels, $max_level;\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nestings;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        for(my $i = 0; $i < length($paren_group); $i++) {\n          \
    \  if(substr($paren_group, $i, 1) eq \"(\") {\n                $current_nesting++;\n\
    \            }\n            elsif(substr($paren_group, $i, 1) eq \")\") {\n  \
    \              $current_nesting--;\n            }\n            if($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        }\n        push(@max_nestings, $max_nesting);\n    }\n    return\
    \ @max_nestings;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nested_parens;\n    foreach my $group (@paren_groups) {\n        my $nested_parens\
    \ = 0;\n        my $max_nested_parens = 0;\n        foreach my $char (split(//,\
    \ $group)) {\n            if ($char eq \"(\") {\n                $nested_parens++;\n\
    \            } elsif ($char eq \")\") {\n                $nested_parens--;\n \
    \           }\n            if ($nested_parens > $max_nested_parens) {\n      \
    \          $max_nested_parens = $nested_parens;\n            }\n        }\n  \
    \      push(@nested_parens, $max_nested_parens);\n    }\n    return @nested_parens;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        for (my $i = 0; $i < length($group); $i++) {\n            if (substr($group,\
    \ $i, 1) eq \"(\") {\n                $level++;\n            } elsif (substr($group,\
    \ $i, 1) eq \")\") {\n                $level--;\n            }\n            if\
    \ ($level > $max_level) {\n                $max_level = $level;\n            }\n\
    \        }\n        push(@max_levels, $max_level);\n    }\n    return @max_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_level = 0;\n \
    \       my $current_level = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq '(') {\n                $current_level++;\n    \
    \            if ($current_level > $max_level) {\n                    $max_level\
    \ = $current_level;\n                }\n            } elsif ($char eq ')') {\n\
    \                $current_level--;\n            }\n        }\n        push(@max_levels,\
    \ $max_level);\n    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach\
    \ my $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"\
    (\") {\n                $paren_level++;\n            }\n            elsif ($paren_char\
    \ eq \")\") {\n                $paren_level--;\n            }\n            if\
    \ ($paren_level > $max_paren_level) {\n                $max_paren_level = $paren_level;\n\
    \            }\n        }\n        push(@paren_levels, $max_paren_level);\n  \
    \  }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @nested_levels;\n    foreach my $group (@paren_groups) {\n        my $nested_level\
    \ = 0;\n        my $max_nested_level = 0;\n        foreach my $char (split(//,\
    \ $group)) {\n            if ($char eq \"(\") {\n                $nested_level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $nested_level--;\n\
    \            }\n            if ($nested_level > $max_nested_level) {\n       \
    \         $max_nested_level = $nested_level;\n            }\n        }\n     \
    \   push(@nested_levels, $max_nested_level);\n    }\n    return @nested_levels;\n\
    }", "    my @paren_groups = split /\\s+/, $paren_string;\n    my @paren_levels;\n\
    \    for my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        for my $char (split //, $group) {\n            if ($char eq '(')\
    \ {\n                $level++;\n            } elsif ($char eq ')') {\n       \
    \         $level--;\n            }\n            $max_level = $level if $level\
    \ > $max_level;\n        }\n        push @paren_levels, $max_level;\n    }\n \
    \   return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren_char (split(//, $paren_group)) {\n            if ($paren_char eq \"(\"\
    ) {\n                $paren_level++;\n            } elsif ($paren_char eq \")\"\
    ) {\n                $paren_level--;\n            }\n            if ($paren_level\
    \ > $max_paren_level) {\n                $max_paren_level = $paren_level;\n  \
    \          }\n        }\n        push(@paren_levels, $max_paren_level);\n    }\n\
    \    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @paren_levels;\n    foreach my $paren_group (@paren_groups) {\n      \
    \  my $paren_level = 0;\n        my $max_paren_level = 0;\n        foreach my\
    \ $paren (split(//, $paren_group)) {\n            if ($paren eq \"(\") {\n   \
    \             $paren_level++;\n            }\n            elsif ($paren eq \"\
    )\") {\n                $paren_level--;\n            }\n            $max_paren_level\
    \ = $paren_level if ($paren_level > $max_paren_level);\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        for(my $i = 0; $i < length($group); $i++) {\n            if(substr($group,\
    \ $i, 1) eq \"(\") {\n                $current_nesting++;\n            }\n   \
    \         elsif(substr($group, $i, 1) eq \")\") {\n                $current_nesting--;\n\
    \            }\n            if($current_nesting > $max_nesting) {\n          \
    \      $max_nesting = $current_nesting;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "    my @paren_groups =\
    \ split(/\\s+/, $paren_string);\n    my @paren_levels;\n    foreach my $paren_group\
    \ (@paren_groups) {\n        my $paren_level = 0;\n        my $max_paren_level\
    \ = 0;\n        foreach my $paren_char (split(//, $paren_group)) {\n         \
    \   if ($paren_char eq \"(\") {\n                $paren_level++;\n           \
    \ }\n            elsif ($paren_char eq \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $max_paren_level) {\n         \
    \       $max_paren_level = $paren_level;\n            }\n        }\n        push(@paren_levels,\
    \ $max_paren_level);\n    }\n    return @paren_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group\
    \ (@paren_groups) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n\
    \        foreach my $char (split(//, $group)) {\n            if ($char eq '(')\
    \ {\n                $nesting++;\n            }\n            elsif ($char eq ')')\
    \ {\n                $nesting--;\n            }\n            if ($nesting > $max_nesting)\
    \ {\n                $max_nesting = $nesting;\n            }\n        }\n    \
    \    push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n}", " \
    \   my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $level = 0;\n     \
    \   my $max_level = 0;\n        foreach my $char (split(//, $paren_group)) {\n\
    \            if ($char eq \"(\") {\n                $level++;\n            } elsif\
    \ ($char eq \")\") {\n                $level--;\n            }\n            if\
    \ ($level > $max_level) {\n                $max_level = $level;\n            }\n\
    \        }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @paren_levels, $max_level;\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        my @paren_chars = split(//, $paren_group);\n        foreach my $paren_char\
    \ (@paren_chars) {\n            if ($paren_char eq '(') {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            }\n            elsif ($paren_char eq ')') {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @nested_levels;\n    foreach my $paren_group (@paren_groups)\
    \ {\n        my $nested_level = 0;\n        my $max_nested_level = 0;\n      \
    \  foreach my $paren_char (split(//, $paren_group)) {\n            if ($paren_char\
    \ eq \"(\") {\n                $nested_level++;\n            } elsif ($paren_char\
    \ eq \")\") {\n                $nested_level--;\n            }\n            if\
    \ ($nested_level > $max_nested_level) {\n                $max_nested_level = $nested_level;\n\
    \            }\n        }\n        push(@nested_levels, $max_nested_level);\n\
    \    }\n    return @nested_levels;\n}", "    my @paren_groups = split(/\\s+/,\
    \ $paren_string);\n    my @paren_levels;\n    foreach my $group (@paren_groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            $max_level = $level if ($level > $max_level);\n  \
    \      }\n        push(@paren_levels, $max_level);\n    }\n    return @paren_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n\
    \    foreach my $group (@paren_groups) {\n        my $max_level = 0;\n       \
    \ my $level = 0;\n        foreach my $char (split(//, $group)) {\n           \
    \ if ($char eq '(') {\n                $level++;\n            } elsif ($char eq\
    \ ')') {\n                $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push(@max_nesting_levels,\
    \ $max_level);\n    }\n    return @max_nesting_levels;\n}", "    my @paren_groups\
    \ = split(/\\s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group\
    \ (@paren_groups) {\n        my $nesting = 0;\n        my $max_nesting = 0;\n\
    \        foreach my $char (split(//, $group)) {\n            if ($char eq \"(\"\
    ) {\n                $nesting++;\n            } elsif ($char eq \")\") {\n   \
    \             $nesting--;\n            }\n            if ($nesting > $max_nesting)\
    \ {\n                $max_nesting = $nesting;\n            }\n        }\n    \
    \    push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n}", " \
    \   my @paren_groups = split(/\\s+/, $paren_string);\n    my @paren_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $paren_level = 0;\n\
    \        my $max_paren_level = 0;\n        foreach my $char (split(//, $paren_group))\
    \ {\n            if ($char eq \"(\") {\n                $paren_level++;\n    \
    \        }\n            elsif ($char eq \")\") {\n                $paren_level--;\n\
    \            }\n            $max_paren_level = $paren_level if ($paren_level >\
    \ $max_paren_level);\n        }\n        push(@paren_levels, $max_paren_level);\n\
    \    }\n    return @paren_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $paren (split(//, $paren_group)) {\n            if ($paren\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq '(') {\n             \
    \   $nesting++;\n            } elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        foreach my $paren (split(//, $paren_group)) {\n            if ($paren\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "    my @paren_groups = split(/\\\
    s+/, $paren_string);\n    my @max_nesting;\n    foreach my $group (@paren_groups)\
    \ {\n        my $nesting = 0;\n        my $max_nesting = 0;\n        foreach my\
    \ $char (split(//, $group)) {\n            if ($char eq \"(\") {\n           \
    \     $nesting++;\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_levels;\n    foreach my $group (@paren_groups) {\n        my $max_level\
    \ = 0;\n        my $level = 0;\n        foreach my $char (split(//, $group)) {\n\
    \            if ($char eq '(') {\n                $level++;\n            } elsif\
    \ ($char eq ')') {\n                $level--;\n            }\n            $max_level\
    \ = $level if $level > $max_level;\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "    my @paren_groups = split(/\\s+/, $paren_string);\n\
    \    my @max_nesting_levels;\n    foreach my $paren_group (@paren_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $nesting_level = 0;\n        foreach\
    \ my $paren (split(//, $paren_group)) {\n            if ($paren eq '(') {\n  \
    \              $nesting_level++;\n            }\n            elsif ($paren eq\
    \ ')') {\n                $nesting_level--;\n            }\n            else {\n\
    \                die \"Invalid character $paren in $paren_group\";\n         \
    \   }\n            if ($nesting_level > $max_nesting_level) {\n              \
    \  $max_nesting_level = $nesting_level;\n            }\n        }\n        push\
    \ @max_nesting_levels, $max_nesting_level;\n    }\n    return @max_nesting_levels;\n\
    }", "    my @paren_groups = split(/\\s+/, $paren_string);\n    my @max_nesting_levels;\n\
    \    foreach my $paren_group (@paren_groups) {\n        my $max_nesting_level\
    \ = 0;\n        my $current_nesting_level = 0;\n        foreach my $paren (split(//,\
    \ $paren_group)) {\n            if ($paren eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($paren eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
