name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my %hash = ();\n    my @array = split(\" \", $test);\n    foreach\
    \ my $i (@array) {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n\
    \        } else {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n\
    }", "    my @letters = split(/ /, $test);\n    my %count;\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max\
    \ = $count{$key};\n        }\n    }\n    my %result;\n    foreach my $key (keys\
    \ %count) {\n        if ($count{$key} == $max) {\n            $result{$key} =\
    \ $max;\n        }\n    }\n    return %result;\n}", "    my %hash = ();\n    my\
    \ @array = split(' ', $test);\n    foreach my $i (@array) {\n        if (exists\
    \ $hash{$i}) {\n            $hash{$i}++;\n        } else {\n            $hash{$i}\
    \ = 1;\n        }\n    }\n    my $max = 0;\n    my %result = ();\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n        }\n    }\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}", "    my %histogram = ();\n    my @letters = split(/\
    \ /, $test);\n    foreach my $letter (@letters) {\n        if (exists $histogram{$letter})\
    \ {\n            $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}", "    my @test = split(/\
    \ /, $test);\n    my %histogram;\n    foreach my $letter (@test) {\n        $histogram{$letter}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %histogram) {\n        if\
    \ ($histogram{$key} > $max) {\n            $max = $histogram{$key};\n        }\n\
    \    }\n    my %result;\n    foreach my $key (keys %histogram) {\n        if ($histogram{$key}\
    \ == $max) {\n            $result{$key} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "    my %histogram;\n    my @letters = split / /, $test;\n   \
    \ foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n   \
    \ return \\%histogram;\n}", "    my @test = split(/ /, $test);\n    my %test;\n\
    \    foreach my $test (@test) {\n        $test{$test}++;\n    }\n    return %test;\n\
    }", "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} >\
    \ $max) {\n            $max = $histogram{$letter};\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "    my %hist;\n    my @letters = split(/\\s+/, $test);\n    foreach\
    \ my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %hist) {\n        $max = $hist{$key} if $hist{$key}\
    \ > $max;\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n      \
    \  $result{$key} = $hist{$key} if $hist{$key} == $max;\n    }\n    return %result;\n\
    }", "    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my %result;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n        }\n    }\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}", "    my %hash;\n    my @arr = split(/ /, $test);\n\
    \    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n    my $max = 0;\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n        }\n    }\n    my %result;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} == $max) {\n            $result{$key}\
    \ = $max;\n        }\n    }\n    return %result;\n}", "    my %hash;\n    my @array\
    \ = split(' ', $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n \
    \   }\n    my $max = 0;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ > $max) {\n            $max = $hash{$i};\n        }\n    }\n    my %result;\n\
    \    foreach my $i (keys %hash) {\n        if ($hash{$i} == $max) {\n        \
    \    $result{$i} = $max;\n        }\n    }\n    return %result;\n}", "    my %hash;\n\
    \    my @array = split(' ', $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n\
    \    }\n    my $max = 0;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ > $max) {\n            $max = $hash{$i};\n        }\n    }\n    my %result;\n\
    \    foreach my $i (keys %hash) {\n        if ($hash{$i} == $max) {\n        \
    \    $result{$i} = $max;\n        }\n    }\n    return %result;\n}", "    my @test\
    \ = split(/ /, $test);\n    my %histogram;\n    foreach my $letter (@test) {\n\
    \        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  my @max = sort {$histogram{$b} <=> $histogram{$a}} keys %histogram;\n    my\
    \ $max = $histogram{$max[0]};\n    my %max;\n    foreach my $key (keys %histogram)\
    \ {\n        if ($histogram{$key} == $max) {\n            $max{$key} = $max;\n\
    \        }\n    }\n    return %max;\n}", "    my %hash;\n    my @array = split(\"\
    \ \", $test);\n    foreach my $i (@array) {\n        if (exists $hash{$i}) {\n\
    \            $hash{$i} += 1;\n        } else {\n            $hash{$i} = 1;\n \
    \       }\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys\
    \ %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n  \
    \          push(@max_keys, $key);\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
    }", "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my %result;\n    my $max = 0;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n        }\n    }\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}", "    my %histogram;\n    my @letters = split(/\
    \ /, $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push(@max_letters, $letter);\n        }\n    }\n    my\
    \ %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
    \ = $max;\n    }\n    return %result;\n}", "    my %histogram = ();\n    my @letters\
    \ = split(' ', $test);\n    foreach my $letter (@letters) {\n        if (exists\
    \ $histogram{$letter}) {\n            $histogram{$letter}++;\n        } else {\n\
    \            $histogram{$letter} = 1;\n        }\n    }\n    return %histogram;\n\
    }", "    my %counts;\n    my %max;\n    my $max = 0;\n    foreach my $char (split(/\
    \ /, $test)) {\n        $counts{$char}++;\n        if ($counts{$char} > $max)\
    \ {\n            $max = $counts{$char};\n            %max = ($char => $max);\n\
    \        } elsif ($counts{$char} == $max) {\n            $max{$char} = $max;\n\
    \        }\n    }\n    return %max;\n}", "    my @letters = split(/ /, $test);\n\
    \    my %histogram;\n    foreach my $letter (@letters) {\n        if (exists $histogram{$letter})\
    \ {\n            $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
