language: pl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower, $all_upper)\
    \ = (1, 1);\n    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_string = 0;\n    my\
    \ $is_number = 0;\n    my $is_mixed = 0;\n    my $is_empty = 0;\n    my $is_first\
    \ = 1;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_prev\
    \ = \"\";\n    my $value_type_prev = \"\";\n    my $key_type_first = \"\";\n \
    \   my $value_type_first = \"\";\n    my $key_type_last = \"\";\n    my $value_type_last\
    \ = \"\";\n    my $key_type_mixed = \"\";\n    my $value_type_mixed = \"\";\n\
    \    my $key_type_number = \"\";\n    my $value_type_number = \"\";\n    my $key_type_string\
    \ = \"\";\n    my $value_type_string = \"\";\n    my $key_type_lower = \"\";\n\
    \    my $value_type_lower = \"\";\n    my $key_type_upper = \"\";\n    my $value_type_upper\
    \ = \"\";\n    my $key_type_lower_first = \"\";\n    my $value_type_lower_first\
    \ = \"\";\n    my $key_type_upper_first = \"\";\n    my $value_type_upper_first\
    \ = \"\";\n    my $key_type_lower_last = \"\";\n    my $value_type_lower_last\
    \ = \"\";\n    my $key_type_upper_last = \"\";\n    my $value_type_upper_last\
    \ = \"\";\n    my $key_type_lower_mixed = \"\";\n    my $value_type_lower_mixed\
    \ = \"\";\n    my $key_type_upper_mixed = \"\";\n    my $value_type_upper_mixed\
    \ = \"\";\n    my $key_type_lower_number = \"\";\n    my $value_type_lower_number\
    \ = \"\";\n    my $key_type\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpook94sq9.pl line 60, at end
    of line

    syntax error at /tmp/tmpook94sq9.pl line 60, near "$key_type

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpook94sq9.pl line 95, at end of
    line

    syntax error at /tmp/tmpook94sq9.pl line 95, at EOF

    Execution of /tmp/tmpook94sq9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return \"\";\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return \"\";\n    } else {\n        return 1;\n   \
    \ }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    }\n    if\
    \ ($upper && $lower) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper =\
    \ 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    if ($lower && $upper) {\n        return \"\";\n    }\n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key, $value);\n    my($lower_case) = 1;\n  \
    \  my($upper_case) = 1;\n    my($result) = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($lower_case) {\n            $lower_case = ($key =~ /^[a-z]+$/);\n\
    \        }\n        if ($upper_case) {\n            $upper_case = ($key =~ /^[A-Z]+$/);\n\
    \        }\n    }\n    if ($lower_case || $upper_case) {\n        $result = 1;\n\
    \    } else {\n        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return ($is_lower && $is_upper) ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_upper = 0;\n   \
    \ my $key_type_count_lower = 0;\n    my $value_type_count_upper = 0;\n    my $value_type_count_lower\
    \ = 0;\n    my $key_type_count_number = 0;\n    my $value_type_count_number =\
    \ 0;\n    my $key_type_count_string = 0;\n    my $value_type_count_string = 0;\n\
    \    my $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n    my\
    \ $key_type_count_bool = 0;\n    my $value_type_count_bool = 0;\n    my $key_type_count_array\
    \ = 0;\n    my $value_type_count_array = 0;\n    my $key_type_count_hash = 0;\n\
    \    my $value_type_count_hash = 0;\n    my $key_type_count_undef = 0;\n    my\
    \ $value_type_count_undef = 0;\n    my $key_type_count_ref = 0;\n    my $value_type_count_ref\
    \ = 0;\n    my $key_type_count_glob = 0;\n    my $value_type_count_glob = 0;\n\
    \    my $key_type_count_code = 0;\n    my $value_type_count_code = 0;\n    my\
    \ $key_type_count_scalar = 0;\n    my $value_type_count_scalar = 0;\n    my $key_type_count_format\
    \ = 0;\n    my $value_type_count_format = 0;\n    my $key_type_count_io = 0;\n\
    \    my $value_type_count_io = 0;\n    my $key_type_count_other_ref = 0;\n   \
    \ my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpivp2c2z3.pl line 56,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpivp2c2z3.pl line 56, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpivp2c2z3.pl line 91, at end of line\nsyntax\
    \ error at /tmp/tmpivp2c2z3.pl line 91, at EOF\nExecution of /tmp/tmpivp2c2z3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n    \
    \    } else {\n            return \"\";\n        }\n    }\n    return $lower ||\
    \ $upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        return \"\";\n    }\n    else {\n\
    \        return 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_upper = 1;\n    my $all_lower\
    \ = 1;\n    my $key;\n    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $all_upper = 0;\n        }\n    }\n    if ($all_upper == 0 && $all_lower\
    \ == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $case_count = 0;\n    my $lower_case_count = 0;\n    my\
    \ $upper_case_count = 0;\n    my $other_case_count = 0;\n    my $lower_case_key;\n\
    \    my $upper_case_key;\n    my $other_case_key;\n    my $lower_case_value;\n\
    \    my $upper_case_value;\n    my $other_case_value;\n    my $lower_case_key_value;\n\
    \    my $upper_case_key_value;\n    my $other_case_key_value;\n    my $lower_case_value_value;\n\
    \    my $upper_case_value_value;\n    my $other_case_value_value;\n    my $lower_case_key_value_value;\n\
    \    my $upper_case_key_value_value;\n    my $other_case_key_value_value;\n  \
    \  my $lower_case_value_value_value;\n    my $upper_case_value_value_value;\n\
    \    my $other_case_value_value_value;\n    my $lower_case_key_value_value_value;\n\
    \    my $upper_case_key_value_value_value;\n    my $other_case_key_value_value_value;\n\
    \    my $lower_case_value_value_value_value;\n    my $upper_case_value_value_value_value;\n\
    \    my $other_case_value_value_value_value;\n    my $lower_case_key_value_value_value_value;\n\
    \    my $upper_case_key_value_value_value_value;\n    my $other_case_key_value_value_value_value;\n\
    \    my $lower_case_value_value_value_value_value;\n    my $upper_case_value_value_value_value_value;\n\
    \    my $other_case_value_value_value_value_value;\n    my $lower_case_key_value_value_value_value_value;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpm6h15yuo.pl line 91, at
    end of line

    syntax error at /tmp/tmpm6h15yuo.pl line 91, at EOF

    Execution of /tmp/tmpm6h15yuo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $case = \"upper\";\n            } else {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n       \
    \         $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($case eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n               \
    \ $result = \"\";\n                last;\n            }\n        }\n    }\n  \
    \  return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $first_key = \"\";\n   \
    \ my $first_key_case = \"\";\n    foreach my $key (keys %$dict) {\n        if\
    \ ($first_key eq \"\") {\n            $first_key = $key;\n            $first_key_case\
    \ = $key;\n            $first_key_case =~ tr/A-Z/a-z/;\n        } else {\n   \
    \         if ($key ne $first_key_case) {\n                $result = \"\";\n  \
    \              last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_lower = 0;\n    my $key_type_upper\
    \ = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper = 0;\n    my $key_type_mixed\
    \ = 0;\n    my $value_type_mixed = 0;\n    my $key_type_number = 0;\n    my $value_type_number\
    \ = 0;\n    my $key_type_other = 0;\n    my $value_type_other = 0;\n    my $key_type_count_lower\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n\
    \    my $value_type_count_upper = 0;\n    my $key_type_count_mixed = 0;\n    my\
    \ $value_type_count_mixed = 0;\n    my $key_type_count_number = 0;\n    my $value_type_count_number\
    \ = 0;\n    my $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n\
    \    my $key_type_count_total = 0;\n    my $value_type_count_total = 0;\n    my\
    \ $key_type_count_total_lower = 0;\n    my $key_type_count_total_upper = 0;\n\
    \    my $value_type_count_total_lower = 0;\n    my $value_type_count_total_upper\
    \ = 0;\n    my $key_type_count_total_mixed = 0;\n    my $value_type_count_total_mixed\
    \ = 0;\n    my $key_type_count_total_number = 0;\n    my $value_type_count_total_number\
    \ = 0;\n    my $key_type_count_total_other = 0;\n    my $value_type_count_\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp950mtbnz.pl line 56, at end
    of line

    syntax error at /tmp/tmp950mtbnz.pl line 56, near "$value_type_count_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp950mtbnz.pl line 91, at end of
    line

    syntax error at /tmp/tmp950mtbnz.pl line 91, at EOF

    Execution of /tmp/tmp950mtbnz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my\
    \ $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpezrnrzlt.pl line 137,
    at end of line

    syntax error at /tmp/tmpezrnrzlt.pl line 137, at EOF

    Execution of /tmp/tmpezrnrzlt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/) {\n \
    \           $is_lower = 1;\n        }\n        elsif ($k =~ /^[A-Z]+$/) {\n  \
    \          $is_upper = 1;\n        }\n        else {\n            $ret = 0;\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_prev = 0;\n    my\
    \ $value_type_count_prev = 0;\n    my $key_type_count_curr = 0;\n    my $value_type_count_curr\
    \ = 0;\n    my $key_type_count_next = 0;\n    my $value_type_count_next = 0;\n\
    \    my $key_type_count_prev_prev = 0;\n    my $value_type_count_prev_prev = 0;\n\
    \    my $key_type_count_next_next = 0;\n    my $value_type_count_next_next = 0;\n\
    \    my $key_type_count_prev_prev_prev = 0;\n    my $value_type_count_prev_prev_prev\
    \ = 0;\n    my $key_type_count_next_next_next = 0;\n    my $value_type_count_next_next_next\
    \ = 0;\n    my $key_type_count_prev_prev_prev_prev = 0;\n    my $value_type_count_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_count_next_next_next_next = 0;\n    my $value_type_count_next_next_next_next\
    \ = 0;\n    my $key_type_count_prev_prev_prev_prev_prev = 0;\n    my $value_type_count_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_count_next_next_next_next_next = 0;\n    my $value_type_count_next_next_next_next_next\
    \ = 0;\n    my $key_type_count_prev_prev_prev_prev_prev_prev = 0;\n    my $value_type_count_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_count_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcfwm7kua.pl line 49, at end
    of line

    syntax error at /tmp/tmpcfwm7kua.pl line 49, near "$key_type_count_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcfwm7kua.pl line 84, at end of
    line

    syntax error at /tmp/tmpcfwm7kua.pl line 84, at EOF

    Execution of /tmp/tmpcfwm7kua.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower_case = 1;\n    my\
    \ $upper_case = 1;\n    foreach my $key (keys %$dict) {\n        if ($lower_case)\
    \ {\n            $lower_case = ($key =~ /^[a-z]+$/);\n        }\n        if ($upper_case)\
    \ {\n            $upper_case = ($key =~ /^[A-Z]+$/);\n        }\n    }\n    if\
    \ ($lower_case || $upper_case) {\n        $result = 1;\n    } else {\n       \
    \ $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper =\
    \ 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    if ($lower && $upper) {\n        return \"\";\n    }\n    else {\n      \
    \  return 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my\
    \ $is_mixed = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        } else {\n            $is_mixed = 1;\n      \
    \  }\n    }\n    if ($is_lower && $is_upper) {\n        return \"\";\n    } elsif\
    \ ($is_mixed) {\n        return \"\";\n    } else {\n        return 1;\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_case = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_case = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_case eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_case eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $upper = 0;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $lower = 0;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    $result = 0 if ($lower == 0 && $upper == 0);\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case = 0;\n    my $count = 0;\n    while (($key, $val) = each %$dict) {\n \
    \       if ($count == 0) {\n            if ($key =~ /^[a-z]+$/) {\n          \
    \      $case = 1;\n            } elsif ($key =~ /^[A-Z]+$/) {\n              \
    \  $case = 2;\n            } else {\n                $ret = \"\";\n          \
    \      last;\n            }\n        } else {\n            if ($case == 1 && $key\
    \ =~ /^[A-Z]+$/) {\n                $ret = \"\";\n                last;\n    \
    \        } elsif ($case == 2 && $key =~ /^[a-z]+$/) {\n                $ret =\
    \ \"\";\n                last;\n            }\n        }\n        $count++;\n\
    \    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ 0;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        }\n    }\n    if ($lower == 0 || $upper == 0) {\n        $result = 1;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n        \
    \    $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc_count = 0;\n    my $uc_count = 0;\n    my $other_count = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lc_count++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $uc_count++;\n        } else\
    \ {\n            $other_count++;\n        }\n    }\n    if ($lc_count > 0 && $uc_count\
    \ > 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        else {\n            $ret =\
    \ 0;\n            last;\n        }\n    }\n    if ($is_empty) {\n        $ret\
    \ = 0;\n    }\n    elsif ($is_lower && $is_upper) {\n        $ret = 0;\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    my $key;\n    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $upper = 0;\n        }\n    }\n    if ($lower == 0 && $upper == 0) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    foreach $key\
    \ (keys %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $ret = 0;\n            last;\n\
    \        }\n    }\n    if ($is_empty) {\n        $ret = 0;\n    } elsif ($is_lower\
    \ && $is_upper) {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n          \
    \  $ret = \"\";\n            last;\n        }\n    }\n    if ($upper && $lower)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n     \
    \       $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my\
    \ $result = 0;\n    my $key;\n    foreach $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        } else {\n            return $result;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        return $result;\n\
    \    }\n    $result = 1;\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 1;\n    my $upper_case = 1;\n    my $key_count = 0;\n  \
    \  while (($key, $value) = each %$dict) {\n        $key_count++;\n        if ($key\
    \ =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n        if ($key =~\
    \ /[a-z]/) {\n            $upper_case = 0;\n        }\n    }\n    if ($key_count\
    \ > 0) {\n        if ($lower_case == 0 && $upper_case == 0) {\n            $result\
    \ = \"\";\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    my\
    \ $is_empty = 1;\n    foreach my $key (keys %$dict) {\n        $is_empty = 0;\n\
    \        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n     \
    \   if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n    }\n   \
    \ return $is_empty ? \"\" : ($is_lower || $is_upper);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_lower = 0;\n   \
    \ my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n    my $value_type_count_upper\
    \ = 0;\n    my $key_type_count_string = 0;\n    my $value_type_count_string =\
    \ 0;\n    my $key_type_count_number = 0;\n    my $value_type_count_number = 0;\n\
    \    my $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n    my\
    \ $key_type_count_lower_string = 0;\n    my $key_type_count_upper_string = 0;\n\
    \    my $value_type_count_lower_string = 0;\n    my $value_type_count_upper_string\
    \ = 0;\n    my $key_type_count_lower_number = 0;\n    my $key_type_count_upper_number\
    \ = 0;\n    my $value_type_count_lower_number = 0;\n    my $value_type_count_upper_number\
    \ = 0;\n    my $key_type_count_lower_other = 0;\n    my $key_type_count_upper_other\
    \ = 0;\n    my $value_type_count_lower_other = 0;\n    my $value_type_count_upper_other\
    \ = 0;\n    my $key_type_count_string_lower = 0;\n    my $key_type_count_string_upper\
    \ = 0;\n    my $value_type_count_string_lower = 0;\n    my $value_type_count_string_upper\
    \ = 0;\n    my $key_type_count_number_lower = 0;\n    my $key_type_count_number_upper\
    \ = 0;\n    my $value_type_count_number_lower = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp67tvobho.pl line 54,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp67tvobho.pl line 54, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp67tvobho.pl line 89, at end of line\nsyntax\
    \ error at /tmp/tmp67tvobho.pl line 89, at EOF\nExecution of /tmp/tmp67tvobho.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $ret = 0;\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return \"\";\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return \"\";\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return \"\";\n        }\n    }\n    return ($is_lower\
    \ && !$is_upper) || (!$is_lower && $is_upper);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $upper\
    \ = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n \
    \       }\n    }\n    return $lower || $upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case;\n    foreach my $key\
    \ (keys %$dict) {\n        if (ref($key) eq \"\") {\n            if ($case eq\
    \ \"\") {\n                $case = $key =~ /[a-z]/ ? \"lower\" : \"upper\";\n\
    \            }\n            if ($case eq \"lower\" && $key =~ /[A-Z]/) {\n   \
    \             $result = \"\";\n                last;\n            }\n        \
    \    if ($case eq \"upper\" && $key =~ /[a-z]/) {\n                $result = \"\
    \";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n   \
    \     if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n           \
    \ $is_mixed = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret = \"\"\
    ;\n    } elsif ($is_mixed) {\n        $ret = \"\";\n    } elsif ($is_lower &&\
    \ $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_lower = 0;\n   \
    \ my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n    my $value_type_count_upper\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key_type eq \"\
    \") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"\
    upper\";\n            } else {\n                $result = \"\";\n            \
    \    last;\n            }\n        }\n        if ($value_type eq \"\") {\n   \
    \         if ($value =~ /^[a-z]+$/) {\n                $value_type = \"lower\"\
    ;\n            } elsif ($value =~ /^[A-Z]+$/) {\n                $value_type =\
    \ \"upper\";\n            } else {\n                $result = \"\";\n        \
    \        last;\n            }\n        }\n        if ($key_type eq \"lower\")\
    \ {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type_count_lower++;\n\
    \            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($key_type eq \"upper\") {\n            if ($key\
    \ =~ /^[A-Z]+$/) {\n                $key_type_count_upper++;\n            } else\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        if ($value_type eq \"lower\") {\n            if ($value =~\
    \ /^[a-z]+$/) {\n                $value_type_count_lower++;\n            } else\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($value_type eq \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3ta_nea5.pl line 77,\
    \ near \"if(eq_deeply($candidate->({\"p\"\n  (Might be a runaway multi-line \"\
    \" string starting on line 71)\nString found where operator expected at /tmp/tmp3ta_nea5.pl\
    \ line 77, near \"p\" => \"\"\nBareword found where operator expected at /tmp/tmp3ta_nea5.pl\
    \ line 77, near \"\" => \"pineapple\"\n\t(Missing operator before pineapple?)\n\
    String found where operator expected at /tmp/tmp3ta_nea5.pl line 77, near \"pineapple\"\
    , \"\"\nBareword found where operator expected at /tmp/tmp3ta_nea5.pl line 77,\
    \ near \"\", \"b\"\n\t(Missing operator before b?)\nString found where operator\
    \ expected at /tmp/tmp3ta_nea5.pl line 77, near \"b\" => \"\"\nBareword found\
    \ where operator expected at /tmp/tmp3ta_nea5.pl line 77, near \"\" => \"banana\"\
    \n\t(Missing operator before banana?)\nString found where operator expected at\
    \ /tmp/tmp3ta_nea5.pl line 77, near \"print \"\"\n\t(Missing semicolon on previous\
    \ line?)\nBareword found where operator expected at /tmp/tmp3ta_nea5.pl line 78,\
    \ near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on\
    \ line 77)\n\t(Do you need to predeclare print?)\nString found where operator\
    \ expected at /tmp/tmp3ta_nea5.pl line 78, near \"p\" => \"\"\nBareword found\
    \ where operator expected at /tmp/tmp3ta_nea5.pl line 78, near \"\" => \"pineapple\"\
    \n\t(Missing operator before pineapple?)\nString found where operator expected\
    \ at /tmp/tmp3ta_nea5.pl line 78, near \"pineapple\", \"\"\nBareword found where\
    \ operator expected at /tmp/tmp3ta_nea5.pl line 78, near \"\", \"A\"\n\t(Missing\
    \ operator before A?)\nString found where operator expected at /tmp/tmp3ta_nea5.pl\
    \ line 78, near \"A\" => \"\"\nBareword found where operator expected at /tmp/tmp3ta_nea5.pl\
    \ line 78, near \"\" => \"banana\"\n\t(Missing operator before banana?)\nString\
    \ found where operator expected at /tmp/tmp3ta_nea5.pl line 78, near \"banana\"\
    , \"\"\nBareword found where operator expected at /tmp/tmp3ta_nea5.pl line 78,\
    \ near \"\", \"B\"\n\t(Missing operator before B?)\nString found where operator\
    \ expected at /tmp/tmp3ta_nea5.pl line 78, near \"B\" => \"\"\nBareword found\
    \ where"
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    my\
    \ $key_type_count = 0;\n    foreach my $key (keys %$dict) {\n        if ($key_type_count\
    \ == 0) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type =\
    \ \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n            $key_type_count++;\n        } else\
    \ {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n       \
    \         $result = \"\";\n                last;\n            } elsif ($key_type\
    \ eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n\
    \    my $is_upper = 0;\n    my $is_string = 0;\n    my $is_empty = 0;\n    my\
    \ $is_mixed = 0;\n    my $is_numeric = 0;\n    my $is_alpha = 0;\n    my $is_alnum\
    \ = 0;\n    my $is_cntrl = 0;\n    my $is_graph = 0;\n    my $is_print = 0;\n\
    \    my $is_punct = 0;\n    my $is_space = 0;\n    my $is_xdigit = 0;\n    my\
    \ $is_lower_or_upper = 0;\n    my $is_lower_or_upper_or_empty = 0;\n    my $is_lower_or_upper_or_mixed\
    \ = 0;\n    my $is_lower_or_upper_or_numeric = 0;\n    my $is_lower_or_upper_or_alpha\
    \ = 0;\n    my $is_lower_or_upper_or_alnum = 0;\n    my $is_lower_or_upper_or_cntrl\
    \ = 0;\n    my $is_lower_or_upper_or_graph = 0;\n    my $is_lower_or_upper_or_print\
    \ = 0;\n    my $is_lower_or_upper_or_punct = 0;\n    my $is_lower_or_upper_or_space\
    \ = 0;\n    my $is_lower_or_upper_or_xdigit = 0;\n    my $is_lower_or_upper_or_mixed_or_empty\
    \ = 0;\n    my $is_lower_or_upper_or_mixed_or_numeric = 0;\n    my $is_lower_or_upper_or_mixed_or_alpha\
    \ = 0;\n    my $is_lower_or_upper_or_mixed_or_alnum = 0;\n    my $is_lower_or_upper_or_mixed_or_cntrl\
    \ = 0;\n    my $is_lower_or_upper_or_m\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpo1uqk7hb.pl line 51, at end
    of line

    syntax error at /tmp/tmpo1uqk7hb.pl line 51, near "$is_lower_or_upper_or_m

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpo1uqk7hb.pl line 86, at end of
    line

    syntax error at /tmp/tmpo1uqk7hb.pl line 86, at EOF

    Execution of /tmp/tmpo1uqk7hb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $count = 0;\n    my $upper_count = 0;\n    my $lower_count = 0;\n    while\
    \ (($key, $value) = each %$dict) {\n        $count++;\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper_count++;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $lower_count++;\n        }\n    }\n    if ($count == 0) {\n     \
    \   $result = \"\";\n    }\n    if ($upper_count > 0 && $lower_count > 0) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\n    my $all_lower = 1;\n   \
    \ my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower || $all_upper)\
    \ {\n        $result = 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    my\
    \ $key_type_count = 0;\n    foreach my $key (keys %$dict) {\n        if ($key_type_count\
    \ == 0) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type =\
    \ \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n            $key_type_count++;\n        } else\
    \ {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n       \
    \         $result = \"\";\n                last;\n            } elsif ($key_type\
    \ eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if (ref($key) eq \"\") {\n\
    \            if ($key =~ /^[a-z]+$/) {\n                $is_lower = 1;\n     \
    \       }\n            if ($key =~ /^[A-Z]+$/) {\n                $is_upper =\
    \ 1;\n            }\n        }\n    }\n    if ($is_lower && $is_upper) {\n   \
    \     $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first = 1;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($first) {\n            $case = $key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n\
    \            $first = 0;\n        }\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       if ($case ne 'lower') {\n                $result = 0;\n              \
    \  last;\n            }\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n   \
    \         if ($case ne 'upper') {\n                $result = 0;\n            \
    \    last;\n            }\n        }\n        else {\n            $result = 0;\n\
    \            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $flag1 = 1;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $flag2 = 1;\n        }\n    }\n    if ($flag1 == 1 && $flag2 == 1) {\n  \
    \      $flag = \"\";\n    }\n    else {\n        $flag = 1;\n    }\n    return\
    \ $flag;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $all_lower = 1;\n    my $all_upper = 1;\n    my $is_empty = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /[A-Z]/)\
    \ {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $all_upper = 0;\n        }\n    }\n    if ($is_empty) {\n       \
    \ $ret = \"\";\n    }\n    elsif (!$all_lower && !$all_upper) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } else\
    \ {\n            return \"\";\n        }\n    }\n    return $lower == 0 || $upper\
    \ == 0 ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    my\
    \ $is_empty = 1;\n    foreach my $key (keys %$dict) {\n        $is_empty = 0;\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_upper = 0;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_lower = 0;\n        } else {\n     \
    \       return \"\";\n        }\n    }\n    return $is_empty ? \"\" : ($is_lower\
    \ || $is_upper);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_string = 0;\n    my $is_num\
    \ = 0;\n    my $is_empty = 0;\n    my $is_mixed = 0;\n    my $is_all_string =\
    \ 0;\n    my $is_all_num = 0;\n    my $is_all_lower = 0;\n    my $is_all_upper\
    \ = 0;\n    my $is_all_mixed = 0;\n    my $is_all_empty = 0;\n    my $is_all_mixed_string\
    \ = 0;\n    my $is_all_mixed_num = 0;\n    my $is_all_mixed_lower = 0;\n    my\
    \ $is_all_mixed_upper = 0;\n    my $is_all_mixed_empty = 0;\n    my $is_all_mixed_string_num\
    \ = 0;\n    my $is_all_mixed_string_lower = 0;\n    my $is_all_mixed_string_upper\
    \ = 0;\n    my $is_all_mixed_string_empty = 0;\n    my $is_all_mixed_num_lower\
    \ = 0;\n    my $is_all_mixed_num_upper = 0;\n    my $is_all_mixed_num_empty =\
    \ 0;\n    my $is_all_mixed_lower_upper = 0;\n    my $is_all_mixed_lower_empty\
    \ = 0;\n    my $is_all_mixed_upper_empty = 0;\n    my $is_all_mixed_string_num_lower\
    \ = 0;\n    my $is_all_mixed_string_num_upper = 0;\n    my $is_all_mixed_string_num_empty\
    \ = 0;\n    my $is_all_mixed_string_lower_upper = 0;\n    my $is_all_mixed_string_lower_empty\
    \ = 0;\n    my $is_all_mixed_string_upper_empty = 0\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpbebneadi.pl line 53, at end
    of line

    syntax error at /tmp/tmpbebneadi.pl line 53, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpbebneadi.pl line 88, at end of
    line

    syntax error at /tmp/tmpbebneadi.pl line 88, at EOF

    Execution of /tmp/tmpbebneadi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    my\
    \ $key_case_new = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_case\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_case\
    \ = \"lower\";\n            }\n            elsif ($key =~ /^[A-Z]+$/) {\n    \
    \            $key_case = \"upper\";\n            }\n            else {\n     \
    \           $result = \"\";\n                last;\n            }\n        }\n\
    \        else {\n            if ($key =~ /^[a-z]+$/) {\n                $key_case_new\
    \ = \"lower\";\n            }\n            elsif ($key =~ /^[A-Z]+$/) {\n    \
    \            $key_case_new = \"upper\";\n            }\n            else {\n \
    \               $result = \"\";\n                last;\n            }\n      \
    \      if ($key_case ne $key_case_new) {\n                $result = \"\";\n  \
    \              last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my\
    \ $is_mixed = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        else {\n            $is_mixed\
    \ = 1;\n        }\n    }\n    return ($is_lower and not $is_mixed and not $is_upper)\
    \ ||\n           ($is_upper and not $is_mixed and not $is_lower);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\n    my $key;\n    my $value;\n\
    \    my $flag = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n\
    \    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n\
    \    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12\
    \ = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my\
    \ $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n\
    \    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23\
    \ = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my\
    \ $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n\
    \    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34\
    \ = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my\
    \ $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n\
    \    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45\
    \ = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my\
    \ $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n\
    \    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphkh00iiw.pl line 75, at end
    of line

    syntax error at /tmp/tmphkh00iiw.pl line 75, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphkh00iiw.pl line 110, at end
    of line

    syntax error at /tmp/tmphkh00iiw.pl line 110, at EOF

    Execution of /tmp/tmphkh00iiw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if (ref($key) eq \"\") {\n        \
    \    if ($key =~ /[A-Z]/) {\n                $all_lower = 0;\n            }\n\
    \            if ($key =~ /[a-z]/) {\n                $all_upper = 0;\n       \
    \     }\n        }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    my $count = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } elsif ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } else\
    \ {\n            $result = \"\";\n            last;\n        }\n        $count++;\n\
    \    }\n    if ($count == 0) {\n        $result = \"\";\n    } elsif ($upper !=\
    \ 0 && $lower != 0) {\n        $result = \"\";\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $upper = 1;\n    my $lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n    }\n    if ($upper == 0 && $lower == 0) {\n  \
    \      $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    my\
    \ $key_type_count = 0;\n    foreach my $key (keys %$dict) {\n        if ($key_type_count\
    \ == 0) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type =\
    \ \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n            $key_type_count++;\n        } else\
    \ {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n       \
    \         $result = \"\";\n                last;\n            } elsif ($key_type\
    \ eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    my $key;\n    foreach $key (keys %$dict) {\n        if (lc($key) eq\
    \ $key) {\n            $lower = 1;\n        }\n        if (uc($key) eq $key) {\n\
    \            $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n    \
    \    $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    my $key;\n\
    \    my $value;\n    while (($key, $value) = each %$dict) {\n        if ($case\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"\
    lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case =\
    \ \"upper\";\n            } else {\n                $result = \"\";\n        \
    \        last;\n            }\n        } elsif ($case eq \"lower\") {\n      \
    \      if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n          \
    \      last;\n            }\n        } elsif ($case eq \"upper\") {\n        \
    \    if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n            \
    \    last;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $flag1 = 1;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $flag2 = 1;\n        }\n    }\n    if ($flag1 == 1 && $flag2 == 1) {\n  \
    \      $flag = 0;\n    }\n    else {\n        $flag = 1;\n    }\n    return $flag;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return \"\";\n        }\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ else {\n            $result = 0;\n            last;\n        }\n    }\n    if\
    \ ($is_upper && $is_lower) {\n        $result = 0;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return ($is_lower && $is_upper) ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $ret = \"\";\n                last;\n            }\n\
    \        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $ret = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $is_upper\
    \ = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n          \
    \  $result = \"\";\n            last;\n        }\n    }\n    if ($upper > 0 &&\
    \ $lower > 0) {\n        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            $result = 0;\n        }\n    }\n    if ($lower\
    \ > 0 && $upper > 0) {\n        $result = 0;\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower && $is_upper ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    for\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            }\n  \
    \          elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            }\n            else {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n        else {\n            if ($key_type\
    \ eq \"lower\" && $key !~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n            elsif ($key_type eq \"upper\"\
    \ && $key !~ /^[A-Z]+$/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n \
    \           $all_upper = 0;\n        }\n    }\n    if ($all_lower == 0 && $all_upper\
    \ == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_case = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_case = \"upper\";\n           \
    \ } else {\n                $ret = \"\";\n                last;\n            }\n\
    \        } else {\n            if ($key_case eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            } elsif\
    \ ($key_case eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $ret = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $count = 0;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } elsif ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } else\
    \ {\n            $result = \"\";\n        }\n        $count++;\n    }\n    if\
    \ ($count == 0) {\n        $result = \"\";\n    } elsif ($count == $upper) {\n\
    \        $result = 1;\n    } elsif ($count == $lower) {\n        $result = 1;\n\
    \    } else {\n        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    return $is_upper && $is_lower ? \"\" : 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            $case = $key\
    \ =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/\
    \ && $case ne \"lower\") {\n            $result = \"\";\n            last;\n \
    \       }\n        if ($key =~ /^[A-Z]+$/ && $case ne \"upper\") {\n         \
    \   $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    my\
    \ $key_type_lower = \"lower\";\n    my $key_type_upper = \"upper\";\n    my $key_type_mixed\
    \ = \"mixed\";\n    my $key_type_other = \"other\";\n    my $key_type_count =\
    \ 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $key_type = $key_type_lower;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $key_type = $key_type_upper;\n        } elsif ($key =~ /^[a-zA-Z]+$/)\
    \ {\n            $key_type = $key_type_mixed;\n        } else {\n            $key_type\
    \ = $key_type_other;\n        }\n        if ($key_type_count == 0) {\n       \
    \     $key_type_count = 1;\n        } elsif ($key_type_count == 1) {\n       \
    \     if ($key_type ne $key_type_lower && $key_type ne $key_type_upper) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $case = \"upper\";\n            } else {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n       \
    \         $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($case eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n               \
    \ $result = \"\";\n                last;\n            }\n        }\n    }\n  \
    \  return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $case = \"upper\";\n            } else {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n       \
    \         $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($case eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n               \
    \ $result = \"\";\n                last;\n            }\n        }\n    }\n  \
    \  return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    if ($all_lower || $all_upper) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower_case = 1;\n    my $upper_case = 1;\n \
    \   foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n        \
    \    $lower_case = 0;\n        }\n        if ($key =~ /[a-z]/) {\n           \
    \ $upper_case = 0;\n        }\n    }\n    return $lower_case || $upper_case;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    if (defined $first_key) {\n        my $first_key_case = $first_key =~ /[a-z]/\
    \ ? 'lower' : 'upper';\n        foreach my $key (keys %$dict) {\n            if\
    \ ($key =~ /[a-z]/ && $first_key_case eq 'upper') {\n                $ret = '';\n\
    \                last;\n            }\n            if ($key =~ /[A-Z]/ && $first_key_case\
    \ eq 'lower') {\n                $ret = '';\n                last;\n         \
    \   }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_all_lower = 1;\n    my $is_all_upper = 1;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n       \
    \     $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $is_all_upper = 0;\n        }\n    }\n    return $is_all_lower || $is_all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $ret = 0;\n            last;\n  \
    \      }\n    }\n    if ($lower && $upper) {\n        $ret = 0;\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return ($is_lower && $is_upper) ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $ret = \"\";\n                last;\n            }\n\
    \        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            }\n    \
    \    } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n\
    \                $ret = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if (ref($key) ne \"\") {\n        \
    \    return \"\";\n        }\n        if ($key !~ /^[a-z]+$/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n            $all_upper =\
    \ 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key;\n    my $value;\n    my $case;\n    my\
    \ $result = 1;\n    while (($key, $value) = each %$dict) {\n        if ($case\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"\
    lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case =\
    \ \"upper\";\n            } else {\n                $result = \"\";\n        \
    \        last;\n            }\n        } elsif ($case eq \"lower\") {\n      \
    \      if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n          \
    \      last;\n            }\n        } elsif ($case eq \"upper\") {\n        \
    \    if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n            \
    \    last;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        return \"\";\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ 0;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_upper = 1;\n    my $all_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    if ($all_upper == 0 && $all_lower\
    \ == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type;\n    while (($key, $value) = each %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($key_type eq \"lower\") {\n\
    \            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        } elsif ($key_type eq \"upper\") {\n\
    \            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case;\n    foreach my $key (keys %$dict) {\n\
    \        if (defined $case) {\n            if ($case eq 'upper') {\n         \
    \       return 0 if $key !~ /^[A-Z]+$/;\n            } else {\n              \
    \  return 0 if $key !~ /^[a-z]+$/;\n            }\n        } else {\n        \
    \    if ($key =~ /^[A-Z]+$/) {\n                $case = 'upper';\n           \
    \ } elsif ($key =~ /^[a-z]+$/) {\n                $case = 'lower';\n         \
    \   } else {\n                return 0;\n            }\n        }\n    }\n   \
    \ return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $is_upper\
    \ = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        } else {\n            $ret = 0;\n           \
    \ last;\n        }\n    }\n    if ($is_empty) {\n        $ret = 0;\n    } elsif\
    \ ($is_lower && $is_upper) {\n        $ret = 0;\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n       \
    \     $all_lower = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n        \
    \    $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower && $is_upper ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc_key;\n    my $uc_key;\n    my $lc_val;\n    my $uc_val;\n    my $lc_flag\
    \ = 0;\n    my $uc_flag = 0;\n    my $lc_count = 0;\n    my $uc_count = 0;\n \
    \   my $count = 0;\n    my $lc_count_val = 0;\n    my $uc_count_val = 0;\n   \
    \ my $count_val = 0;\n    my $lc_flag_val = 0;\n    my $uc_flag_val = 0;\n   \
    \ my $lc_flag_key = 0;\n    my $uc_flag_key = 0;\n    my $lc_flag_val = 0;\n \
    \   my $uc_flag_val = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val\
    \ = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val\
    \ = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val\
    \ = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val\
    \ = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val\
    \ = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val\
    \ = 0;\n    my $uc_flag_key_val = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val\
    \ = 0;\n    my $lc_flag_key_val = 0;\n    my $uc_flag_key_val =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6vsjyvj2.pl line 60, at end
    of line

    syntax error at /tmp/tmp6vsjyvj2.pl line 60, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6vsjyvj2.pl line 95, at end of
    line

    syntax error at /tmp/tmp6vsjyvj2.pl line 95, at EOF

    Execution of /tmp/tmp6vsjyvj2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_all_lower = 1;\n    my $is_all_upper = 1;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n       \
    \     $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $is_all_upper = 0;\n        }\n    }\n    return $is_all_lower || $is_all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_all_lower = 1;\n    my $is_all_upper = 1;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n       \
    \     $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $is_all_upper = 0;\n        }\n    }\n    return $is_all_lower || $is_all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n\
    \    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n\
    \    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 =\
    \ 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15\
    \ = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my\
    \ $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n\
    \    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26\
    \ = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my\
    \ $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n\
    \    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
    \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my\
    \ $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n\
    \    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48\
    \ = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my\
    \ $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 =\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzye_yozb.pl line 75, at end
    of line

    syntax error at /tmp/tmpzye_yozb.pl line 75, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzye_yozb.pl line 110, at end
    of line

    syntax error at /tmp/tmpzye_yozb.pl line 110, at EOF

    Execution of /tmp/tmpzye_yozb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower && $is_upper ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    my\
    \ $key_case_new = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_case\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_case\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_case\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } else {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_case_new = \"lower\";\n            } elsif ($key =~\
    \ /^[A-Z]+$/) {\n                $key_case_new = \"upper\";\n            } else\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \           if ($key_case ne $key_case_new) {\n                $result = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        $is_lower = 0 if $key =~ /[A-Z]/;\n       \
    \ $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    foreach $key (keys %$dict) {\n  \
    \      $val = $dict->{$key};\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        else {\n            $ret = 0;\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = 0;\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_56bdp2n.pl line 57, at end
    of line

    syntax error at /tmp/tmp_56bdp2n.pl line 57, near "$key_case_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_56bdp2n.pl line 92, at end of
    line

    syntax error at /tmp/tmp_56bdp2n.pl line 92, at EOF

    Execution of /tmp/tmp_56bdp2n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower && $is_upper ? \"\" : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower, $all_upper);\n\
    \    my($result) = \"\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyektcmgh.pl line 55, at
    end of line

    syntax error at /tmp/tmpyektcmgh.pl line 55, at EOF

    Execution of /tmp/tmpyektcmgh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $first = 1;\n    my $len = scalar(keys(%$dict));\n    if ($len\
    \ == 0) {\n        $ret = \"\";\n    } else {\n        while (($key, $val) = each(%$dict))\
    \ {\n            if ($first) {\n                $first = 0;\n                if\
    \ ($key =~ /^[a-z]+$/) {\n                    $case = \"lower\";\n           \
    \     } elsif ($key =~ /^[A-Z]+$/) {\n                    $case = \"upper\";\n\
    \                } else {\n                    $ret = \"\";\n                \
    \    last;\n                }\n            } else {\n                if ($case\
    \ eq \"lower\") {\n                    if ($key !~ /^[a-z]+$/) {\n           \
    \             $ret = \"\";\n                        last;\n                  \
    \  }\n                } elsif ($case eq \"upper\") {\n                    if ($key\
    \ !~ /^[A-Z]+$/) {\n                        $ret = \"\";\n                   \
    \     last;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $first_key;\n    my $first_key_case;\n    my $key_case;\n    my $key_case_match;\n\
    \    my $key_case_mismatch;\n    my $key_case_mismatch_count;\n    my $key_case_mismatch_max;\n\
    \    my $key_case_mismatch_max_key;\n    my $key_case_mismatch_max_value;\n  \
    \  my $key_case_mismatch_max_key_case;\n    my $key_case_mismatch_max_key_case_match;\n\
    \    my $key_case_mismatch_max_key_case_mismatch;\n    my $key_case_mismatch_max_key_case_mismatch_count;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max;\n    my $key_case_mismatch_max_key_case_mismatch_max_key;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_value;\n    my $key_case_mismatch_max_key_case_mismatch_max_key_case;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_key_case_match;\n    my $key_case_mismatch_max_key_case_mismatch_max_key_case_mismatch;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_key_case_mismatch_count;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_key_case_mismatch_max;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_key_case_mismatch_max_key;\n\
    \    my $key_case_mismatch_max_key_case_mismatch_max_key_case_mism\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmps7n851nt.pl line 43, at end
    of line

    syntax error at /tmp/tmps7n851nt.pl line 43, near "$key_case_mismatch_max_key_case_mismatch_max_key_case_mism

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmps7n851nt.pl line 78, at end of
    line

    syntax error at /tmp/tmps7n851nt.pl line 78, at EOF

    Execution of /tmp/tmps7n851nt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my\
    \ $is_empty = 1;\n    my $is_mixed = 0;\n    foreach my $key (keys %$dict) {\n\
    \        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $is_mixed = 1;\n        }\n   \
    \ }\n    if ($is_empty) {\n        return \"\";\n    }\n    elsif ($is_lower &&\
    \ !$is_upper && !$is_mixed) {\n        return 1;\n    }\n    elsif ($is_upper\
    \ && !$is_lower && !$is_mixed) {\n        return 1;\n    }\n    else {\n     \
    \   return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper_count = 0;\n    my $lower_count = 0;\n    my $key_count = 0;\n\
    \    my $value_count = 0;\n    my $key_value_count = 0;\n    my $key_value_upper_count\
    \ = 0;\n    my $key_value_lower_count = 0;\n    my $key_value_mixed_count = 0;\n\
    \    my $key_value_mixed_upper_count = 0;\n    my $key_value_mixed_lower_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_count = 0;\n    my $key_value_mixed_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_upper_count = 0;\n    my $key_value_mixed_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_upper_lower_count = 0;\n    my $key_value_mixed_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_upper_lower_upper_count = 0;\n   \
    \ my $key_value_mixed_lower_upper_lower_upper_lower_count = 0;\n    my $key_value_mixed_upper_lower_upper_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_upper_count = 0;\n\
    \    my $key_value_mixed_upper_lower_upper_lower_upper_lower_upper_count = 0;\n\
    \    my $key_value_mixed_lower_upper_lower_upper_lower_upper_lower_count = 0;\n\
    \    my $key_value_mixed_upper_lower_upper_lower_upper_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_upper_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprjatl80n.pl line 45, at end
    of line

    syntax error at /tmp/tmprjatl80n.pl line 45, near "$key_value_mixed_upper_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprjatl80n.pl line 80, at end of
    line

    syntax error at /tmp/tmprjatl80n.pl line 80, at EOF

    Execution of /tmp/tmprjatl80n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my\
    \ $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpezrnrzlt.pl line 137,
    at end of line

    syntax error at /tmp/tmpezrnrzlt.pl line 137, at EOF

    Execution of /tmp/tmpezrnrzlt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key;\n    my $value;\n    my $is_lower = 1;\n\
    \    my $is_upper = 1;\n    my $is_empty = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key !~ /^[a-z]+$/) {\n     \
    \       $is_lower = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n       \
    \     $is_upper = 0;\n        }\n    }\n    if ($is_empty) {\n        return \"\
    \";\n    }\n    if ($is_lower || $is_upper) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $retval = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_total = 0;\n    my $value_type_total\
    \ = 0;\n    my $key_type_upper = 0;\n    my $key_type_lower = 0;\n    my $value_type_upper\
    \ = 0;\n    my $value_type_lower = 0;\n    my $key_type_mixed = 0;\n    my $value_type_mixed\
    \ = 0;\n    my $key_type_number = 0;\n    my $value_type_number = 0;\n    my $key_type_string\
    \ = 0;\n    my $value_type_string = 0;\n    my $key_type_other = 0;\n    my $value_type_other\
    \ = 0;\n    my $key_type_upper_count = 0;\n    my $key_type_lower_count = 0;\n\
    \    my $value_type_upper_count = 0;\n    my $value_type_lower_count = 0;\n  \
    \  my $key_type_mixed_count = 0;\n    my $value_type_mixed_count = 0;\n    my\
    \ $key_type_number_count = 0;\n    my $value_type_number_count = 0;\n    my $key_type_string_count\
    \ = 0;\n    my $value_type_string_count = 0;\n    my $key_type_other_count = 0;\n\
    \    my $value_type_other_count = 0;\n    my $key_type_upper_total = 0;\n    my\
    \ $key_type_lower_total = 0;\n    my $value_type_upper_total = 0;\n    my $value_type_lower_total\
    \ = 0;\n    my $key_type_mixed_total = 0;\n    my $value_type_mixed_total = 0;\n\
    \    my $key_type_number_total = 0;\n    my $value_type\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpuxv3wfe7.pl line 58, at end
    of line

    syntax error at /tmp/tmpuxv3wfe7.pl line 58, near "$value_type

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpuxv3wfe7.pl line 93, at end of
    line

    syntax error at /tmp/tmpuxv3wfe7.pl line 93, at EOF

    Execution of /tmp/tmpuxv3wfe7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_upper = 1;\n    my $is_lower = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    if ($is_upper || $is_lower) {\n        return 1;\n    }\n\
    \    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else {\n     \
    \       $result = 0;\n            last;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $result = 0;\n    }\n    elsif ($is_lower && $is_upper) {\n     \
    \   $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $lower\
    \ = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n \
    \       }\n    }\n    return $lower == $upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type = \"\";\n    my $key_type_lower\
    \ = 0;\n    my $key_type_upper = 0;\n    foreach my $key (keys %$dict) {\n   \
    \     if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n      \
    \          $key_type = \"lower\";\n                $key_type_lower = 1;\n    \
    \        } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n                $key_type_upper = 1;\n            } else {\n              \
    \  $ret = \"\";\n                last;\n            }\n        } else {\n    \
    \        if ($key_type eq \"lower\") {\n                if ($key =~ /^[A-Z]+$/)\
    \ {\n                    $key_type_upper = 1;\n                } elsif ($key !~\
    \ /^[a-z]+$/) {\n                    $ret = \"\";\n                    last;\n\
    \                }\n            } elsif ($key_type eq \"upper\") {\n         \
    \       if ($key =~ /^[a-z]+$/) {\n                    $key_type_lower = 1;\n\
    \                } elsif ($key !~ /^[A-Z]+$/) {\n                    $ret = \"\
    \";\n                    last;\n                }\n            }\n        }\n\
    \    }\n    if ($key_type_lower && $key_type_upper) {\n        $ret = \"\";\n\
    \    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    if (scalar(keys %$dict) == 0) {\n\
    \        $ret = \"\";\n    } else {\n        while (($key, $val) = each %$dict)\
    \ {\n            if ($key =~ /^[a-z]+$/) {\n                $is_lower = 1;\n \
    \           } elsif ($key =~ /^[A-Z]+$/) {\n                $is_upper = 1;\n \
    \           } else {\n                $ret = \"\";\n                last;\n  \
    \          }\n        }\n        if ($is_lower && $is_upper) {\n            $ret\
    \ = \"\";\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    my\
    \ $key_case_prev = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_case\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_case\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_case\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } else {\n            if ($key_case eq\
    \ \"lower\") {\n                if ($key =~ /^[A-Z]+$/) {\n                  \
    \  $result = \"\";\n                    last;\n                }\n           \
    \ } elsif ($key_case eq \"upper\") {\n                if ($key =~ /^[a-z]+$/)\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lower = 1;\n    my $upper = 1;\n    foreach $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $lower = 0;\n        }\n        if ($key =~\
    \ /[a-z]/) {\n            $upper = 0;\n        }\n    }\n    if ($lower == 0 &&\
    \ $upper == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        } else {\n            $all_upper = 0;\n        }\n\
    \    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012692
