name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome\
  \ {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $length = length($string);\n    my $longest_palindrome_length\
    \ = 0;\n    my $longest_palindrome_index = 0;\n    for (my $i = 0; $i < $length;\
    \ $i++) {\n        my $palindrome_length = 0;\n        my $j = 0;\n        while\
    \ ($i - $j >= 0 && $i + $j < $length) {\n            if (substr($string, $i -\
    \ $j, 1) eq substr($string, $i + $j, 1)) {\n                $palindrome_length\
    \ = $j * 2 + 1;\n                $j++;\n            } else {\n               \
    \ last;\n            }\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_index = $i;\n        }\n        $palindrome_length = 0;\n\
    \        $j = 0;\n        while ($i - $j >= 0 && $i + $j + 1 < $length) {\n  \
    \          if (substr($string, $i - $j, 1) eq substr($string, $i + $j + 1, 1))\
    \ {\n                $palindrome_length = $j * 2 + 2;\n                $j++;\n\
    \            } else {\n                last;\n            }\n        }\n     \
    \   if ($palindrome_length > $longest_palindrome_length) {\n            $longest_palindrome_length\
    \ = $palindrome_length;\n            $longest_palindrome_index = $i;\n       \
    \ }\n    }\n    my $prefix = substr($string, 0, $longest_palindrome_index + 1);\n\
    \    my $suffix = substr($string, $longest_palindrome_index + 1);\n    return\
    \ $string . reverse($suffix);\n}", "    my $len = length($string);\n    my $palindrome_len\
    \ = 0;\n    my $palindrome_end = 0;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $len && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j * 2 - 1 > $palindrome_len) {\n            $palindrome_len = $j\
    \ * 2 - 1;\n            $palindrome_end = $i;\n        }\n        $j = 0;\n  \
    \      while ($i - $j >= 0 && $i + $j + 1 < $len && substr($string, $i - $j, 1)\
    \ eq substr($string, $i + $j + 1, 1)) {\n            $j++;\n        }\n      \
    \  if ($j * 2 > $palindrome_len) {\n            $palindrome_len = $j * 2;\n  \
    \          $palindrome_end = $i;\n        }\n    }\n    my $palindrome_start =\
    \ $palindrome_end - ($palindrome_len - 1) / 2;\n    my $palindrome = substr($string,\
    \ $palindrome_start, $palindrome_len);\n    my $prefix = substr($string, 0, $palindrome_start);\n\
    \    return $palindrome . reverse($prefix);\n}", "    my $length = length($string);\n\
    \    my $max_palindrome_length = 0;\n    my $max_palindrome_start = 0;\n    for\
    \ (my $i = 0; $i < $length; $i++) {\n        my $palindrome_length = 0;\n    \
    \    my $palindrome_start = 0;\n        # Check if the string is a palindrome.\n\
    \        if (substr($string, $i, 1) eq substr($string, $length - 1 - $i, 1)) {\n\
    \            $palindrome_length = 1;\n            $palindrome_start = $i;\n  \
    \          # Check if the string is a palindrome of length 2 or more.\n      \
    \      for (my $j = 1; $i - $j >= 0 && $length - 1 - $i + $j < $length; $j++)\
    \ {\n                if (substr($string, $i - $j, 1) eq substr($string, $length\
    \ - 1 - $i + $j, 1)) {\n                    $palindrome_length += 2;\n       \
    \             $palindrome_start = $i - $j;\n                } else {\n       \
    \             last;\n                }\n            }\n        }\n        if ($palindrome_length\
    \ > $max_palindrome_length) {\n            $max_palindrome_length = $palindrome_length;\n\
    \            $max_palindrome_start = $palindrome_start;\n        }\n    }\n  \
    \  return $string . reverse(substr($string, 0, $max_palindrome_start));\n}", " \
    \   my $length = length($string);\n    my $palindrome_length = 0;\n    my $palindrome_start\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = $length - 1\
    \ - $i;\n        my $k = 0;\n        while ($i + $k < $j - $k) {\n           \
    \ if (substr($string, $i + $k, 1) ne substr($string, $j - $k, 1)) {\n        \
    \        last;\n            }\n            $k++;\n        }\n        if ($k >\
    \ $palindrome_length) {\n            $palindrome_length = $k;\n            $palindrome_start\
    \ = $i;\n        }\n    }\n    return $string . reverse(substr($string, 0, $palindrome_start));\n\
    }", "    my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - palindrome_length($string));\n    $palindrome .= reverse($prefix);\n    return\
    \ $palindrome;\n}", "    my $palindrome = $string;\n    my $prefix = reverse $string;\n\
    \    $prefix =~ s/.*?(.)/$1/;\n    $palindrome .= $prefix;\n    return $palindrome;\n\
    }", "    my $length = length($string);\n    my $suffix = '';\n    my $prefix =\
    \ '';\n    my $i = 0;\n    my $j = $length - 1;\n    while ($i < $j) {\n     \
    \   if (substr($string, $i, 1) eq substr($string, $j, 1)) {\n            $suffix\
    \ = substr($string, $i, 1) . $suffix;\n            $prefix = $prefix . substr($string,\
    \ $j, 1);\n            $i++;\n            $j--;\n        } else {\n          \
    \  $suffix = '';\n            $prefix = '';\n            $i = 0;\n           \
    \ $j--;\n        }\n    }\n    return $string . $prefix;\n}", "    my($prefix,\
    \ $suffix);\n    my($palindrome_len) = 0;\n    my($len) = length($string);\n \
    \   my($i, $j);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = 0; $i\
    \ - $j >= 0 && $i + $j < $len; $j++) {\n            if (substr($string, $i - $j,\
    \ 1) ne substr($string, $i + $j, 1)) {\n                last;\n            }\n\
    \        }\n        if ($j * 2 - 1 > $palindrome_len) {\n            $palindrome_len\
    \ = $j * 2 - 1;\n            $prefix = substr($string, 0, $i - $j + 1);\n    \
    \        $suffix = substr($string, $i - $j + 1, $palindrome_len);\n        }\n\
    \        for ($j = 0; $i - $j >= 0 && $i + $j + 1 < $len; $j++) {\n          \
    \  if (substr($string, $i - $j, 1) ne substr($string, $i + $j + 1, 1)) {\n   \
    \             last;\n            }\n        }\n        if ($j * 2 > $palindrome_len)\
    \ {\n            $palindrome_len = $j * 2;\n            $prefix = substr($string,\
    \ 0, $i - $j + 1);\n            $suffix = substr($string, $i - $j + 1, $palindrome_len);\n\
    \        }\n    }\n    return $string . reverse($prefix);\n}", "    my $palindrome\
    \ = $string;\n    my $reverse = reverse $string;\n    my $length = length $string;\n\
    \    my $max_length = 0;\n    my $max_index = 0;\n    for (my $i = 0; $i < $length;\
    \ $i++) {\n        my $j = 0;\n        while ($j < $length - $i && substr($string,\
    \ $i + $j, 1) eq substr($reverse, $length - $i - $j - 1, 1)) {\n            $j++;\n\
    \        }\n        if ($j > $max_length) {\n            $max_length = $j;\n \
    \           $max_index = $i;\n        }\n    }\n    $palindrome .= substr($reverse,\
    \ 0, $length - $max_index - $max_length);\n    return $palindrome;\n}", "    my\
    \ $palindrome_suffix = find_longest_palindrome_suffix($string);\n    my $prefix\
    \ = substr($string, 0, length($string) - length($palindrome_suffix));\n    return\
    \ $string . reverse($prefix);\n}", "    my $length = length($string);\n    my\
    \ $suffix = \"\";\n    my $prefix = \"\";\n    my $i = 0;\n    while ($i < $length)\
    \ {\n        my $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            $suffix = $substring;\n            $prefix = substr($string,\
    \ 0, $i);\n            last;\n        }\n        $i++;\n    }\n    return $string\
    \ . reverse($prefix);\n}", "    my $len = length($string);\n    my $i = $len;\n\
    \    while ($i > 0) {\n        if (is_palindrome(substr($string, 0, $i))) {\n\
    \            return $string . reverse(substr($string, $i));\n        }\n     \
    \   $i--;\n    }\n    return $string;\n}", "    my $palindrome = $string;\n  \
    \  my $prefix = substr($string, 0, length($string) - 1);\n    while ($prefix ne\
    \ \"\") {\n        if (is_palindrome($prefix)) {\n            $palindrome .= reverse($prefix);\n\
    \            last;\n        }\n        $prefix = substr($prefix, 0, length($prefix)\
    \ - 1);\n    }\n    return $palindrome;\n}", "    my $palindrome = $string;\n\
    \    my $suffix = $string;\n    while ($suffix ne \"\") {\n        if (is_palindrome($suffix))\
    \ {\n            $palindrome .= reverse(substr($string, 0, length($string) - length($suffix)));\n\
    \            last;\n        }\n        $suffix = substr($suffix, 1);\n    }\n\
    \    return $palindrome;\n}", "    my $len = length($string);\n    my $longest_palindrome_suffix\
    \ = longest_palindrome_suffix($string);\n    my $prefix = substr($string, 0, $len\
    \ - $longest_palindrome_suffix);\n    return $string . reverse($prefix);\n}",
  "    my $len = length($string);\n    my $max_palindrome_len = 0;\n    my $max_palindrome_pos\
    \ = -1;\n    for (my $i = 0; $i < $len; $i++) {\n        my $j = 0;\n        while\
    \ ($i - $j >= 0 && $i + $j < $len && substr($string, $i - $j, 1) eq substr($string,\
    \ $i + $j, 1)) {\n            $j++;\n        }\n        if ($j > $max_palindrome_len)\
    \ {\n            $max_palindrome_len = $j;\n            $max_palindrome_pos =\
    \ $i;\n        }\n    }\n    my $prefix = substr($string, 0, $max_palindrome_pos\
    \ - $max_palindrome_len + 1);\n    my $suffix = substr($string, $max_palindrome_pos\
    \ + $max_palindrome_len);\n    my $palindrome = $string . reverse($prefix);\n\
    \    return $palindrome;\n}", "    my $length = length($string);\n    my $max_palindrome_length\
    \ = 0;\n    my $max_palindrome_index = 0;\n    for (my $i = 0; $i < $length; $i++)\
    \ {\n        my $palindrome_length = 0;\n        my $j = 0;\n        while ($i\
    \ - $j >= 0 && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string,\
    \ $i + $j, 1)) {\n            $palindrome_length += 2;\n            $j++;\n  \
    \      }\n        if ($palindrome_length > $max_palindrome_length) {\n       \
    \     $max_palindrome_length = $palindrome_length;\n            $max_palindrome_index\
    \ = $i;\n        }\n    }\n    my $prefix = substr($string, 0, $max_palindrome_index\
    \ - $max_palindrome_length / 2);\n    return $string . reverse($prefix);\n}",
  "    return $string if length($string) <= 1;\n    my $suffix = longest_palindrome_suffix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($suffix));\n   \
    \ return $string . reverse($prefix);\n}", "    my $palindrome = $string;\n   \
    \ my $prefix = substr($string, 0, length($string) - 1);\n    while ($prefix ne\
    \ \"\") {\n        if (is_palindrome($prefix)) {\n            $palindrome .= reverse($prefix);\n\
    \            last;\n        }\n        $prefix = substr($prefix, 0, length($prefix)\
    \ - 1);\n    }\n    return $palindrome;\n}", "    return $string if length($string)\
    \ <= 1;\n    my $longest_palindrome = longest_palindrome($string);\n    return\
    \ $string . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
