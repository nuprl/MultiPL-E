name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"\
  apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n    \
    \        $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n   \
    \         $is_upper = 1;\n        }\n        else {\n            $result = 0;\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $result = 0;\n    }\n    return $result;\n}", "    my $result = 1;\n    my\
    \ $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($key_type eq \"lower\") {\n\
    \            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        } elsif ($key_type eq \"upper\") {\n\
    \            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        }\n    }\n    return $result;\n}",
  "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n\
    \    return $all_lower || $all_upper;\n}", "    my($key, $value);\n    my($lower_case,\
    \ $upper_case);\n    $lower_case = 1;\n    $upper_case = 1;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower_case\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $upper_case = 0;\n\
    \        }\n    }\n    return $lower_case || $upper_case;\n}", "    my $result\
    \ = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n      \
    \  if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n \
    \               $key_type = \"upper\";\n            } else {\n               \
    \ $result = \"\";\n                last;\n            }\n        } else {\n  \
    \          if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n             \
    \   $result = \"\";\n                last;\n            } elsif ($key_type eq\
    \ \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n\
    \    my $key_case_prev;\n    my $value_case_prev;\n    my $key_case_prev_set =\
    \ 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my\
    \ $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n  \
    \  my $is_empty = 1;\n    while(($key, $val) = each %$dict) {\n        $is_empty\
    \ = 0;\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n\
    \    if ($is_empty) {\n        $ret = \"\";\n    }\n    elsif ($is_lower && $is_upper)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my($key, $value);\n\
    \    my($lower_case, $upper_case);\n    $lower_case = $upper_case = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $lower_case = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $upper_case\
    \ = 0;\n        }\n    }\n    return $lower_case || $upper_case;\n}", "    my($key,\
    \ $val);\n    my($lower_case, $upper_case);\n    my($lower_count, $upper_count);\n\
    \    my($result);", "    my $result = 1;\n    my $key;\n    my $value;\n    my\
    \ $lower = 0;\n    my $upper = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n     \
    \   if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n    }\n   \
    \ if ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_type = \"\";\n\
    \    my $val_type = \"\";\n    my $key_type_count = 0;\n    my $val_type_count\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $key_type_count_lower = 0;\n\
    \    my $val_type_count_upper = 0;\n    my $val_type_count_lower = 0;\n    my\
    \ $key_type_count_string = 0;\n    my $val_type_count_string = 0;\n    my $key_type_count_number\
    \ = 0;\n    my $val_type_count_number = 0;\n    my $key_type_count_other = 0;\n\
    \    my $val_type_count_other = 0;\n    my $key_type_count_undef = 0;\n    my\
    \ $val_type_count_undef = 0;\n    my $key_type_count_hash = 0;\n    my $val_type_count_hash\
    \ = 0;\n    my $key_type_count_array = 0;\n    my $val_type_count_array = 0;\n\
    \    my $key_type_count_code = 0;\n    my $val_type_count_code = 0;\n    my $key_type_count_glob\
    \ = 0;\n    my $val_type_count_glob = 0;\n    my $key_type_count_ref = 0;\n  \
    \  my $val_type_count_ref = 0;\n    my $key_type_count_scalar = 0;\n    my $val_type_count_scalar\
    \ = 0;\n    my $key_type_count_other = 0;\n    my $val_type_count_other = 0;\n\
    \    my $key_type_count_undef = 0;\n    my $val_type_count_undef = 0;\n    my\
    \ $key_type_count_hash = 0;\n    my $val_type_count_hash = 0;\n    my $key_type_count_array\
    \ = 0;\n    my $", "    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}", "    my $result = 1;\n    my $lower =\
    \ 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $first_key = \"\";\n    my $first_key_case = \"\";\n    my $key_case =\
    \ \"\";\n    foreach my $key (keys %$dict) {\n        if ($first_key eq \"\")\
    \ {\n            $first_key = $key;\n            $first_key_case = get_key_case($key);\n\
    \        } else {\n            $key_case = get_key_case($key);\n            if\
    \ ($key_case ne $first_key_case) {\n                $result = \"\";\n        \
    \        last;\n            }\n        }\n    }\n    return $result;\n}", "  \
    \  my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    if\
    \ ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $ret = 1;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            $ret = 0;\n            last;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $ret = 0;\n    }\n    return $ret;\n\
    }", "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    return $all_lower || $all_upper;\n}", "    my($key);\n    my($lower_case)\
    \ = 1;\n    my($upper_case) = 1;\n    foreach $key (keys %$dict) {\n        if\
    \ ($key =~ /[a-z]/) {\n            $upper_case = 0;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n    }\n    return ($lower_case\
    \ || $upper_case);\n}", "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n            $all_upper =\
    \ 0;\n        }\n    }\n    return $all_lower || $all_upper;\n}", "    my $result\
    \ = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n        $result = \"\
    \";\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
