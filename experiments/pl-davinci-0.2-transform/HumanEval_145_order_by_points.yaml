name: HumanEval_145_order_by_points
language: pl
prompt: "# Write a function which sorts the given list of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11,\
  \ 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
  \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {\n        sum_digits($a) <=> sum_digits($b)\
    \ || $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted = sort\
    \ {\n        sum_of_digits($a) <=> sum_of_digits($b) || $a <=> $b\n    } @$nums;\n\
    \    return \\@sorted;\n}", "    my @sorted = sort {\n        sum_of_digits($a)\
    \ <=> sum_of_digits($b)\n        ||\n        $a <=> $b\n    } @$nums;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        my $sum_a = sum_digits($a);\n\
    \        my $sum_b = sum_digits($b);\n        if ($sum_a == $sum_b) {\n      \
    \      return index($nums, $a) <=> index($nums, $b);\n        }\n        return\
    \ $sum_a <=> $sum_b;\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted\
    \ = sort {\n        my $sum_a = sum_digits($a);\n        my $sum_b = sum_digits($b);\n\
    \        if ($sum_a == $sum_b) {\n            return $a <=> $b;\n        }\n \
    \       return $sum_a <=> $sum_b;\n    } @$nums;\n    return \\@sorted;\n}", " \
    \   my @sorted = sort {\n        my $sum_a = sum_digits($a);\n        my $sum_b\
    \ = sum_digits($b);\n        if ($sum_a == $sum_b) {\n            return $a <=>\
    \ $b;\n        }\n        return $sum_a <=> $sum_b;\n    } @$nums;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        sum_of_digits($a) <=> sum_of_digits($b)\n\
    \        ||\n        $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "  \
    \  my @sorted = sort {\n        sum_digits($a) <=> sum_digits($b)\n        ||\n\
    \        $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted\
    \ = sort {\n        sum_digits($a) <=> sum_digits($b)\n        ||\n        $a\
    \ <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted = sort {\n\
    \        my $sum_a = sum_digits($a);\n        my $sum_b = sum_digits($b);\n  \
    \      if ($sum_a == $sum_b) {\n            return $a <=> $b;\n        }\n   \
    \     return $sum_a <=> $sum_b;\n    } @$nums;\n    return \\@sorted;\n}", " \
    \   my @sorted = sort {\n        sum_digits($a) <=> sum_digits($b)\n        ||\
    \ $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted = sort\
    \ {\n        sum_of_digits($a) <=> sum_of_digits($b)\n        ||\n        $a <=>\
    \ $b\n    } @$nums;\n    return \\@sorted;\n}", "    my %sums;\n    my @sorted;\n\
    \    for my $i (0..$#$nums) {\n        my $sum = 0;\n        for my $d (split\
    \ //, $nums->[$i]) {\n            $sum += $d;\n        }\n        push @{$sums{$sum}},\
    \ $i;\n    }\n    for my $sum (sort {$a <=> $b} keys %sums) {\n        for my\
    \ $i (@{$sums{$sum}}) {\n            push @sorted, $nums->[$i];\n        }\n \
    \   }\n    return \\@sorted;\n}", "    my @sorted = sort {\n        my $sum_a\
    \ = sum_digits($a);\n        my $sum_b = sum_digits($b);\n        if ($sum_a ==\
    \ $sum_b) {\n            return index($nums, $a) <=> index($nums, $b);\n     \
    \   }\n        return $sum_a <=> $sum_b;\n    } @$nums;\n    return \\@sorted;\n\
    }", "    my @result = ();\n    my %hash = ();\n    foreach my $num (@$nums) {\n\
    \        my $sum = 0;\n        foreach my $digit (split(//, $num)) {\n       \
    \     $sum += $digit;\n        }\n        $hash{$num} = $sum;\n    }\n    foreach\
    \ my $key (sort {$hash{$a} <=> $hash{$b}} keys %hash) {\n        push @result,\
    \ $key;\n    }\n    return \\@result;\n}", "    my @sorted = sort {\n        sum_digits($a)\
    \ <=> sum_digits($b) || $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", " \
    \   my @sorted = sort {\n        my $sum_a = sum_digits($a);\n        my $sum_b\
    \ = sum_digits($b);\n        if ($sum_a == $sum_b) {\n            return $a <=>\
    \ $b;\n        }\n        return $sum_a <=> $sum_b;\n    } @$nums;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        sum_digits($a) <=> sum_digits($b)\
    \ || $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}", "    my @sorted = sort\
    \ {\n        sum_digits($a) <=> sum_digits($b)\n        || $a <=> $b\n    } @$nums;\n\
    \    return \\@sorted;\n}", "    my @sorted = sort {\n        sum_digits($a) <=>\
    \ sum_digits($b)\n        ||\n        $a <=> $b\n    } @$nums;\n    return \\\
    @sorted;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
