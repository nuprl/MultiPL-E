name: HumanEval_56_correct_bracketing
language: pl
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n\
  # \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\"\
  )\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n \
  \   my($brackets) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
  \        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  <><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  <<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  <><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for my $char (split //, $brackets) {\n    \
    \    if ($char eq '<') {\n            $count++;\n        } elsif ($char eq '>')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return '';\n        }\n    }\n    return $count == 0 ? 1 : '';\n}", "    my\
    \ $count = 0;\n    for my $char (split //, $brackets) {\n        if ($char eq\
    \ '<') {\n            $count++;\n        }\n        elsif ($char eq '>') {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ '';\n        }\n    }\n    return $count == 0 ? 1 : '';\n}", "    my $count\
    \ = 0;\n    foreach my $char (split //, $brackets) {\n        if ($char eq '<')\
    \ {\n            $count++;\n        } elsif ($char eq '>') {\n            $count--;\n\
    \        }\n        return \"\" if $count < 0;\n    }\n    return $count == 0\
    \ ? 1 : \"\";\n}", "    my $count = 0;\n    foreach my $char (split //, $brackets)\
    \ {\n        if ($char eq '<') {\n            $count++;\n        } elsif ($char\
    \ eq '>') {\n            $count--;\n        }\n        return \"\" if $count <\
    \ 0;\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n   \
    \ for my $c (split //, $brackets) {\n        if ($c eq '<') {\n            $count++;\n\
    \        } elsif ($c eq '>') {\n            $count--;\n        }\n        return\
    \ '' if $count < 0;\n    }\n    return $count == 0 ? 1 : '';\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $brackets) {\n        $count++ if $c eq '<';\n\
    \        $count-- if $c eq '>';\n        return \"\" if $count < 0;\n    }\n \
    \   return $count == 0;\n}", "    my $count = 0;\n    for my $c (split //, $brackets)\
    \ {\n        if ($c eq '<') {\n            $count++;\n        }\n        elsif\
    \ ($c eq '>') {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return '';\n        }\n    }\n    return $count == 0 ? 1 : '';\n}",
  "    my $count = 0;\n    for my $char (split //, $brackets) {\n        if ($char\
    \ eq '<') {\n            $count++;\n        }\n        elsif ($char eq '>') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"\";\n        }\n    }\n    return $count == 0;\n}", "    my $count = 0;\n\
    \    for my $b (split //, $brackets) {\n        if ($b eq '<') {\n           \
    \ $count++;\n        } elsif ($b eq '>') {\n            $count--;\n        }\n\
    \        return \"\" if $count < 0;\n    }\n    return $count == 0 ? 1 : \"\"\
    ;\n}", "    my $count = 0;\n    for my $char (split //, $brackets) {\n       \
    \ if ($char eq '<') {\n            $count++;\n        } elsif ($char eq '>') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ '';\n        }\n    }\n    return $count == 0 ? 1 : '';\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq '<') {\n    \
    \        $count++;\n        } elsif ($c eq '>') {\n            $count--;\n   \
    \     }\n        if ($count < 0) {\n            return '';\n        }\n    }\n\
    \    return $count == 0 ? 1 : '';\n}", "    my $count = 0;\n    foreach my $char\
    \ (split(//, $brackets)) {\n        if ($char eq \"<\") {\n            $count++;\n\
    \        } elsif ($char eq \">\") {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0;\n}", "    my $count = 0;\n    for my $c (split //, $brackets) {\n    \
    \    if ($c eq '<') {\n            $count++;\n        }\n        elsif ($c eq\
    \ '>') {\n            $count--;\n        }\n        else {\n            return\
    \ '';\n        }\n        if ($count < 0) {\n            return '';\n        }\n\
    \    }\n    return $count == 0 ? 1 : '';\n}", "    my $count = 0;\n    for my\
    \ $c (split //, $brackets) {\n        if ($c eq '<') {\n            $count++;\n\
    \        } elsif ($c eq '>') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return '';\n        }\n    }\n    return $count == 0 ? 1\
    \ : '';\n}", "    my $count = 0;\n    for my $char (split //, $brackets) {\n \
    \       if ($char eq '<') {\n            $count++;\n        } elsif ($char eq\
    \ '>') {\n            $count--;\n        }\n        return '' if $count < 0;\n\
    \    }\n    return '' if $count != 0;\n    return 1;\n}", "    my $count = 0;\n\
    \    for my $c (split //, $brackets) {\n        $count++ if $c eq '<';\n     \
    \   $count-- if $c eq '>';\n        return \"\" if $count < 0;\n    }\n    return\
    \ $count == 0;\n}", "    my $bracket_count = 0;\n    for my $char (split //, $brackets)\
    \ {\n        if ($char eq '<') {\n            $bracket_count++;\n        }\n \
    \       elsif ($char eq '>') {\n            $bracket_count--;\n        }\n   \
    \     return '' if $bracket_count < 0;\n    }\n    return $bracket_count == 0\
    \ ? 1 : '';\n}", "    my $count = 0;\n    for my $b (split //, $brackets) {\n\
    \        $count++ if $b eq '<';\n        $count-- if $b eq '>';\n        return\
    \ \"\" if $count < 0;\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my\
    \ $count = 0;\n    foreach my $c (split //, $brackets) {\n        if ($c eq '<')\
    \ {\n            $count++;\n        } elsif ($c eq '>') {\n            $count--;\n\
    \        }\n        return '' if $count < 0;\n    }\n    return $count == 0 ?\
    \ 1 : '';\n}", "    my $count = 0;\n    for my $b (split //, $brackets) {\n  \
    \      if ($b eq '<') {\n            $count++;\n        } elsif ($b eq '>') {\n\
    \            $count--;\n        }\n        return '' if $count < 0;\n    }\n \
    \   return $count == 0 ? 1 : '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
