name: HumanEval_90_next_smallest
language: pl
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1,\
  \ 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n\
  # undef\nsub next_smallest {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4,\
  \ 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = $lst->[0];\n    my $min2 = undef;\n    for my $i (1..$#$lst)\
    \ {\n        if ($lst->[$i] < $min) {\n            $min2 = $min;\n           \
    \ $min = $lst->[$i];\n        } elsif ($lst->[$i] < $min2 || !defined $min2) {\n\
    \            $min2 = $lst->[$i];\n        }\n    }\n    return $min2;\n}", " \
    \   my $min = undef;\n    my $min2 = undef;\n    foreach my $e (@$lst) {\n   \
    \     if (!defined($min) || $e < $min) {\n            $min2 = $min;\n        \
    \    $min = $e;\n        } elsif (!defined($min2) || $e < $min2) {\n         \
    \   $min2 = $e;\n        }\n    }\n    return $min2;\n}", "    my $min = $lst->[0];\n\
    \    my $min2 = undef;\n    for my $e (@$lst) {\n        if ($e < $min) {\n  \
    \          $min2 = $min;\n            $min = $e;\n        } elsif ($e < $min2\
    \ || !defined $min2) {\n            $min2 = $e;\n        }\n    }\n    return\
    \ $min2;\n}", "    my $min = $lst->[0];\n    my $min2 = undef;\n    for my $i\
    \ (1..$#$lst) {\n        if ($lst->[$i] < $min) {\n            $min2 = $min;\n\
    \            $min = $lst->[$i];\n        } elsif (!defined($min2) || $lst->[$i]\
    \ < $min2) {\n            $min2 = $lst->[$i];\n        }\n    }\n    return $min2;\n\
    }", "    my $min = $lst->[0];\n    my $next_min = undef;\n    for(my $i = 1; $i\
    \ < @$lst; $i++) {\n        if ($lst->[$i] < $min) {\n            $next_min =\
    \ $min;\n            $min = $lst->[$i];\n        } elsif (!defined($next_min)\
    \ || $lst->[$i] < $next_min) {\n            $next_min = $lst->[$i];\n        }\n\
    \    }\n    return $next_min;\n}", "    my $min = $lst->[0];\n    my $second_min\
    \ = undef;\n    foreach my $elem (@$lst) {\n        if ($elem < $min) {\n    \
    \        $second_min = $min;\n            $min = $elem;\n        } elsif ($elem\
    \ < $second_min || !defined($second_min)) {\n            $second_min = $elem;\n\
    \        }\n    }\n    return $second_min;\n}", "    my $min = undef;\n    my\
    \ $min2 = undef;\n    for my $x (@$lst) {\n        if (!defined($min) || $x <\
    \ $min) {\n            $min2 = $min;\n            $min = $x;\n        } elsif\
    \ (!defined($min2) || $x < $min2) {\n            $min2 = $x;\n        }\n    }\n\
    \    return $min2;\n}", "    my $min = $lst->[0];\n    my $min2 = undef;\n   \
    \ for my $i (1..$#$lst) {\n        if ($lst->[$i] < $min) {\n            $min2\
    \ = $min;\n            $min = $lst->[$i];\n        } elsif (!defined($min2) ||\
    \ $lst->[$i] < $min2) {\n            $min2 = $lst->[$i];\n        }\n    }\n \
    \   return $min2;\n}", "    my $min = $lst->[0];\n    my $next_min = undef;\n\
    \    for my $i (1..$#$lst) {\n        if ($lst->[$i] < $min) {\n            $next_min\
    \ = $min;\n            $min = $lst->[$i];\n        } elsif ($lst->[$i] < $next_min\
    \ || !defined $next_min) {\n            $next_min = $lst->[$i];\n        }\n \
    \   }\n    return $next_min;\n}", "    my $min = $lst->[0];\n    my $next_min\
    \ = undef;\n    for my $i (1..$#$lst) {\n        if ($lst->[$i] < $min) {\n  \
    \          $next_min = $min;\n            $min = $lst->[$i];\n        } elsif\
    \ (!defined($next_min) || $lst->[$i] < $next_min) {\n            $next_min = $lst->[$i];\n\
    \        }\n    }\n    return $next_min;\n}", "    my $min = $lst->[0];\n    my\
    \ $min2 = undef;\n    for my $i (1..$#$lst) {\n        my $e = $lst->[$i];\n \
    \       if ($e < $min) {\n            $min2 = $min;\n            $min = $e;\n\
    \        } elsif (!defined($min2) || $e < $min2) {\n            $min2 = $e;\n\
    \        }\n    }\n    return $min2;\n}", "    my $min = undef;\n    my $min2\
    \ = undef;\n    for my $x (@$lst) {\n        if (!defined($min) || $x < $min)\
    \ {\n            $min2 = $min;\n            $min = $x;\n        } elsif (!defined($min2)\
    \ || $x < $min2) {\n            $min2 = $x;\n        }\n    }\n    return $min2;\n\
    }", "    my $min = undef;\n    my $next_min = undef;\n    for my $i (@$lst) {\n\
    \        if (not defined $min or $i < $min) {\n            $next_min = $min;\n\
    \            $min = $i;\n        } elsif (not defined $next_min or $i < $next_min)\
    \ {\n            $next_min = $i;\n        }\n    }\n    return $next_min;\n}",
  "    my $min = undef;\n    my $sec = undef;\n    for my $i (@$lst) {\n        if\
    \ (not defined $min or $i < $min) {\n            $sec = $min;\n            $min\
    \ = $i;\n        } elsif (not defined $sec or $i < $sec) {\n            $sec =\
    \ $i;\n        }\n    }\n    return $sec;\n}", "    my $min = $lst->[0];\n   \
    \ my $second = undef;\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n\
    \            $second = $min;\n            $min = $i;\n        } elsif ($i < $second\
    \ || !defined $second) {\n            $second = $i;\n        }\n    }\n    return\
    \ $second;\n}", "    my $min = undef;\n    my $next_min = undef;\n    for my $i\
    \ (@$lst) {\n        if (!defined $min) {\n            $min = $i;\n        } elsif\
    \ (!defined $next_min) {\n            if ($i < $min) {\n                $next_min\
    \ = $min;\n                $min = $i;\n            } else {\n                $next_min\
    \ = $i;\n            }\n        } else {\n            if ($i < $min) {\n     \
    \           $next_min = $min;\n                $min = $i;\n            } elsif\
    \ ($i < $next_min) {\n                $next_min = $i;\n            }\n       \
    \ }\n    }\n    return $next_min;\n}", "    my $min = undef;\n    my $min2 = undef;\n\
    \    foreach my $e (@$lst) {\n        if (!defined($min) || $e < $min) {\n   \
    \         $min2 = $min;\n            $min = $e;\n        } elsif (!defined($min2)\
    \ || $e < $min2) {\n            $min2 = $e;\n        }\n    }\n    return $min2;\n\
    }", "    my $min = $lst->[0];\n    my $min2 = undef;\n    foreach my $i (@$lst)\
    \ {\n        if ($i < $min) {\n            $min2 = $min;\n            $min = $i;\n\
    \        } elsif ($i < $min2 || !defined($min2)) {\n            $min2 = $i;\n\
    \        }\n    }\n    return $min2;\n}", "    my $min = $lst->[0];\n    my $next_min\
    \ = undef;\n    for my $i (1..$#$lst) {\n        if ($lst->[$i] < $min) {\n  \
    \          $next_min = $min;\n            $min = $lst->[$i];\n        } elsif\
    \ (!defined($next_min) || $lst->[$i] < $next_min) {\n            $next_min = $lst->[$i];\n\
    \        }\n    }\n    return $next_min;\n}", "    my $min = $lst->[0];\n    my\
    \ $min2 = undef;\n    for my $i (1..$#$lst) {\n        if ($lst->[$i] < $min)\
    \ {\n            $min2 = $min;\n            $min = $lst->[$i];\n        } elsif\
    \ ($lst->[$i] < $min2 || !defined $min2) {\n            $min2 = $lst->[$i];\n\
    \        }\n    }\n    return $min2;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
