name: HumanEval_77_iscube
language: pl
prompt: "# Write a function that takes an integer a and returns True \n# if this ingeger\
  \ is a cube of some integer number.\n# Note: you may assume the input is always\
  \ valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n\
  # 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub\
  \ iscube {\n    my($a) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $b = int(sqrt($a));\n    return $b * $b * $b == $a;\n}", " \
    \   my $i = 1;\n    while ($i*$i*$i < $a) {\n        $i++;\n    }\n    if ($i*$i*$i\
    \ == $a) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
  "    my $b = int(abs($a) ** (1/3));\n    return $b ** 3 == abs($a);\n}", "    my\
    \ $b = int(sqrt($a));\n    return $b * $b * $b == $a;\n}", "    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}", "    my $b = int(sqrt($a));\n    return $b\
    \ * $b * $b == $a;\n}", "    my $b = int(abs($a) ** (1/3));\n    return $b **\
    \ 3 == abs($a);\n}", "    my $b = int(sqrt($a));\n    return $b * $b * $b == $a;\n\
    }", "    my $i = 0;\n    while ($i*$i*$i < $a) {\n        $i++;\n    }\n    if\
    \ ($i*$i*$i == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}", "    my $b = int(abs($a) ** (1/3));\n    return $b ** 3 == abs($a);\n\
    }", "    my $b = int(sqrt($a));\n    if ($b * $b * $b == $a) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my $b = int(abs($a)\
    \ ** (1/3));\n    return $b ** 3 == abs($a);\n}", "    my $b = int(abs($a) **\
    \ (1/3));\n    return $b ** 3 == abs($a);\n}", "    my $b = sqrt($a);\n    my\
    \ $c = $b * $b * $b;\n    return $c == $a;\n}", "    my $i = 1;\n    while ($i*$i*$i\
    \ <= $a) {\n        if ($i*$i*$i == $a) {\n            return 1;\n        }\n\
    \        $i++;\n    }\n    return \"\";\n}", "    my $b = int(sqrt($a));\n   \
    \ return $b * $b * $b == $a;\n}", "    my $b = int(abs($a) ** (1/3));\n    return\
    \ $b ** 3 == abs($a);\n}", "    my $b = int(sqrt($a));\n    return $b*$b*$b ==\
    \ $a;\n}", "    my $b = int(abs($a) ** (1/3));\n    if ($b ** 3 == abs($a)) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $b\
    \ = int(sqrt($a));\n    if ($b * $b * $b == $a) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
