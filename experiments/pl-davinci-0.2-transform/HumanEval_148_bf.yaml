name: HumanEval_148_bf
language: pl
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return a tuple containing all planets whose orbits\
  \ are \n# located between the orbit of planet1 and the orbit of planet2, sorted\
  \ by \n# the proximity to the sun. \n# The function should return an empty tuple\
  \ if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf(\"\
  Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\"\
  )\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\"\
  , \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n   \
  \     if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\"\
  , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    return\
    \ () unless exists $planets{$planet1} && exists $planets{$planet2};\n    my $start\
    \ = $planets{$planet1};\n    my $end = $planets{$planet2};\n    if ($start > $end)\
    \ {\n        ($start, $end) = ($end, $start);\n    }\n    return @planets[$start+1..$end-1];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    return () unless\
    \ exists $planets{$planet1} && exists $planets{$planet2};\n    my $start = $planets{$planet1};\n\
    \    my $end = $planets{$planet2};\n    my @result = @planets[$start+1..$end-1];\n\
    \    return @result if $start < $end;\n    return reverse @result;\n}", "    my\
    \ @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n   \
    \ my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    my @sorted = sort\
    \ { $planets{$a} <=> $planets{$b} } ($planet1, $planet2);\n    my $start = $planets{$sorted[0]};\n\
    \    my $end = $planets{$sorted[1]};\n    return $start == $end ? () : @planets[$start+1..$end-1];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my $i1 = firstidx { $_ eq $planet1 } @planets;\n    my $i2 = firstidx { $_\
    \ eq $planet2 } @planets;\n    return () if $i1 == -1 || $i2 == -1;\n    my @result\
    \ = @planets[$i1+1..$i2-1];\n    return @result;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n    my $i\
    \ = 0;\n    my $j = 0;\n    for my $planet (@planets) {\n        if ($planet eq\
    \ $planet1) {\n            $i = 1;\n        }\n        if ($planet eq $planet2)\
    \ {\n            $j = 1;\n        }\n        if ($i == 1 && $j == 0) {\n     \
    \       push @result, $planet;\n        }\n        if ($i == 1 && $j == 1) {\n\
    \            last;\n        }\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets\
    \ = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n    if (exists\
    \ $planets{$planet1} && exists $planets{$planet2}) {\n        my $min = $planets{$planet1}\
    \ < $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n        my\
    \ $max = $planets{$planet1} > $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n\
    \        @result = @planets[$min+1..$max-1];\n    }\n    return @result;\n}",
  "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $index1 = 0;\n    my $index2 = 0;\n    for (my $i = 0;\
    \ $i < @planets; $i++) {\n        if ($planets[$i] eq $planet1) {\n          \
    \  $index1 = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n       \
    \     $index2 = $i;\n        }\n    }\n    if ($index1 == 0 || $index2 == 0) {\n\
    \        return @result;\n    }\n    if ($index1 > $index2) {\n        my $temp\
    \ = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n    }\n  \
    \  for (my $i = $index1 + 1; $i < $index2; $i++) {\n        push @result, $planets[$i];\n\
    \    }\n    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_] => $_\
    \ } 0..$#planets;\n    return () unless exists $planets{$planet1} && exists $planets{$planet2};\n\
    \    my @result = @planets[$planets{$planet1}+1..$planets{$planet2}-1];\n    return\
    \ @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n\
    \    my @result;\n    if (exists $planets{$planet1} && exists $planets{$planet2})\
    \ {\n        my $min = $planets{$planet1} < $planets{$planet2} ? $planets{$planet1}\
    \ : $planets{$planet2};\n        my $max = $planets{$planet1} > $planets{$planet2}\
    \ ? $planets{$planet1} : $planets{$planet2};\n        @result = @planets[$min+1..$max-1];\n\
    \    }\n    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my @between;\n    my $p1 = 0;\n    my $p2\
    \ = 0;\n    for my $i (0..$#planets) {\n        if ($planets[$i] eq $planet1)\
    \ {\n            $p1 = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n\
    \            $p2 = $i;\n        }\n    }\n    if ($p1 > $p2) {\n        @between\
    \ = @planets[$p2+1..$p1-1];\n    } else {\n        @between = @planets[$p1+1..$p2-1];\n\
    \    }\n    return @between;\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_] => $_\
    \ } 0..$#planets;\n    my @result;\n    if (exists $planets{$planet1} && exists\
    \ $planets{$planet2}) {\n        my $min = $planets{$planet1} < $planets{$planet2}\
    \ ? $planets{$planet1} : $planets{$planet2};\n        my $max = $planets{$planet1}\
    \ > $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n        @result\
    \ = @planets[$min+1..$max-1];\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    for (my $i = 0; $i < scalar @planets; $i++)\
    \ {\n        if ($planets[$i] eq $planet1) {\n            $j = $i;\n         \
    \   last;\n        }\n    }\n    for (my $i = 0; $i < scalar @planets; $i++) {\n\
    \        if ($planets[$i] eq $planet2) {\n            $j = $i;\n            last;\n\
    \        }\n    }\n    if ($i > $j) {\n        @result = @planets[$j..$i];\n \
    \   } else {\n        @result = @planets[$i..$j];\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    for my $planet (@planets)\
    \ {\n        if ($planet eq $planet1) {\n            $i = 1;\n        }\n    \
    \    if ($planet eq $planet2) {\n            $j = 1;\n        }\n        if ($i\
    \ == 1 && $j == 0) {\n            push @result, $planet;\n        }\n        if\
    \ ($planet eq $planet2) {\n            $j = 1;\n        }\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i;\n    my $j;\n    for($i = 0; $i < @planets; $i++)\
    \ {\n        if($planets[$i] eq $planet1) {\n            for($j = $i + 1; $j <\
    \ @planets; $j++) {\n                if($planets[$j] eq $planet2) {\n        \
    \            return @result;\n                }\n                push @result,\
    \ $planets[$j];\n            }\n        }\n    }\n    return @result;\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l =\
    \ 0;\n    for ($i = 0; $i < @planets; $i++) {\n        if ($planet1 eq $planets[$i])\
    \ {\n            $j = $i;\n        }\n        if ($planet2 eq $planets[$i]) {\n\
    \            $k = $i;\n        }\n    }\n    if ($j > $k) {\n        $l = $j;\n\
    \        $j = $k;\n        $k = $l;\n    }\n    for ($i = $j + 1; $i < $k; $i++)\
    \ {\n        push(@result, $planets[$i]);\n    }\n    return @result;\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    for(my $k = 0; $k < @planets;\
    \ $k++) {\n        if($planet1 eq $planets[$k]) {\n            $i = $k;\n    \
    \    }\n        if($planet2 eq $planets[$k]) {\n            $j = $k;\n       \
    \ }\n    }\n    if($i > $j) {\n        for(my $k = $j; $k < $i; $k++) {\n    \
    \        push @result, $planets[$k];\n        }\n    }\n    else {\n        for(my\
    \ $k = $i; $k < $j; $k++) {\n            push @result, $planets[$k];\n       \
    \ }\n    }\n    return @result;\n}", "    my @planets = qw(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    foreach my $planet (@planets) {\n        if\
    \ ($planet eq $planet1) {\n            $i = 1;\n        }\n        if ($planet\
    \ eq $planet2) {\n            $j = 1;\n        }\n        if ($i == 1 && $j ==\
    \ 0) {\n            push @result, $planet;\n        }\n        if ($i == 1 &&\
    \ $j == 1) {\n            last;\n        }\n    }\n    return @result;\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i1 = 0;\n    my $i2 = 0;\n    for my $i (0..$#planets)\
    \ {\n        if ($planets[$i] eq $planet1) {\n            $i1 = $i;\n        }\n\
    \        if ($planets[$i] eq $planet2) {\n            $i2 = $i;\n        }\n \
    \   }\n    if ($i1 == 0 || $i2 == 0) {\n        return ();\n    }\n    if ($i1\
    \ < $i2) {\n        @result = @planets[$i1+1..$i2-1];\n    } else {\n        @result\
    \ = @planets[$i2+1..$i1-1];\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets\
    \ = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n    if (exists\
    \ $planets{$planet1} && exists $planets{$planet2}) {\n        my $start = $planets{$planet1};\n\
    \        my $end = $planets{$planet2};\n        if ($start > $end) {\n       \
    \     ($start, $end) = ($end, $start);\n        }\n        @result = @planets[$start+1..$end-1];\n\
    \    }\n    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_] => $_\
    \ } 0..$#planets;\n    my @sorted = sort { $planets{$a} <=> $planets{$b} } ($planet1,\
    \ $planet2);\n    my @between = @planets[$planets{$sorted[0]}+1..$planets{$sorted[1]}-1];\n\
    \    return @between;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
