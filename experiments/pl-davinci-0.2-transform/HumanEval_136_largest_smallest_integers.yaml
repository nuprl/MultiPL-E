name: HumanEval_136_largest_smallest_integers
language: pl
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n\
  # [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n\
  \        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6,\
  \ -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = undef;\n    my $min = undef;\n    foreach my $i (@$lst)\
    \ {\n        if ($i < 0) {\n            if (!defined($max) || $i > $max) {\n \
    \               $max = $i;\n            }\n        } elsif ($i > 0) {\n      \
    \      if (!defined($min) || $i < $min) {\n                $min = $i;\n      \
    \      }\n        }\n    }\n    return ($max, $min);\n}", "    my $max_neg = undef;\n\
    \    my $min_pos = undef;\n    for my $i (@$lst) {\n        if ($i < 0) {\n  \
    \          if (!defined($max_neg) || $i > $max_neg) {\n                $max_neg\
    \ = $i;\n            }\n        }\n        elsif ($i > 0) {\n            if (!defined($min_pos)\
    \ || $i < $min_pos) {\n                $min_pos = $i;\n            }\n       \
    \ }\n    }\n    return [$max_neg, $min_pos];\n}", "    my $max = undef;\n    my\
    \ $min = undef;\n    foreach my $i (@$lst) {\n        if ($i > 0) {\n        \
    \    if (!defined($min) || $i < $min) {\n                $min = $i;\n        \
    \    }\n        } elsif ($i < 0) {\n            if (!defined($max) || $i > $max)\
    \ {\n                $max = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n    for my\
    \ $i (@$lst) {\n        if ($i < 0) {\n            if (!defined($max_neg) || $i\
    \ > $max_neg) {\n                $max_neg = $i;\n            }\n        } elsif\
    \ ($i > 0) {\n            if (!defined($min_pos) || $i < $min_pos) {\n       \
    \         $min_pos = $i;\n            }\n        }\n    }\n    return [$max_neg,\
    \ $min_pos];\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n    for\
    \ my $i (@$lst) {\n        if ($i < 0) {\n            if (!defined($max_neg) ||\
    \ $i > $max_neg) {\n                $max_neg = $i;\n            }\n        } elsif\
    \ ($i > 0) {\n            if (!defined($min_pos) || $i < $min_pos) {\n       \
    \         $min_pos = $i;\n            }\n        }\n    }\n    return [$max_neg,\
    \ $min_pos];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my\
    \ $i (@$lst) {\n        if ($i < 0) {\n            if (not defined $max or $i\
    \ > $max) {\n                $max = $i;\n            }\n        }\n        elsif\
    \ ($i > 0) {\n            if (not defined $min or $i < $min) {\n             \
    \   $min = $i;\n            }\n        }\n    }\n    return [$max, $min];\n}",
  "    my $max = undef;\n    my $min = undef;\n    foreach my $elem (@$lst) {\n  \
    \      if ($elem < 0) {\n            if (!defined($max) || $elem > $max) {\n \
    \               $max = $elem;\n            }\n        } elsif ($elem > 0) {\n\
    \            if (!defined($min) || $elem < $min) {\n                $min = $elem;\n\
    \            }\n        }\n    }\n    return [$max, $min];\n}", "    my $max =\
    \ undef;\n    my $min = undef;\n    foreach my $elem (@$lst) {\n        if ($elem\
    \ < 0) {\n            if (!defined($max) || $elem > $max) {\n                $max\
    \ = $elem;\n            }\n        } elsif ($elem > 0) {\n            if (!defined($min)\
    \ || $elem < $min) {\n                $min = $elem;\n            }\n        }\n\
    \    }\n    return ($max, $min);\n}", "    my $max = undef;\n    my $min = undef;\n\
    \    foreach my $i (@$lst) {\n        if ($i < 0) {\n            if (!defined($max)\
    \ || $i > $max) {\n                $max = $i;\n            }\n        }\n    \
    \    elsif ($i > 0) {\n            if (!defined($min) || $i < $min) {\n      \
    \          $min = $i;\n            }\n        }\n    }\n    return [$max, $min];\n\
    }", "    my $max_neg = undef;\n    my $min_pos = undef;\n    for my $i (@$lst)\
    \ {\n        if ($i < 0) {\n            if (not defined $max_neg or $i > $max_neg)\
    \ {\n                $max_neg = $i;\n            }\n        } elsif ($i > 0) {\n\
    \            if (not defined $min_pos or $i < $min_pos) {\n                $min_pos\
    \ = $i;\n            }\n        }\n    }\n    return ($max_neg, $min_pos);\n}",
  "    my $max = undef;\n    my $min = undef;\n    for my $elem (@$lst) {\n      \
    \  if ($elem < 0) {\n            if (!defined($max) || $elem > $max) {\n     \
    \           $max = $elem;\n            }\n        }\n        elsif ($elem > 0)\
    \ {\n            if (!defined($min) || $elem < $min) {\n                $min =\
    \ $elem;\n            }\n        }\n    }\n    return [$max, $min];\n}", "   \
    \ my $neg = undef;\n    my $pos = undef;\n    for my $e (@$lst) {\n        if\
    \ ($e < 0) {\n            if (!defined($neg) || $e > $neg) {\n               \
    \ $neg = $e;\n            }\n        } elsif ($e > 0) {\n            if (!defined($pos)\
    \ || $e < $pos) {\n                $pos = $e;\n            }\n        }\n    }\n\
    \    return [$neg, $pos];\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n\
    \    foreach my $num (@$lst) {\n        if ($num < 0) {\n            if (!defined($max_neg)\
    \ || $num > $max_neg) {\n                $max_neg = $num;\n            }\n   \
    \     }\n        elsif ($num > 0) {\n            if (!defined($min_pos) || $num\
    \ < $min_pos) {\n                $min_pos = $num;\n            }\n        }\n\
    \    }\n    return [$max_neg, $min_pos];\n}", "    my $max = undef;\n    my $min\
    \ = undef;\n    foreach my $item (@$lst) {\n        if ($item < 0) {\n       \
    \     if (not defined $max or $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n        elsif ($item > 0) {\n            if (not defined\
    \ $min or $item < $min) {\n                $min = $item;\n            }\n    \
    \    }\n    }\n    return [$max, $min];\n}", "    my $a = undef;\n    my $b =\
    \ undef;\n    my $i = 0;\n    my $len = scalar(@$lst);\n    while ($i < $len)\
    \ {\n        my $e = $lst->[$i];\n        if ($e < 0) {\n            if (!defined($a)\
    \ || $e > $a) {\n                $a = $e;\n            }\n        }\n        elsif\
    \ ($e > 0) {\n            if (!defined($b) || $e < $b) {\n                $b =\
    \ $e;\n            }\n        }\n        $i++;\n    }\n    return [$a, $b];\n}",
  "    my($a, $b) = (undef, undef);\n    for my $i (@$lst) {\n        if ($i < 0)\
    \ {\n            if (!defined($a) || $i > $a) {\n                $a = $i;\n  \
    \          }\n        } elsif ($i > 0) {\n            if (!defined($b) || $i <\
    \ $b) {\n                $b = $i;\n            }\n        }\n    }\n    return\
    \ ($a, $b);\n}", "    my $a = undef;\n    my $b = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            if (!defined($a) || $x > $a) {\n     \
    \           $a = $x;\n            }\n        }\n        elsif ($x > 0) {\n   \
    \         if (!defined($b) || $x < $b) {\n                $b = $x;\n         \
    \   }\n        }\n    }\n    return ($a, $b);\n}", "    my $max = undef;\n   \
    \ my $min = undef;\n    for my $i (@$lst) {\n        if ($i < 0) {\n         \
    \   if (!defined($max) || $i > $max) {\n                $max = $i;\n         \
    \   }\n        } elsif ($i > 0) {\n            if (!defined($min) || $i < $min)\
    \ {\n                $min = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my($a, $b);\n    for my $e (@$lst) {\n        if ($e < 0) {\n\
    \            $a = $e if !defined($a) || $e > $a;\n        }\n        elsif ($e\
    \ > 0) {\n            $b = $e if !defined($b) || $e < $b;\n        }\n    }\n\
    \    return [$a, $b];\n}", "    my($a, $b);\n    foreach my $x (@$lst) {\n   \
    \     if ($x < 0) {\n            $a = $x if !defined($a) || $x > $a;\n       \
    \ }\n        elsif ($x > 0) {\n            $b = $x if !defined($b) || $x < $b;\n\
    \        }\n    }\n    return ($a, $b);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
