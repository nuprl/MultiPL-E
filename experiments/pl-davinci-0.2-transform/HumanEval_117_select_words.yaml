name: HumanEval_117_select_words
language: pl
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little\
  \ lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\"\
  , 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"\
  Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
  \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\"\
  , 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @words = split /\\s+/, $s;\n    my @result;\n    for my $word\
    \ (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }", "    my @words = split /\\s+/, $s;\n    my @result;\n    for my $word (@words)\
    \ {\n        my $count = 0;\n        for my $char (split //, $word) {\n      \
    \      $count++ if $char =~ /[^aeiou]/i;\n        }\n        push @result, $word\
    \ if $count == $n;\n    }\n    return @result;\n}", "    my @words = split(/\\\
    s+/, $s);\n    my @result;\n    foreach my $word (@words) {\n        my $count\
    \ = 0;\n        foreach my $char (split(//, $word)) {\n            if ($char =~\
    \ /[^aeiou]/i) {\n                $count++;\n            }\n        }\n      \
    \  if ($count == $n) {\n            push(@result, $word);\n        }\n    }\n\
    \    return @result;\n}", "    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}", " \
    \   my @words = split(/\\s+/, $s);\n    my @result;\n    foreach my $word (@words)\
    \ {\n        my $count = 0;\n        foreach my $char (split(//, $word)) {\n \
    \           if ($char !~ /[aeiou]/i) {\n                $count++;\n          \
    \  }\n        }\n        if ($count == $n) {\n            push(@result, $word);\n\
    \        }\n    }\n    return @result;\n}", "    my @words = split(/\\s+/, $s);\n\
    \    my @result;\n    foreach my $word (@words) {\n        my $count = 0;\n  \
    \      foreach my $char (split(//, $word)) {\n            if ($char !~ /[aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }", "    my @words = split(/ /, $s);\n    my @result;\n    foreach my $word (@words)\
    \ {\n        my $count = 0;\n        foreach my $char (split(//, $word)) {\n \
    \           if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}", "    my @words = split(/\\\
    s+/, $s);\n    my @result;\n    foreach my $word (@words) {\n        if (count_consonants($word)\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }", "    my @words = split(/\\s+/, $s);\n    my @result;\n    for my $word (@words)\
    \ {\n        my $count = 0;\n        for my $char (split(//, $word)) {\n     \
    \       $count++ if $char !~ /[aeiou]/i;\n        }\n        push @result, $word\
    \ if $count == $n;\n    }\n    return @result;\n}", "    my @words = split(/ /,\
    \ $s);\n    my @result;\n    foreach my $word (@words) {\n        my $count =\
    \ 0;\n        foreach my $char (split(//, $word)) {\n            if ($char =~\
    \ /[^aeiou]/i) {\n                $count++;\n            }\n        }\n      \
    \  if ($count == $n) {\n            push(@result, $word);\n        }\n    }\n\
    \    return @result;\n}", "    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $c (split(//,\
    \ $word)) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n        push\
    \ @result, $word if $count == $n;\n    }\n    return @result;\n}", "    my @words\
    \ = split /\\s+/, $s;\n    my @result;\n    foreach my $word (@words) {\n    \
    \    my $count = 0;\n        foreach my $char (split //, $word) {\n          \
    \  $count++ if $char =~ /[^aeiou]/i;\n        }\n        push @result, $word if\
    \ $count == $n;\n    }\n    return @result;\n}", "    my @result;\n    my @words\
    \ = split /\\s+/, $s;\n    foreach my $word (@words) {\n        my $count = 0;\n\
    \        foreach my $char (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }", "    my @words = split /\\s+/, $s;\n    my @result;\n    for my $word (@words)\
    \ {\n        my $count = 0;\n        for my $c (split //, $word) {\n         \
    \   $count++ if $c !~ /[aeiou]/i;\n        }\n        push @result, $word if $count\
    \ == $n;\n    }\n    return @result;\n}", "    my @words = split /\\s+/, $s;\n\
    \    my @result;\n    for my $word (@words) {\n        my $count = 0;\n      \
    \  for my $c (split //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }", "    my @words = split /\\s+/, $s;\n    my @result;\n    foreach my $word\
    \ (@words) {\n        my $count = 0;\n        foreach my $char (split //, $word)\
    \ {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n        push @result,\
    \ $word if $count == $n;\n    }\n    return @result;\n}", "    my @words = split\
    \ /\\s+/, $s;\n    my @result;\n    foreach my $word (@words) {\n        my $consonants\
    \ = 0;\n        foreach my $letter (split //, $word) {\n            if ($letter\
    \ =~ /[^aeiou]/i) {\n                $consonants++;\n            }\n        }\n\
    \        if ($consonants == $n) {\n            push @result, $word;\n        }\n\
    \    }\n    return @result;\n}", "    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = 0;\n        for my $char\
    \ (split //, $word) {\n            $consonants++ if $char !~ /[aeiou]/i;\n   \
    \     }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}", "    my @words = split(/\\s+/, $s);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $char (split(//,\
    \ $word)) {\n            if ($char =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}", "    my @words = split /\\\
    s+/, $s;\n    my @result;\n    for my $word (@words) {\n        my $count = 0;\n\
    \        for my $char (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
