name: HumanEval_141_file_name_check
language: pl
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check(\"example.txt\"\
  )\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check\
  \ {\n    my($file_name) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n\
  \        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"\
  ),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  MY16FILE3.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  _Y.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"/this_is_valid.dll\"\
  ),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"\
  ),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #this2_i4s_5valid.ten\"),\"No\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"\
  No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  this_is_12valid.6exe4.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I563_No.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  no_one#knows.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I563_Yes3.txtt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  final132\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  .txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(\"s.\"),\"No\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = \"No\";\n    my $count = 0;\n    my $dot_count = 0;\n\
    \    my $dot_position = 0;\n    my $substring_before_dot = \"\";\n    my $substring_after_dot\
    \ = \"\";\n    my $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter = 0;\n    my $substring_before_dot_start_with_letter_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count = 0;\n    my\
    \ $substring_before_dot_start_with_letter_valid_count_valid = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter", "    my $result = \"\
    No\";\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n   \
    \     $result = \"Yes\";\n    }\n    return $result;\n}", "    my $result = \"\
    No\";\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $count =\
    \ $file_name =~ s/\\d//g;\n        if ($count <= 3) {\n            $result = \"\
    Yes\";\n        }\n    }\n    return $result;\n}", "    my $result = \"No\";\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = \"Yes\";\n    }\n    return $result;\n}", "    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}", "    my $result = \"No\";\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = \"Yes\";\n    }\n    return $result;\n}",
  "    my $result = \"No\";\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index\
    \ = 0;\n    my $substring_before_dot = \"\";\n    my $substring_after_dot = \"\
    \";\n    my $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid\
    \ = 0;\n    my $substring_before_dot_first_char = \"\";\n    my $substring_before_dot_first_char_valid\
    \ = 0;\n    my $substring_before_dot_length = 0;\n    my $substring_before_dot_length_valid\
    \ = 0;\n    my $substring_after_dot_length = 0;\n    my $substring_after_dot_length_valid\
    \ = 0;\n    my $substring_after_dot_valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    my $substring_after_dot_valid_extensions_count = 0;\n    my $substring_after_dot_valid_extensions_count_valid\
    \ = 0;\n    my $substring_after_dot_valid_extensions_valid = 0;\n    my $substring_after_dot_valid_extensions_valid_count\
    \ = 0;\n    my $substring_after_dot_valid_extensions_valid_count_valid = 0;\n\
    \    my $substring_after_dot_valid_extensions_valid_valid = 0;\n    my $substring_after_dot_valid_extensions_valid_valid_count\
    \ = 0;\n    my $substring_after_dot_valid_extensions_valid_valid_count_valid =\
    \ 0;\n    my $substring_after_dot_valid_extensions_valid_valid_valid = 0;\n  \
    \  my $substring_after_dot_valid_extensions_valid_valid_valid_count = 0;\n   \
    \ my $substring_after_dot_valid_extensions_valid_valid_valid_count_valid = 0;\n\
    \    my $substring_after_dot_valid_extensions_valid_valid_valid_valid = 0;\n \
    \   my $substring_after_", "    my $result = \"No\";\n    my $count = 0;\n   \
    \ my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot = \"\
    \";\n    my $substring_after_dot = \"\";\n    my $substring_after_dot_valid =\
    \ 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_letter_valid\
    \ = 0;\n    my $substring_before_dot_number_valid = 0;\n    my $substring_before_dot_length_valid\
    \ = 0;\n    my $substring_after_dot_length_valid = 0;\n    my $substring_after_dot_valid_list\
    \ = [\"txt\", \"exe\", \"dll\"];\n    my $substring_before_dot_valid_list = [\"\
    a\"..\"z\", \"A\"..\"Z\"];\n    my $substring_before_dot_number_valid_list = [\"\
    0\"..\"9\"];\n    my $substring_before_dot_length = 0;\n    my $substring_after_dot_length\
    \ = 0;\n    my $substring_before_dot_number_count = 0;\n    my $substring_before_dot_letter_count\
    \ = 0;\n    my $substring_before_dot_number_count_valid = 0;\n    my $substring_before_dot_letter_count_valid\
    \ = 0;\n    my $substring_before_dot_number_count_valid_list = [0..3];\n    my\
    \ $substring_before_dot_letter_count_valid_list = [1..100];\n    my $substring_after_dot_length_valid_list\
    \ = [3..3];\n    my $substring_before_dot_length_valid_list = [1..100];\n    my\
    \ $substring_before_dot_number_count_valid_list_length = @$substring_before_dot_number_count_valid_list;\n\
    \    my $substring_before_dot_letter_count_valid_list_length = @$substring_before_dot_letter_count_valid_list;\n",
  "    # Write your code here\n}", "    my $valid = \"Yes\";\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_after_dot =\
    \ \"\";\n    my $substring_before_dot = \"\";\n    my $substring_after_dot_valid\
    \ = 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_first_char_valid\
    \ = 0;\n    my $substring_before_dot_first_char = \"\";\n    my $substring_before_dot_first_char_ascii\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_valid = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_upper_bound = 0;\n    my\
    \ $substring_before_dot_first_char_ascii_lower_bound_valid = 0;\n    my $substring_before_dot_first_char_ascii_upper_bound_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound_valid_and_substring_before_dot_first_char_ascii_upper_bound_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound_valid_or_substring_before_dot_first_char_ascii_upper_bound_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound_valid_xor_substring_before_dot_first_char_ascii_upper_bound_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound_valid_and_substring_before_dot_first_char_ascii_upper_bound_valid_and_substring_before_dot_first_char_ascii_valid\
    \ = 0;\n    my $substring_before_dot_first_char_", "    my $result = \"Yes\";\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = -1;\n    my $extension\
    \ = \"\";\n    my $substring = \"\";\n    my $substring_count = 0;\n    my $substring_index\
    \ = -1;\n    my $substring_valid = 0;\n    my $extension_valid = 0;\n    my $extension_list\
    \ = [\"txt\", \"exe\", \"dll\"];\n    my $extension_list_length = @$extension_list;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero\
    \ = 0;\n    my $one = 0;\n    my $two =", "    my $result = \"No\";\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = \"\";\n    my $substring_after_dot = \"\";\n    my $substring_after_dot_length\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my $three = 0;\n \
    \   my $four = 0;\n    my $five = 0;\n    my $six = 0;\n    my $seven = 0;\n \
    \   my $eight = 0;\n    my $nine = 0;\n   ", "    my $result = \"No\";\n    if\
    \ ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        my $sub_string\
    \ = $file_name;\n        $sub_string =~ s/\\.(txt|exe|dll)$//;\n        if ($sub_string\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*$/) {\n            $result = \"Yes\";\n        }\n\
    \    }\n    return $result;\n}", "    my $result = \"No\";\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = \"Yes\";\n\
    \    }\n    return $result;\n}", "    my $result = \"No\";\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = \"Yes\";\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $file_name_regex\
    \ = qr/^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n    if ($file_name =~ $file_name_regex)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = \"No\";\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $substring_after_dot = \"\";\n    my $substring_before_dot = \"\";\n \
    \   my $substring_before_dot_first_char = \"\";\n    my $substring_before_dot_first_char_ascii\
    \ = 0;\n    my $substring_before_dot_first_char_is_valid = 0;\n    my $substring_before_dot_is_valid\
    \ = 0;\n    my $substring_after_dot_is_valid = 0;\n    my $i = 0;\n    my $length\
    \ = length($file_name);\n    for($i = 0; $i < $length; $i++) {\n        my $char\
    \ = substr($file_name, $i, 1);\n        if($char eq \".\") {\n            $dot_count++;\n\
    \            $dot_index = $i;\n        }\n        if($char =~ /[0-9]/) {\n   \
    \         $count++;\n        }\n    }\n    if($count <= 3 && $dot_count == 1)\
    \ {\n        $substring_after_dot = substr($file_name, $dot_index + 1);\n    \
    \    $substring_before_dot = substr($file_name, 0, $dot_index);\n        $substring_before_dot_first_char\
    \ = substr($substring_before_dot, 0, 1);\n        $substring_before_dot_first_char_ascii\
    \ = ord($substring_before_dot_first_char);\n        if($substring_before_dot_first_char_ascii\
    \ >= 65 && $substring_before_dot_first_char_ascii <= 90) {\n            $substring_before_dot_first_char_is_valid\
    \ = 1;\n        }\n        if($substring_before_dot_first_char_ascii >= 97 &&\
    \ $substring_before_dot_first_char_ascii <= 122) {\n            $substring_before_dot_first_char_is_valid\
    \ = 1;\n        }", "    if($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/ && $file_name\
    \ !~ /\\d{4}/){\n        return \"Yes\";\n    }\n    else{\n        return \"\
    No\";\n    }\n}", "    my $result = \"No\";\n    if ($file_name =~ /^[a-zA-Z]+\\\
    d{0,3}\\.txt$|^[a-zA-Z]+\\d{0,3}\\.exe$|^[a-zA-Z]+\\d{0,3}\\.dll$/) {\n      \
    \  $result = \"Yes\";\n    }\n    return $result;\n}", "    my $result = \"No\"\
    ;\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n       \
    \ $result = \"Yes\";\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
