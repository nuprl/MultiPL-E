name: HumanEval_68_pluck
language: pl
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n\
  # [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  # Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n\
  # [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so\
  \ we will choose the first zero, which has the smallest index.\n# Constraints:\n\
  # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n\
  \        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7,\
  \ 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $min = undef;\n    my $min_idx = undef;\n    for my $i (0..$#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined($min) || $arr->[$i]\
    \ < $min) {\n                $min = $arr->[$i];\n                $min_idx = $i;\n\
    \            }\n        }\n    }\n    return defined($min) ? [$min, $min_idx]\
    \ : [];\n}", "    my $min = undef;\n    my $min_idx = undef;\n    for my $i (0..$#$arr)\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n           \
    \ if (!defined($min) || $val < $min) {\n                $min = $val;\n       \
    \         $min_idx = $i;\n            }\n        }\n    }\n    if (defined($min))\
    \ {\n        return [$min, $min_idx];\n    } else {\n        return [];\n    }\n\
    }", "    my $min = -1;\n    my $min_idx = -1;\n    for my $i (0..$#$arr) {\n \
    \       if ($arr->[$i] % 2 == 0) {\n            if ($min == -1 || $arr->[$i] <\
    \ $min) {\n                $min = $arr->[$i];\n                $min_idx = $i;\n\
    \            }\n        }\n    }\n    return $min == -1 ? [] : [$min, $min_idx];\n\
    }", "    my $min = -1;\n    my $min_index = -1;\n    for my $i (0 .. $#$arr) {\n\
    \        if ($arr->[$i] % 2 == 0) {\n            if ($min == -1 || $arr->[$i]\
    \ < $min) {\n                $min = $arr->[$i];\n                $min_index =\
    \ $i;\n            }\n        }\n    }\n    if ($min == -1) {\n        return\
    \ [];\n    } else {\n        return [$min, $min_index];\n    }\n}", "    my $min\
    \ = undef;\n    my $min_idx = undef;\n    for (my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined($min)\
    \ || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n              \
    \  $min_idx = $i;\n            }\n        }\n    }\n    if (defined($min)) {\n\
    \        return [$min, $min_idx];\n    } else {\n        return [];\n    }\n}",
  "    my $min_even = undef;\n    my $min_even_idx = undef;\n    for my $i (0 .. $#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined($min_even) ||\
    \ $arr->[$i] < $min_even) {\n                $min_even = $arr->[$i];\n       \
    \         $min_even_idx = $i;\n            }\n        }\n    }\n    if (defined($min_even))\
    \ {\n        return [$min_even, $min_even_idx];\n    } else {\n        return\
    \ [];\n    }\n}", "    my $min_even = undef;\n    my $min_even_idx = undef;\n\
    \    for my $i (0 .. $#$arr) {\n        my $v = $arr->[$i];\n        if ($v %\
    \ 2 == 0) {\n            if (!defined($min_even) || $v < $min_even) {\n      \
    \          $min_even = $v;\n                $min_even_idx = $i;\n            }\n\
    \        }\n    }\n    if (defined($min_even)) {\n        return [$min_even, $min_even_idx];\n\
    \    } else {\n        return [];\n    }\n}", "    my $min = -1;\n    my $min_idx\
    \ = -1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n   \
    \         if ($min == -1 || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                $min_idx = $i;\n            }\n        }\n    }\n    return $min\
    \ == -1 ? [] : [$min, $min_idx];\n}", "    my $min = undef;\n    my $min_idx =\
    \ undef;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n  \
    \          if (!defined($min) || $arr->[$i] < $min) {\n                $min =\
    \ $arr->[$i];\n                $min_idx = $i;\n            }\n        }\n    }\n\
    \    if (defined($min)) {\n        return [$min, $min_idx];\n    } else {\n  \
    \      return [];\n    }\n}", "    my $min = -1;\n    my $min_idx = -1;\n    for\
    \ my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n            if ($min\
    \ == -1 || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n        \
    \        $min_idx = $i;\n            }\n        }\n    }\n    return $min == -1\
    \ ? [] : [$min, $min_idx];\n}", "    my $min = undef;\n    my $min_idx = undef;\n\
    \    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n           \
    \ if (!defined($min) || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                $min_idx = $i;\n            }\n        }\n    }\n    if (defined($min))\
    \ {\n        return [$min, $min_idx];\n    } else {\n        return [];\n    }\n\
    }", "    my $min = undef;\n    my $min_index = undef;\n    for my $i (0 .. $#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined($min) || $arr->[$i]\
    \ < $min) {\n                $min = $arr->[$i];\n                $min_index =\
    \ $i;\n            }\n        }\n    }\n    if (defined($min)) {\n        return\
    \ [$min, $min_index];\n    } else {\n        return [];\n    }\n}", "    my $min\
    \ = undef;\n    my $min_idx = undef;\n    for my $i (0..$#$arr) {\n        if\
    \ ($arr->[$i] % 2 == 0) {\n            if (!defined($min) || $arr->[$i] < $min)\
    \ {\n                $min = $arr->[$i];\n                $min_idx = $i;\n    \
    \        }\n        }\n    }\n    return defined($min) ? [$min, $min_idx] : [];\n\
    }", "    my $min = -1;\n    my $min_idx = -1;\n    for my $i (0..$#$arr) {\n \
    \       if ($arr->[$i] % 2 == 0) {\n            if ($min == -1 || $arr->[$i] <\
    \ $min) {\n                $min = $arr->[$i];\n                $min_idx = $i;\n\
    \            }\n        }\n    }\n    return $min == -1 ? [] : [$min, $min_idx];\n\
    }", "    my $min = undef;\n    my $min_idx = undef;\n    for my $i (0..$#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined($min) || $arr->[$i]\
    \ < $min) {\n                $min = $arr->[$i];\n                $min_idx = $i;\n\
    \            }\n        }\n    }\n    if (defined($min)) {\n        return [$min,\
    \ $min_idx];\n    } else {\n        return [];\n    }\n}", "    my $min = -1;\n\
    \    my $min_idx = -1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] %\
    \ 2 == 0) {\n            if ($min == -1 || $arr->[$i] < $min) {\n            \
    \    $min = $arr->[$i];\n                $min_idx = $i;\n            }\n     \
    \   }\n    }\n    return $min == -1 ? [] : [$min, $min_idx];\n}", "    my $min\
    \ = -1;\n    my $index = -1;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($min == -1 || $arr->[$i] < $min) {\n          \
    \      $min = $arr->[$i];\n                $index = $i;\n            }\n     \
    \   }\n    }\n    return $min == -1 ? [] : [$min, $index];\n}", "    my $min_even\
    \ = undef;\n    my $min_even_idx = undef;\n    for my $i (0 .. $#$arr) {\n   \
    \     if ($arr->[$i] % 2 == 0) {\n            if (!defined($min_even) || $arr->[$i]\
    \ < $min_even) {\n                $min_even = $arr->[$i];\n                $min_even_idx\
    \ = $i;\n            }\n        }\n    }\n    if (defined($min_even)) {\n    \
    \    return [$min_even, $min_even_idx];\n    } else {\n        return [];\n  \
    \  }\n}", "    my $min = -1;\n    my $min_index = -1;\n    for my $i (0 .. $#$arr)\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n           \
    \ if ($min == -1 || $val < $min) {\n                $min = $val;\n           \
    \     $min_index = $i;\n            }\n        }\n    }\n    return $min == -1\
    \ ? [] : [$min, $min_index];\n}", "    my $min = undef;\n    my $min_idx = undef;\n\
    \    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n           \
    \ if (!defined($min) || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                $min_idx = $i;\n            }\n        }\n    }\n    if (defined($min))\
    \ {\n        return [$min, $min_idx];\n    } else {\n        return [];\n    }\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
