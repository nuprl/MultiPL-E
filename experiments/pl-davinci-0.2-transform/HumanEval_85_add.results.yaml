language: pl
name: HumanEval_85_add
results:
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 and $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i\
    \ % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i\
    \ % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        next\
    \ if $i % 2 == 0;\n        next if $lst->[$i] % 2 == 0;\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    my $i = 0;\n    foreach my $elem (@$lst)\
    \ {\n        if ($i % 2 == 1 && $elem % 2 == 0) {\n            $sum += $elem;\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 and $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i+=2)\
    \ {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i\
    \ % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my @lst = @$lst;\n    my $sum = 0;\n    for (my $i = 0;\
    \ $i < @lst; $i++) {\n        if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n      \
    \      $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i\
    \ % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i\
    \ % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for my $i (0..$#$lst) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n   \
    \ my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821409
