name: HumanEval_30_get_positive
language: pl
prompt: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4,\
  \ 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  # [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return grep { $_ > 0 } @$l;\n}", "    my @ret = grep { $_ > 0 }\
    \ @$l;\n    return \\@ret;\n}", "    my @ret = ();\n    foreach my $i (@$l) {\n\
    \        if ($i > 0) {\n            push @ret, $i;\n        }\n    }\n    return\
    \ @ret;\n}", "    my @ret;\n    for my $i (@$l) {\n        push @ret, $i if $i\
    \ > 0;\n    }\n    return @ret;\n}", "    my @ret = ();\n    foreach my $e (@$l)\
    \ {\n        if ($e > 0) {\n            push @ret, $e;\n        }\n    }\n   \
    \ return @ret;\n}", "    my @res = ();\n    for my $i (@$l) {\n        if ($i\
    \ > 0) {\n            push @res, $i;\n        }\n    }\n    return @res;\n}",
  "    my @result = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n          \
    \  push @result, $i;\n        }\n    }\n    return @result;\n}", "    my @result\
    \ = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n            push @result,\
    \ $i;\n        }\n    }\n    return @result;\n}", "    my @ret = ();\n    foreach\
    \ my $i (@$l) {\n        if ($i > 0) {\n            push @ret, $i;\n        }\n\
    \    }\n    return @ret;\n}", "    my @ret = ();\n    foreach my $e (@$l) {\n\
    \        if ($e > 0) {\n            push @ret, $e;\n        }\n    }\n    return\
    \ @ret;\n}", "    my @l = @$l;\n    my @pos = ();\n    for my $i (@l) {\n    \
    \    if ($i > 0) {\n            push @pos, $i;\n        }\n    }\n    return @pos;\n\
    }", "    my @positive = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n  \
    \          push @positive, $i;\n        }\n    }\n    return @positive;\n}", " \
    \   my @pos = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n            push\
    \ @pos, $i;\n        }\n    }\n    return @pos;\n}", "    my @result = ();\n \
    \   foreach my $i (@$l) {\n        if ($i > 0) {\n            push @result, $i;\n\
    \        }\n    }\n    return @result;\n}", "    my @res = ();\n    for my $e\
    \ (@$l) {\n        if ($e > 0) {\n            push @res, $e;\n        }\n    }\n\
    \    return @res;\n}", "    return grep { $_ > 0 } @$l;\n}", "    my @pos = ();\n\
    \    foreach my $i (@$l) {\n        if ($i > 0) {\n            push @pos, $i;\n\
    \        }\n    }\n    return @pos;\n}", "    return [ grep { $_ > 0 } @$l ];\n\
    }", "    my @positive = grep { $_ > 0 } @$l;\n    return \\@positive;\n}", " \
    \   my @positives = grep { $_ > 0 } @$l;\n    return \\@positives;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
