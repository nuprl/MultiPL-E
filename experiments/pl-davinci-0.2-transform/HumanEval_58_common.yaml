name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two lists.\n# >>> common([1, 4,\
  \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e} =\
    \ 1;\n    }\n    my @r = ();\n    foreach my $e (@$l2) {\n        if (exists $h{$e})\
    \ {\n            push @r, $e;\n        }\n    }\n    return sort { $a <=> $b }\
    \ @r;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e} = 1;\n\
    \    }\n    my @l = ();\n    foreach my $e (@$l2) {\n        if (exists $h{$e})\
    \ {\n            push @l, $e;\n        }\n    }\n    return sort { $a <=> $b }\
    \ @l;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ { $a <=> $b } keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %seen;\n  \
    \  @seen{@$l1} = ();\n    return grep { exists $seen{$_} } @$l2;\n}", "    my\
    \ @l1 = sort { $a <=> $b } @$l1;\n    my @l2 = sort { $a <=> $b } @$l2;\n    my\
    \ @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            push @common, $l1[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1[$i] < $l2[$j]) {\n    \
    \        $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my %seen;\n    @seen{@$l1} = ();\n    return grep { exists\
    \ $seen{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return [sort {$a <=> $b} keys %h];\n}", "    my %h = map { $_ => 1 } @$l1;\n\
    \    return sort grep { $h{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n\
    \    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} =\
    \ ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my @common = ();\n\
    \    my %seen = ();\n    foreach my $e (@$l1) {\n        $seen{$e} = 1;\n    }\n\
    \    foreach my $e (@$l2) {\n        if ($seen{$e}) {\n            push @common,\
    \ $e;\n        }\n    }\n    return sort { $a <=> $b } @common;\n}", "    my %h;\n\
    \    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort { $a <=> $b } keys %h;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %seen;\n    @seen{@$l1} = ();\n    my @common = grep {\
    \ exists $seen{$_} } @$l2;\n    return [ sort { $a <=> $b } @common ];\n}", " \
    \   my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n\
    }", "    my %seen;\n    @seen{@$l1} = ();\n    return sort grep { exists $seen{$_}\
    \ } @$l2;\n}", "    my %seen;\n    @seen{@$l1} = ();\n    return sort keys %seen\
    \ if @$l2 == 1;\n    return grep { exists $seen{$_} } @$l2;\n}", "    my %seen;\n\
    \    my @common = grep { !$seen{$_}++ } @$l1, @$l2;\n    return sort { $a <=>\
    \ $b } @common;\n}", "    my %h = map { $_ => 1 } @$l1;\n    return sort { $a\
    \ <=> $b } grep { $h{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my %seen;\n    @seen{@$l1}\
    \ = ();\n    return sort grep { exists $seen{$_} } @$l2;\n}", "    my %h;\n  \
    \  for (@$l1) {\n        $h{$_} = 1;\n    }\n    my @common;\n    for (@$l2) {\n\
    \        push @common, $_ if $h{$_};\n    }\n    return sort @common;\n}", " \
    \   my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %seen;\n    @seen{@$l1} = ();\n    return sort grep {\
    \ exists $seen{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    my @k = keys %h;\n    return sort { $a <=> $b } @k;\n}", "    my\
    \ %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", " \
    \   my %h = map { $_ => 1 } @$l1;\n    my @c = grep { $h{$_} } @$l2;\n    return\
    \ sort { $a <=> $b } @c;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h = ();\n    for (@$l1) {\n    \
    \    $h{$_} = 1;\n    }\n    my @c = ();\n    for (@$l2) {\n        push @c, $_\
    \ if $h{$_};\n    }\n    return sort { $a <=> $b } @c;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %seen;\n  \
    \  @seen{@$l1} = ();\n    return grep { exists $seen{$_} } @$l2;\n}", "    my\
    \ %seen;\n    my @common = grep { !$seen{$_}++ } @$l1, @$l2;\n    return sort\
    \ { $a <=> $b } @common;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n \
    \       $h{$e} = 1;\n    }\n    my @r = ();\n    foreach my $e (@$l2) {\n    \
    \    if (exists $h{$e}) {\n            push @r, $e;\n        }\n    }\n    return\
    \ [sort {$a <=> $b} @r];\n}", "    my %seen;\n    my @common = grep { !$seen{$_}++\
    \ } @$l1, @$l2;\n    return sort { $a <=> $b } @common;\n}", "    my %h;\n   \
    \ @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n\
    \    for (@$l1) {\n        $h{$_} = 1;\n    }\n    my @l;\n    for (@$l2) {\n\
    \        push @l, $_ if $h{$_};\n    }\n    return sort { $a <=> $b } @l;\n}",
  "    my %seen;\n    grep { !$seen{$_}++ } @$l1, @$l2;\n}", "    my %h = map { $_\
    \ => 1 } @$l1;\n    return sort { $a <=> $b } grep { $h{$_} } @$l2;\n}", "   \
    \ my %seen;\n    @seen{@$l1} = ();\n    return sort { $a <=> $b } grep { exists\
    \ $seen{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return [sort keys %h];\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    grep { !$seen{$_}++\
    \ } @$l1, @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %l1 = map { $_ => 1 } @$l1;\n \
    \   my %l2 = map { $_ => 1 } @$l2;\n    my @common = grep { $l1{$_} && $l2{$_}\
    \ } keys %l1;\n    return sort @common;\n}", "    my %h;\n    @h{@$l1} = ();\n\
    \    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} =\
    \ ();\n    @h{@$l2} = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my\
    \ %h = map { $_ => 1 } @$l1;\n    my @c = grep { $h{$_} } @$l2;\n    return @c;\n\
    }", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e} = 1;\n    }\n\
    \    my @l = ();\n    foreach my $e (@$l2) {\n        if (exists $h{$e}) {\n \
    \           push @l, $e;\n        }\n    }\n    return sort { $a <=> $b } @l;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %seen;\n    my @common = grep { $seen{$_}++ } @$l1, @$l2;\n\
    \    return [ sort { $a <=> $b } @common ];\n}", "    my %h;\n    @h{@$l1} = ();\n\
    \    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} =\
    \ ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h = ();\n\
    \    foreach my $e (@$l1) {\n        $h{$e} = 1;\n    }\n    my @r = ();\n   \
    \ foreach my $e (@$l2) {\n        if (exists $h{$e}) {\n            push @r, $e;\n\
    \        }\n    }\n    return sort { $a <=> $b } @r;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return [sort keys %h];\n}", "    my %h = map\
    \ { $_ => 1 } @$l1;\n    return sort grep { $h{$_} } @$l2;\n}", "    my %h;\n\
    \    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my\
    \ %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", " \
    \   my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return\
    \ sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$l1, @$l2;\n    return [ sort { $a <=> $b } @common ];\n}", "    my %h;\n\
    \    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my\
    \ %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", " \
    \   my %seen;\n    @seen{@$l1} = ();\n    return grep { exists $seen{$_} } @$l2;\n\
    }", "    my %seen;\n    grep { !$seen{$_}++ } @$l1, @$l2;\n}", "    my %h;\n \
    \   @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my\
    \ %h;\n    for (@$l1) {\n        $h{$_} = 1;\n    }\n    my @c;\n    for (@$l2)\
    \ {\n        push @c, $_ if $h{$_};\n    }\n    return sort { $a <=> $b } @c;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return [sort keys\
    \ %h];\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %h;\n    for (@$l1) {\n        $h{$_} = 1;\n    }\n  \
    \  my @c;\n    for (@$l2) {\n        push @c, $_ if $h{$_};\n    }\n    return\
    \ sort { $a <=> $b } @c;\n}", "    my %h;\n    for (@$l1) {\n        $h{$_}++;\n\
    \    }\n    for (@$l2) {\n        $h{$_}++;\n    }\n    return sort { $a <=> $b\
    \ } grep { $h{$_} == 2 } keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my %l1 = map { $_ => 1 } @l1;\n    my %l2 = map { $_\
    \ => 1 } @l2;\n    my @common = grep { $l1{$_} && $l2{$_} } @l1;\n    return sort\
    \ { $a <=> $b } @common;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my %seen;\n    my @common\
    \ = grep { !$seen{$_}++ } @$l1, @$l2;\n    return sort { $a <=> $b } @common;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ {$a <=> $b} keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h = ();\n    my @r = ();\n   \
    \ foreach my $e (@$l1) {\n        $h{$e} = 1;\n    }\n    foreach my $e (@$l2)\
    \ {\n        if ($h{$e}) {\n            push @r, $e;\n        }\n    }\n    return\
    \ sort { $a <=> $b } @r;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    grep { !$seen{$_}++\
    \ } @$l1, @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return sort keys %h;\n}", "    my(%h, @r);\n    foreach my $e (@$l1, @$l2)\
    \ {\n        $h{$e}++;\n    }\n    foreach my $e (keys %h) {\n        push(@r,\
    \ $e) if $h{$e} > 1;\n    }\n    return sort { $a <=> $b } @r;\n}", "    my %h\
    \ = ();\n    foreach my $e (@$l1) {\n        $h{$e} = 1;\n    }\n    my @common\
    \ = ();\n    foreach my $e (@$l2) {\n        if ($h{$e}) {\n            push @common,\
    \ $e;\n        }\n    }\n    return sort { $a <=> $b } @common;\n}", "    my %seen;\n\
    \    @seen{@$l1} = ();\n    delete @seen{@$l2};\n    return [sort keys %seen];\n\
    }", "    my %seen;\n    @seen{@$l1} = ();\n    return grep { exists $seen{$_}\
    \ } @$l2;\n}", "    my %common;\n    @common{@$l1} = ();\n    @common{@$l2} =\
    \ ();\n    return sort keys %common;\n}", "    my %l1 = map { $_ => 1 } @$l1;\n\
    \    my %l2 = map { $_ => 1 } @$l2;\n    return sort { $a <=> $b } grep { $l1{$_}\
    \ && $l2{$_} } keys %l1;\n}", "    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$l1, @$l2;\n    return [ sort { $a <=> $b } @common ];\n}", "    my %h =\
    \ map { $_ => 1 } @$l1;\n    my @common = grep { $h{$_} } @$l2;\n    return sort\
    \ { $a <=> $b } @common;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h = map { $_ => 1 } @$l1;\n    return\
    \ sort grep { $h{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h = ();\n    foreach my $e (@$l1)\
    \ {\n        $h{$e} = 1;\n    }\n    my @l = ();\n    foreach my $e (@$l2) {\n\
    \        if (exists $h{$e}) {\n            push @l, $e;\n        }\n    }\n  \
    \  return sort { $a <=> $b } @l;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    @seen{@$l1} = ();\n\
    \    my @common = grep { exists $seen{$_} } @$l2;\n    return [ sort { $a <=>\
    \ $b } @common ];\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n \
    \   return sort keys %h;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n \
    \       $h{$e} = 1;\n    }\n    my @res = ();\n    foreach my $e (@$l2) {\n  \
    \      if (exists $h{$e}) {\n            push @res, $e;\n        }\n    }\n  \
    \  return sort { $a <=> $b } @res;\n}", "    my %seen;\n    grep { !$seen{$_}++\
    \ } (@$l1, @$l2);\n}", "    my %seen;\n    @seen{@$l1} = ();\n    return grep\
    \ { exists $seen{$_} } @$l2;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n\
    \        $h{$e} = 1;\n    }\n    my @common = ();\n    foreach my $e (@$l2) {\n\
    \        if ($h{$e}) {\n            push @common, $e;\n        }\n    }\n    return\
    \ [sort {$a <=> $b} @common];\n}", "    my %seen;\n    @seen{@$l1} = ();\n   \
    \ return sort grep { exists $seen{$_} } @$l2;\n}", "    my %h = ();\n    foreach\
    \ my $e (@$l1) {\n        $h{$e} = 1;\n    }\n    my @common = ();\n    foreach\
    \ my $e (@$l2) {\n        if (exists $h{$e}) {\n            push @common, $e;\n\
    \        }\n    }\n    return [sort {$a <=> $b} @common];\n}", "    my %h = map\
    \ { $_ => 1 } @$l1;\n    my @c = grep { $h{$_} } @$l2;\n    return sort { $a <=>\
    \ $b } @c;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return\
    \ sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return [sort keys %h];\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    grep { !$seen{$_}++\
    \ } @$l1, @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    @seen{@$l1} = ();\n\
    \    delete @seen{@$l2};\n    return [sort keys %seen];\n}", "    my %h;\n   \
    \ @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %seen;\n\
    \    @seen{@$l1} = ();\n    return grep { exists $seen{$_} } @$l2;\n}", "    my(%h1,\
    \ %h2, @common);\n    map { $h1{$_} = 1 } @$l1;\n    map { $h2{$_} = 1 } @$l2;\n\
    \    map { push(@common, $_) if $h1{$_} && $h2{$_} } keys %h1;\n    return sort\
    \ @common;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return\
    \ sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$l1, @$l2;\n    return [sort { $a <=> $b } keys %seen];\n}", "    my %h;\n\
    \    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my\
    \ %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", " \
    \   my %seen;\n    my @common = grep { $seen{$_}++ } @$l1, @$l2;\n    return [\
    \ sort { $a <=> $b } @common ];\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %seen;\n    my @common = grep {\
    \ !$seen{$_}++ } @$l1, @$l2;\n    return sort { $a <=> $b } @common;\n}", "  \
    \  my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    my @l = sort keys %h;\n\
    \    return @l;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e}\
    \ = 1;\n    }\n    my @c = ();\n    foreach my $e (@$l2) {\n        if (exists\
    \ $h{$e}) {\n            push @c, $e;\n        }\n    }\n    return sort { $a\
    \ <=> $b } @c;\n}", "    my %seen;\n    my @common = grep { !$seen{$_}++ } @$l1,\
    \ @$l2;\n    return sort { $a <=> $b } @common;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return [sort keys %h];\n}", "    my %seen;\n\
    \    grep { !$seen{$_}++ } @$l1, @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n\
    \    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} =\
    \ ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h = map {\
    \ $_ => 1 } @$l1;\n    return sort { $a <=> $b } grep { $h{$_} } @$l2;\n}", " \
    \   my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n\
    }", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort keys\
    \ %h;\n}", "    my %seen;\n    grep { !$seen{$_}++ } @$l1, @$l2;\n}", "    my\
    \ %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    my @l = sort keys %h;\n   \
    \ return @l;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return\
    \ sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n   \
    \ return sort keys %h;\n}", "    my %h;\n    for (@$l1) {\n        $h{$_}++;\n\
    \    }\n    for (@$l2) {\n        $h{$_}++;\n    }\n    return sort { $a <=> $b\
    \ } grep { $h{$_} == 2 } keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    for (@$l1) { $h{$_}++\
    \ }\n    for (@$l2) { $h{$_}++ }\n    return sort { $a <=> $b } grep { $h{$_}\
    \ == 2 } keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n \
    \   return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
