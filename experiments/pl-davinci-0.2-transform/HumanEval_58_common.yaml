name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two lists.\n# >>> common([1, 4,\
  \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ keys %h;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e} =\
    \ 1;\n    }\n    my @r = ();\n    foreach my $e (@$l2) {\n        if (exists $h{$e})\
    \ {\n            push @r, $e;\n        }\n    }\n    return sort { $a <=> $b }\
    \ @r;\n}", "    my %h = ();\n    foreach my $e (@$l1) {\n        $h{$e} = 1;\n\
    \    }\n    my @l = ();\n    foreach my $e (@$l2) {\n        if (exists $h{$e})\
    \ {\n            push @l, $e;\n        }\n    }\n    return sort { $a <=> $b }\
    \ @l;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n    return sort\
    \ { $a <=> $b } keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} =\
    \ ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %h;\n    @h{@$l1}\
    \ = ();\n    @h{@$l2} = ();\n    return sort keys %h;\n}", "    my %seen;\n  \
    \  @seen{@$l1} = ();\n    return grep { exists $seen{$_} } @$l2;\n}", "    my\
    \ @l1 = sort { $a <=> $b } @$l1;\n    my @l2 = sort { $a <=> $b } @$l2;\n    my\
    \ @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            push @common, $l1[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1[$i] < $l2[$j]) {\n    \
    \        $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my %seen;\n    @seen{@$l1} = ();\n    return grep { exists\
    \ $seen{$_} } @$l2;\n}", "    my %h;\n    @h{@$l1} = ();\n    @h{@$l2} = ();\n\
    \    return [sort {$a <=> $b} keys %h];\n}", "    my %h = map { $_ => 1 } @$l1;\n\
    \    return sort grep { $h{$_} } @$l2;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
