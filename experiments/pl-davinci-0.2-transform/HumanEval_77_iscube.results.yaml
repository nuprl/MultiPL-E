language: pl
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i*$i*$i <\
    \ $a) {\n        $i++;\n    }\n    if ($i*$i*$i == $a) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 0;\n    while ($i*$i*$i <\
    \ $a) {\n        $i++;\n    }\n    if ($i*$i*$i == $a) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    if ($b\
    \ * $b * $b == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpl0mjdlbv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i*$i*$i <=\
    \ $a) {\n        if ($i*$i*$i == $a) {\n            return 1;\n        }\n   \
    \     $i++;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp6n6bdk1j.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   if ($b ** 3 == abs($a)) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    if ($b\
    \ * $b * $b == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpl0mjdlbv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return $b ==\
    \ int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpfekoe_ar.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return ($b ** 3 == $a) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpbmk01u4z.pl line 19.

    '
  stdout: ''
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i ** 3 < $a)\
    \ {\n        $i++;\n    }\n    return $i ** 3 == $a;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $x = sqrt($a);\n    my $y = int($x);\n\
    \    if ($x == $y) {\n        $x = sqrt($y);\n        $y = int($x);\n        if\
    \ ($x == $y) {\n            return 1;\n        }\n    }\n    return \"\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n   \
    \     if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpz8tyyowi.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp6n6bdk1j.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    if ($b\
    \ * $b * $b == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpl0mjdlbv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    if ($b == int($b))\
    \ {\n        my $c = sqrt($b);\n        if ($c == int($c)) {\n            return\
    \ 1;\n        }\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpgpqh6c0w.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $c = int(abs($a) ** (1/3));\n \
    \   return $c ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i*$i*$i <=\
    \ $a) {\n        if ($i*$i*$i == $a) {\n            return 1;\n        }\n   \
    \     $i++;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    if ($b =~ /\\\
    d+\\.\\d+/) {\n        return \"\";\n    }\n    else {\n        return 1;\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpei5p16a0.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    if ($b\
    \ * $b * $b == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpl0mjdlbv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   if ($b ** 3 == abs($a)) {\n        return $b;\n    } else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    my $c\
    \ = $b * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp12oweasv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return ($b\
    \ == int($b)) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpvsizv70c.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return ($b\
    \ * $b * $b == $a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp639c0lh8.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $x = int(sqrt($a));\n    return\
    \ $x * $x * $x == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpr2b5n67q.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return $b ==\
    \ int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpfekoe_ar.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return ($b ** 3 == $a) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    if ($b == int($b))\
    \ {\n        $b = sqrt($b);\n        if ($b == int($b)) {\n            return\
    \ 1;\n        }\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpqv74kand.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return $b ==\
    \ int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpfekoe_ar.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(pow($a, 1/3));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::pow called at /tmp/tmp8kkgnfvm.pl line 19.

    '
  stdout: ''
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp6n6bdk1j.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    my $c\
    \ = $b * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp12oweasv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    if ($a < 0) {\n        return \"\"\
    ;\n    }\n    my $b = int(sqrt($a));\n    if ($b * $b * $b == $a) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = 0;\n    while ($b*$b*$b <\
    \ $a) {\n        $b++;\n    }\n    if ($b*$b*$b == $a) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return ($b ** 3 == $a) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp6n6bdk1j.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return $b ==\
    \ int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpfekoe_ar.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpbmk01u4z.pl line 19.

    '
  stdout: ''
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i * $i * $i\
    \ <= $a) {\n        if ($i * $i * $i == $a) {\n            return 1;\n       \
    \ }\n        $i++;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n    while ($i*$i*$i <\
    \ $a) {\n        $i++;\n    }\n    if ($i*$i*$i == $a) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $x = int(abs($a) ** (1/3));\n \
    \   return $x ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $x = int(abs($a) ** (1/3));\n \
    \   return $x ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $x = int(abs($a) ** (1/3));\n \
    \   return $x ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpbmk01u4z.pl line 19.

    '
  stdout: ''
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $i = 0;\n    while ($i*$i*$i <=\
    \ $a) {\n        if ($i*$i*$i == $a) {\n            return 1;\n        }\n   \
    \     $i++;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    if ($b == int($b))\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp_5evk88y.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1 / 3));\n\
    \    return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return ($b ** 3 == $a) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    return $b ==\
    \ int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpfekoe_ar.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    if ($b\
    \ * $b * $b == $a) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
    \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpl0mjdlbv.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n    my $c = $b\
    \ * $b * $b;\n    return $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpyn44ow33.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    if ($a == 0) {\n        return 1;\n\
    \    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    my $x = int(sqrt($a));\n\
    \    return $x * $x * $x == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n    return\
    \ $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpchdg5juf.pl line 19.

    '
  stdout: ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\
    \n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n\
    # \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = int(abs($a) ** (1/3));\n \
    \   return $b ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821181
