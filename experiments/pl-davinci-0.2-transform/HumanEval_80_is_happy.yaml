name: HumanEval_80_is_happy
language: pl
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy(a)\n# \"\"\n# >>> is_happy(aa)\n\
  # \"\"\n# >>> is_happy(abcd)\n# 1\n# >>> is_happy(aabb)\n# \"\"\n# >>> is_happy(adb)\n\
  # 1\n# >>> is_happy(xyy)\n# \"\"\nsub is_happy {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n\
  \        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i <\
    \ length($s) - 2) {\n        my $sub = substr($s, $i, 3);\n        return \"\"\
    \ if $sub =~ /(.)\\1/;\n        $i++;\n    }\n    return 1;\n}", "    return \"\
    \" if length($s) < 3;\n    my $i = 0;\n    while ($i < length($s) - 2) {\n   \
    \     return \"\" if substr($s, $i, 1) eq substr($s, $i + 1, 1);\n        return\
    \ \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n        return \"\" if\
    \ substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n        $i++;\n    }\n    return\
    \ 1;\n}", "    return \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i <\
    \ length($s) - 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s, $i\
    \ + 1, 1);\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n\
    \        return \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n    \
    \    $i++;\n    }\n    return 1;\n}", "    return \"\" if length($s) < 3;\n  \
    \  my $i = 0;\n    while ($i < length($s) - 2) {\n        if (substr($s, $i, 1)\
    \ eq substr($s, $i + 1, 1) ||\n            substr($s, $i, 1) eq substr($s, $i\
    \ + 2, 1) ||\n            substr($s, $i + 1, 1) eq substr($s, $i + 2, 1)) {\n\
    \            return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    return \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i < length($s)\
    \ - 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 1, 1);\n\
    \        return \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n        return\
    \ \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n        $i++;\n   \
    \ }\n    return 1;\n}", "    return \"\" if length($s) < 3;\n    for (my $i =\
    \ 0; $i < length($s) - 2; $i++) {\n        return \"\" if substr($s, $i, 1) eq\
    \ substr($s, $i + 1, 1) ||\n            substr($s, $i, 1) eq substr($s, $i + 2,\
    \ 1) ||\n            substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n    }\n\
    \    return 1;\n}", "    my $len = length($s);\n    return \"\" if $len < 3;\n\
    \    my $i = 0;\n    while ($i < $len - 2) {\n        my $sub = substr($s, $i,\
    \ 3);\n        my %h;\n        for my $c (split //, $sub) {\n            return\
    \ \"\" if $h{$c};\n            $h{$c} = 1;\n        }\n        $i++;\n    }\n\
    \    return 1;\n}", "    return \"\" if length($s) < 3;\n    my @s = split //,\
    \ $s;\n    for (my $i = 0; $i < @s - 2; $i++) {\n        return \"\" if $s[$i]\
    \ eq $s[$i + 1] || $s[$i] eq $s[$i + 2] || $s[$i + 1] eq $s[$i + 2];\n    }\n\
    \    return 1;\n}", "    return \"\" if length($s) < 3;\n    my $i = 0;\n    while\
    \ ($i < length($s) - 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s,\
    \ $i + 1, 1);\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 2,\
    \ 1);\n        return \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n\
    \        $i++;\n    }\n    return 1;\n}", "    my $len = length($s);\n    return\
    \ \"\" if $len < 3;\n    for (my $i = 0; $i < $len - 2; $i++) {\n        my $sub\
    \ = substr($s, $i, 3);\n        return \"\" if $sub =~ /(.)\\1/;\n    }\n    return\
    \ 1;\n}", "    return \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i <\
    \ length($s) - 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s, $i\
    \ + 1, 1);\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n\
    \        return \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n    \
    \    $i++;\n    }\n    return 1;\n}", "    # your code here\n    my $n = length($s);\n\
    \    return \"\" if $n < 3;\n    for (my $i = 0; $i < $n - 2; $i++) {\n      \
    \  my $a = substr($s, $i, 1);\n        my $b = substr($s, $i + 1, 1);\n      \
    \  my $c = substr($s, $i + 2, 1);\n        return \"\" if $a eq $b || $a eq $c\
    \ || $b eq $c;\n    }\n    return 1;\n}", "    # Your code here\n    if (length($s)\
    \ < 3) {\n        return \"\";\n    }\n    for (my $i = 0; $i < length($s) - 2;\
    \ $i++) {\n        if (substr($s, $i, 1) eq substr($s, $i + 1, 1) ||\n       \
    \     substr($s, $i, 1) eq substr($s, $i + 2, 1) ||\n            substr($s, $i\
    \ + 1, 1) eq substr($s, $i + 2, 1)) {\n            return \"\";\n        }\n \
    \   }\n    return 1;\n}", "    return \"\" if length($s) < 3;\n    my $i = 0;\n\
    \    while ($i < length($s)-2) {\n        return \"\" if substr($s, $i, 1) eq\
    \ substr($s, $i+1, 1);\n        return \"\" if substr($s, $i, 1) eq substr($s,\
    \ $i+2, 1);\n        return \"\" if substr($s, $i+1, 1) eq substr($s, $i+2, 1);\n\
    \        $i++;\n    }\n    return 1;\n}", "    my $len = length($s);\n    if ($len\
    \ < 3) {\n        return \"\";\n    }\n    for (my $i = 0; $i < $len - 2; $i++)\
    \ {\n        my $s1 = substr($s, $i, 1);\n        my $s2 = substr($s, $i + 1,\
    \ 1);\n        my $s3 = substr($s, $i + 2, 1);\n        if ($s1 eq $s2 || $s1\
    \ eq $s3 || $s2 eq $s3) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    # Your code here\n    my $len = length($s);\n    return \"\" if\
    \ $len < 3;\n    for (my $i = 0; $i < $len - 2; $i++) {\n        my $sub = substr($s,\
    \ $i, 3);\n        return \"\" if $sub =~ /(\\w)\\1/;\n    }\n    return 1;\n}",
  "    if (length($s) < 3) {\n        return \"\";\n    }\n    my $i = 0;\n    while\
    \ ($i < length($s) - 2) {\n        if (substr($s, $i, 1) eq substr($s, $i + 1,\
    \ 1) ||\n            substr($s, $i, 1) eq substr($s, $i + 2, 1) ||\n         \
    \   substr($s, $i + 1, 1) eq substr($s, $i + 2, 1)) {\n            return \"\"\
    ;\n        }\n        $i++;\n    }\n    return 1;\n}", "    # Your code here\n\
    \    my $len = length($s);\n    if ($len < 3) {\n        return \"\";\n    }\n\
    \    my $i = 0;\n    while ($i < $len - 2) {\n        my $subs = substr($s, $i,\
    \ 3);\n        if ($subs =~ /(\\w)\\1\\1/) {\n            return \"\";\n     \
    \   }\n        $i++;\n    }\n    return 1;\n}", "    my $len = length($s);\n \
    \   return \"\" if $len < 3;\n    my $i = 0;\n    while ($i < $len - 2) {\n  \
    \      my $substr = substr($s, $i, 3);\n        return \"\" if $substr =~ /(\\\
    w)\\1/;\n        $i++;\n    }\n    return 1;\n}", "    # Your code here\n    if(length($s)\
    \ < 3){\n        return \"\";\n    }\n    my $i = 0;\n    my $j = 1;\n    my $k\
    \ = 2;\n    while($k < length($s)){\n        if(substr($s, $i, 1) eq substr($s,\
    \ $j, 1) || substr($s, $i, 1) eq substr($s, $k, 1) || substr($s, $j, 1) eq substr($s,\
    \ $k, 1)){\n            return \"\";\n        }\n        $i++;\n        $j++;\n\
    \        $k++;\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
