name: HumanEval_104_unique_digits
language: pl
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n\
  # >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
  \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
  \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
  \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n}\n\ntesthumaneval();"
completions: ["    my @result = ();\n    foreach my $num (@$x) {\n        my $has_even\
    \ = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n     \
    \       if ($digit % 2 == 0) {\n                $has_even = 1;\n             \
    \   last;\n            }\n            $num = int($num / 10);\n        }\n    \
    \    if (!$has_even) {\n            push @result, $num;\n        }\n    }\n  \
    \  return sort {$a <=> $b} @result;\n}", "    my @result = ();\n    foreach my\
    \ $i (@$x) {\n        my $has_even = 0;\n        while ($i > 0) {\n          \
    \  my $digit = $i % 10;\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n            $i = int($i / 10);\n\
    \        }\n        if (!$has_even) {\n            push @result, $i;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @result = ();\n\
    \    foreach my $i (@$x) {\n        my $has_even = 0;\n        while ($i > 0)\
    \ {\n            if ($i % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $i /= 10;\n        }\n        push\
    \ @result, $i if (!$has_even);\n    }\n    return sort {$a <=> $b} @result;\n}",
  "    my @result = ();\n    foreach my $i (@$x) {\n        my $has_even = 0;\n  \
    \      while ($i > 0) {\n            my $d = $i % 10;\n            if ($d % 2\
    \ == 0) {\n                $has_even = 1;\n                last;\n           \
    \ }\n            $i = int($i / 10);\n        }\n        if (!$has_even) {\n  \
    \          push @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }", "    my @result = ();\n    foreach my $i (@$x) {\n        my $has_even = 0;\n\
    \        while ($i > 0) {\n            if ($i % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n            $i /= 10;\n        }\n\
    \        if (!$has_even) {\n            push @result, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}", "    my @result = ();\n    foreach\
    \ my $i (@$x) {\n        my $has_even = 0;\n        while ($i > 0) {\n       \
    \     my $digit = $i % 10;\n            if ($digit % 2 == 0) {\n             \
    \   $has_even = 1;\n                last;\n            }\n            $i = int($i\
    \ / 10);\n        }\n        if (!$has_even) {\n            push @result, $i;\n\
    \        }\n    }\n    return @result;\n}", "    my @result = ();\n    foreach\
    \ my $num (@$x) {\n        my $has_even = 0;\n        while ($num > 0) {\n   \
    \         my $digit = $num % 10;\n            if ($digit % 2 == 0) {\n       \
    \         $has_even = 1;\n                last;\n            }\n            $num\
    \ = int($num / 10);\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @result\
    \ = ();\n    foreach my $i (@$x) {\n        my $is_unique = 1;\n        my $j\
    \ = $i;\n        while ($j > 0) {\n            if ($j % 2 == 0) {\n          \
    \      $is_unique = 0;\n                last;\n            }\n            $j =\
    \ int($j / 10);\n        }\n        if ($is_unique) {\n            push @result,\
    \ $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @result\
    \ = ();\n    foreach my $i (@$x) {\n        my $has_even = 0;\n        while ($i\
    \ > 0) {\n            my $digit = $i % 10;\n            if ($digit % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $i = int($i / 10);\n        }\n        if (!$has_even) {\n            push\
    \ @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", " \
    \   my @result = ();\n    foreach my $num (@$x) {\n        my $has_even = 0;\n\
    \        while ($num > 0) {\n            my $digit = $num % 10;\n            if\
    \ ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $num = int($num / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}", "    my @result = ();\n    foreach my $i (@$x) {\n       \
    \ my $has_even = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $i = int($i / 10);\n        }\n   \
    \     if (!$has_even) {\n            push @result, $i;\n        }\n    }\n   \
    \ return sort {$a <=> $b} @result;\n}", "    my @result = ();\n    foreach my\
    \ $i (@$x) {\n        my $has_even = 0;\n        while ($i > 0) {\n          \
    \  if ($i % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i /= 10;\n        }\n        push @result, $i if\
    \ !$has_even;\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @result\
    \ = ();\n    foreach my $i (@$x) {\n        my $is_unique = 1;\n        my $j\
    \ = $i;\n        while ($j > 0) {\n            if ($j % 2 == 0) {\n          \
    \      $is_unique = 0;\n                last;\n            }\n            $j =\
    \ int($j / 10);\n        }\n        if ($is_unique) {\n            push @result,\
    \ $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @result\
    \ = ();\n    foreach my $i (@$x) {\n        my $has_even = 0;\n        while ($i\
    \ > 0) {\n            my $digit = $i % 10;\n            if ($digit % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $i = int($i / 10);\n        }\n        if (!$has_even) {\n            push\
    \ @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", " \
    \   my @result = ();\n    foreach my $n (@$x) {\n        my $has_even = 0;\n \
    \       while ($n > 0) {\n            if ($n % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n            $n /= 10;\n        }\n\
    \        push @result, $n if !$has_even;\n    }\n    return \\@result;\n}", " \
    \   my @result = ();\n    foreach my $i (@$x) {\n        if ($i =~ /[02468]/)\
    \ {\n            next;\n        }\n        push @result, $i;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}", "    my @result = ();\n    foreach my $i (@$x)\
    \ {\n        my $has_even = 0;\n        while ($i > 0) {\n            if ($i %\
    \ 2 == 0) {\n                $has_even = 1;\n                last;\n         \
    \   }\n            $i /= 10;\n        }\n        if (!$has_even) {\n         \
    \   push @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }", "    my @result = ();\n    foreach my $i (@$x) {\n        my $has_even = 0;\n\
    \        while ($i > 0) {\n            if ($i % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n            $i /= 10;\n        }\n\
    \        if (!$has_even) {\n            push @result, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}", "    my @result = ();\n    foreach\
    \ my $i (@$x) {\n        my $has_even = 0;\n        while ($i > 0) {\n       \
    \     if ($i % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i /= 10;\n        }\n        if (!$has_even) {\n\
    \            push @result, $i;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @result;\n}", "    my @result = ();\n    foreach my $i (@$x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $i /=\
    \ 10;\n        }\n        if (!$has_even) {\n            push @result, $i;\n \
    \       }\n    }\n    return sort {$a <=> $b} @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
