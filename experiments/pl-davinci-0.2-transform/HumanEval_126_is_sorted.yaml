name: HumanEval_126_is_sorted
language: pl
prompt: "# Given a list of numbers, return whether or not they are sorted\n# in ascending\
  \ order. If list has more than 1 duplicate of the same\n# number, return False.\
  \ Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted([5])\n\
  # 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n#\
  \ \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5,\
  \ 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1,\
  \ 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n\
  \        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $i = 0;\n    my $j = 1;\n    while ($j < @$lst) {\n        if\
    \ ($lst->[$i] > $lst->[$j]) {\n            return 0;\n        }\n        $i++;\n\
    \        $j++;\n    }\n    return 1;\n}", "    my $last = $lst->[0];\n    foreach\
    \ my $num (@$lst) {\n        if ($num < $last) {\n            return 0;\n    \
    \    }\n        $last = $num;\n    }\n    return 1;\n}", "    my $curr = $lst->[0];\n\
    \    for my $i (1..$#$lst) {\n        if ($lst->[$i] <= $curr) {\n           \
    \ return 0;\n        }\n        $curr = $lst->[$i];\n    }\n    return 1;\n}",
  "    my $last = -1;\n    foreach my $num (@$lst) {\n        if ($num <= $last) {\n\
    \            return 0;\n        }\n        $last = $num;\n    }\n    return 1;\n\
    }", "    my $last = -1;\n    my $dup = 0;\n    foreach my $i (@$lst) {\n     \
    \   if ($i == $last) {\n            $dup = 1;\n        }\n        if ($i < $last)\
    \ {\n            return 0;\n        }\n        $last = $i;\n    }\n    return\
    \ !$dup;\n}", "    my $prev = $lst->[0];\n    for my $i (1..$#$lst) {\n      \
    \  return 0 if $lst->[$i] <= $prev;\n        $prev = $lst->[$i];\n    }\n    return\
    \ 1;\n}", "    my $last = $lst->[0];\n    for my $i (1 .. $#$lst) {\n        if\
    \ ($lst->[$i] <= $last) {\n            return 0;\n        }\n        $last = $lst->[$i];\n\
    \    }\n    return 1;\n}", "    my $len = scalar(@$lst);\n    for (my $i = 0;\
    \ $i < $len - 1; $i++) {\n        if ($lst->[$i] >= $lst->[$i + 1]) {\n      \
    \      return 0;\n        }\n    }\n    return 1;\n}", "    my $prev = $lst->[0];\n\
    \    for my $i (1..$#$lst) {\n        if ($lst->[$i] < $prev) {\n            return\
    \ 0;\n        }\n        $prev = $lst->[$i];\n    }\n    return 1;\n}", "    my\
    \ $i = 0;\n    my $prev = $lst->[$i];\n    $i++;\n    while ($i < scalar(@$lst))\
    \ {\n        if ($lst->[$i] < $prev) {\n            return \"\";\n        }\n\
    \        $prev = $lst->[$i];\n        $i++;\n    }\n    return 1;\n}", "    my\
    \ $prev = shift @$lst;\n    foreach my $curr (@$lst) {\n        return 0 if $curr\
    \ < $prev;\n        $prev = $curr;\n    }\n    return 1;\n}", "    my $last =\
    \ -1;\n    my $dup = 0;\n    foreach my $i (@$lst) {\n        if ($i == $last)\
    \ {\n            $dup = 1;\n        }\n        if ($i < $last) {\n           \
    \ return 0;\n        }\n        $last = $i;\n    }\n    return !$dup;\n}", " \
    \   my $prev = $lst->[0];\n    for my $i (1..$#$lst) {\n        return 0 if $lst->[$i]\
    \ <= $prev;\n        $prev = $lst->[$i];\n    }\n    return 1;\n}", "    my $prev\
    \ = shift @$lst;\n    for my $curr (@$lst) {\n        return 0 if $curr <= $prev;\n\
    \        $prev = $curr;\n    }\n    return 1;\n}", "    my($prev) = shift @$lst;\n\
    \    for my $i (@$lst) {\n        return 0 if $i <= $prev;\n        $prev = $i;\n\
    \    }\n    return 1;\n}", "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$lst))\
    \ {\n        if ($lst->[$i] > $lst->[$j]) {\n            return \"\";\n      \
    \  }\n        $i++;\n        $j++;\n    }\n    return 1;\n}", "    my $last =\
    \ -1;\n    my $seen = {};\n    for my $x (@$lst) {\n        return 0 if $x <=\
    \ $last;\n        return 0 if $seen->{$x};\n        $last = $x;\n        $seen->{$x}\
    \ = 1;\n    }\n    return 1;\n}", "    my $prev = -1;\n    for my $i (@$lst) {\n\
    \        return 0 if $i <= $prev;\n        $prev = $i;\n    }\n    return 1;\n\
    }", "    my $last = -1;\n    my $dup = 0;\n    foreach my $i (@$lst) {\n     \
    \   if ($i == $last) {\n            $dup = 1;\n        }\n        if ($i < $last)\
    \ {\n            return \"\";\n        }\n        $last = $i;\n    }\n    return\
    \ $dup ? \"\" : 1;\n}", "    my $prev = -1;\n    foreach my $num (@$lst) {\n \
    \       if ($num <= $prev) {\n            return \"\";\n        }\n        $prev\
    \ = $num;\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
