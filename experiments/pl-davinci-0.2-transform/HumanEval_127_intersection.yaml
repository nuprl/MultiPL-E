name: HumanEval_127_intersection
language: pl
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection\
  \ {\n    my($interval1, $interval2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n\
  \        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n}\n\ntesthumaneval();"
completions: ["    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    if($start1 > $end1) {\n        ($start1, $end1) = ($end1, $start1);\n   \
    \ }\n    if($start2 > $end2) {\n        ($start2, $end2) = ($end2, $start2);\n\
    \    }\n    if($end1 < $start2 || $end2 < $start1) {\n        return \"NO\";\n\
    \    }\n    my $start = $start1 > $start2 ? $start1 : $start2;\n    my $end =\
    \ $end1 < $end2 ? $end1 : $end2;\n    my $length = $end - $start + 1;\n    return\
    \ is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    if($start1 > $end1) {\n        ($start1, $end1) = ($end1, $start1);\n   \
    \ }\n    if($start2 > $end2) {\n        ($start2, $end2) = ($end2, $start2);\n\
    \    }\n    if($end1 < $start2 || $end2 < $start1) {\n        return \"NO\";\n\
    \    }\n    my($start, $end) = ($start1 > $start2 ? $start1 : $start2, $end1 <\
    \ $end2 ? $end1 : $end2);\n    my $length = $end - $start + 1;\n    if($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my $intersection = [$start1, $end1];\n    if($start1\
    \ > $start2) {\n        $intersection->[0] = $start2;\n    }\n    if($end1 < $end2)\
    \ {\n        $intersection->[1] = $end2;\n    }\n    if($intersection->[0] > $intersection->[1])\
    \ {\n        return \"NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0]\
    \ + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n    my $is_prime\
    \ = 1;\n    for(my $i = 2; $i < $length; $i++) {\n        if($length % $i == 0)\
    \ {\n            $is_prime = 0;\n            last;\n        }\n    }\n    if($is_prime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    my $start =\
    \ max($interval1->[0], $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start, $end);\n   \
    \ if($interval1->[0] > $interval2->[0]) {\n        $start = $interval1->[0];\n\
    \    } else {\n        $start = $interval2->[0];\n    }\n    if($interval1->[1]\
    \ < $interval2->[1]) {\n        $end = $interval1->[1];\n    } else {\n      \
    \  $end = $interval2->[1];\n    }\n    if($start > $end) {\n        return \"\
    NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1]\
    \ ? is_prime($intersection->[1] - $intersection->[0]) ? \"YES\" : \"NO\" : \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 <= $start2) {\n        $start = $start2;\n\
    \    } else {\n        $start = $start1;\n    }\n    if($end1 <= $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    if(is_prime($end - $start + 1))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    return is_prime($length) ? \"YES\" : \"\
    NO\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end\
    \ = min($interval1->[1], $interval2->[1]);\n    if ($start > $end) {\n       \
    \ return \"NO\";\n    }\n    return is_prime($end - $start + 1) ? \"YES\" : \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection\
    \ = [max($start1, $start2), min($end1, $end2)];\n    my($start, $end) = @$intersection;\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
