name: HumanEval_127_intersection
language: pl
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection\
  \ {\n    my($interval1, $interval2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n\
  \        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n}\n\ntesthumaneval();"
completions: ["    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    if($start1 > $end1) {\n        ($start1, $end1) = ($end1, $start1);\n   \
    \ }\n    if($start2 > $end2) {\n        ($start2, $end2) = ($end2, $start2);\n\
    \    }\n    if($end1 < $start2 || $end2 < $start1) {\n        return \"NO\";\n\
    \    }\n    my $start = $start1 > $start2 ? $start1 : $start2;\n    my $end =\
    \ $end1 < $end2 ? $end1 : $end2;\n    my $length = $end - $start + 1;\n    return\
    \ is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    if($start1 > $end1) {\n        ($start1, $end1) = ($end1, $start1);\n   \
    \ }\n    if($start2 > $end2) {\n        ($start2, $end2) = ($end2, $start2);\n\
    \    }\n    if($end1 < $start2 || $end2 < $start1) {\n        return \"NO\";\n\
    \    }\n    my($start, $end) = ($start1 > $start2 ? $start1 : $start2, $end1 <\
    \ $end2 ? $end1 : $end2);\n    my $length = $end - $start + 1;\n    if($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my $intersection = [$start1, $end1];\n    if($start1\
    \ > $start2) {\n        $intersection->[0] = $start2;\n    }\n    if($end1 < $end2)\
    \ {\n        $intersection->[1] = $end2;\n    }\n    if($intersection->[0] > $intersection->[1])\
    \ {\n        return \"NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0]\
    \ + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n    my $is_prime\
    \ = 1;\n    for(my $i = 2; $i < $length; $i++) {\n        if($length % $i == 0)\
    \ {\n            $is_prime = 0;\n            last;\n        }\n    }\n    if($is_prime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    my $start =\
    \ max($interval1->[0], $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start, $end);\n   \
    \ if($interval1->[0] > $interval2->[0]) {\n        $start = $interval1->[0];\n\
    \    } else {\n        $start = $interval2->[0];\n    }\n    if($interval1->[1]\
    \ < $interval2->[1]) {\n        $end = $interval1->[1];\n    } else {\n      \
    \  $end = $interval2->[1];\n    }\n    if($start > $end) {\n        return \"\
    NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1]\
    \ ? is_prime($intersection->[1] - $intersection->[0]) ? \"YES\" : \"NO\" : \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 <= $start2) {\n        $start = $start2;\n\
    \    } else {\n        $start = $start1;\n    }\n    if($end1 <= $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    if(is_prime($end - $start + 1))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    return is_prime($length) ? \"YES\" : \"\
    NO\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end\
    \ = min($interval1->[1], $interval2->[1]);\n    if ($start > $end) {\n       \
    \ return \"NO\";\n    }\n    return is_prime($end - $start + 1) ? \"YES\" : \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection\
    \ = [max($start1, $start2), min($end1, $end2)];\n    my($start, $end) = @$intersection;\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my $intersect_start = max($start1,\
    \ $start2);\n    my $intersect_end = min($end1, $end2);\n    if ($intersect_start\
    \ > $intersect_end) {\n        return \"NO\";\n    }\n    my $intersect_length\
    \ = $intersect_end - $intersect_start + 1;\n    return is_prime($intersect_length)\
    \ ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my $intersection = [max($start1, $start2),\
    \ min($end1, $end2)];\n    my($start, $end) = @$intersection;\n    return \"NO\"\
    \ if $start >= $end;\n    return \"YES\" if is_prime($end - $start);\n    return\
    \ \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n      \
    \  $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if ($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if ($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    my $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            $is_prime = 0;\n            last;\n     \
    \   }\n    }\n    if ($is_prime) {\n        return \"YES\";\n    } else {\n  \
    \      return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n   \
    \ my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2)\
    \ {\n        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n\
    \    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my\
    \ $length = $end - $start + 1;\n    if($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for(my $i = 2; $i < $length; $i++) {\n        if($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    return $start <= $end ? is_prime($end - $start)\
    \ ? \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return \"NO\" if $intersection->[0]\
    \ > $intersection->[1];\n    return \"YES\" if is_prime($intersection->[1] - $intersection->[0]\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  return $start > $end ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"\
    NO\";\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] > $intersection->[1] ? \"\
    NO\" : is_prime($intersection->[1] - $intersection->[0] + 1) ? \"YES\" : \"NO\"\
    ;\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] > $intersection->[1] ? \"\
    NO\" : is_prime($intersection->[1] - $intersection->[0] + 1) ? \"YES\" : \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    if ($start > $end) {\n        return \"NO\";\n\
    \    }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n  \
    \      return \"YES\";\n    }\n    return \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    return \"NO\" if\
    \ $end1 < $start2 || $end2 < $start1;\n    my $start = $start1 > $start2 ? $start1\
    \ : $start2;\n    my $end = $end1 < $end2 ? $end1 : $end2;\n    return \"YES\"\
    \ if $start == $end;\n    my $length = $end - $start;\n    return \"YES\" if $length\
    \ == 2;\n    return \"NO\" if $length % 2 == 0;\n    for my $i (3..int(sqrt($length)))\
    \ {\n        return \"NO\" if $length % $i == 0;\n    }\n    return \"YES\";\n\
    }", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    my $is_prime = 1;\n\
    \    for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            $is_prime = 0;\n            last;\n        }\n    }\n    if ($is_prime)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    my $i = 2;\n    while\
    \ ($i < $length) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n        $i++;\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    my $is_prime = 1;\n   \
    \ for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          $is_prime = 0;\n            last;\n        }\n    }\n    if ($is_prime)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my $intersection_length = 0;\n    if ($start1 <=\
    \ $start2) {\n        if ($end1 >= $start2) {\n            $intersection_length\
    \ = $end1 - $start2 + 1;\n        }\n    } else {\n        if ($end2 >= $start1)\
    \ {\n            $intersection_length = $end2 - $start1 + 1;\n        }\n    }\n\
    \    if ($intersection_length == 0) {\n        return \"NO\";\n    }\n    if ($intersection_length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($intersection_length == 2) {\n\
    \        return \"YES\";\n    }\n    if ($intersection_length % 2 == 0) {\n  \
    \      return \"NO\";\n    }\n    for (my $i = 3; $i <= sqrt($intersection_length);\
    \ $i += 2) {\n        if ($intersection_length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 <= $start2) {\n        $start = $start2;\n    } else {\n    \
    \    $start = $start1;\n    }\n    if ($end1 <= $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for (my $i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n\
    \    my $i = 2;\n    while($i <= sqrt($length)) {\n        if($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n        $i++;\n    }\n    return\
    \ \"YES\";\n}", "    my @interval1 = @$interval1;\n    my @interval2 = @$interval2;\n\
    \    my @intersection = ();\n    if ($interval1[0] <= $interval2[0]) {\n     \
    \   if ($interval1[1] >= $interval2[0]) {\n            $intersection[0] = $interval2[0];\n\
    \            if ($interval1[1] <= $interval2[1]) {\n                $intersection[1]\
    \ = $interval1[1];\n            } else {\n                $intersection[1] = $interval2[1];\n\
    \            }\n        } else {\n            return \"NO\";\n        }\n    }\
    \ else {\n        if ($interval2[1] >= $interval1[0]) {\n            $intersection[0]\
    \ = $interval1[0];\n            if ($interval2[1] <= $interval1[1]) {\n      \
    \          $intersection[1] = $interval2[1];\n            } else {\n         \
    \       $intersection[1] = $interval1[1];\n            }\n        } else {\n \
    \           return \"NO\";\n        }\n    }\n    my $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    return \"NO\" if $end1 < $start2 || $end2 < $start1;\n\
    \    my $start = $start1 > $start2 ? $start1 : $start2;\n    my $end = $end1 <\
    \ $end2 ? $end1 : $end2;\n    return \"YES\" if $start == $end;\n    return \"\
    NO\" if $start == 1;\n    my $i = 2;\n    while ($i * $i <= $end) {\n        return\
    \ \"NO\" if $start % $i == 0 || $end % $i == 0;\n        $i++;\n    }\n    return\
    \ \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n       \
    \ $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n\
    \    my $is_prime = 1;\n    for(my $i = 2; $i <= sqrt($length); $i++) {\n    \
    \    if($length % $i == 0) {\n            $is_prime = 0;\n            last;\n\
    \        }\n    }\n    if($is_prime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1 <=\
    \ $start2) {\n        $start = $start2;\n    } else {\n        $start = $start1;\n\
    \    }\n    if($end1 <= $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n   \
    \ }\n    my $len = $end - $start + 1;\n    if(is_prime($len)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    return \"NO\" if $end1 < $start2 || $end2 < $start1;\n\
    \    my($start, $end) = ($start1 > $start2) ? ($start1, $end1) : ($start2, $end2);\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start);\n\
    \    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start, $end);\n\
    \    if($interval1->[0] > $interval2->[0]) {\n        $start = $interval1->[0];\n\
    \    } else {\n        $start = $interval2->[0];\n    }\n    if($interval1->[1]\
    \ < $interval2->[1]) {\n        $end = $interval1->[1];\n    } else {\n      \
    \  $end = $interval2->[1];\n    }\n    if($start > $end) {\n        return \"\
    NO\";\n    }\n    if(is_prime($end - $start + 1)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  if ($start > $end) {\n        return \"NO\";\n    }\n    my $length = $end\
    \ - $start + 1;\n    return is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start,\
    \ $end) = ($interval1->[0], $interval1->[1]);\n    my($start2, $end2) = ($interval2->[0],\
    \ $interval2->[1]);\n    if ($start > $end) {\n        ($start, $end) = ($end,\
    \ $start);\n    }\n    if ($start2 > $end2) {\n        ($start2, $end2) = ($end2,\
    \ $start2);\n    }\n    my($intersect_start, $intersect_end) = (0, 0);\n    if\
    \ ($start <= $start2 && $start2 <= $end) {\n        $intersect_start = $start2;\n\
    \    }\n    if ($start <= $end2 && $end2 <= $end) {\n        $intersect_end =\
    \ $end2;\n    }\n    if ($start2 <= $start && $start <= $end2) {\n        $intersect_start\
    \ = $start;\n    }\n    if ($start2 <= $end && $end <= $end2) {\n        $intersect_end\
    \ = $end;\n    }\n    if ($intersect_start == 0 && $intersect_end == 0) {\n  \
    \      return \"NO\";\n    }\n    my $length = $intersect_end - $intersect_start\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for (my $i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $intersection =\
    \ [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return $intersection->[0] <= $intersection->[1] && is_prime($intersection->[1]\
    \ - $intersection->[0] + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) =\
    \ @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection =\
    \ [max($start1, $start2), min($end1, $end2)];\n    my($start, $end) = @$intersection;\n\
    \    return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n\
    \    if($length == 2) {\n        return \"YES\";\n    }\n    if($length % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    for(my $i = 3; $i <= sqrt($length);\
    \ $i += 2) {\n        if($length % $i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return $intersection->[0] > $intersection->[1]\
    \ ? \"NO\" : is_prime($intersection->[1] - $intersection->[0] + 1) ? \"YES\" :\
    \ \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n       \
    \ $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if($length == 1) {\n        return \"NO\";\n    }\n\
    \    for(my $i = 2; $i < $length; $i++) {\n        if($length % $i == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n \
    \       return \"YES\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n  \
    \      if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  if ($start > $end) {\n        return \"NO\";\n    }\n    return is_prime($end\
    \ - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    if ($start1\
    \ > $end1) {\n        ($start1, $end1) = ($end1, $start1);\n    }\n    if ($start2\
    \ > $end2) {\n        ($start2, $end2) = ($end2, $start2);\n    }\n    my($start,\
    \ $end) = ($start1, $end1);\n    if ($start2 > $start) {\n        $start = $start2;\n\
    \    }\n    if ($end2 < $end) {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2)\
    \ {\n        return \"YES\";\n    }\n    my $sqrt = int(sqrt($length));\n    for\
    \ (my $i = 2; $i <= $sqrt; $i++) {\n        if ($length % $i == 0) {\n       \
    \     return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $intersection\
    \ = [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    if ($intersection->[0] > $intersection->[1]) {\n        return \"NO\";\n\
    \    }\n    return is_prime($intersection->[1] - $intersection->[0] + 1) ? \"\
    YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n      \
    \  $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if ($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if ($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if (is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $intersection\
    \ = [0, 0];\n    if ($interval1->[0] > $interval2->[0]) {\n        $intersection->[0]\
    \ = $interval1->[0];\n    } else {\n        $intersection->[0] = $interval2->[0];\n\
    \    }\n    if ($interval1->[1] < $interval2->[1]) {\n        $intersection->[1]\
    \ = $interval1->[1];\n    } else {\n        $intersection->[1] = $interval2->[1];\n\
    \    }\n    if ($intersection->[0] > $intersection->[1]) {\n        return \"\
    NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0] + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for (my $i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $intersection\
    \ = [0, 0];\n    $intersection->[0] = $interval1->[0] > $interval2->[0] ? $interval1->[0]\
    \ : $interval2->[0];\n    $intersection->[1] = $interval1->[1] < $interval2->[1]\
    \ ? $interval1->[1] : $interval2->[1];\n    return $intersection;\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    if(is_prime($end - $start + 1)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    my $is_prime = 1;\n\
    \    for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            $is_prime = 0;\n            last;\n        }\n    }\n    if ($is_prime)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return $intersection->[0] > $intersection->[1]\
    \ ? \"NO\" : is_prime($intersection->[1] - $intersection->[0] + 1) ? \"YES\" :\
    \ \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n       \
    \ $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n \
    \   } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ <= $start2) {\n        $start = $start2;\n    } else {\n        $start = $start1;\n\
    \    }\n    if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n     \
    \   $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n \
    \   }\n    my $length = $end - $start + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1] ? is_prime($intersection->[1]\
    \ - $intersection->[0]) ? \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ <= $start2) {\n        $start = $start2;\n    } else {\n        $start = $start1;\n\
    \    }\n    if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n     \
    \   $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n \
    \   }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n   \
    \     return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [\n        max($interval1->[0],\
    \ $interval2->[0]),\n        min($interval1->[1], $interval2->[1])\n    ];\n \
    \   if ($intersection->[0] > $intersection->[1]) {\n        return \"NO\";\n \
    \   }\n    my $length = $intersection->[1] - $intersection->[0] + 1;\n    return\
    \ is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my $intersection = [$interval1->[0], $interval2->[0]];\n\
    \    $intersection->[0] = $interval2->[0] if $interval2->[0] > $interval1->[0];\n\
    \    $intersection->[1] = $interval2->[1] if $interval2->[1] < $interval1->[1];\n\
    \    return $intersection;\n}", "    my $intersection = [\n        max($interval1->[0],\
    \ $interval2->[0]),\n        min($interval1->[1], $interval2->[1])\n    ];\n \
    \   if ($intersection->[0] > $intersection->[1]) {\n        return \"NO\";\n \
    \   }\n    my $length = $intersection->[1] - $intersection->[0] + 1;\n    return\
    \ is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if($length == 1) {\n        return \"\
    NO\";\n    }\n    if($length == 2) {\n        return \"YES\";\n    }\n    for(my\
    \ $i = 2; $i < $length; $i++) {\n        if($length % $i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length <\
    \ 2) {\n        return \"NO\";\n    }\n    if($length == 2) {\n        return\
    \ \"YES\";\n    }\n    if($length % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    for(my $i = 3; $i * $i <= $length; $i += 2) {\n        if($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    if($start1 > $end1 || $start2 > $end2) {\n        return \"NO\";\n    }\n\
    \    if($start1 > $start2) {\n        ($start1, $end1, $start2, $end2) = ($start2,\
    \ $end2, $start1, $end1);\n    }\n    if($start2 > $end1) {\n        return \"\
    NO\";\n    }\n    my $intersection = $end1 - $start2 + 1;\n    return is_prime($intersection)\
    \ ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection_start\
    \ = max($start1, $start2);\n    my $intersection_end = min($end1, $end2);\n  \
    \  if ($intersection_start > $intersection_end) {\n        return \"NO\";\n  \
    \  }\n    my $intersection_length = $intersection_end - $intersection_start +\
    \ 1;\n    return is_prime($intersection_length) ? \"YES\" : \"NO\";\n}", "   \
    \ my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n \
    \   my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    return \"NO\" if $end1 < $start2 || $end2 < $start1;\n\
    \    my $start = max($start1, $start2);\n    my $end = min($end1, $end2);\n  \
    \  return is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if($length == 1) {\n        return \"\
    NO\";\n    }\n    my $is_prime = 1;\n    for(my $i = 2; $i < $length; $i++) {\n\
    \        if($length % $i == 0) {\n            $is_prime = 0;\n            last;\n\
    \        }\n    }\n    if($is_prime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1 >\
    \ $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return $start > $end\
    \ ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 <= $start2) {\n\
    \        $start = $start2;\n    } else {\n        $start = $start1;\n    }\n \
    \   if($end1 <= $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my\
    \ $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    if($start1 > $end1 || $start2 > $end2) {\n      \
    \  return \"NO\";\n    }\n    my $start = $start1 > $start2 ? $start1 : $start2;\n\
    \    my $end = $end1 < $end2 ? $end1 : $end2;\n    if($start > $end) {\n     \
    \   return \"NO\";\n    }\n    return is_prime($end - $start + 1) ? \"YES\" :\
    \ \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    return \"NO\" if $end1 < $start2 || $end2 < $start1;\n \
    \   my $start = $start1 > $start2 ? $start1 : $start2;\n    my $end = $end1 <\
    \ $end2 ? $end1 : $end2;\n    return \"YES\" if $start == $end;\n    return \"\
    NO\" if $start == $end - 1;\n    return \"YES\" if $start == $end - 2;\n    return\
    \ \"NO\" if $start == $end - 3;\n    return \"YES\" if $start == $end - 4;\n \
    \   return \"NO\" if $start == $end - 5;\n    return \"YES\" if $start == $end\
    \ - 6;\n    return \"NO\" if $start == $end - 7;\n    return \"YES\" if $start\
    \ == $end - 8;\n    return \"NO\" if $start == $end - 9;\n    return \"YES\" if\
    \ $start == $end - 10;\n    return \"NO\" if $start == $end - 11;\n    return\
    \ \"YES\" if $start == $end - 12;\n    return \"NO\" if $start == $end - 13;\n\
    \    return \"YES\" if $start == $end - 14;\n    return \"NO\" if $start == $end\
    \ - 15;\n    return \"YES\" if $start == $end - 16;\n    return \"NO\" if $start\
    \ == $end - 17;\n    return \"YES\" if $start == $end - 18;\n    return \"NO\"\
    \ if $start == $end - 19;\n    return \"YES\" if $start == $end - 20;\n    return\
    \ \"NO\" if $start == $end - 21;\n    return \"YES\" if $start == $end - 22;\n\
    \    return \"NO\" if $start == $end - 23;\n    return \"YES\" if $start == $end\
    \ - 24;\n    return \"NO\" if $start == $end - 25;\n    return \"YES\" if $start\
    \ == $end - 26;\n    return \"NO\"", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my $intersection_start = max($start1,\
    \ $start2);\n    my $intersection_end = min($end1, $end2);\n    if ($intersection_start\
    \ > $intersection_end) {\n        return \"NO\";\n    }\n    my $length = $intersection_end\
    \ - $intersection_start + 1;\n    return is_prime($length) ? \"YES\" : \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $len = $end - $start + 1;\n    if ($len <= 1) {\n        return \"NO\";\n\
    \    }\n    my $is_prime = 1;\n    for my $i (2 .. sqrt($len)) {\n        if ($len\
    \ % $i == 0) {\n            $is_prime = 0;\n            last;\n        }\n   \
    \ }\n    if ($is_prime) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    my $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            $is_prime = 0;\n            last;\n\
    \        }\n    }\n    if ($is_prime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ <= $start2) {\n        $start = $start2;\n    } else {\n        $start = $start1;\n\
    \    }\n    if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n     \
    \   $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n \
    \   }\n    my $len = $end - $start + 1;\n    if ($len == 1) {\n        return\
    \ \"NO\";\n    }\n    my $i = 2;\n    while ($i < $len) {\n        if ($len %\
    \ $i == 0) {\n            return \"NO\";\n        }\n        $i++;\n    }\n  \
    \  return \"YES\";\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\
    \ min($interval1->[1], $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1]\
    \ ? is_prime($intersection->[1] - $intersection->[0]) ? \"YES\" : \"NO\" : \"\
    NO\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end\
    \ = min($interval1->[1], $interval2->[1]);\n    return \"NO\" if $start > $end;\n\
    \    return \"YES\" if is_prime($end - $start + 1);\n    return \"NO\";\n}", " \
    \   my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my $intersect = [max($start1, $start2), min($end1,\
    \ $end2)];\n    my($start, $end) = @$intersect;\n    return \"NO\" if $start >=\
    \ $end;\n    return \"YES\" if is_prime($end - $start);\n    return \"NO\";\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return $start > $end\
    \ ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    my $length = $end -\
    \ $start + 1;\n    return $length > 0 && is_prime($length) ? \"YES\" : \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    if(is_prime($end - $start + 1))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1] ? is_prime($intersection->[1]\
    \ - $intersection->[0]) ? \"YES\" : \"NO\" : \"NO\";\n}", "    my $intersection\
    \ = [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return $intersection->[0] > $intersection->[1] ? \"NO\" : is_prime($intersection->[1]\
    \ - $intersection->[0] + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) =\
    \ @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    } else {\n        my $length = $end - $start + 1;\n   \
    \     if (is_prime($length)) {\n            return \"YES\";\n        } else {\n\
    \            return \"NO\";\n        }\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  return $start > $end ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection_start = max($start1, $start2);\n    my $intersection_end\
    \ = min($end1, $end2);\n    if ($intersection_start > $intersection_end) {\n \
    \       return \"NO\";\n    }\n    my $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    return is_prime($intersection_length) ? \"YES\"\
    \ : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n       \
    \ $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    my $isPrime = 1;\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            $isPrime = 0;\n            last;\n\
    \        }\n    }\n    if($isPrime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my $intersection = [max($interval1->[0],\
    \ $interval2->[0]), min($interval1->[1], $interval2->[1])];\n    return $intersection->[0]\
    \ > $intersection->[1] ? \"NO\" : is_prime($intersection->[1] - $intersection->[0]\
    \ + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    return is_prime($length) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1] ? is_prime($intersection->[1]\
    \ - $intersection->[0]) ? \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] <= $intersection->[1] ? is_prime($intersection->[1]\
    \ - $intersection->[0]) ? \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [0, 0];\n    if ($interval1->[0] > $interval2->[0]) {\n\
    \        $intersection->[0] = $interval1->[0];\n    } else {\n        $intersection->[0]\
    \ = $interval2->[0];\n    }\n    if ($interval1->[1] < $interval2->[1]) {\n  \
    \      $intersection->[1] = $interval1->[1];\n    } else {\n        $intersection->[1]\
    \ = $interval2->[1];\n    }\n    if ($intersection->[0] > $intersection->[1])\
    \ {\n        return \"NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0]\
    \ + 1;\n    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return $start > $end\
    \ ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    if($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for(my $i = 2; $i < $length; $i++) {\n        if($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end =\
    \ min($interval1->[1], $interval2->[1]);\n    return $start > $end ? \"NO\" :\
    \ is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $len = $end - $start + 1;\n\
    \    if(is_prime($len)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 <= $start2) {\n\
    \        $start = $start2;\n    } else {\n        $start = $start1;\n    }\n \
    \   if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ return is_prime($end - $start) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    if ($start1 > $end1)\
    \ {\n        ($start1, $end1) = ($end1, $start1);\n    }\n    if ($start2 > $end2)\
    \ {\n        ($start2, $end2) = ($end2, $start2);\n    }\n    my($start, $end)\
    \ = ($start1, $end1);\n    if ($start2 > $start) {\n        $start = $start2;\n\
    \    }\n    if ($end2 < $end) {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my $intersection_start = max($start1,\
    \ $start2);\n    my $intersection_end = min($end1, $end2);\n    my $intersection_length\
    \ = $intersection_end - $intersection_start;\n    return \"NO\" if $intersection_length\
    \ < 0;\n    return \"YES\" if is_prime($intersection_length);\n    return \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 <= $start2) {\n\
    \        $start = $start2;\n    } else {\n        $start = $start1;\n    }\n \
    \   if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    return \"NO\" if $start > $end;\n    return \"\
    YES\" if is_prime($end - $start + 1);\n    return \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection_start\
    \ = max($start1, $start2);\n    my $intersection_end = min($end1, $end2);\n  \
    \  if ($intersection_start > $intersection_end) {\n        return \"NO\";\n  \
    \  }\n    my $intersection_length = $intersection_end - $intersection_start +\
    \ 1;\n    return is_prime($intersection_length) ? \"YES\" : \"NO\";\n}", "   \
    \ my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n \
    \   my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if($length == 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i\
    \ < $length; $i++) {\n        if($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection\
    \ = [max($start1, $start2), min($end1, $end2)];\n    my $length = $intersection->[1]\
    \ - $intersection->[0];\n    return \"NO\" if $length < 0;\n    return \"YES\"\
    \ if is_prime($length);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $start =\
    \ max($interval1->[0], $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n\
    \    return $start > $end ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"\
    NO\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end\
    \ = min($interval1->[1], $interval2->[1]);\n    return $start > $end ? \"NO\"\
    \ : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  my $length = $end - $start + 1;\n    return \"NO\" if $length <= 0;\n    return\
    \ is_prime($length) ? \"YES\" : \"NO\";\n}", "    my $intersection = [max($interval1->[0],\
    \ $interval2->[0]), min($interval1->[1], $interval2->[1])];\n    return \"NO\"\
    \ if $intersection->[0] > $intersection->[1];\n    return is_prime($intersection->[1]\
    \ - $intersection->[0] + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) =\
    \ @$interval1;\n    my($start2, $end2) = @$interval2;\n    my $intersection =\
    \ [max($start1, $start2), min($end1, $end2)];\n    my $length = $intersection->[1]\
    \ - $intersection->[0];\n    return $length <= 0 ? \"NO\" : is_prime($length)\
    \ ? \"YES\" : \"NO\";\n}", "    my $intersection = [max($interval1->[0], $interval2->[0]),\n\
    \                        min($interval1->[1], $interval2->[1])];\n    return \"\
    NO\" if $intersection->[0] > $intersection->[1];\n    return \"YES\" if is_prime($intersection->[1]\
    \ - $intersection->[0] + 1);\n    return \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n      \
    \  $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 <= $start2) {\n        $start = $start2;\n\
    \    } else {\n        $start = $start1;\n    }\n    if($end1 >= $end2) {\n  \
    \      $end = $end2;\n    } else {\n        $end = $end1;\n    }\n    if($start\
    \ <= $end) {\n        my $length = $end - $start + 1;\n        return is_prime($length)\
    \ ? \"YES\" : \"NO\";\n    } else {\n        return \"NO\";\n    }\n}", "    my\
    \ $intersection = [0, 0];\n    if ($interval1->[0] <= $interval2->[0]) {\n   \
    \     $intersection->[0] = $interval2->[0];\n    } else {\n        $intersection->[0]\
    \ = $interval1->[0];\n    }\n    if ($interval1->[1] <= $interval2->[1]) {\n \
    \       $intersection->[1] = $interval1->[1];\n    } else {\n        $intersection->[1]\
    \ = $interval2->[1];\n    }\n    if ($intersection->[0] > $intersection->[1])\
    \ {\n        return \"NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for (my $i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $intersection =\
    \ [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return $intersection->[0] > $intersection->[1] ? \"NO\" : is_prime($intersection->[1]\
    \ - $intersection->[0] + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) =\
    \ @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [0, 0];\n    $intersection->[0] = $interval1->[0] > $interval2->[0]\
    \ ? $interval1->[0] : $interval2->[0];\n    $intersection->[1] = $interval1->[1]\
    \ < $interval2->[1] ? $interval1->[1] : $interval2->[1];\n    return $intersection;\n\
    }", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    my $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            $is_prime = 0;\n          \
    \  last;\n        }\n    }\n    if ($is_prime) {\n        return \"YES\";\n  \
    \  } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return \"NO\" if $start\
    \ > $end;\n    return \"YES\" if is_prime($end - $start + 1);\n    return \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $intersection\
    \ = [\n        max($interval1->[0], $interval2->[0]),\n        min($interval1->[1],\
    \ $interval2->[1])\n    ];\n    return \"NO\" if $intersection->[0] > $intersection->[1];\n\
    \    return is_prime($intersection->[1] - $intersection->[0]) ? \"YES\" : \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $len = $end - $start + 1;\n\
    \    if(is_prime($len)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
