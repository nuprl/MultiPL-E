name: HumanEval_110_exchange
language: pl
prompt: "# In this problem, you will implement a function that takes two lists of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 a list of only even numbers.\n# There is no limit on\
  \ the number of exchanged elements between lst1 and lst2.\n# If it is possible to\
  \ exchange elements between the lst1 and lst2 to make\n# all the elements of lst1\
  \ to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>>\
  \ exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4],\
  \ [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n\
  sub exchange {\n    my($lst1, $lst2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"\
  YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200,\
  \ 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $lst1_odd = 0;\n    my $lst2_odd = 0;\n    foreach my $num (@$lst1)\
    \ {\n        if ($num % 2 == 1) {\n            $lst1_odd++;\n        }\n    }\n\
    \    foreach my $num (@$lst2) {\n        if ($num % 2 == 1) {\n            $lst2_odd++;\n\
    \        }\n    }\n    if ($lst1_odd == $lst2_odd) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $even = 0;\n    my $odd\
    \ = 0;\n    for my $i (@$lst1) {\n        if ($i % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    for my $i (@$lst2)\
    \ {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return $even >= $odd ? \"YES\" : \"NO\"\
    ;\n}", "    my $count = 0;\n    my $count1 = 0;\n    my $count2 = 0;\n    my $count3\
    \ = 0;\n    my $count4 = 0;\n    my $count5 = 0;\n    my $count6 = 0;\n    my\
    \ $count7 = 0;\n    my $count8 = 0;\n    my $count9 = 0;\n    my $count10 = 0;\n\
    \    my $count11 = 0;\n    my $count12 = 0;\n    my $count13 = 0;\n    my $count14\
    \ = 0;\n    my $count15 = 0;\n    my $count16 = 0;\n    my $count17 = 0;\n   \
    \ my $count18 = 0;\n    my $count19 = 0;\n    my $count20 = 0;\n    my $count21\
    \ = 0;\n    my $count22 = 0;\n    my $count23 = 0;\n    my $count24 = 0;\n   \
    \ my $count25 = 0;\n    my $count26 = 0;\n    my $count27 = 0;\n    my $count28\
    \ = 0;\n    my $count29 = 0;\n    my $count30 = 0;\n    my $count31 = 0;\n   \
    \ my $count32 = 0;\n    my $count33 = 0;\n    my $count34 = 0;\n    my $count35\
    \ = 0;\n    my $count36 = 0;\n    my $count37 = 0;\n    my $count38 = 0;\n   \
    \ my $count39 = 0;\n    my $count40 = 0;\n    my $count41 = 0;\n    my $count42\
    \ = 0;\n    my $count43 = 0;\n    my $count44 = 0;\n    my $count45 = 0;\n   \
    \ my $count46 = 0;\n    my $count47 = 0;\n    my $count48 = 0;\n    my $count49\
    \ = 0;\n    my $count50 = 0;\n    my $count51 = 0;\n    my $count52 = 0;\n   \
    \ my $count53 = 0;\n    my $count54 = 0;\n    my $count55 = 0;\n    my $count56\
    \ = 0;", "    my $lst1_even = 0;\n    my $lst2_even = 0;\n    for my $i (@$lst1)\
    \ {\n        $lst1_even++ if $i % 2 == 0;\n    }\n    for my $i (@$lst2) {\n \
    \       $lst2_even++ if $i % 2 == 0;\n    }\n    return \"YES\" if $lst1_even\
    \ + $lst2_even >= @$lst1;\n    return \"NO\";\n}", "    my $odd_count = 0;\n \
    \   my $even_count = 0;\n    for my $i (@$lst1) {\n        if ($i % 2 == 0) {\n\
    \            $even_count++;\n        } else {\n            $odd_count++;\n   \
    \     }\n    }\n    for my $i (@$lst2) {\n        if ($i % 2 == 0) {\n       \
    \     $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \    }\n    if ($even_count > $odd_count) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my $lst1_odd = grep { $_ % 2 } @$lst1;\n\
    \    my $lst2_even = grep { $_ % 2 == 0 } @$lst2;\n    return $lst1_odd <= $lst2_even\
    \ ? \"YES\" : \"NO\";\n}", "    my $lst1_odd = grep { $_ % 2 } @$lst1;\n    my\
    \ $lst2_even = grep { $_ % 2 == 0 } @$lst2;\n    return $lst1_odd == $lst2_even\
    \ ? \"YES\" : \"NO\";\n}", "    my $even_count = 0;\n    my $odd_count = 0;\n\
    \    for my $i (@$lst1) {\n        if ($i % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    for my $i\
    \ (@$lst2) {\n        if ($i % 2 == 0) {\n            $even_count++;\n       \
    \ } else {\n            $odd_count++;\n        }\n    }\n    if ($even_count >\
    \ $odd_count) {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }\n}", "    my $lst1_odd_count = 0;\n    my $lst2_odd_count = 0;\n    for\
    \ my $i (@$lst1) {\n        $lst1_odd_count++ if $i % 2;\n    }\n    for my $i\
    \ (@$lst2) {\n        $lst2_odd_count++ if $i % 2;\n    }\n    return \"YES\"\
    \ if $lst1_odd_count == $lst2_odd_count;\n    return \"NO\";\n}", "    my $lst1_even\
    \ = 0;\n    my $lst2_even = 0;\n    for my $i (0..$#$lst1) {\n        if ($lst1->[$i]\
    \ % 2 == 0) {\n            $lst1_even++;\n        }\n    }\n    for my $i (0..$#$lst2)\
    \ {\n        if ($lst2->[$i] % 2 == 0) {\n            $lst2_even++;\n        }\n\
    \    }\n    if ($lst1_even == $#$lst1 + 1) {\n        return \"YES\";\n    } elsif\
    \ ($lst2_even == $#$lst2 + 1) {\n        return \"YES\";\n    } elsif ($lst1_even\
    \ + $lst2_even >= $#$lst1 + $#$lst2 + 2) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my $exchange = 0;\n    my $lst1_odd\
    \ = 0;\n    my $lst2_odd = 0;\n    my $lst1_even = 0;\n    my $lst2_even = 0;\n\
    \    for my $i (0..$#{$lst1}) {\n        if ($lst1->[$i] % 2 == 0) {\n       \
    \     $lst1_even++;\n        } else {\n            $lst1_odd++;\n        }\n \
    \   }\n    for my $i (0..$#{$lst2}) {\n        if ($lst2->[$i] % 2 == 0) {\n \
    \           $lst2_even++;\n        } else {\n            $lst2_odd++;\n      \
    \  }\n    }\n    if ($lst1_even > $lst2_odd) {\n        $exchange = 1;\n    }\
    \ elsif ($lst2_even > $lst1_odd) {\n        $exchange = 1;\n    }\n    if ($exchange)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $exchange = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst1)) {\n    \
    \    if ($lst1->[$i] % 2 == 1) {\n            my $j = 0;\n            while ($j\
    \ < scalar(@$lst2)) {\n                if ($lst2->[$j] % 2 == 0) {\n         \
    \           $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j] = $lst1->[$i];\n\
    \                    $exchange = 1;\n                    last;\n             \
    \   }\n                $j++;\n            }\n            if ($exchange == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        $i++;\n   \
    \ }\n    return \"YES\";\n}", "    my $lst1_odd = grep { $_ % 2 } @$lst1;\n  \
    \  my $lst2_even = grep { $_ % 2 == 0 } @$lst2;\n    return $lst1_odd == $lst2_even\
    \ ? \"YES\" : \"NO\";\n}", "    my $lst1_odd_count = 0;\n    my $lst2_odd_count\
    \ = 0;\n    foreach my $num (@$lst1) {\n        if ($num % 2 == 1) {\n       \
    \     $lst1_odd_count++;\n        }\n    }\n    foreach my $num (@$lst2) {\n \
    \       if ($num % 2 == 1) {\n            $lst2_odd_count++;\n        }\n    }\n\
    \    if ($lst1_odd_count == $lst2_odd_count) {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }\n}", "    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    foreach my $num (@$lst1) {\n        if ($num % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    foreach my $num (@$lst2) {\n        if ($num % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    if ($even_count >= scalar(@$lst1)) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $odd_count =\
    \ 0;\n    my $even_count = 0;\n    foreach my $num (@$lst1) {\n        if ($num\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    foreach my $num (@$lst2) {\n        if ($num % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    if ($even_count > $odd_count) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}", "    my $lst1_odd = 0;\n \
    \   my $lst2_odd = 0;\n    foreach my $num (@$lst1) {\n        if ($num % 2 ==\
    \ 1) {\n            $lst1_odd = 1;\n        }\n    }\n    foreach my $num (@$lst2)\
    \ {\n        if ($num % 2 == 1) {\n            $lst2_odd = 1;\n        }\n   \
    \ }\n    if ($lst1_odd == 1 && $lst2_odd == 1) {\n        return \"NO\";\n   \
    \ }\n    return \"YES\";\n}", "    my $lst1_odd_count = 0;\n    my $lst2_odd_count\
    \ = 0;\n    foreach my $num (@$lst1) {\n        $lst1_odd_count++ if $num % 2;\n\
    \    }\n    foreach my $num (@$lst2) {\n        $lst2_odd_count++ if $num % 2;\n\
    \    }\n    return $lst1_odd_count == $lst2_odd_count ? \"YES\" : \"NO\";\n}",
  "    my $lst1_even = 1;\n    my $lst2_even = 1;\n    my $lst1_odd = 1;\n    my $lst2_odd\
    \ = 1;\n    foreach my $i (@$lst1) {\n        if ($i % 2 == 0) {\n           \
    \ $lst1_even = 1;\n        } else {\n            $lst1_odd = 1;\n        }\n \
    \   }\n    foreach my $i (@$lst2) {\n        if ($i % 2 == 0) {\n            $lst2_even\
    \ = 1;\n        } else {\n            $lst2_odd = 1;\n        }\n    }\n    if\
    \ ($lst1_even == 1 && $lst2_odd == 1) {\n        return \"YES\";\n    } elsif\
    \ ($lst1_odd == 1 && $lst2_even == 1) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my $lst1_even = 0;\n    my $lst2_even\
    \ = 0;\n    for my $i (@$lst1) {\n        $lst1_even++ if $i % 2 == 0;\n    }\n\
    \    for my $i (@$lst2) {\n        $lst2_even++ if $i % 2 == 0;\n    }\n    return\
    \ \"YES\" if $lst1_even == @$lst1;\n    return \"YES\" if $lst2_even == @$lst2;\n\
    \    return \"YES\" if $lst1_even + $lst2_even == @$lst1 + @$lst2;\n    return\
    \ \"NO\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
