name: HumanEval_159_eat
language: pl
prompt: "# You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
  # you should return an array of [ total number of eaten carrots after your meals,\n\
  # the number of carrots left after your meals ]\n# if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
  # >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10,\
  \ 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n\
  # the number of carrots that you have eaten.\n# @need : integer\n# the number of\
  \ carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
  \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need\
  \ <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number,\
  \ $need, $remaining) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n  \
  \      if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $total = $number + $need;\n    if ($total > $remaining) {\n\
    \        $total = $remaining;\n    }\n    return [$total, $remaining - $total];\n\
    }", "    if ($remaining >= $need) {\n        return [$number + $need, $remaining\
    \ - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}",
  "    my $total = $number + $need;\n    my $left = $remaining - $need;\n    if ($left\
    \ < 0) {\n        $left = 0;\n    }\n    return [$total, $left];\n}", "    my\
    \ $total = $number + $need;\n    my $left = $remaining - $need;\n    if ($left\
    \ < 0) {\n        $left = 0;\n    }\n    return [$total, $left];\n}", "    my\
    \ $total = $number + $need;\n    my $left = $remaining - $need;\n    return [$total,\
    \ $left] if $left >= 0;\n    return [$total + $left, 0];\n}", "    my $eaten =\
    \ $number + $need;\n    my $left = $remaining - $need;\n    if ($left < 0) {\n\
    \        $eaten += $left;\n        $left = 0;\n    }\n    return [$eaten, $left];\n\
    }", "    my $eaten = $number + $need;\n    my $left = $remaining - $need;\n  \
    \  if ($left < 0) {\n        $eaten = $eaten + $left;\n        $left = 0;\n  \
    \  }\n    return [$eaten, $left];\n}", "    my $eaten = $number + $need;\n   \
    \ my $left = $remaining - $need;\n    if ($left < 0) {\n        $eaten = $eaten\
    \ + $left;\n        $left = 0;\n    }\n    return [$eaten, $left];\n}", "    my\
    \ $total = $number + $need;\n    my $left = $remaining - $need;\n    if ($left\
    \ < 0) {\n        $left = 0;\n    }\n    return [$total, $left];\n}", "    my\
    \ $total = $number + $need;\n    if ($total > $remaining) {\n        return [$remaining,\
    \ 0];\n    } else {\n        return [$total, $remaining - $total];\n    }\n}",
  "    my $total = $number + $need;\n    my $left = $remaining - $need;\n    if ($left\
    \ < 0) {\n        $left = 0;\n    }\n    return [$total, $left];\n}", "    return\
    \ [$number + $remaining, 0] if $remaining >= $need;\n    return [$number + $remaining,\
    \ $need - $remaining];\n}", "    my @result = ();\n    if ($remaining >= $need)\
    \ {\n        push(@result, $number + $need);\n        push(@result, $remaining\
    \ - $need);\n    } else {\n        push(@result, $number + $remaining);\n    \
    \    push(@result, 0);\n    }\n    return @result;\n}", "    my $total = $number\
    \ + $need;\n    my $left = $remaining - $need;\n    if ($left < 0) {\n       \
    \ $left = 0;\n    }\n    return [$total, $left];\n}", "    my $total = $number\
    \ + $need;\n    my $left = $remaining - $need;\n    if ($left < 0) {\n       \
    \ $left = 0;\n    }\n    return [$total, $left];\n}", "    my $total = $number\
    \ + $need;\n    my $left = $remaining - $need;\n    if ($left < 0) {\n       \
    \ $left = 0;\n    }\n    return [$total, $left];\n}", "    my $eaten = $number\
    \ + $need;\n    my $left = $remaining - $eaten;\n    if ($left < 0) {\n      \
    \  $eaten = $remaining + $number;\n        $left = 0;\n    }\n    return [$eaten,\
    \ $left];\n}", "    my $eaten = $number + $need;\n    my $left = $remaining -\
    \ $need;\n    if ($left < 0) {\n        $eaten = $eaten + $left;\n        $left\
    \ = 0;\n    }\n    return [$eaten, $left];\n}", "    my $total = $number + $need;\n\
    \    my $left = $remaining - $need;\n    if ($left < 0) {\n        $left = 0;\n\
    \    }\n    return [$total, $left];\n}", "    return [$number + $remaining, 0]\
    \ if $remaining >= $need;\n    return [$number + $remaining, $need - $remaining];\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
