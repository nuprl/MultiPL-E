name: HumanEval_11_string_xor
language: pl
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"\
  010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n\
  \        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i, 1);\n\
    \        $result .= ($x ^ $y);\n    }\n    return $result;\n}", "    my $r = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $xor = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $xor .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my $result = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $r = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $result = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $r = \"\";\n\
    \    for(my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "    my $result = \"\";\n    for (my $i = 0; $i <\
    \ length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $result;\n}", "    my $r = \"\";\n    for (my $i = 0; $i <\
    \ length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "    my $result = \"\";\n    for (my $i = 0; $i <\
    \ length($a); $i++) {\n        my $a_bit = substr($a, $i, 1);\n        my $b_bit\
    \ = substr($b, $i, 1);\n        $result .= $a_bit ^ $b_bit;\n    }\n    return\
    \ $result;\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $c\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $c = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $result = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    my $i;\n    for ($i = 0; $i < length($a); $i++) {\n        $result .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "  \
    \  my $r = \"\";\n    for(my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
