name: HumanEval_160_do_algebra
language: pl
prompt: "# Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n# the second list is a list of integers. Use the two given lists\
  \ to build the algebric \n# expression and return the evaluation of this expression.\n\
  # The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication\
  \ ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+',\
  \ '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\
  # Note:\n# The length of operator list is equal to the length of operand list minus\
  \ one.\n# Operand is a list of of non-negative integers.\n# Operator list has at\
  \ least one operator, and operand list has at least two operands.\nsub do_algebra\
  \ {\n    my($operator, $operand) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n\
  \        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  +\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"//\", \"*\"], [7, 3, 4]),8))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = $operand->[0];\n    for my $i (0..$#$operator) {\n\
    \        $result = $result->${\\$operator->[$i]}($operand->[$i+1]);\n    }\n \
    \   return $result;\n}", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        $result = eval \"$result $operator->[$i] $operand->[$i+1]\";\n  \
    \  }\n    return $result;\n}", "    my $result = $operand->[0];\n    for my $i\
    \ (0..$#$operator) {\n        $result = eval \"$result $operator->[$i] $operand->[$i+1]\"\
    ;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n    for my\
    \ $i (0..$#$operator) {\n        my $op = $operator->[$i];\n        my $op1 =\
    \ $operand->[$i+1];\n        if ($op eq '+') {\n            $result += $op1;\n\
    \        } elsif ($op eq '-') {\n            $result -= $op1;\n        } elsif\
    \ ($op eq '*') {\n            $result *= $op1;\n        } elsif ($op eq '//')\
    \ {\n            $result = int($result / $op1);\n        } elsif ($op eq '**')\
    \ {\n            $result **= $op1;\n        }\n    }\n    return $result;\n}",
  "    my $result = $operand->[0];\n    for my $i (0..$#$operator) {\n        my $op\
    \ = $operator->[$i];\n        my $next = $operand->[$i+1];\n        $result =\
    \ $result->$op($next);\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n       \
    \ my $num = $operand->[$i+1];\n        if ($op eq '+') {\n            $result\
    \ += $num;\n        } elsif ($op eq '-') {\n            $result -= $num;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $num;\n        } elsif ($op\
    \ eq '//') {\n            $result //= $num;\n        } elsif ($op eq '**') {\n\
    \            $result **= $num;\n        }\n    }\n    return $result;\n}", " \
    \   my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n        my\
    \ $op = $operator->[$i];\n        my $operand = $operand->[$i];\n        if ($op\
    \ eq '+') {\n            $result += $operand;\n        } elsif ($op eq '-') {\n\
    \            $result -= $operand;\n        } elsif ($op eq '*') {\n          \
    \  $result *= $operand;\n        } elsif ($op eq '//') {\n            $result\
    \ = int($result / $operand);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $operand;\n        }\n    }\n    return $result;\n}", "    my $result =\
    \ $operand->[0];\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $num = $operand->[$i+1];\n        if ($op eq '+') {\n            $result\
    \ += $num;\n        } elsif ($op eq '-') {\n            $result -= $num;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $num;\n        } elsif ($op\
    \ eq '//') {\n            $result = int($result / $num);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $num;\n        }\n    }\n    return $result;\n\
    }", "    my $result = $operand->[0];\n    for my $i (0..$#$operator) {\n     \
    \   my $op = $operator->[$i];\n        my $oper = $operand->[$i+1];\n        if\
    \ ($op eq '+') {\n            $result += $oper;\n        } elsif ($op eq '-')\
    \ {\n            $result -= $oper;\n        } elsif ($op eq '*') {\n         \
    \   $result *= $oper;\n        } elsif ($op eq '//') {\n            $result =\
    \ int($result / $oper);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $oper;\n        }\n    }\n    return $result;\n}", "    my $result = shift\
    \ @$operand;\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $num = $operand->[$i];\n        $result = $op eq '+' ? $result + $num\
    \ :\n                  $op eq '-' ? $result - $num :\n                  $op eq\
    \ '*' ? $result * $num :\n                  $op eq '/' ? int($result / $num) :\n\
    \                  $op eq '**' ? $result ** $num :\n                  die \"Unknown\
    \ operator: $op\";\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n       \
    \ my $num = $operand->[$i+1];\n        if ($op eq '+') {\n            $result\
    \ += $num;\n        } elsif ($op eq '-') {\n            $result -= $num;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $num;\n        } elsif ($op\
    \ eq '//') {\n            $result = int($result / $num);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $num;\n        }\n    }\n    return $result;\n\
    }", "    my $result = $operand->[0];\n    for my $i (1..$#$operand) {\n      \
    \  my $op = $operator->[$i-1];\n        my $n = $operand->[$i];\n        if ($op\
    \ eq '+') {\n            $result += $n;\n        } elsif ($op eq '-') {\n    \
    \        $result -= $n;\n        } elsif ($op eq '*') {\n            $result *=\
    \ $n;\n        } elsif ($op eq '//') {\n            $result = int($result / $n);\n\
    \        } elsif ($op eq '**') {\n            $result **= $n;\n        }\n   \
    \ }\n    return $result;\n}", "    my $result = shift @$operand;\n    while (@$operator)\
    \ {\n        my $op = shift @$operator;\n        my $next = shift @$operand;\n\
    \        if ($op eq '+') {\n            $result += $next;\n        } elsif ($op\
    \ eq '-') {\n            $result -= $next;\n        } elsif ($op eq '*') {\n \
    \           $result *= $next;\n        } elsif ($op eq '//') {\n            $result\
    \ = int($result / $next);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $next;\n        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        $result = eval \"$result $operator->[$i]\
    \ $operand->[$i+1]\";\n    }\n    return $result;\n}", "    my $result = shift\
    \ @$operand;\n    while (@$operator) {\n        my $op = shift @$operator;\n \
    \       my $num = shift @$operand;\n        $result = $op eq '+' ? $result + $num\
    \ :\n                  $op eq '-' ? $result - $num :\n                  $op eq\
    \ '*' ? $result * $num :\n                  $op eq '//' ? int($result / $num)\
    \ :\n                  $op eq '**' ? $result ** $num :\n                  die\
    \ \"Unknown operator: $op\";\n    }\n    return $result;\n}", "    my $result\
    \ = shift @$operand;\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $val = $operand->[$i];\n        if ($op eq '+') {\n            $result\
    \ += $val;\n        } elsif ($op eq '-') {\n            $result -= $val;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $val;\n        } elsif ($op\
    \ eq '//') {\n            $result //= $val;\n        } elsif ($op eq '**') {\n\
    \            $result **= $val;\n        }\n    }\n    return $result;\n}", " \
    \   my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n        my\
    \ $op = $operator->[$i];\n        my $num = $operand->[$i];\n        if ($op eq\
    \ '+') {\n            $result += $num;\n        } elsif ($op eq '-') {\n     \
    \       $result -= $num;\n        } elsif ($op eq '*') {\n            $result\
    \ *= $num;\n        } elsif ($op eq '//') {\n            $result = int($result\
    \ / $num);\n        } elsif ($op eq '**') {\n            $result **= $num;\n \
    \       }\n    }\n    return $result;\n}", "    my $result = shift @$operand;\n\
    \    while (@$operator) {\n        my $op = shift @$operator;\n        my $num\
    \ = shift @$operand;\n        if ($op eq '+') {\n            $result += $num;\n\
    \        } elsif ($op eq '-') {\n            $result -= $num;\n        } elsif\
    \ ($op eq '*') {\n            $result *= $num;\n        } elsif ($op eq '//')\
    \ {\n            $result //= $num;\n        } elsif ($op eq '**') {\n        \
    \    $result **= $num;\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = $operand->[0];\n    for my $i (0..$#$operator) {\n        $result = eval \"\
    $result $operator->[$i] $operand->[$i+1]\";\n    }\n    return $result;\n}", " \
    \   my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n        my\
    \ $op = $operator->[$i];\n        my $num = $operand->[$i];\n        if ($op eq\
    \ '+') {\n            $result += $num;\n        } elsif ($op eq '-') {\n     \
    \       $result -= $num;\n        } elsif ($op eq '*') {\n            $result\
    \ *= $num;\n        } elsif ($op eq '//') {\n            $result //= $num;\n \
    \       } elsif ($op eq '**') {\n            $result **= $num;\n        }\n  \
    \  }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
