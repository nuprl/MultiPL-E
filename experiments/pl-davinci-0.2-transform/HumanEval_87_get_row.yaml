name: HumanEval_87_get_row
language: pl
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
  \ 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n\
  # []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst,\
  \ $x) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
  \ 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
  \ [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]],\
  \ 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @result;\n    my $i = 0;\n\
    \    for my $row (@$lst) {\n        my $j = 0;\n        for my $elem (@$row) {\n\
    \            if ($elem == $x) {\n                push @result, [$i, $j];\n   \
    \         }\n            $j++;\n        }\n        $i++;\n    }\n    return sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n \
    \       for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for\
    \ my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n   \
    \             push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [] unless @result;\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n\
    \        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @result, [$i, $j];\n            }\n        }\n \
    \   }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res;\n    return @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res;\n    return \\@res;\n}", "    my @res;\n    for\
    \ my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n           \
    \ if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n        \
    \    }\n        }\n    }\n    return [] unless @res;\n    @res = sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return \\@res;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [] unless @result;\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [] unless @result;\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [] unless @result;\n    @result =\
    \ sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\\
    @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n    for my $i\
    \ (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n        }\n \
    \   }\n    return [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return \\@res;\n}", "    my @result;\n    for my $i\
    \ (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n        \
    \    }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n     \
    \   for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            push @result, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}",
  "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    return [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", " \
    \   my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [] unless @res;\n    @res = sort {\
    \ $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}",
  "    my @res;\n    for my $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n  \
    \      for my $j (0..$#{$row}) {\n            if ($row->[$j] == $x) {\n      \
    \          push @res, [$i, $j];\n            }\n        }\n    }\n    @res = sort\
    \ { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}",
  "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] }\
    \ @result;\n    return \\@result;\n}", "    my @result;\n    my $row = 0;\n  \
    \  for my $row_lst (@$lst) {\n        my $col = 0;\n        for my $elem (@$row_lst)\
    \ {\n            if ($elem == $x) {\n                push @result, [$row, $col];\n\
    \            }\n            $col++;\n        }\n        $row++;\n    }\n    @result\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return @result;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res;\n    return @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] } @res;\n  \
    \  my $i = 0;\n    while ($i < $#res) {\n        if ($res[$i][0] == $res[$i+1][0])\
    \ {\n            @res[$i, $i+1] = @res[$i+1, $i] if $res[$i][1] < $res[$i+1][1];\n\
    \        }\n        $i++;\n    }\n    return \\@res;\n}", "    my @result;\n \
    \   for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n \
    \           if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n\
    \    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    return [] unless @res;\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i\
    \ (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n        }\n \
    \   }\n    return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @result;\n    for my $i\
    \ (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            push\
    \ @result, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return []\
    \ unless @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @result;\n    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    @res = sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [] unless @res;\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n \
    \       for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "  \
    \  my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    return [] unless @res;\n    @res = sort { $a->[0] <=>\
    \ $b->[0] } @res;\n    @res = sort { $b->[1] <=> $a->[1] } @res;\n    return \\\
    @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j\
    \ (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n         \
    \       push @result, [$i, $j];\n            }\n        }\n    }\n    return []\
    \ unless @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @result;\n    return \\@result;\n}", "    my @result;\n    for my $i (0 ..\
    \ $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            push @result,\
    \ [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @result;\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}",
  "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return\
    \ \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for\
    \ my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n   \
    \             push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @result;\n    for my $row (0..$#{$lst}) {\n\
    \        for my $col (0..$#{$lst->[$row]}) {\n            if ($lst->[$row][$col]\
    \ == $x) {\n                push @result, [$row, $col];\n            }\n     \
    \   }\n    }\n    return [] unless @result;\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}", "   \
    \ my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @res;\n   \
    \ return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my\
    \ @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            push @result, [$i,\
    \ $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @result;\n\
    \    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @result;\n    for my $row (0..$#{$lst}) {\n        for my $col (0..$#{$lst->[$row]})\
    \ {\n            if ($lst->[$row][$col] == $x) {\n                push @result,\
    \ [$row, $col];\n            }\n        }\n    }\n    return [] unless @result;\n\
    \    @result = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n  \
    \  return \\@result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n\
    \        for my $j (0 .. $#{$lst->[$i]}) {\n            push @result, [$i, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @result;\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}",
  "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    return [] unless @res;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    @result = sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return \\@result;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n\
    \        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @result, [$i, $j];\n            }\n        }\n \
    \   }\n    return [] unless @result;\n    return [sort {$a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res;\n    return @res;\n}", "    my @res;\n    for\
    \ my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n           \
    \ if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n        \
    \    }\n        }\n    }\n    return [] unless @res;\n    @res = sort { $a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}", "    my\
    \ @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @res;\n    return \\@res;\n}", "    my @result;\n    for my $i (0 ..\
    \ $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            push @result,\
    \ [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res];\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @result;\n    my $i = 0;\n    foreach my $row (@$lst) {\n\
    \        my $j = 0;\n        foreach my $col (@$row) {\n            if ($col ==\
    \ $x) {\n                push @result, [$i, $j];\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    @result = sort { $a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n \
    \   for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n     \
    \       push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [] unless @result;\n    @result =\
    \ sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\\
    @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n    for my $i\
    \ (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n        }\n \
    \   }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n  \
    \  return @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n     \
    \   for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @result, [$i, $j];\n            }\n        }\n    }\n  \
    \  return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", " \
    \   my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n  \
    \  return \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n   \
    \     for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @result, [$i, $j];\n            }\n        }\n    }\n\
    \    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] }\
    \ @result;\n    return \\@result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    @result = sort\
    \ { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n\
    }", "    my @res;\n    my $row = 0;\n    for my $row_ref (@$lst) {\n        my\
    \ $col = 0;\n        for my $elem (@$row_ref) {\n            if ($elem == $x)\
    \ {\n                push @res, [$row, $col];\n            }\n            $col++;\n\
    \        }\n        $row++;\n    }\n    return sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n     \
    \   for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] }\
    \ @result;\n    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @res;\n    return \\@res;\n}", "    my @result;\n    for my $i (0\
    \ .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    my @sorted = sort { $a->[0] <=> $b->[0]\
    \ } @result;\n    my @result2;\n    my $prev_row = -1;\n    for my $i (0 .. $#sorted)\
    \ {\n        if ($sorted[$i][0] != $prev_row) {\n            @result2 = (@result2,\
    \ sort { $b->[1] <=> $a->[1] } @sorted[$i .. $#sorted]);\n            $prev_row\
    \ = $sorted[$i][0];\n        }\n    }\n    return \\@result2;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return @res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @res;\n   \
    \ @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return\
    \ \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n \
    \       for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    @result\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\\
    @result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n\
    \    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n      \
    \  for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", " \
    \   my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    my @sorted\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return \\@sorted;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my\
    \ $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n      \
    \          push @result, [$i, $j];\n            }\n        }\n    }\n    @result\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\\
    @result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @res;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @res;\n    return \\@res;\n}", "    my @result;\n    for my $i (0 ..\
    \ $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n\
    \    return @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n\
    \        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @result, [$i, $j];\n            }\n        }\n \
    \   }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    @result = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] }\
    \ @result;\n    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @result;\n    for my $i\
    \ (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n        \
    \    }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n     \
    \   for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [] unless @res;\n    @res = sort {\
    \ $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}",
  "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    return [] unless @res;\n    @res = sort { $a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}", "    my\
    \ @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", " \
    \   my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [sort {\
    \ $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @res;\n    my $i = 0;\n    for my $row (@$lst)\
    \ {\n        my $j = 0;\n        for my $elem (@$row) {\n            if ($elem\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return [] unless @res;\n    @res = sort\
    \ { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}",
  "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [] unless @res;\n    @res = sort {\
    \ $a->[0] <=> $b->[0] } @res;\n    my $i = 0;\n    while ($i < $#res) {\n    \
    \    if ($res[$i][0] == $res[$i+1][0]) {\n            splice @res, $i+1, 0, splice\
    \ @res, $i, 1;\n        } else {\n            $i++;\n        }\n    }\n    @res\
    \ = sort { $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return @res;\n}", "    my @result;\n    for my $i (0\
    \ .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res];\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] ==\
    \ $x) {\n                push @res, [$i, $j];\n            }\n        }\n    }\n\
    \    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", " \
    \   my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return @res;\n}", "    my @result;\n    for my $i (0\
    \ .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @result;\n    for\
    \ my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n       \
    \     if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n \
    \       for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ \\@res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] }\
    \ @result;\n    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @res;\n   \
    \ return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my\
    \ @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @result;\n    @result\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\\
    @result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @res, [$i, $j];\n            }\n        }\n    }\n    return [] unless\
    \ @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n\
    \    return \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n \
    \       for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @result, [$i, $j];\n            }\n        }\n    }\n\
    \    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    return \\@res;\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @res;\n    return \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res;\n    return @res;\n}", "    my @result;\n    for\
    \ my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n       \
    \     if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }", "    my @res;\n    my $i = 0;\n    for my $row (@$lst) {\n        my $j =\
    \ 0;\n        for my $elem (@$row) {\n            if ($elem == $x) {\n       \
    \         push @res, [$i, $j];\n            }\n            $j++;\n        }\n\
    \        $i++;\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @res;\n    return @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "  \
    \  my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless @res;\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @res;\n    return \\@res;\n}", "    my @res;\n    for\
    \ my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n           \
    \ if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n        \
    \    }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @res;\n    return @res;\n}", "    my @result;\n    for my $i (0 ..\
    \ $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [] unless @result;\n    @result = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result;\n    return \\@result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res];\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @res, [$i, $j];\n            }\n        }\n    }\n    @res\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
