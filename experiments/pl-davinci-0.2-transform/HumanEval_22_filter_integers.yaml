name: HumanEval_22_filter_integers
language: pl
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
  \ 2, 3]\nsub filter_integers {\n    my($values) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9,\
  \ \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return [grep { Scalar::Util::looks_like_number($_) } @$values];\n\
    }", "    return [grep { Scalar::Util::looks_like_number($_) && int($_) == $_ }\
    \ @$values];\n}", "    return [\n        grep {\n            is_integer($_)\n\
    \        } @$values\n    ];\n}", "    return [ grep { is_integer($_) } @$values\
    \ ];\n}", "    return [ grep { is_integer($_) } @$values ];\n}", "    my @integers\
    \ = grep { is_integer($_) } @$values;\n    return \\@integers;\n}", "    return\
    \ [ grep { is_integer($_) } @$values ];\n}", "    my @integers = grep { is_integer($_)\
    \ } @$values;\n    return \\@integers;\n}", "    return [grep { Scalar::Util::looks_like_number($_)\
    \ } @$values];\n}", "    my @result = grep { is_integer($_) } @$values;\n    return\
    \ \\@result;\n}", "    return [ grep { is_integer($_) } @$values ];\n}", "   \
    \ return [ grep { is_integer($_) } @$values ];\n}", "    return [grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @$values];\n}", "    return [ grep { is_integer($_) } @$values\
    \ ];\n}", "    return [ grep { Scalar::Util::looks_like_number($_) && int($_)\
    \ == $_ } @$values ];\n}", "    return [ grep { is_integer($_) } @$values ];\n\
    }", "    return [ grep { is_integer($_) } @$values ];\n}", "    return [ grep\
    \ { is_integer($_) } @$values ];\n}", "    return [ grep { is_integer($_) } @$values\
    \ ];\n}", "    my @integers = grep { is_integer($_) } @$values;\n    return \\\
    @integers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
