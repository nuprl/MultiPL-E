name: HumanEval_24_largest_divisor
language: pl
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n\
  \        if(eq_deeply($candidate->(3),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n\
    \            return $i;\n        }\n        $i++;\n    }\n    return 1;\n}", " \
    \   my $divisor = $n - 1;\n    while ($divisor > 0) {\n        if ($n % $divisor\
    \ == 0) {\n            return $divisor;\n        }\n        $divisor--;\n    }\n\
    }", "    my $largest = 0;\n    for my $i (1..$n-1) {\n        if ($n % $i == 0)\
    \ {\n            $largest = $i;\n        }\n    }\n    return $largest;\n}", " \
    \   my $max = int($n / 2);\n    for my $i (reverse(2..$max)) {\n        return\
    \ $i if $n % $i == 0;\n    }\n    return 1;\n}", "    my $i = $n - 1;\n    while\
    \ ($i > 0) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n\
    \        $i--;\n    }\n}", "    my $i = $n - 1;\n    while ($i > 0) {\n      \
    \  return $i if $n % $i == 0;\n        $i--;\n    }\n}", "    my $i = $n - 1;\n\
    \    while ($i > 0) {\n        return $i if $n % $i == 0;\n        $i--;\n   \
    \ }\n}", "    my $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n\
    \            return $i;\n        }\n        $i++;\n    }\n    return 1;\n}", " \
    \   my $largest = 1;\n    for my $i (2..$n-1) {\n        if ($n % $i == 0) {\n\
    \            $largest = $i;\n        }\n    }\n    return $largest;\n}", "   \
    \ my $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n           \
    \ return $i;\n        }\n        $i++;\n    }\n    return 1;\n}", "    my $i =\
    \ 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            return $i;\n\
    \        }\n        $i++;\n    }\n    return 1;\n}", "    my $i = $n - 1;\n  \
    \  while ($i > 0) {\n        if ($n % $i == 0) {\n            return $i;\n   \
    \     }\n        $i--;\n    }\n}", "    my $i = $n - 1;\n    while ($i > 0) {\n\
    \        return $i if $n % $i == 0;\n        $i--;\n    }\n}", "    my $largest\
    \ = 1;\n    for (my $i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n  \
    \          $largest = $i;\n        }\n    }\n    return $largest;\n}", "    my\
    \ $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            return\
    \ $i;\n        }\n        $i++;\n    }\n    return 1;\n}", "    my $i = $n - 1;\n\
    \    while ($i > 0) {\n        if ($n % $i == 0) {\n            return $i;\n \
    \       }\n        $i--;\n    }\n}", "    my $i = 2;\n    while ($i < $n) {\n\
    \        if ($n % $i == 0) {\n            return $i;\n        }\n        $i++;\n\
    \    }\n    return 1;\n}", "    my $i = $n - 1;\n    while ($i > 0) {\n      \
    \  if ($n % $i == 0) {\n            return $i;\n        }\n        $i--;\n   \
    \ }\n}", "    my $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n\
    \            return $i;\n        }\n        $i++;\n    }\n    return 1;\n}", " \
    \   my $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n         \
    \   return $i;\n        }\n        $i++;\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
