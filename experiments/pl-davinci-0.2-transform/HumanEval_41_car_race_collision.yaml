name: HumanEval_41_car_race_collision
language: pl
prompt: "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars\
  \ are driving left to right;  simultaneously, a different set of n cars\n# are driving\
  \ right to left.   The two sets of cars start out being very far from\n# each other.\
  \  All cars move in the same speed.  Two cars are said to collide\n# when a car\
  \ that's moving left to right hits a car that's moving right to left.\n# However,\
  \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
  # in their trajectory as if they did not collide.\n# This function outputs the number\
  \ of such collisions.\nsub car_race_collision {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n\
  \        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(3),9)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $n; $j++) {\n            if ($i == $j) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $collisions\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n && $j < $n) {\n   \
    \     if ($i == $j) {\n            $collisions++;\n            $i++;\n       \
    \     $j++;\n        } elsif ($i < $j) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $collisions;\n}", "    my $collisions\
    \ = 0;\n    my $left_to_right = 0;\n    my $right_to_left = 0;\n    my $left_to_right_pos\
    \ = 0;\n    my $right_to_left_pos = 0;\n    my $left_to_right_speed = 1;\n   \
    \ my $right_to_left_speed = 1;\n    my $left_to_right_pos_array = [];\n    my\
    \ $right_to_left_pos_array = [];\n    for (my $i = 0; $i < $n; $i++) {\n     \
    \   $left_to_right_pos_array->[$i] = $i;\n        $right_to_left_pos_array->[$i]\
    \ = $i;\n    }\n    while ($left_to_right < $n && $right_to_left < $n) {\n   \
    \     $left_to_right_pos = $left_to_right_pos_array->[$left_to_right];\n     \
    \   $right_to_left_pos = $right_to_left_pos_array->[$right_to_left];\n       \
    \ if ($left_to_right_pos < $right_to_left_pos) {\n            $left_to_right_pos\
    \ += $left_to_right_speed;\n            $left_to_right_pos_array->[$left_to_right]\
    \ = $left_to_right_pos;\n            $left_to_right++;\n        } elsif ($left_to_right_pos\
    \ > $right_to_left_pos) {\n            $right_to_left_pos += $right_to_left_speed;\n\
    \            $right_to_left_pos_array->[$right_to_left] = $right_to_left_pos;\n\
    \            $right_to_left++;\n        } else {\n            $collisions++;\n\
    \            $left_to_right_pos += $left_to_right_speed;\n            $left_to_right_pos_array->[$left_to_right]\
    \ = $left_to_right_pos;\n            $left_to_right++;\n            $right_to",
  "    my $num_collisions = 0;\n    my $left_to_right_cars = {};\n    my $right_to_left_cars\
    \ = {};\n    for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i}\
    \ = 1;\n        $right_to_left_cars->{$n - $i - 1} = 1;\n    }\n    my $left_to_right_car_positions\
    \ = [0..$n-1];\n    my $right_to_left_car_positions = [reverse(0..$n-1)];\n  \
    \  my $left_to_right_car_speeds = [1..$n];\n    my $right_to_left_car_speeds =\
    \ [reverse(1..$n)];\n    my $time = 0;\n    while (scalar(keys(%$left_to_right_cars))\
    \ > 0 && scalar(keys(%$right_to_left_cars)) > 0) {\n        $time++;\n       \
    \ for (my $i = 0; $i < $n; $i++) {\n            if (exists($left_to_right_cars->{$i}))\
    \ {\n                $left_to_right_car_positions->[$i] += $left_to_right_car_speeds->[$i];\n\
    \                if (exists($right_to_left_cars->{$left_to_right_car_positions->[$i]}))\
    \ {\n                    $num_collisions++;\n                    delete($left_to_right_cars->{$i});\n\
    \                    delete($right_to_left_cars->{$left_to_right_car_positions->[$i]});\n\
    \                }\n            }\n            if (exists($right_to_left_cars->{$i}))\
    \ {\n                $right_to_left_car_positions->[$i] -= $right_to_left_car_speeds->[$i];\n\
    \                if (exists($left_to_right_cars->{$right_to_left_car_positions->[$i]}))\
    \ {", "    my $collisions = 0;\n    my $left_to_right_cars = 0;\n    my $right_to_left_cars\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars++;\n\
    \        $right_to_left_cars++;\n        $collisions += $left_to_right_cars *\
    \ $right_to_left_cars;\n    }\n    return $collisions;\n}", "    my $collisions\
    \ = 0;\n    my $left_to_right = 0;\n    my $right_to_left = 0;\n    my $left_to_right_cars\
    \ = {};\n    my $right_to_left_cars = {};\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right_cars->{$left_to_right} = 1;\n        $right_to_left_cars->{$right_to_left}\
    \ = 1;\n        $left_to_right += 1;\n        $right_to_left -= 1;\n    }\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        if (exists $left_to_right_cars->{$right_to_left})\
    \ {\n            $collisions += 1;\n        }\n        $right_to_left += 1;\n\
    \    }\n    return $collisions;\n}", "    my $collisions = 0;\n    my $left_to_right\
    \ = 0;\n    my $right_to_left = 0;\n    for (my $i = 0; $i < $n; $i++) {\n   \
    \     $left_to_right += $i;\n        $right_to_left += $n - $i - 1;\n        $collisions\
    \ += $left_to_right * $right_to_left;\n    }\n    return $collisions;\n}", " \
    \   my $collisions = 0;\n    my $left_to_right_cars = {};\n    my $right_to_left_cars\
    \ = {};\n    for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i}\
    \ = $i;\n        $right_to_left_cars->{$i} = $n - $i - 1;\n    }\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n       \
    \     if ($left_to_right_cars->{$i} == $right_to_left_cars->{$j}) {\n        \
    \        $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }", "    my $collisions = 0;\n    my $left_to_right = 0;\n    my $right_to_left\
    \ = 0;\n    while ($left_to_right < $n && $right_to_left < $n) {\n        if ($left_to_right\
    \ == $right_to_left) {\n            $collisions++;\n        }\n        $left_to_right++;\n\
    \        $right_to_left++;\n    }\n    return $collisions;\n}", "    my $collisions\
    \ = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        $collisions += $i;\n \
    \       $i++;\n    }\n    return $collisions;\n}", "    my $collisions = 0;\n\
    \    my $left_to_right_cars = 0;\n    my $right_to_left_cars = 0;\n    my $left_to_right_cars_in_front\
    \ = 0;\n    my $right_to_left_cars_in_front = 0;\n    my $left_to_right_cars_behind\
    \ = 0;\n    my $right_to_left_cars_behind = 0;\n    my $left_to_right_cars_in_front_of_right_to_left_cars\
    \ = 0;\n    my $right_to_left_cars_in_front_of_left_to_right_cars = 0;\n    my\
    \ $left_to_right_cars_behind_right_to_left_cars = 0;\n    my $right_to_left_cars_behind_left_to_right_cars\
    \ = 0;\n    my $left_to_right_cars_in_front_of_right_to_left_cars_behind_left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars_in_front_of_left_to_right_cars_behind_right_to_left_cars\
    \ = 0;\n    my $left_to_right_cars_behind_right_to_left_cars_in_front_of_left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars_behind_left_to_right_cars_in_front_of_right_to_left_cars\
    \ = 0;\n    my $left_to_right_cars_in_front_of_right_to_left_cars_behind_left_to_right_cars_in_front_of_right_to_left_cars\
    \ = 0;\n    my $right_to_left_cars_in_front_of_left_to_right_cars_behind_right_to_left_cars_in_front_of_left_to_right_cars\
    \ = 0;\n    my $left_to_right_cars_behind_right_to_left_cars_in_front_of_left_to_right_cars_behind_right_to_left_cars\
    \ = 0", "    my $num_collisions = 0;\n    my $num_left_to_right = $n;\n    my\
    \ $num_right_to_left = $n;\n    my $left_to_right_pos = 0;\n    my $right_to_left_pos\
    \ = 0;\n    while ($num_left_to_right > 0 && $num_right_to_left > 0) {\n     \
    \   if ($left_to_right_pos < $right_to_left_pos) {\n            $left_to_right_pos++;\n\
    \            $num_left_to_right--;\n        } else {\n            $right_to_left_pos++;\n\
    \            $num_right_to_left--;\n            $num_collisions++;\n        }\n\
    \    }\n    return $num_collisions;\n}", "    my $collisions = 0;\n    my $i =\
    \ 0;\n    while ($i < $n) {\n        my $j = 0;\n        while ($j < $n) {\n \
    \           if ($i == $j) {\n                $j++;\n                next;\n  \
    \          }\n            $collisions++ if ($i < $j);\n            $j++;\n   \
    \     }\n        $i++;\n    }\n    return $collisions;\n}", "    my $collisions\
    \ = 0;\n    my $left_to_right_cars = {};\n    my $right_to_left_cars = {};\n \
    \   for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i} = $i;\n\
    \        $right_to_left_cars->{$i} = $n - $i - 1;\n    }\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($left_to_right_cars->{$i}\
    \ == $right_to_left_cars->{$j}) {\n                $collisions++;\n          \
    \  }\n        }\n    }\n    return $collisions;\n}", "    my $collisions = 0;\n\
    \    my $left_to_right_cars = 0;\n    my $right_to_left_cars = 0;\n    my $left_to_right_car_positions\
    \ = {};\n    my $right_to_left_car_positions = {};\n    my $left_to_right_car_positions_sorted\
    \ = [];\n    my $right_to_left_car_positions_sorted = [];\n    my $left_to_right_car_positions_sorted_index\
    \ = 0;\n    my $right_to_left_car_positions_sorted_index = 0;\n    my $left_to_right_car_positions_sorted_index_max\
    \ = 0;\n    my $right_to_left_car_positions_sorted_index_max = 0;\n    my $left_to_right_car_positions_sorted_index_max_prev\
    \ = 0;\n    my $right_to_left_car_positions_sorted_index_max_prev = 0;\n    my\
    \ $left_to_right_car_positions_sorted_index_max_prev_prev = 0;\n    my $right_to_left_car_positions_sorted_index_max_prev_prev\
    \ = 0;\n    my $left_to_right_car_positions_sorted_index_max_prev_prev_prev =\
    \ 0;\n    my $right_to_left_car_positions_sorted_index_max_prev_prev_prev = 0;\n\
    \    my $left_to_right_car_positions_sorted_index_max_prev_prev_prev_prev = 0;\n\
    \    my $right_to_left_car_positions_sorted_index_max_prev_prev_prev_prev = 0;\n\
    \    my $left_to_right_car_positions_sorted_index_max_prev_prev_prev_prev_prev\
    \ = 0;\n    my $right_to_left_car_positions_sorted_index_max_prev_prev_prev_prev_prev\
    \ = 0;\n    my $left_to_right_car", "    my $collisions = 0;\n    my $left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars = 0;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        $left_to_right_cars++;\n        $right_to_left_cars++;\n        $collisions\
    \ += $left_to_right_cars * $right_to_left_cars;\n    }\n    return $collisions;\n\
    }", "    my $collisions = 0;\n    my $left_to_right_cars = 0;\n    my $right_to_left_cars\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if ($left_to_right_cars\
    \ == $right_to_left_cars) {\n            $collisions++;\n        }\n        $left_to_right_cars++;\n\
    \        $right_to_left_cars++;\n    }\n    return $collisions;\n}", "    my $collisions\
    \ = 0;\n    my @left_to_right = (1..$n);\n    my @right_to_left = reverse(1..$n);\n\
    \    while (@left_to_right && @right_to_left) {\n        my $left_car = shift\
    \ @left_to_right;\n        my $right_car = shift @right_to_left;\n        if ($left_car\
    \ < $right_car) {\n            unshift @right_to_left, $right_car;\n         \
    \   $collisions++;\n        } else {\n            unshift @left_to_right, $left_car;\n\
    \        }\n    }\n    return $collisions;\n}", "    my $collisions = 0;\n   \
    \ for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n\
    \            if ($i < $j) {\n                $collisions++;\n            }\n \
    \       }\n    }\n    return $collisions;\n}", "    my $collisions = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    while ($i < $n && $j < $n) {\n        if ($i <\
    \ $j) {\n            $i++;\n        } else {\n            $j++;\n        }\n \
    \       $collisions++;\n    }\n    return $collisions;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
