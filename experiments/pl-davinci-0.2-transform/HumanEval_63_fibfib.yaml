name: HumanEval_63_fibfib
language: pl
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n  \
  \  my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n\
  \        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $fibfib = 0;\n    my @fibfibs = (0, 0, 1);\n    for (my $i =\
    \ 3; $i <= $n; $i++) {\n        $fibfibs[$i] = $fibfibs[$i-1] + $fibfibs[$i-2]\
    \ + $fibfibs[$i-3];\n    }\n    return $fibfibs[$n];\n}", "    return 0 if $n\
    \ < 1;\n    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }", "    my($a, $b, $c, $i);\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $a\
    \ + $b + $c;\n    }\n    return $c;\n}", "    my @fibfib = (0, 0, 1);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my @fibfib = (0,\
    \ 0, 1);\n    return $fibfib[$n] if $n < 3;\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n  \
    \  }\n    return $fibfib[$n];\n}", "    my @fibfib = (0, 0, 1);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my($a, $b, $c, $d);\n\
    \    $a = 0;\n    $b = 0;\n    $c = 1;\n    $d = 0;\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n    }\n    return $d;\n}", "    my @fibfib = (0, 0, 1);\n \
    \   for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my @fibfib = (0,\
    \ 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    if\
    \ ($n == 0) {\n        return 0;\n    } elsif ($n == 1) {\n        return 0;\n\
    \    } elsif ($n == 2) {\n        return 1;\n    } else {\n        return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n    }\n}", "    my @fibfib = (0, 0, 1);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my @fibfib = (0,\
    \ 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return\
    \ 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my $a = 0;\n    my $b\
    \ = 0;\n    my $c = 1;\n    my $d = 0;\n    for (my $i = 2; $i <= $n; $i++) {\n\
    \        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c =\
    \ $d;\n    }\n    return $d;\n}", "    my $a = 0;\n    my $b = 0;\n    my $c =\
    \ 1;\n    my $d = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $d = $a +\
    \ $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return\
    \ $d;\n}", "    my @fibfib = (0, 0, 1);\n    for (3..$n) {\n        $fibfib[$_]\
    \ = $fibfib[$_-1] + $fibfib[$_-2] + $fibfib[$_-3];\n    }\n    return $fibfib[$n];\n\
    }", "    my $a = 0;\n    my $b = 0;\n    my $c = 1;\n    my $d = 0;\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n   \
    \     $b = $c;\n        $c = $d;\n    }\n    return $d;\n}", "    return 0 if\
    \ $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my @fibfib = (0, 0, 1);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my($a, $b, $c, $i);\n\
    \    $a = 0;\n    $b = 0;\n    $c = 1;\n    for($i = 2; $i <= $n; $i++) {\n  \
    \      $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n    }\n    return\
    \ $c;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
