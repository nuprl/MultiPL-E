name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/\
    \ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my $len = length($txt);\n    if ($len == 0) {\n        return \"\";\n    }\n\
    \    my $last_char = substr($txt, $len - 1, 1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($len == 1) {\n            return 1;\n        }\n        my $second_last_char\
    \ = substr($txt, $len - 2, 1);\n        if ($second_last_char =~ /[a-zA-Z]/) {\n\
    \            return \"\";\n        }\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/\
    \ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my $last_char = substr($txt, -1);\n    my $result = \"\";\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        $result = 1;\n    }\n    return $result;\n}", "  \
    \  my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n  \
    \      return 1;\n    }\n    return \"\";\n}", "    my $last_char = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    if ($txt =~ /\\w\\s$/) {\n        return\
    \ \"\";\n    }\n    if ($txt =~ /\\w$/) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my $ret = \"\";\n  \
    \  if ($txt =~ /\\w\\s*$/) {\n        $ret = 1;\n    }\n    return $ret;\n}",
  "    return $txt =~ /\\w\\s$/ ? 1 : \"\";\n}", "    my $last_char = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my $last_char = substr($txt, -1);\n  \
    \  my $last_char_is_a_letter = $last_char =~ /[a-zA-Z]/;\n    my $last_char_is_a_part_of_a_word\
    \ = $txt =~ /\\w\\s$/;\n    if ($last_char_is_a_letter && !$last_char_is_a_part_of_a_word)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my $last_char = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n \
    \   if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my @chars = split(//, $txt);\n    my $last_char = $chars[-1];\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    if ($txt =~ /\\w\\s$/) {\n        return 1;\n    }\n    else {\n \
    \       return \"\";\n    }\n}", "    my $last_char = substr($txt, -1);\n    if\
    \ ($last_char =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\";\n}",
  "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char\
    \ !~ /\\w/) {\n        return 1;\n    }\n    return \"\";\n}", "    if (length($txt)\
    \ == 0) {\n        return \"\";\n    }\n    my $last_char = substr($txt, length($txt)\
    \ - 1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        my $last_word = substr($txt,\
    \ rindex($txt, \" \") + 1);\n        if (length($last_word) == 1) {\n        \
    \    return 1;\n        }\n    }\n    return \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
