name: HumanEval_0_has_close_elements
language: pl
prompt: "# Check if in given list of numbers, are any two numbers closer to each other\
  \ than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\
  \"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements\
  \ {\n    my($numbers, $threshold) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.95),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1,\
  \ 2.2, 3.1, 4.1, 5.1], 0.5),\"\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$numbers;\n    for (my $i = 0; $i < $n; $i++) {\n    \
    \    for (my $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my $i = 0;\n    while ($i < @$numbers\
    \ - 1) {\n        my $j = $i + 1;\n        while ($j < @$numbers) {\n        \
    \    if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n              \
    \  return 1;\n            }\n            $j++;\n        }\n        $i++;\n   \
    \ }\n    return 0;\n}", "    my $i = 0;\n    my $j = 1;\n    while ($i < @$numbers)\
    \ {\n        while ($j < @$numbers) {\n            if (abs($numbers->[$i] - $numbers->[$j])\
    \ < $threshold) {\n                return 1;\n            }\n            $j++;\n\
    \        }\n        $i++;\n        $j = $i + 1;\n    }\n    return 0;\n}", " \
    \   my $n = @$numbers;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i] - $numbers->[$j])\
    \ < $threshold) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = scalar(@$numbers);\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my $i = 0;\n    my $j = 1;\n    while\
    \ ($i < @$numbers) {\n        while ($j < @$numbers) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \            $j++;\n        }\n        $i++;\n        $j = $i + 1;\n    }\n  \
    \  return 0;\n}", "    my $n = @$numbers;\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if(abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my $n = @$numbers;\n    for(my $i =\
    \ 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n    \
    \        if(abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n           \
    \     return 1;\n            }\n        }\n    }\n    return 0;\n}", "    my $n\
    \ = scalar(@$numbers);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i] - $numbers->[$j])\
    \ < $threshold) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $i = 0;\n    my $j = 1;\n    my $len = scalar(@$numbers);\n\
    \    while ($i < $len) {\n        while ($j < $len) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \            $j++;\n        }\n        $i++;\n        $j = $i + 1;\n    }\n  \
    \  return 0;\n}", "    my $i = 0;\n    while ($i < $#{$numbers}) {\n        my\
    \ $j = $i + 1;\n        while ($j <= $#{$numbers}) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \            $j++;\n        }\n        $i++;\n    }\n    return 0;\n}", "    my\
    \ $n = scalar(@$numbers);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $threshold) {\n                return 1;\n          \
    \  }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$numbers);\n \
    \   for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n  \
    \              return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    my $n = @$numbers;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j\
    \ = $i + 1; $j < $n; $j++) {\n            if(abs($numbers->[$i] - $numbers->[$j])\
    \ < $threshold) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = @$numbers;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my $i = 0;\n    while ($i < @$numbers)\
    \ {\n        my $j = $i + 1;\n        while ($j < @$numbers) {\n            if\
    \ (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n                return\
    \ 1;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ 0;\n}", "    my $n = @$numbers;\n    for (my $i = 0; $i < $n - 1; $i++) {\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i]\
    \ - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my $n = @$numbers;\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n           \
    \     return 1;\n            }\n        }\n    }\n    return 0;\n}", "    my $n\
    \ = @$numbers;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            if (abs($numbers->[$i] - $numbers->[$j])\
    \ < $threshold) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $min_diff = $threshold;\n    my $min_diff_index =\
    \ -1;\n    for(my $i = 0; $i < @$numbers; $i++) {\n        for(my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if($diff < $min_diff) {\n                $min_diff = $diff;\n   \
    \             $min_diff_index = $i;\n            }\n        }\n    }\n    return\
    \ $min_diff_index;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
