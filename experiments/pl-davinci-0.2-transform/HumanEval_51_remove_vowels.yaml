name: HumanEval_51_remove_vowels
language: pl
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n\
  # \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\"\
  )\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n   \
  \ my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"\
  ),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"\
  ),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    my $result\
    \ = \"\";\n    my $vowels = \"aeiouAEIOU\";\n    for (my $i = 0; $i < length($text);\
    \ $i++) {\n        my $char = substr($text, $i, 1);\n        if (index($vowels,\
    \ $char) == -1) {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~\
    \ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~\
    \ s/[aeiou]//g;\n    return $text;\n}", "    return $text =~ s/[aeiou]//gi;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
