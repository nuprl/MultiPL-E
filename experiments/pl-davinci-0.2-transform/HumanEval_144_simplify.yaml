name: HumanEval_144_simplify
language: pl
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns True if x * n evaluates to a whole number and False\n\
  # otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n# <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n# You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n\
  # >>> simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n#\
  \ \"\"\nsub simplify {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n\
  \        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\"\
  , \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\"\
  , \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\"\
  , \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\"\
  , \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\"\
  , \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my($x_numerator, $x_denominator) = split(/\\//, $x);\n    my($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator;\n\
    \    my $denominator = $x_denominator * $n_denominator;\n    if ($result % $denominator\
    \ == 0) {\n        return $result / $denominator;\n    }\n    return \"\";\n}",
  "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num, $n_den) = split /\\//,\
    \ $n;\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n    return $result\
    \ =~ /^\\d+$/ ? $result : '';\n}", "    my($x_num, $x_den) = split '/', $x;\n\
    \    my($n_num, $n_den) = split '/', $n;\n    my $result = $x_num * $n_num;\n\
    \    my $denominator = $x_den * $n_den;\n    return $result % $denominator ==\
    \ 0 ? 1 : '';\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num,\
    \ $n_den) = split /\\//, $n;\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n\
    \    return $result =~ /^\\d+$/ ? $result : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split(/\\//, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n\
    \    my $result = $x_numerator * $n_numerator;\n    my $denominator = $x_denominator\
    \ * $n_denominator;\n    if ($result % $denominator == 0) {\n        return $result\
    \ / $denominator;\n    }\n    return \"\";\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $result = $x_num\
    \ * $n_num / ($x_den * $n_den);\n    return $result =~ /^\\d+$/ ? $result : \"\
    \";\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num, $n_den) =\
    \ split /\\//, $n;\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n  \
    \  return $result =~ /\\.0$/ ? 1 : '';\n}", "    my($xn, $xn_numerator, $xn_denominator)\
    \ = simplify_fraction($x, $n);\n    return $xn_numerator % $xn_denominator ==\
    \ 0 ? $xn_numerator / $xn_denominator : \"\";\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \    return $result =~ /^\\d+$/ ? $result : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n\
    \    my $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \    return $result =~ /\\A\\d+\\z/ ? $result : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator / $x_denominator\
    \ / $n_denominator;\n    return $result =~ /^\\d+$/ ? $result : \"\";\n}", " \
    \   my($x_numerator, $x_denominator) = split(/\\//, $x);\n    my($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator;\n\
    \    if ($result % $x_denominator == 0) {\n        return $result / $x_denominator;\n\
    \    }\n    return \"\";\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num,\
    \ $n_den) = split('/', $n);\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n\
    \    return $result =~ /^\\d+$/ ? $result : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split(/\\//, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n\
    \    my $result = $x_numerator * $n_numerator;\n    my $denominator = $x_denominator\
    \ * $n_denominator;\n    if ($result % $denominator == 0) {\n        return $result\
    \ / $denominator;\n    }\n    return \"\";\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \    return $result =~ /^\\d+$/ ? $result : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split(/\\//, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n\
    \    my $result = $x_numerator * $n_numerator;\n    my $denominator = $x_denominator\
    \ * $n_denominator;\n    if ($result % $denominator == 0) {\n        return $result\
    \ / $denominator;\n    }\n    return \"\";\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $result = $x_num\
    \ * $n_num / ($x_den * $n_den);\n    return $result =~ /^\\d+$/ ? $result : \"\
    \";\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num, $n_den) =\
    \ split /\\//, $n;\n    my $num = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n\
    \    my $gcd = gcd($num, $den);\n    $num /= $gcd;\n    $den /= $gcd;\n    return\
    \ $num == $den ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split(/\\\
    //, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $result\
    \ = $x_numerator * $n_numerator;\n    if ($result % $x_denominator == 0) {\n \
    \       return $result / $x_denominator;\n    }\n    return \"\";\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator / ($x_denominator\
    \ * $n_denominator);\n    return $result =~ /^\\d+$/ ? $result : \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
