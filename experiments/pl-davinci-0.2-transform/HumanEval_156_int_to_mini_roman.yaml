name: HumanEval_156_int_to_mini_roman
language: pl
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\
  \n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n\
  \        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"\
  ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"\
  cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"\
  xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"\
  xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"\
  xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"\
  dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"\
  m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = '';\n    my $remainder = $number;\n    while ($remainder\
    \ > 0) {\n        if ($remainder >= 1000) {\n            $result .= 'm';\n   \
    \         $remainder -= 1000;\n        } elsif ($remainder >= 900) {\n       \
    \     $result .= 'cm';\n            $remainder -= 900;\n        } elsif ($remainder\
    \ >= 500) {\n            $result .= 'd';\n            $remainder -= 500;\n   \
    \     } elsif ($remainder >= 400) {\n            $result .= 'cd';\n          \
    \  $remainder -= 400;\n        } elsif ($remainder >= 100) {\n            $result\
    \ .= 'c';\n            $remainder -= 100;\n        } elsif ($remainder >= 90)\
    \ {\n            $result .= 'xc';\n            $remainder -= 90;\n        } elsif\
    \ ($remainder >= 50) {\n            $result .= 'l';\n            $remainder -=\
    \ 50;\n        } elsif ($remainder >= 40) {\n            $result .= 'xl';\n  \
    \          $remainder -= 40;\n        } elsif ($remainder >= 10) {\n         \
    \   $result .= 'x';\n            $remainder -= 10;\n        } elsif ($remainder\
    \ >= 9) {\n            $result .= 'ix';\n            $remainder -= 9;\n      \
    \  } elsif ($remainder >= 5) {\n            $result .= 'v';\n            $remainder\
    \ -= 5;\n        } elsif ($remainder >= 4) {\n            $result .= 'iv';\n \
    \           $remainder -= 4;\n        } else {\n            $result .= 'i';\n\
    \            $remainder -= 1;\n        }\n    }\n    return $result;\n}", "  \
    \  my $result = \"\";\n    my $remainder = $number;\n    my $digit = 0;\n    my\
    \ $roman = \"\";\n    my @numerals = qw(m d c l x v i);\n    my @values = (1000,\
    \ 500, 100, 50, 10, 5, 1);\n    my $i = 0;\n    while ($remainder > 0) {\n   \
    \     $digit = int($remainder / $values[$i]);\n        $remainder = $remainder\
    \ % $values[$i];\n        if ($digit == 4) {\n            $roman = $numerals[$i]\
    \ . $numerals[$i-1];\n        } elsif ($digit == 9) {\n            $roman = $numerals[$i]\
    \ . $numerals[$i-2];\n        } else {\n            $roman = $numerals[$i] x $digit;\n\
    \        }\n        $result .= $roman;\n        $i++;\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    my @numbers = (1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    my @letters = (\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    );\n    while ($number > 0) {\n        while ($number >= $numbers[$i]) {\n   \
    \         $result .= $letters[$i];\n            $number -= $numbers[$i];\n   \
    \     }\n        $i++;\n    }\n    return $result;\n}", "    my $result = \"\"\
    ;\n    my $i = 0;\n    while ($number > 0) {\n        if ($number >= $roman_numbers[$i])\
    \ {\n            $result .= $roman_numbers_str[$i];\n            $number -= $roman_numbers[$i];\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $result;\n}",
  "    my $result = '';\n    my $remainder = $number;\n    while ($remainder > 0)\
    \ {\n        if ($remainder >= 1000) {\n            $result .= 'm';\n        \
    \    $remainder -= 1000;\n        } elsif ($remainder >= 900) {\n            $result\
    \ .= 'cm';\n            $remainder -= 900;\n        } elsif ($remainder >= 500)\
    \ {\n            $result .= 'd';\n            $remainder -= 500;\n        } elsif\
    \ ($remainder >= 400) {\n            $result .= 'cd';\n            $remainder\
    \ -= 400;\n        } elsif ($remainder >= 100) {\n            $result .= 'c';\n\
    \            $remainder -= 100;\n        } elsif ($remainder >= 90) {\n      \
    \      $result .= 'xc';\n            $remainder -= 90;\n        } elsif ($remainder\
    \ >= 50) {\n            $result .= 'l';\n            $remainder -= 50;\n     \
    \   } elsif ($remainder >= 40) {\n            $result .= 'xl';\n            $remainder\
    \ -= 40;\n        } elsif ($remainder >= 10) {\n            $result .= 'x';\n\
    \            $remainder -= 10;\n        } elsif ($remainder >= 9) {\n        \
    \    $result .= 'ix';\n            $remainder -= 9;\n        } elsif ($remainder\
    \ >= 5) {\n            $result .= 'v';\n            $remainder -= 5;\n       \
    \ } elsif ($remainder >= 4) {\n            $result .= 'iv';\n            $remainder\
    \ -= 4;\n        } else {\n            $result .= 'i';\n            $remainder\
    \ -= 1;\n        }\n    }\n    return $result;\n}", "    my $roman = \"\";\n \
    \   my $i = 0;\n    my @numbers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1);\n    my @letters = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    while ($number > 0) {\n\
    \        while ($number >= $numbers[$i]) {\n            $roman .= $letters[$i];\n\
    \            $number -= $numbers[$i];\n        }\n        $i++;\n    }\n    return\
    \ $roman;\n}", "    my $result = '';\n    my $numeral = '';\n    my $digit = 0;\n\
    \    my $i = 0;\n    my @roman_numerals = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    my @decimal_values = (1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    while ($number > 0) {\n        if\
    \ ($number >= $decimal_values[$i]) {\n            $number -= $decimal_values[$i];\n\
    \            $result .= $roman_numerals[$i];\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $result;\n}", "    my @numerals = (\n        ['m',\
    \ 1000],\n        ['d', 500],\n        ['c', 100],\n        ['l', 50],\n     \
    \   ['x', 10],\n        ['v', 5],\n        ['i', 1],\n    );\n    my $result =\
    \ '';\n    for my $i (0 .. $#numerals) {\n        my $numeral = $numerals[$i];\n\
    \        my $value = $numeral->[1];\n        my $count = int($number / $value);\n\
    \        $number -= $count * $value;\n        $result .= $numeral->[0] x $count;\n\
    \    }\n    return $result;\n}", "    my $roman = \"\";\n    my $numeral;\n  \
    \  my $digit;\n    my $i;\n    my @roman_numerals = (\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n  \
    \  my @arabic_numerals = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n\
    \    for ($i = 0; $i < scalar(@arabic_numerals); $i++) {\n        $numeral = $arabic_numerals[$i];\n\
    \        $digit = int($number / $numeral);\n        $number -= $digit * $numeral;\n\
    \        $roman .= $roman_numerals[$i] x $digit;\n    }\n    return $roman;\n}",
  "    my $result = '';\n    my $remainder = $number;\n    my $i = 0;\n    while ($remainder\
    \ > 0) {\n        my $div = int($remainder / $roman_numerals[$i]->{value});\n\
    \        $remainder = $remainder % $roman_numerals[$i]->{value};\n        $result\
    \ .= $roman_numerals[$i]->{symbol} x $div;\n        $i++;\n    }\n    return lc($result);\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    while ($number > 0) {\n     \
    \   if ($number >= $roman_numerals[$i]) {\n            $result .= $mini_roman_numerals[$i];\n\
    \            $number -= $roman_numerals[$i];\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = '';\n    my @numerals\
    \ = qw(m d c l x v i);\n    my @values = (1000, 500, 100, 50, 10, 5, 1);\n   \
    \ my $i = 0;\n    while ($number > 0) {\n        if ($number >= $values[$i]) {\n\
    \            $result .= $numerals[$i];\n            $number -= $values[$i];\n\
    \        }\n        elsif ($number >= $values[$i] - $values[$i+2]) {\n       \
    \     $result .= $numerals[$i+2] . $numerals[$i];\n            $number -= $values[$i]\
    \ - $values[$i+2];\n        }\n        elsif ($number >= $values[$i] - $values[$i+1])\
    \ {\n            $result .= $numerals[$i+1] . $numerals[$i];\n            $number\
    \ -= $values[$i] - $values[$i+1];\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = \"\";\n    my $i\
    \ = 0;\n    while ($number > 0) {\n        if ($number >= $roman_numerals[$i]->[0])\
    \ {\n            $result .= $roman_numerals[$i]->[1];\n            $number -=\
    \ $roman_numerals[$i]->[0];\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}", "    my $result = '';\n    my $remainder = $number;\n\
    \    my $divisor = 1000;\n    my $roman_digit = 'm';\n    while ($divisor >= 1)\
    \ {\n        my $digit = int($remainder / $divisor);\n        $remainder = $remainder\
    \ % $divisor;\n        if ($digit == 9) {\n            $result .= $roman_digit\
    \ . $roman_digit . $roman_digit . $roman_digit;\n        }\n        elsif ($digit\
    \ >= 5) {\n            $result .= $roman_digit . $roman_digit . $roman_digit;\n\
    \            $digit -= 5;\n        }\n        elsif ($digit == 4) {\n        \
    \    $result .= $roman_digit . $roman_digit . $roman_digit;\n        }\n     \
    \   elsif ($digit >= 1) {\n            $result .= $roman_digit . $roman_digit;\n\
    \            $digit -= 2;\n        }\n        elsif ($digit == 0) {\n        \
    \    $result .= $roman_digit;\n        }\n        $divisor /= 10;\n        $roman_digit\
    \ = chr(ord($roman_digit) + 1);\n    }\n    return $result;\n}", "    my $roman\
    \ = \"\";\n    my $remainder = $number;\n    while ($remainder > 0) {\n      \
    \  if ($remainder >= 1000) {\n            $roman .= \"m\";\n            $remainder\
    \ -= 1000;\n        } elsif ($remainder >= 900) {\n            $roman .= \"cm\"\
    ;\n            $remainder -= 900;\n        } elsif ($remainder >= 500) {\n   \
    \         $roman .= \"d\";\n            $remainder -= 500;\n        } elsif ($remainder\
    \ >= 400) {\n            $roman .= \"cd\";\n            $remainder -= 400;\n \
    \       } elsif ($remainder >= 100) {\n            $roman .= \"c\";\n        \
    \    $remainder -= 100;\n        } elsif ($remainder >= 90) {\n            $roman\
    \ .= \"xc\";\n            $remainder -= 90;\n        } elsif ($remainder >= 50)\
    \ {\n            $roman .= \"l\";\n            $remainder -= 50;\n        } elsif\
    \ ($remainder >= 40) {\n            $roman .= \"xl\";\n            $remainder\
    \ -= 40;\n        } elsif ($remainder >= 10) {\n            $roman .= \"x\";\n\
    \            $remainder -= 10;\n        } elsif ($remainder >= 9) {\n        \
    \    $roman .= \"ix\";\n            $remainder -= 9;\n        } elsif ($remainder\
    \ >= 5) {\n            $roman .= \"v\";\n            $remainder -= 5;\n      \
    \  } elsif ($remainder >= 4) {\n            $roman .= \"iv\";\n            $remainder\
    \ -= 4;\n        } else {\n            $roman .= \"i\";\n            $remainder\
    \ -= 1;\n        }\n    }\n    return $roman;\n}", "    my $result = \"\";\n \
    \   my $numeral = \"\";\n    my $i = 0;\n    my @numerals = (\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    );\n    my @numbers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n\
    \    while ($number > 0) {\n        if ($number >= $numbers[$i]) {\n         \
    \   $numeral = $numerals[$i];\n            $number -= $numbers[$i];\n        \
    \    $result .= $numeral;\n        } else {\n            $i++;\n        }\n  \
    \  }\n    return $result;\n}", "    my $result = \"\";\n    my $remainder = $number;\n\
    \    my $digit = 0;\n    my $digit_value = 0;\n    my $roman_digit = \"\";\n \
    \   my $roman_digit_value = 0;\n    my $i = 0;\n    my $j = 0;\n    my @roman_digits\
    \ = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\");\n    my @digit_values = (1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1);\n    while ($remainder > 0) {\n        $digit_value\
    \ = $digit_values[$i];\n        if ($remainder >= $digit_value) {\n          \
    \  $remainder -= $digit_value;\n            $result .= $roman_digits[$i];\n  \
    \      } else {\n            $i++;\n        }\n    }\n    return $result;\n}",
  "    my $result = '';\n    my $i = 0;\n    while ($number > 0) {\n        if ($number\
    \ >= $mini_roman_numerals[$i]{value}) {\n            $result .= $mini_roman_numerals[$i]{symbol};\n\
    \            $number -= $mini_roman_numerals[$i]{value};\n        } else {\n \
    \           $i++;\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    my $remainder = $number;\n    while ($remainder > 0) {\n      \
    \  if ($remainder >= 1000) {\n            $result .= \"m\";\n            $remainder\
    \ -= 1000;\n        } elsif ($remainder >= 900) {\n            $result .= \"cm\"\
    ;\n            $remainder -= 900;\n        } elsif ($remainder >= 500) {\n   \
    \         $result .= \"d\";\n            $remainder -= 500;\n        } elsif ($remainder\
    \ >= 400) {\n            $result .= \"cd\";\n            $remainder -= 400;\n\
    \        } elsif ($remainder >= 100) {\n            $result .= \"c\";\n      \
    \      $remainder -= 100;\n        } elsif ($remainder >= 90) {\n            $result\
    \ .= \"xc\";\n            $remainder -= 90;\n        } elsif ($remainder >= 50)\
    \ {\n            $result .= \"l\";\n            $remainder -= 50;\n        } elsif\
    \ ($remainder >= 40) {\n            $result .= \"xl\";\n            $remainder\
    \ -= 40;\n        } elsif ($remainder >= 10) {\n            $result .= \"x\";\n\
    \            $remainder -= 10;\n        } elsif ($remainder >= 9) {\n        \
    \    $result .= \"ix\";\n            $remainder -= 9;\n        } elsif ($remainder\
    \ >= 5) {\n            $result .= \"v\";\n            $remainder -= 5;\n     \
    \   } elsif ($remainder >= 4) {\n            $result .= \"iv\";\n            $remainder\
    \ -= 4;\n        } else {\n            $result .= \"i\";\n            $remainder\
    \ -= 1;\n        }\n    }\n    return $result;\n}", "    my $result = \"\";\n\
    \    my $i = 0;\n    while ($number > 0) {\n        if ($number >= $roman_numerals[$i]->[0])\
    \ {\n            $result .= $roman_numerals[$i]->[1];\n            $number -=\
    \ $roman_numerals[$i]->[0];\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
