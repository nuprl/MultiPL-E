name: HumanEval_119_match_parens
language: pl
prompt: "# You are given a list of two strings, both strings consist of open\n# parentheses\
  \ '(' or close parentheses ')' only.\n# Your job is to check if it is possible to\
  \ concatenate the two strings in\n# some order, that the resulting string will be\
  \ good.\n# A string S is considered to be good if and only if all parentheses in\
  \ S\n# are balanced. For example: the string '(())()' is good, while the string\n\
  # '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n# Examples:\n# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n\
  # >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n\
  \        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str =\
    \ $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n     \
    \   if ($c eq '(') {\n            $count++;\n        }\n        elsif ($c eq ')')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}", "    my($s1, $s2)\
    \ = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n    \
    \    $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return \"No\" if\
    \ $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n\
    \        $c2-- if $c eq ')';\n        return \"No\" if $c2 < 0;\n    }\n    return\
    \ \"Yes\" if $c1 == $c2;\n    return \"No\";\n}", "    my($a, $b) = @$lst;\n \
    \   my($i, $j, $k);\n    my($cnt) = 0;\n    for ($i = 0; $i < length($a); $i++)\
    \ {\n        $cnt += ($a->[$i] eq '(') ? 1 : -1;\n        if ($cnt < 0) {\n  \
    \          return \"No\";\n        }\n    }\n    for ($j = 0; $j < length($b);\
    \ $j++) {\n        $cnt += ($b->[$j] eq '(') ? 1 : -1;\n        if ($cnt < 0)\
    \ {\n            return \"No\";\n        }\n    }\n    return ($cnt == 0) ? \"\
    Yes\" : \"No\";\n}", "    my $str = join(\"\", @$lst);\n    my $cnt = 0;\n   \
    \ for my $c (split(//, $str)) {\n        if ($c eq \"(\") {\n            $cnt++;\n\
    \        } elsif ($c eq \")\") {\n            $cnt--;\n        }\n        if ($cnt\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    return $cnt == 0 ?\
    \ \"Yes\" : \"No\";\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n\
    \    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return \"No\" if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ \"No\" if $c2 < 0;\n    }\n    return \"Yes\" if $c1 == $c2;\n    return \"\
    No\";\n}", "    my($s1, $s2) = @$lst;\n    my($s) = $s1 . $s2;\n    my($c) = 0;\n\
    \    for my $ch (split //, $s) {\n        if ($ch eq '(') {\n            $c++;\n\
    \        } elsif ($ch eq ')') {\n            $c--;\n        }\n        if ($c\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    return $c == 0 ? \"\
    Yes\" : \"No\";\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n \
    \   my $str = $str1 . $str2;\n    my $count = 0;\n    for my $ch (split //, $str)\
    \ {\n        if ($ch eq '(') {\n            $count++;\n        } elsif ($ch eq\
    \ ')') {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $parens = 0;\n\
    \    for my $c (split //, $str) {\n        if ($c eq '(') {\n            $parens++;\n\
    \        } elsif ($c eq ')') {\n            $parens--;\n        }\n        return\
    \ \"No\" if $parens < 0;\n    }\n    return \"Yes\";\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $cnt = 0;\n \
    \   for my $c (split //, $str) {\n        if ($c eq '(') {\n            $cnt++;\n\
    \        } elsif ($c eq ')') {\n            $cnt--;\n        }\n        if ($cnt\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}",
  "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n\
    \    my $cnt = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n   \
    \     }\n        if ($cnt < 0) {\n            return \"No\";\n        }\n    }\n\
    \    if ($cnt == 0) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my\
    \ $str = $str1 . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str) {\n\
    \        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c eq ')') {\n\
    \            $cnt--;\n        }\n        if ($cnt < 0) {\n            return \"\
    No\";\n        }\n    }\n    return \"Yes\";\n}", "    my($left, $right) = @$lst;\n\
    \    my($left_count, $right_count) = (0, 0);\n    for my $c (split //, $left)\
    \ {\n        $left_count++ if $c eq '(';\n        $left_count-- if $c eq ')';\n\
    \    }\n    for my $c (split //, $right) {\n        $right_count++ if $c eq '(';\n\
    \        $right_count-- if $c eq ')';\n    }\n    return 'No' if $left_count <\
    \ 0 || $right_count < 0;\n    return 'Yes' if $left_count == 0 && $right_count\
    \ == 0;\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n}",
  "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n\
    \    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(')\
    \ {\n            $count++;\n        }\n        elsif ($c eq ')') {\n         \
    \   $count--;\n        }\n        if ($count < 0) {\n            return \"No\"\
    ;\n        }\n    }\n    if ($count == 0) {\n        return \"Yes\";\n    }\n\
    \    else {\n        return \"No\";\n    }\n}", "    my($s1, $s2) = @$lst;\n \
    \   my($c1, $c2) = (0, 0);\n    for my $c (split(//, $s1)) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return \"No\" if $c1 < 0;\n\
    \    }\n    for my $c (split(//, $s2)) {\n        $c2++ if $c eq '(';\n      \
    \  $c2-- if $c eq ')';\n        return \"No\" if $c2 < 0;\n    }\n    return \"\
    Yes\" if $c1 == $c2;\n    return \"No\";\n}", "    my $str1 = $lst->[0];\n   \
    \ my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $n = length($str);\n\
    \    my $cnt = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        my $c = substr($str,\
    \ $i, 1);\n        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n       \
    \     return \"No\";\n        }\n    }\n    if ($cnt == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n\
    \    for my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        } elsif ($c eq ')') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    if ($count == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", " \
    \   my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //,\
    \ $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return\
    \ \"No\" if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if\
    \ $c eq '(';\n        $c2-- if $c eq ')';\n        return \"No\" if $c2 < 0;\n\
    \    }\n    return \"Yes\" if $c1 == $c2;\n    return \"No\";\n}", "    my($s1,\
    \ $s2) = @$lst;\n    my($s) = $s1 . $s2;\n    my($cnt) = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n       \
    \     return \"No\";\n        }\n    }\n    return \"Yes\";\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my\
    \ $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n  \
    \          $count++;\n        } elsif ($c eq ')') {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return \"No\";\n        }\n\
    \    }\n    if ($count == 0) {\n        return \"Yes\";\n    } else {\n      \
    \  return \"No\";\n    }\n}", "    my($left, $right) = @$lst;\n    my($left_parens,\
    \ $right_parens) = (0, 0);\n    my($i);\n    for ($i = 0; $i < length($left);\
    \ $i++) {\n        $left_parens++ if substr($left, $i, 1) eq '(';\n        $left_parens--\
    \ if substr($left, $i, 1) eq ')';\n        return \"No\" if $left_parens < 0;\n\
    \    }\n    for ($i = 0; $i < length($right); $i++) {\n        $right_parens++\
    \ if substr($right, $i, 1) eq '(';\n        $right_parens-- if substr($right,\
    \ $i, 1) eq ')';\n        return \"No\" if $right_parens < 0;\n    }\n    return\
    \ \"Yes\" if $left_parens == $right_parens;\n    return \"No\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
