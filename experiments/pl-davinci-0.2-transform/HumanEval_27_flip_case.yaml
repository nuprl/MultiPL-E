name: HumanEval_27_flip_case
language: pl
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $flipped = '';\n    for my $char (split //, $string) {\n   \
    \     if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n        }\n\
    \        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n     \
    \   }\n        else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}", "    return $string =~ tr/A-Za-z/a-zA-Z/r;\n}", "    my @chars\
    \ = split(//, $string);\n    my @flipped = map {\n        if ($_ =~ /[a-z]/) {\n\
    \            uc($_);\n        } elsif ($_ =~ /[A-Z]/) {\n            lc($_);\n\
    \        } else {\n            $_;\n        }\n    } @chars;\n    return join('',\
    \ @flipped);\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}",
  "    my $flipped = \"\";\n    for my $char (split //, $string) {\n        if ($char\
    \ =~ /[a-z]/) {\n            $flipped .= uc $char;\n        } elsif ($char =~\
    \ /[A-Z]/) {\n            $flipped .= lc $char;\n        } else {\n          \
    \  $flipped .= $char;\n        }\n    }\n    return $flipped;\n}", "    my $flipped\
    \ = '';\n    for my $c (split //, $string) {\n        if ($c =~ /[a-z]/) {\n \
    \           $flipped .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n          \
    \  $flipped .= lc $c;\n        } else {\n            $flipped .= $c;\n       \
    \ }\n    }\n    return $flipped;\n}", "    my($i);\n    my($result) = \"\";\n\
    \    for($i = 0; $i < length($string); $i++) {\n        my($char) = substr($string,\
    \ $i, 1);\n        if($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif($char =~ /[A-Z]/) {\n            $result .= lc($char);\n    \
    \    } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my $flipped_string = '';\n    for my $char (split //, $string) {\n  \
    \      if ($char =~ /[a-z]/) {\n            $flipped_string .= uc $char;\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped_string .= lc $char;\n\
    \        } else {\n            $flipped_string .= $char;\n        }\n    }\n \
    \   return $flipped_string;\n}", "    my $flipped = \"\";\n    for my $char (split\
    \ //, $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc\
    \ $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}", "    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }", "    my $flipped = \"\";\n    for my $char (split //, $string) {\n       \
    \ if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n        } else {\n\
    \            $flipped .= $char;\n        }\n    }\n    return $flipped;\n}", " \
    \   $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($flipped)\
    \ = \"\";\n    my($i);\n    for($i = 0; $i < length($string); $i++) {\n      \
    \  my($char) = substr($string, $i, 1);\n        if($char =~ /[a-z]/) {\n     \
    \       $flipped .= uc($char);\n        } elsif($char =~ /[A-Z]/) {\n        \
    \    $flipped .= lc($char);\n        } else {\n            $flipped .= $char;\n\
    \        }\n    }\n    return $flipped;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my @chars = split(//, $string);\n    my @new_chars = map {\n        if\
    \ ($_ =~ /[a-z]/) {\n            uc($_);\n        } elsif ($_ =~ /[A-Z]/) {\n\
    \            lc($_);\n        } else {\n            $_;\n        }\n    } @chars;\n\
    \    return join(\"\", @new_chars);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my $flipped = '';\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n\
    \        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my $flipped = \"\";\n    for my $char (split //, $string) {\n       \
    \ if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n        } else {\n\
    \            $flipped .= $char;\n        }\n    }\n    return $flipped;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
