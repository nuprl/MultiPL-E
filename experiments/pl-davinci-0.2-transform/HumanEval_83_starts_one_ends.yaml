name: HumanEval_83_starts_one_ends
language: pl
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $i = 0;\n    while ($i < $n) {\n       \
    \ $count += 9 * 10 ** $i;\n        $i++;\n    }\n    return $count;\n}", "   \
    \ my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n \
    \   }\n    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while\
    \ ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n \
    \   $count += 10 ** ($n - 1);\n    return $count;\n}", "    my $count = 0;\n \
    \   if ($n == 1) {\n        $count = 2;\n    }\n    elsif ($n > 1) {\n       \
    \ $count = starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 9 * 10**($i - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   my $i = 1;\n    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n\
    \        $i++;\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $start = 10**($n-1);\n\
    \    my $end = 10**$n;\n    for my $i ($start .. $end-1) {\n        if ($i =~\
    \ /^1/ || $i =~ /1$/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n < 1;\n    return 1 if $n ==\
    \ 1;\n    return 10 * starts_one_ends($n - 1) + 10 ** ($n - 1);\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n  \
    \      $count += starts_one_ends_helper($i);\n    }\n    return $count;\n}", " \
    \   return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 9 * 10**($n-2)\
    \ + starts_one_ends($n-1);\n}", "    return $n == 1 ? 2 : 9 * 10**($n - 2);\n}",
  "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    return 0 if $n < 1;\n    return 1\
    \ if $n == 1;\n    return 9 if $n == 2;\n    return 9 + 9 * 10**($n-2);\n}", " \
    \   my $count = 0;\n    my $pow = 10 ** ($n - 1);\n    for my $i (1 .. 9) {\n\
    \        $count += $i * $pow;\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    return 0 if $n < 1;\n  \
    \  return 9 if $n == 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n\
    \ == 1;\n    return 9 if $n == 2;\n    return 9 + 9 * 10**($n-2);\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += 10**($i-1);\n    }\n    return $count;\n}", "    return 0 if $n\
    \ == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n - 1) + 9 * starts_one_ends($n\
    \ - 2);\n}", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n    \
    \    $count += 9 * 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. 9) {\n        $count +=\
    \ starts_one_ends_helper($n - 1, $i);\n    }\n    return $count;\n}", "    return\
    \ 0 if $n < 1;\n    return 9 if $n == 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += (9 * 9**($i - 1));\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += (10 ** ($i - 1)) * 9;\n    }\n    return $count;\n}", "    return\
    \ 0 if $n < 1;\n    return 9 if $n == 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n\
    }", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $count\
    \ += 9 * 10 ** ($i - 1);\n    }\n    return $count;\n}", "    return 1 if $n ==\
    \ 1;\n    return 10 * starts_one_ends($n - 1) + 10**($n - 1);\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    return 0 if $n == 0;\n    return 9 if $n == 1;\n    return\
    \ 9 + 9 * 10**($n-2);\n}", "    my $count = 0;\n    foreach my $i (1 .. $n) {\n\
    \        $count += 9 * 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    foreach my $i (1 .. $n) {\n        $count += 9 * 10 ** ($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10**($i -\
    \ 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += 9 * 10**($i - 1);\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n \
    \       $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n    return $count;\n\
    }", "    return 0 if $n <= 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += $n - $i + 1;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends_helper($i);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while\
    \ ($i < $n) {\n        $count += 9 * 9**$i;\n        $i++;\n    }\n    $count\
    \ += 9**$n;\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += starts_one_ends_rec($i, $n, 1);\n    }\n    return\
    \ $count;\n}", "    return 0 if $n < 1;\n    return 1 if $n == 1;\n    return\
    \ 9 * 10**($n-2);\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n      \
    \  $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my $i = 1;\n    while ($i <= $n) {\n        $count += 9 * 10 ** ($i - 1);\n\
    \        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n    for my\
    \ $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n < 1;\n    return 1 if $n ==\
    \ 1;\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}", "   \
    \ my $count = 0;\n    for my $i (1 .. $n) {\n        $count += (10 ** ($i - 1))\
    \ * 9;\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach my $i\
    \ (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my $start = 1;\n    my $end = 1;\n    for my $i (1 .. $n)\
    \ {\n        $count += $start * $end;\n        $start *= 10;\n        $end *=\
    \ 9;\n    }\n    return $count;\n}", "    return $n == 1 ? 2 : starts_one_ends($n\
    \ - 1) + ends_one_ends($n - 1);\n}", "    my($count) = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n    for\
    \ my $i ($start .. $end) {\n        if ($i =~ /^1|1$/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n\
    \    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n        $i++;\n\
    \    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}", "    return 0 if\
    \ $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n - 1) +\
    \ 10**($n - 1);\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    my $i\
    \ = 1;\n    while($i <= $n) {\n        $count += 9 * 10 ** ($i - 1);\n       \
    \ $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n\
    \    while ($i <= $n) {\n        $count += $n - $i + 1;\n        $i++;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n \
    \       $count += $i * 9 * 10**($i-1);\n        $i++;\n    }\n    return $count;\n\
    }", "    if ($n == 1) {\n        return 2;\n    }\n    return (9 * 10 ** ($n -\
    \ 2) + starts_one_ends($n - 1));\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        $count += 10 **\
    \ ($n - $i);\n        $i++;\n    }\n    return $count;\n}", "    return 0 if $n\
    \ == 0;\n    return 9 if $n == 1;\n    return 9 + 9 * 10**($n-2);\n}", "    return\
    \ 0 if $n == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n - 1)\
    \ + starts_one_ends($n - 2);\n}", "    my $count = 0;\n    for my $i (1 .. $n)\
    \ {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += $n - $i\
    \ + 1;\n    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 1\
    \ if $n == 1;\n    return 10 if $n == 2;\n    return 10 + 9 * 9**($n - 2);\n}",
  "    my($count) = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10 ** ($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += $n - $i + 1;\n\
    \    }\n    return $count;\n}", "    return 0 if $n < 1;\n    return 9 if $n ==\
    \ 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n}", "    return 0 if\
    \ $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n - 1) +\
    \ 9 * 9**($n - 2);\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n     \
    \   $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for my $i (1 .. $n) {\n        $count += starts_one_ends_helper($i);\n  \
    \  }\n    return $count;\n}", "    my $count = 0;\n    my $start = 1;\n    my\
    \ $end = 1;\n    for my $i (1 .. $n) {\n        $count += $start * $end;\n   \
    \     $start *= 10;\n        $end = $end * 10 + 1;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10**($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  my($count);\n    if ($n == 1) {\n        $count = 2;\n    } else {\n      \
    \  $count = 9 * 10 ** ($n - 2);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $i = 1;\n    my $j = 1;\n    while ($i < $n) {\n        $count\
    \ += 9 * $j;\n        $i++;\n        $j *= 10;\n    }\n    $count += $j;\n   \
    \ return $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $start = 1;\n    my $end\
    \ = 1;\n    for (1..$n) {\n        $count += $start * $end;\n        $start *=\
    \ 10;\n        $end += $start;\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10**($i - 1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $str = '1' x $n;\n    for\
    \ my $i (1 .. $n) {\n        $count += $str =~ s/1/0/g;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10 ** ($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for (1 .. $n)\
    \ {\n        $count += 10**($_-1);\n    }\n    return $count;\n}", "    return\
    \ 0 if $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n -\
    \ 1) + 9 * 10**($n - 2);\n}", "    return 0 if $n < 1;\n    return 1 if $n ==\
    \ 1;\n    return 9 * 10**($n-2);\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 9 if $n\
    \ == 1;\n    return 9 * 9 * (10 ** ($n - 2));\n}", "    my $count = 0;\n    for\
    \ my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n\
    \    for my $i ($start .. $end) {\n        my $s = $i;\n        my $e = $i;\n\
    \        $count++ if $s % 10 == 1;\n        $count++ if $e =~ /^1/;\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n     \
    \   $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    my $start\
    \ = 1;\n    my $end = 1;\n    for my $i (1 .. $n) {\n        $count += $start\
    \ * $end;\n        $start *= 10;\n        $end *= 9;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    foreach my $i (1 .. $n) {\n        $count += starts_one_ends_helper($i);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    return 0 if\
    \ $n == 0;\n    return 9 if $n == 1;\n    return 9 + 9 * 10**($n-2);\n}", "  \
    \  my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n <= 0;\n    return 1 if $n\
    \ == 1;\n    return 10 * starts_one_ends($n - 1) - 9 * starts_one_ends($n - 2);\n\
    }", "    my($count) = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $start = 1;\n    my $end = 1;\n    for (1..$n) {\n        $count\
    \ += $start * $end;\n        $start *= 10;\n        $end += $start;\n    }\n \
    \   return $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n\
    \    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}", "    my $count\
    \ = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while\
    \ ($i <= $n) {\n        $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += $n - $i + 1;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my $i = 1;\n    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n\
    \        $i++;\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}",
  "    return 1 if $n == 1;\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}", "    return 0 if $n == 0;\n    return 9 if $n == 1;\n    return 9\
    \ + 9 * 10**($n-2);\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    if ($n == 1) {\n        $count = 2;\n    } elsif ($n == 2) {\n   \
    \     $count = 9;\n    } else {\n        $count = 9;\n        for (my $i = 1;\
    \ $i < $n - 1; $i++) {\n            $count *= 10;\n        }\n        $count *=\
    \ 2;\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    if ($n == 1) {\n    \
    \    return 2;\n    }\n    for my $i (1 .. $n - 1) {\n        $count += 9 * 10\
    \ ** ($i - 1) * $i;\n    }\n    return $count + 2 * 10 ** ($n - 1);\n}", "   \
    \ my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n \
    \   }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 9 if $n ==\
    \ 1;\n    return 9 * (10 ** ($n - 2)) + starts_one_ends($n - 1);\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while ($i <=\
    \ $n) {\n        $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n  \
    \      $count += $i;\n    }\n    return $count;\n}", "    my $count = 0;\n   \
    \ for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += starts_one_ends_helper($i);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    if ($n == 1) {\n        $count = 2;\n    } elsif ($n ==\
    \ 2) {\n        $count = 9;\n    } else {\n        $count = 9 * 9 * (10 ** ($n\
    \ - 2));\n    }\n    return $count;\n}", "    my $count = 0;\n    my $pow = 10\
    \ ** ($n - 1);\n    for my $i (1 .. 9) {\n        $count += $pow;\n        $count\
    \ += $pow if $i == 1;\n    }\n    return $count;\n}", "    my $count = 0;\n  \
    \  for my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n    return\
    \ $count;\n}", "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2)\
    \ {\n        return 4;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 10\
    \ if $n == 2;\n    return 9 + starts_one_ends($n - 1);\n}", "    my $count = 0;\n\
    \    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n    for my $i ($start\
    \ .. $end) {\n        $count++ if $i =~ /^1/ or $i =~ /1$/;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n\
    \    while ($start <= $end) {\n        if ($start % 10 == 1) {\n            ++$count;\n\
    \        }\n        if ($end % 10 == 1) {\n            ++$count;\n        }\n\
    \        $start *= 10;\n        $end /= 10;\n    }\n    return $count;\n}", " \
    \   return 0 if $n == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    my $count = 0;\n    for my $i (1 ..\
    \ $n) {\n        $count += 9 * 10**($i - 1);\n    }\n    return $count;\n}", " \
    \   return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 10 if $n == 2;\n\
    \    return 9 * 10**($n-2) + starts_one_ends($n-1);\n}", "    my $count = 0;\n\
    \    my $i = 1;\n    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n\
    \        $i++;\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}",
  "    my $count = 0;\n    for (1 .. $n) {\n        $count += 10**($_-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $start = 1;\n    my $end\
    \ = 1;\n    for my $i (1 .. $n) {\n        $count += $start * $end;\n        $start\
    \ *= 10;\n        $end *= 9;\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    my $start = 1;\n    my $end = 1;\n    for my $i (1 .. $n) {\n      \
    \  $count += $start;\n        $count += $end;\n        $start *= 10;\n       \
    \ $end *= 10;\n    }\n    return $count;\n}", "    my($count) = 0;\n    for my\
    \ $i (1 .. $n) {\n        $count += $n - $i + 1;\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n <= 0;\n    return 9 if $n\
    \ == 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += $n_digit_nums[$i - 1];\n\
    \    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n\
    \ == 1;\n    return 9 if $n == 2;\n    return 9 + 9*(10**($n-2));\n}", "    return\
    \ 0 if $n < 1;\n    return 1 if $n == 1;\n    return starts_one_ends($n - 1) +\
    \ starts_one_ends($n - 2);\n}", "    my $count = 0;\n    my $start = 10**($n-1);\n\
    \    my $end = 10**$n;\n    for my $i ($start..$end-1) {\n        if ($i =~ /^1|1$/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    foreach my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 9 * 10**($i - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    return 0 if $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n\
    \ - 1) - 9 * starts_one_ends($n - 2);\n}", "    my $count = 0;\n    for my $i\
    \ (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        $count\
    \ += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $count += 9 * 10\
    \ ** ($i - 1);\n    }\n    return $count;\n}", "    return 0 if $n < 1;\n    return\
    \ 1 if $n == 1;\n    return 10 * starts_one_ends($n - 1) - 9 * starts_one_ends($n\
    \ - 2);\n}", "    my $count = 0;\n    my $i = 1;\n    my $j = 1;\n    while ($i\
    \ < $n) {\n        $count += 9 * 9**$i;\n        $i++;\n    }\n    while ($j <\
    \ $n) {\n        $count += 9 * 9**$j;\n        $j++;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n;\n\
    \    for my $i ($start .. $end-1) {\n        my $s = $i;\n        my $e = $i;\n\
    \        $count++ if ($s % 10 == 1);\n        $count++ if (int($e / 10) == 1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <=\
    \ $n; $i++) {\n        $count += starts_one_ends_helper($i);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n \
    \       $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n    return $count;\n\
    }", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n\
    \ - 1) + 9 * 10**($n - 2);\n}", "    return 0 if $n == 0;\n    return 1 if $n\
    \ == 1;\n    return 10 if $n == 2;\n    return 9 + starts_one_ends($n - 1);\n}",
  "    return 0 if $n < 1;\n    return 10 if $n == 1;\n    return 9 * 10**($n-2);\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10 ** ($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  my($count) = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10 ** ($i\
    \ - 1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        $count += 10**($n\
    \ - $i) * (10**$i - 1);\n        $i++;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n    \
    \    $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    return 0 if\
    \ $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n - 1) -\
    \ 9 * starts_one_ends($n - 2);\n}", "    my $count = 0;\n    for my $i (1 .. $n)\
    \ {\n        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $i = 1;\n    my $j = 1;\n\
    \    while ($i < $n) {\n        $count += 9 * $j;\n        $i++;\n        $j *=\
    \ 10;\n    }\n    $count += $j;\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
