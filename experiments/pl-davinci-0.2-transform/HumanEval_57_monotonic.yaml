name: HumanEval_57_monotonic
language: pl
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n#\
  \ >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1,\
  \ 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i\
    \ < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j < $k) {\n\
    \t    last;\n\t}\n\tif ($j > $k) {\n\t    return 1;\n\t}\n    }\n    return \"\
    \";\n}", "    my($last) = $l->[0];\n    my($increasing) = 1;\n    my($decreasing)\
    \ = 1;\n    for my $i (1 .. $#$l) {\n        $increasing = 0 if $l->[$i] < $last;\n\
    \        $decreasing = 0 if $l->[$i] > $last;\n        $last = $l->[$i];\n   \
    \ }\n    return $increasing || $decreasing;\n}", "    my($i, $j);\n    my($n)\
    \ = scalar(@$l);\n    my($inc) = 0;\n    my($dec) = 0;\n    for ($i = 0; $i <\
    \ $n - 1; $i++) {\n\tif ($l->[$i] < $l->[$i + 1]) {\n\t    $inc = 1;\n\t}\n\t\
    if ($l->[$i] > $l->[$i + 1]) {\n\t    $dec = 1;\n\t}\n    }\n    return ($inc\
    \ && !$dec) || (!$inc && $dec);\n}", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n\
    \    for($i = 0; $i < $n; $i++) {\n\t$j = $i + 1;\n\t$k = $i - 1;\n\tif($j < $n)\
    \ {\n\t    if($l->[$i] < $l->[$j]) {\n\t\treturn 0;\n\t    }\n\t}\n\tif($k >=\
    \ 0) {\n\t    if($l->[$i] < $l->[$k]) {\n\t\treturn 0;\n\t    }\n\t}\n    }\n\
    \    return 1;\n}", "    my($prev) = $l->[0];\n    my($dir) = 0;\n    for my $i\
    \ (1 .. $#$l) {\n\tmy($cur) = $l->[$i];\n\tif ($cur < $prev) {\n\t    return \"\
    \" if $dir == 1;\n\t    $dir = -1;\n\t} elsif ($cur > $prev) {\n\t    return \"\
    \" if $dir == -1;\n\t    $dir = 1;\n\t}\n\t$prev = $cur;\n    }\n    return $dir;\n\
    }", "    my($i, $j, $k, $n, $d);\n    $n = @$l;\n    for($i = 1; $i < $n; $i++)\
    \ {\n\t$d = $l->[$i] - $l->[$i-1];\n\tif($d == 0) {\n\t    return \"\";\n\t}\n\
    \tif($i == 1) {\n\t    $k = $d;\n\t} else {\n\t    if($k * $d < 0) {\n\t\treturn\
    \ \"\";\n\t    }\n\t}\n    }\n    return 1;\n}", "    my($i, $j, $k);\n    my($n)\
    \ = scalar(@$l);\n    for($i = 0; $i < $n; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i+1];\n\
    \tif($j == $k) {\n\t    return \"\";\n\t}\n\tif($j > $k) {\n\t    for($i = 0;\
    \ $i < $n; $i++) {\n\t\t$j = $l->[$i];\n\t\t$k = $l->[$i+1];\n\t\tif($j < $k)\
    \ {\n\t\t    return \"\";\n\t\t}\n\t    }\n\t    return 1;\n\t}\n\tif($j < $k)\
    \ {\n\t    for($i = 0; $i < $n; $i++) {\n\t\t$j = $l->[$i];\n\t\t$k = $l->[$i+1];\n\
    \t\tif($j > $k) {\n\t\t    return \"\";\n\t\t}\n\t    }\n\t    return 1;\n\t}\n\
    \    }\n    return \"\";\n}", "    my($i, $j, $k, $m, $n, $p, $q, $r);\n    $n\
    \ = @$l;\n    return 0 if $n < 2;\n    $i = $l->[0];\n    $j = $l->[1];\n    if\
    \ ($i < $j) {\n        for ($k = 2; $k < $n; $k++) {\n            $m = $l->[$k];\n\
    \            return 0 if $m < $j;\n            $j = $m;\n        }\n    } elsif\
    \ ($i > $j) {\n        for ($k = 2; $k < $n; $k++) {\n            $m = $l->[$k];\n\
    \            return 0 if $m > $j;\n            $j = $m;\n        }\n    } else\
    \ {\n        return 0;\n    }\n    return 1;\n}", "    my($i, $n, $d);\n    $n\
    \ = scalar(@$l);\n    return 1 if $n < 2;\n    $d = $l->[1] - $l->[0];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n\treturn \"\" if $d * ($l->[$i] - $l->[$i-1]) < 0;\n\
    \    }\n    return 1;\n}", "    my $i;\n    my $prev = $l->[0];\n    my $inc =\
    \ 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i]\
    \ > $prev) {\n            $inc = 1;\n        } elsif ($l->[$i] < $prev) {\n  \
    \          $dec = 1;\n        }\n        $prev = $l->[$i];\n    }\n    return\
    \ ($inc && !$dec) || (!$inc && $dec);\n}", "    my $i;\n    my $prev = $l->[0];\n\
    \    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++) {\n    \
    \    if ($l->[$i] > $prev) {\n            $inc = 1;\n        } elsif ($l->[$i]\
    \ < $prev) {\n            $dec = 1;\n        }\n        $prev = $l->[$i];\n  \
    \  }\n    return $inc && !$dec;\n}", "    my($i, $j, $k, $n, $m, $d);\n    $n\
    \ = @$l;\n    if ($n < 2) {\n\treturn 1;\n    }\n    $i = $l->[0];\n    $j = $l->[1];\n\
    \    $d = $j - $i;\n    for ($k = 2; $k < $n; $k++) {\n\t$m = $l->[$k];\n\tif\
    \ ($d > 0) {\n\t    if ($m < $j) {\n\t\treturn \"\";\n\t    }\n\t} elsif ($d <\
    \ 0) {\n\t    if ($m > $j) {\n\t\treturn \"\";\n\t    }\n\t} else {\n\t    return\
    \ \"\";\n\t}\n\t$j = $m;\n    }\n    return 1;\n}", "    my($i, $j, $k);\n   \
    \ my($n) = scalar(@$l);\n    if($n <= 1) {\n\treturn 1;\n    }\n    for($i = 0;\
    \ $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif($j < $k)\
    \ {\n\t    last;\n\t}\n\tif($j > $k) {\n\t    last;\n\t}\n    }\n    if($i ==\
    \ $n - 1) {\n\treturn 1;\n    }\n    for(; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\
    \t$k = $l->[$i + 1];\n\tif($j < $k) {\n\t    return \"\";\n\t}\n\tif($j > $k)\
    \ {\n\t    return \"\";\n\t}\n    }\n    return 1;\n}", "    my($i, $j, $k);\n\
    \    my($n) = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n    }\n    $i = $l->[0];\n\
    \    $j = $l->[1];\n    if ($i < $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t  \
    \  $i = $j;\n\t    $j = $l->[$k];\n\t    if ($i > $j) {\n\t\treturn \"\";\n\t\
    \    }\n\t}\n    } elsif ($i > $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t    $i\
    \ = $j;\n\t    $j = $l->[$k];\n\t    if ($i < $j) {\n\t\treturn \"\";\n\t    }\n\
    \t}\n    }\n    return 1;\n}", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n\
    \    for ($i = 0; $i < $n; $i++) {\n\t$j = $i + 1;\n\t$k = $i - 1;\n\tif ($j <\
    \ $n && $l->[$i] < $l->[$j]) {\n\t    return 0;\n\t}\n\tif ($k >= 0 && $l->[$i]\
    \ < $l->[$k]) {\n\t    return 0;\n\t}\n    }\n    return 1;\n}", "    my($i, $j,\
    \ $k);\n    my($n) = scalar(@$l);\n    my($r) = 1;\n    for($i = 0; $i < $n -\
    \ 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif($j > $k) {\n\t    $r\
    \ = -1;\n\t    last;\n\t}\n\telsif($j < $k) {\n\t    $r = 1;\n\t    last;\n\t\
    }\n    }\n    for($i = 0; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i\
    \ + 1];\n\tif($r * ($j - $k) < 0) {\n\t    return \"\";\n\t}\n    }\n    return\
    \ $r;\n}", "    my($i, $j);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i <\
    \ $n - 1; $i++) {\n\t$j = $i + 1;\n\tif ($l->[$i] < $l->[$j]) {\n\t    last;\n\
    \t}\n    }\n    if ($i == $n - 1) {\n\treturn 1;\n    }\n    for ($i = 0; $i <\
    \ $n - 1; $i++) {\n\t$j = $i + 1;\n\tif ($l->[$i] > $l->[$j]) {\n\t    last;\n\
    \t}\n    }\n    if ($i == $n - 1) {\n\treturn 1;\n    }\n    return \"\";\n}",
  "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($prev) = $l->[0];\n    my($inc)\
    \ = 0;\n    my($dec) = 0;\n    for($i = 1; $i < $n; $i++) {\n\tif($l->[$i] > $prev)\
    \ {\n\t    $inc = 1;\n\t}\n\telsif($l->[$i] < $prev) {\n\t    $dec = 1;\n\t}\n\
    \t$prev = $l->[$i];\n    }\n    return ($inc && $dec) ? 0 : 1;\n}", "    my($i,\
    \ $j, $k, $n, $m, $p, $q, $r);\n    $n = scalar(@$l);\n    if ($n < 2) {\n\treturn\
    \ 1;\n    }\n    $i = $l->[0];\n    $j = $l->[1];\n    if ($i == $j) {\n\treturn\
    \ \"\";\n    }\n    $k = ($i < $j) ? 1 : -1;\n    for ($m = 2; $m < $n; $m++)\
    \ {\n\t$p = $l->[$m];\n\tif ($p == $j) {\n\t    return \"\";\n\t}\n\t$q = ($j\
    \ < $p) ? 1 : -1;\n\tif ($q != $k) {\n\t    return \"\";\n\t}\n\t$j = $p;\n  \
    \  }\n    return 1;\n}", "    my($i, $j);\n    my($n) = scalar(@$l);\n    for\
    \ ($i = 0; $i < $n - 1; $i++) {\n\t$j = $i + 1;\n\tif ($l->[$i] < $l->[$j]) {\n\
    \t    return \"\" if $l->[$j] < $l->[$i];\n\t}\n\telse {\n\t    return \"\" if\
    \ $l->[$j] > $l->[$i];\n\t}\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
