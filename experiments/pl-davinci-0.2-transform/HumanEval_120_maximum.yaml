name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum([-3,\
  \ -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n\
  # Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The\
  \ length of the array will be in the range of [1, 1000].\n# 2. The elements in the\
  \ array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum\
  \ {\n    my($arr, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n\
    \        if ($arr->[$i] > $max[-1]) {\n            $max[-1] = $arr->[$i];\n  \
    \          @max = sort {$b <=> $a} @max;\n        }\n    }\n    return \\@max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    my @max = @sorted[0..$k-1];\n\
    \    return @max;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    my @result\
    \ = @sorted[0..$k-1];\n    return @result;\n}", "    my @result;\n    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    for (my $i = 0; $i < $k; $i++) {\n        push\
    \ @result, $sorted[$i];\n    }\n    return @result;\n}", "    my @result;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n &&\
    \ $j < $k) {\n        if ($arr->[$i] > $arr->[$j]) {\n            $j = $i;\n \
    \       }\n        $i++;\n    }\n    push @result, $arr->[$j];\n    $j++;\n  \
    \  while ($j < $k) {\n        my $i = 0;\n        while ($i < $n && $j < $k) {\n\
    \            if ($arr->[$i] > $arr->[$j]) {\n                $j = $i;\n      \
    \      }\n            $i++;\n        }\n        push @result, $arr->[$j];\n  \
    \      $j++;\n    }\n    return @result;\n}", "    my @max;\n    for my $i (0..$#$arr)\
    \ {\n        if (@max < $k) {\n            push @max, $arr->[$i];\n          \
    \  @max = sort {$b <=> $a} @max;\n        } else {\n            if ($arr->[$i]\
    \ > $max[-1]) {\n                pop @max;\n                push @max, $arr->[$i];\n\
    \                @max = sort {$b <=> $a} @max;\n            }\n        }\n   \
    \ }\n    return @max;\n}", "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n \
    \   for my $i ($k..@$arr-1) {\n        if ($arr->[$i] > $max[-1]) {\n        \
    \    $max[-1] = $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n     \
    \   }\n    }\n    return @max;\n}", "    my $n = @$arr;\n    my $i = 0;\n    my\
    \ $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1)\
    \ {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @arr =\
    \ @$arr;\n    my @max;\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr[0];\n        my $max_i = 0;\n        for (my $j = 1; $j < @arr; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $max_i = $j;\n            }\n        }\n        $max[$i] = $max;\n\
    \        splice(@arr, $max_i, 1);\n        $i++;\n    }\n    return @max;\n}",
  "    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@result;\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @max;\n    for my $i\
    \ (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx]) =\
    \ ($arr->[$max_idx], $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    my @max = @sorted[0..$k-1];\n    return @max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
