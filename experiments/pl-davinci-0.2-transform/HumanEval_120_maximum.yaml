name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum([-3,\
  \ -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n\
  # Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The\
  \ length of the array will be in the range of [1, 1000].\n# 2. The elements in the\
  \ array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum\
  \ {\n    my($arr, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n\
    \        if ($arr->[$i] > $max[-1]) {\n            $max[-1] = $arr->[$i];\n  \
    \          @max = sort {$b <=> $a} @max;\n        }\n    }\n    return \\@max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    my @max = @sorted[0..$k-1];\n\
    \    return @max;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    my @result\
    \ = @sorted[0..$k-1];\n    return @result;\n}", "    my @result;\n    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    for (my $i = 0; $i < $k; $i++) {\n        push\
    \ @result, $sorted[$i];\n    }\n    return @result;\n}", "    my @result;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n &&\
    \ $j < $k) {\n        if ($arr->[$i] > $arr->[$j]) {\n            $j = $i;\n \
    \       }\n        $i++;\n    }\n    push @result, $arr->[$j];\n    $j++;\n  \
    \  while ($j < $k) {\n        my $i = 0;\n        while ($i < $n && $j < $k) {\n\
    \            if ($arr->[$i] > $arr->[$j]) {\n                $j = $i;\n      \
    \      }\n            $i++;\n        }\n        push @result, $arr->[$j];\n  \
    \      $j++;\n    }\n    return @result;\n}", "    my @max;\n    for my $i (0..$#$arr)\
    \ {\n        if (@max < $k) {\n            push @max, $arr->[$i];\n          \
    \  @max = sort {$b <=> $a} @max;\n        } else {\n            if ($arr->[$i]\
    \ > $max[-1]) {\n                pop @max;\n                push @max, $arr->[$i];\n\
    \                @max = sort {$b <=> $a} @max;\n            }\n        }\n   \
    \ }\n    return @max;\n}", "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n \
    \   for my $i ($k..@$arr-1) {\n        if ($arr->[$i] > $max[-1]) {\n        \
    \    $max[-1] = $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n     \
    \   }\n    }\n    return @max;\n}", "    my $n = @$arr;\n    my $i = 0;\n    my\
    \ $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1)\
    \ {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @arr =\
    \ @$arr;\n    my @max;\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr[0];\n        my $max_i = 0;\n        for (my $j = 1; $j < @arr; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $max_i = $j;\n            }\n        }\n        $max[$i] = $max;\n\
    \        splice(@arr, $max_i, 1);\n        $i++;\n    }\n    return @max;\n}",
  "    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@result;\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @max;\n    for my $i\
    \ (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx]) =\
    \ ($arr->[$max_idx], $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    my @max = @sorted[0..$k-1];\n    return @max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @res = ();\n    my $len = scalar @$arr;\n    return [] if $len == 0;\n \
    \   return [$arr->[0]] if $len == 1;\n    my $i = 0;\n    while ($i < $k) {\n\
    \        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($arr->[$j] > $max) {\n       \
    \         $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        push @res, $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@res;\n}", " \
    \   my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n \
    \   while ($i < $n) {\n        if ($j == $k) {\n            last;\n        }\n\
    \        if (!defined $result[$j] || $result[$j] < $arr->[$i]) {\n           \
    \ $result[$j] = $arr->[$i];\n            $j++;\n        }\n        $i++;\n   \
    \ }\n    return \\@result;\n}", "    my @max;\n    my $i = 0;\n    while ($i <\
    \ $k) {\n        my $max = $arr->[0];\n        my $max_index = 0;\n        for\
    \ (my $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n    \
    \            $max = $arr->[$j];\n                $max_index = $j;\n          \
    \  }\n        }\n        push @max, $max;\n        splice @$arr, $max_index, 1;\n\
    \        $i++;\n    }\n    return @max;\n}", "    my $n = scalar @$arr;\n    my\
    \ @result;\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[$i]\
    \ = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return @result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n \
    \   return @sorted[0..$k-1];\n}", "    my $n = scalar @$arr;\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = $n - $k;\n    while ($i < $j) {\n        my\
    \ $q = partition($arr, $i, $j);\n        if ($q == $p) {\n            last;\n\
    \        } elsif ($q < $p) {\n            $i = $q + 1;\n        } else {\n   \
    \         $j = $q - 1;\n        }\n    }\n    return [@$arr[$p .. $n - 1]];\n}",
  "    my @max;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n      \
    \  my $max_index = $i;\n        for my $j ($i+1..$#{$arr}) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $max[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return @max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @max;\n    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n\
    \    }\n    for my $i ($k..$#$arr) {\n        my $j = 0;\n        while ($j <\
    \ $k && $max[$j] > $arr->[$i]) {\n            $j++;\n        }\n        if ($j\
    \ < $k) {\n            splice @max, $j, 0, $arr->[$i];\n            pop @max;\n\
    \        }\n    }\n    return \\@max;\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @result;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index =\
    \ $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @result, $max;\n        splice @$arr,\
    \ $max_index, 1;\n        $i++;\n    }\n    return \\@result;\n}", "    my @max;\n\
    \    for my $i (0..$#$arr) {\n        if (@max < $k) {\n            push @max,\
    \ $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n        } else {\n \
    \           if ($arr->[$i] > $max[-1]) {\n                pop @max;\n        \
    \        push @max, $arr->[$i];\n                @max = sort {$b <=> $a} @max;\n\
    \            }\n        }\n    }\n    return \\@max;\n}", "    my $n = @$arr;\n\
    \    return [] if $k == 0;\n    return $arr if $k == $n;\n    my $max = $arr->[0];\n\
    \    my $max_i = 0;\n    for my $i (1..$n-1) {\n        if ($arr->[$i] > $max)\
    \ {\n            $max = $arr->[$i];\n            $max_i = $i;\n        }\n   \
    \ }\n    my $left = [];\n    my $right = [];\n    for my $i (0..$n-1) {\n    \
    \    if ($i < $max_i) {\n            push @$left, $arr->[$i];\n        } elsif\
    \ ($i > $max_i) {\n            push @$right, $arr->[$i];\n        }\n    }\n \
    \   my $left_max = maximum($left, $k-1);\n    my $right_max = maximum($right,\
    \ $k-1);\n    return [@$left_max, $max, @$right_max];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n   \
    \ my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n        my\
    \ $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        push @result, $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n      \
    \  $i++;\n    }\n    return \\@result;\n}", "    my @max;\n    for my $i (0..$k-1)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for my\
    \ $j ($i+1..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_index = $j;\n            }\n     \
    \   }\n        $max[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n  \
    \      $arr->[$i] = $max;\n    }\n    return \\@max;\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @max;\n    for\
    \ my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n\
    \        for my $j ($i+1..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_index = $j;\n      \
    \      }\n        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my $n = @$arr;\n\
    \    my @max;\n    for my $i (0..$n-1) {\n        my $j = @max;\n        while\
    \ ($j > 0 && $max[$j-1] < $arr->[$i]) {\n            $j--;\n        }\n      \
    \  if ($j < $k) {\n            splice @max, $j, 0, $arr->[$i];\n            pop\
    \ @max if @max > $k;\n        }\n    }\n    return @max;\n}", "    my @result;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n      \
    \  my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n   \
    \         if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n     \
    \           $max_index = $j;\n            }\n        }\n        $result[$i] =\
    \ $max;\n        $arr->[$max_index] = $arr->[$i];\n        $i++;\n    }\n    return\
    \ \\@result;\n}", "    my @result;\n    my $i = 0;\n    while ($i < $k) {\n  \
    \      my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my $j\
    \ = $i + 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        push @result, $max;\n        $arr->[$max_index] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@result;\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @arr = @$arr;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $n = scalar @arr;\n    my $m = $n - $k;\n    while ($i < $n) {\n        if ($j\
    \ < $m) {\n            if ($arr[$i] > $arr[$j]) {\n                $arr[$i] =\
    \ $arr[$j];\n                $j++;\n            }\n        } else {\n        \
    \    push @result, $arr[$i];\n        }\n        $i++;\n    }\n    return @result;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n\
    \        if ($arr->[$i] > $max[-1]) {\n            $max[-1] = $arr->[$i];\n  \
    \          @max = sort {$b <=> $a} @max;\n        }\n    }\n    return \\@max;\n\
    }", "    my $n = scalar @$arr;\n    my @result;\n    for (my $i = 0; $i < $k;\
    \ $i++) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n      \
    \  for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_index = $j;\n      \
    \      }\n        }\n        $result[$i] = $max;\n        $arr->[$max_index] =\
    \ $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return @result;\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return\
    \ \\@result;\n}", "    my @result;\n    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @result, $sorted[$i];\n  \
    \  }\n    return @result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n   \
    \ return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "    my @max;\n    for my $i (0..$k-1) {\n\
    \        my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j\
    \ ($i+1..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index],\
    \ $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index =\
    \ $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $result[$i] = $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $i++;\n    }\n    return \\@result;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @max;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        push @max, $arr->[$i];\n     \
    \   $i++;\n    }\n    @max = sort {$b <=> $a} @max;\n    while ($i < @$arr) {\n\
    \        if ($arr->[$i] > $max[-1]) {\n            $max[-1] = $arr->[$i];\n  \
    \          @max = sort {$b <=> $a} @max;\n        }\n        $i++;\n    }\n  \
    \  return @max;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @max;\n    foreach my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n\
    \    }\n    @max = sort {$b <=> $a} @max;\n    foreach my $i ($k..$#{$arr}) {\n\
    \        if ($arr->[$i] > $max[$k-1]) {\n            $max[$k-1] = $arr->[$i];\n\
    \            @max = sort {$b <=> $a} @max;\n        }\n    }\n    return @max;\n\
    }", "    my @max;\n    foreach my $i (@$arr) {\n        if (@max < $k) {\n   \
    \         push @max, $i;\n            @max = sort {$b <=> $a} @max;\n        }\
    \ else {\n            if ($i > $max[-1]) {\n                pop @max;\n      \
    \          push @max, $i;\n                @max = sort {$b <=> $a} @max;\n   \
    \         }\n        }\n    }\n    return @max;\n}", "    my @result;\n    my\
    \ $max;\n    for my $i (0..$k-1) {\n        $max = $arr->[$i];\n        for my\
    \ $j ($i+1..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $arr->[$j] = $arr->[$i];\n            \
    \    $arr->[$i] = $max;\n            }\n        }\n        push @result, $max;\n\
    \    }\n    return \\@result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "    my @result;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $n = scalar @$arr;\n    while ($i < $n) {\n        if ($j < $k)\
    \ {\n            push @result, $arr->[$i];\n            $j++;\n        } else\
    \ {\n            my $min = $result[0];\n            my $min_index = 0;\n     \
    \       for (my $l = 1; $l < $k; $l++) {\n                if ($result[$l] < $min)\
    \ {\n                    $min = $result[$l];\n                    $min_index =\
    \ $l;\n                }\n            }\n            if ($arr->[$i] > $min) {\n\
    \                $result[$min_index] = $arr->[$i];\n            }\n        }\n\
    \        $i++;\n    }\n    return @result;\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my $n = scalar @$arr;\n \
    \   my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $i++;\n    }\n  \
    \  return @result;\n}", "    my @max;\n    for my $i (0..$#$arr) {\n        if\
    \ ($i < $k) {\n            push @max, $arr->[$i];\n        } else {\n        \
    \    my $min = $max[0];\n            my $min_idx = 0;\n            for my $j (1..$#max)\
    \ {\n                if ($max[$j] < $min) {\n                    $min = $max[$j];\n\
    \                    $min_idx = $j;\n                }\n            }\n      \
    \      if ($arr->[$i] > $min) {\n                $max[$min_idx] = $arr->[$i];\n\
    \            }\n        }\n    }\n    return [sort {$b <=> $a} @max];\n}", " \
    \   my @result;\n    my $size = scalar @$arr;\n    if ($k > $size) {\n       \
    \ return $arr;\n    }\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for my $j ($i+1..$size-1) {\n          \
    \  if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result[$i] = $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n\
    \    return \\@result;\n}", "    return [] if $k == 0;\n    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n   \
    \ my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n        my\
    \ $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        push @result, $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n      \
    \  $i++;\n    }\n    return \\@result;\n}", "    my @result;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index =\
    \ $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @result, $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n    }\n    return\
    \ \\@result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @max;\n    for my $i (0..$#$arr) {\n        if (@max < $k) {\n   \
    \         push @max, $arr->[$i];\n            next;\n        }\n        my $min\
    \ = $max[0];\n        my $min_index = 0;\n        for my $j (1..$#max) {\n   \
    \         if ($max[$j] < $min) {\n                $min = $max[$j];\n         \
    \       $min_index = $j;\n            }\n        }\n        if ($arr->[$i] > $min)\
    \ {\n            $max[$min_index] = $arr->[$i];\n        }\n    }\n    return\
    \ \\@max;\n}", "    my @max = ();\n    my $i = 0;\n    my $j = 0;\n    my $n =\
    \ scalar @$arr;\n    while ($i < $n) {\n        if ($j < $k) {\n            push\
    \ @max, $arr->[$i];\n            $j++;\n        } else {\n            my $min\
    \ = $max[0];\n            my $min_index = 0;\n            for (my $l = 1; $l <\
    \ $k; $l++) {\n                if ($max[$l] < $min) {\n                    $min\
    \ = $max[$l];\n                    $min_index = $l;\n                }\n     \
    \       }\n            if ($arr->[$i] > $min) {\n                $max[$min_index]\
    \ = $arr->[$i];\n            }\n        }\n        $i++;\n    }\n    return @max;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @result;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n   \
    \     my $max_index = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_index\
    \ = $j;\n            }\n        }\n        push @result, $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\\
    @result;\n}", "    my @arr = @$arr;\n    my @res;\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        my $max = $arr[0];\n        my $max_idx = 0;\n        for (my\
    \ $j = 1; $j < @arr; $j++) {\n            if ($arr[$j] > $max) {\n           \
    \     $max = $arr[$j];\n                $max_idx = $j;\n            }\n      \
    \  }\n        push @res, $max;\n        splice @arr, $max_idx, 1;\n        $i++;\n\
    \    }\n    return @res;\n}", "    my $n = scalar @$arr;\n    my $i = 0;\n   \
    \ my $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr, $i,\
    \ $j);\n        if ($m == $k - 1) {\n            last;\n        } elsif ($m >\
    \ $k - 1) {\n            $j = $m - 1;\n        } else {\n            $i = $m +\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @result;\n \
    \   my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n       \
    \ my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n    \
    \        if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_index = $j;\n            }\n        }\n        push @result, $max;\n\
    \        splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return \\@result;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my $len = scalar @$arr;\n    return $arr if $len == $k;\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        my $p = partition($arr,\
    \ $i, $j);\n        if ($p == $k - 1) {\n            return [@$arr[0..$p]];\n\
    \        } elsif ($p > $k - 1) {\n            $j = $p - 1;\n        } else {\n\
    \            $i = $p + 1;\n        }\n    }\n    return [@$arr[0..$i]];\n}", " \
    \   my @max;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n\
    \        my $max_index = 0;\n        for (my $j = 1; $j < @$arr; $j++) {\n   \
    \         if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n     \
    \           $max_index = $j;\n            }\n        }\n        push @max, $max;\n\
    \        splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return @max;\n\
    }", "    my @max;\n    for my $i (0..$#$arr) {\n        if (@max < $k) {\n   \
    \         push @max, $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n\
    \        } else {\n            if ($arr->[$i] > $max[-1]) {\n                pop\
    \ @max;\n                push @max, $arr->[$i];\n                @max = sort {$b\
    \ <=> $a} @max;\n            }\n        }\n    }\n    return @max;\n}", "    my\
    \ @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "   \
    \ my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        my $temp = $arr->[$i];\n        $arr->[$i] = $max;\n        $arr->[$max_index]\
    \ = $temp;\n        $i++;\n    }\n    return \\@result;\n}", "    my @sorted =\
    \ sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n)\
    \ {\n        if ($arr->[$i] > $arr->[$j]) {\n            $j = $i;\n        }\n\
    \        if ($i - $j == $k) {\n            push @result, $arr->[$j];\n       \
    \     $j++;\n        }\n        $i++;\n    }\n    return \\@result;\n}", "   \
    \ my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n   \
    \ while ($i < $n) {\n        if ($j < $k) {\n            $result[$j] = $arr->[$i];\n\
    \            $j++;\n        } else {\n            my $min = $result[0];\n    \
    \        my $min_index = 0;\n            for (my $m = 1; $m < $k; $m++) {\n  \
    \              if ($result[$m] < $min) {\n                    $min = $result[$m];\n\
    \                    $min_index = $m;\n                }\n            }\n    \
    \        if ($arr->[$i] > $min) {\n                $result[$min_index] = $arr->[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "  \
    \  my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n\
    \        if ($arr->[$i] > $max[-1]) {\n            $max[-1] = $arr->[$i];\n  \
    \          @max = sort {$b <=> $a} @max;\n        }\n    }\n    return \\@max;\n\
    }", "    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max =\
    \ $arr->[$i];\n        my $max_index = $i;\n        for (my $j = $i + 1; $j <\
    \ @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      push @result, $max;\n        splice @$arr, $max_index, 1;\n        $i++;\n\
    \    }\n    return \\@result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "    my @max;\n    for my $i (0..$k-1) {\n\
    \        my $max = $arr->[$i];\n        my $max_i = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_i = $j;\n            }\n        }\n        @$arr[$i, $max_i]\
    \ = @$arr[$max_i, $i];\n        push @max, $max;\n    }\n    return \\@max;\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_idx = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@result;\n}", "    my @result;\n    my $i\
    \ = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @result, $max;\n        splice @$arr,\
    \ $max_index, 1;\n        $i++;\n    }\n    return \\@result;\n}", "    my @result;\n\
    \    my $max = -1000;\n    my $max_idx = -1;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        for (my $j = 0; $j < @$arr; $j++) {\n            if ($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @result, $max;\n        $arr->[$max_idx]\
    \ = -1000;\n        $max = -1000;\n    }\n    return @result;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n)\
    \ {\n        if ($j < $k) {\n            push @result, $arr->[$i];\n         \
    \   $j++;\n        } else {\n            my $min = $result[0];\n            my\
    \ $min_index = 0;\n            for (my $l = 1; $l < $k; $l++) {\n            \
    \    if ($result[$l] < $min) {\n                    $min = $result[$l];\n    \
    \                $min_index = $l;\n                }\n            }\n        \
    \    if ($arr->[$i] > $min) {\n                $result[$min_index] = $arr->[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "  \
    \  my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $index = $i;\n        for my $j ($i..$#{$arr}) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $index = $j;\n\
    \            }\n        }\n        push @result, $max;\n        $arr->[$index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n    }\n    return\
    \ \\@result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my $len = scalar @$arr;\n    my @max;\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        my $max = $arr->[$i];\n        my $index = $i;\n        for\
    \ my $j ($i + 1 .. $len - 1) {\n            if ($arr->[$j] > $max) {\n       \
    \         $max = $arr->[$j];\n                $index = $j;\n            }\n  \
    \      }\n        $max[$i] = $max;\n        $arr->[$index] = $arr->[$i];\n   \
    \     $arr->[$i] = $max;\n        $i++;\n    }\n    return @max;\n}", "    my\
    \ @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@result;\n}", "    my @res = sort {$b <=>\
    \ $a} @$arr;\n    return [@res[0..$k-1]];\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my $n = scalar @$arr;\n \
    \   my $p = partition($arr, 0, $n - 1);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $p = partition($arr, 0, $p - 1);\n        } else\
    \ {\n            $p = partition($arr, $p + 1, $n - 1);\n        }\n    }\n   \
    \ return [@$arr[0..$p]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    my @result\
    \ = @sorted[0..$k-1];\n    return @result;\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @max;\n    for my $i (0..$k-1)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for my\
    \ $j ($i+1..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_index = $j;\n            }\n     \
    \   }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index],\
    \ $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @max;\n    for my $i (0..$k-1)\
    \ {\n        my $max = -1000;\n        my $max_index = -1;\n        for my $j\
    \ (0..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        push @max, $max;\n        splice @{$arr}, $max_index, 1;\n    }\n   \
    \ return @max;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n \
    \   while ($i < $n && $j < $k) {\n        if ($arr->[$i] > $arr->[$j]) {\n   \
    \         $result[$j] = $arr->[$i];\n            $i++;\n        } else {\n   \
    \         $result[$j] = $arr->[$j];\n            $j++;\n        }\n    }\n   \
    \ while ($i < $n) {\n        $result[$j] = $arr->[$i];\n        $i++;\n      \
    \  $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $arr->[$j];\n  \
    \      $j++;\n    }\n    return @result;\n}", "    my @max = sort {$b <=> $a}\
    \ @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n        if ($arr->[$i] > $max[-1])\
    \ {\n            $max[-1] = $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n\
    \        }\n    }\n    return \\@max;\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my $n = @$arr;\n    my @result;\n\
    \    if ($k == 0) {\n        return @result;\n    }\n    if ($k >= $n) {\n   \
    \     return sort {$b <=> $a} @$arr;\n    }\n    my $i = 0;\n    my $j = $k -\
    \ 1;\n    while ($i <= $j) {\n        my $max = $i;\n        for (my $m = $i +\
    \ 1; $m <= $j; $m++) {\n            if ($arr->[$m] > $arr->[$max]) {\n       \
    \         $max = $m;\n            }\n        }\n        ($arr->[$i], $arr->[$max])\
    \ = ($arr->[$max], $arr->[$i]);\n        $i++;\n    }\n    for (my $i = 0; $i\
    \ < $k; $i++) {\n        push @result, $arr->[$i];\n    }\n    return sort {$b\
    \ <=> $a} @result;\n}", "    my $n = scalar @$arr;\n    return [] if $k == 0;\n\
    \    return $arr if $k == $n;\n    my @max;\n    for my $i (0..$k-1) {\n     \
    \   $max[$i] = $arr->[$i];\n    }\n    for my $i (0..$k-1) {\n        for my $j\
    \ ($i+1..$k-1) {\n            if ($max[$j] > $max[$i]) {\n                ($max[$i],\
    \ $max[$j]) = ($max[$j], $max[$i]);\n            }\n        }\n    }\n    for\
    \ my $i ($k..$n-1) {\n        for my $j (0..$k-1) {\n            if ($arr->[$i]\
    \ > $max[$j]) {\n                ($max[$j], $arr->[$i]) = ($arr->[$i], $max[$j]);\n\
    \            }\n        }\n    }\n    return \\@max;\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @max = sort {$b\
    \ <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n        if ($arr->[$i]\
    \ > $max[-1]) {\n            $max[-1] = $arr->[$i];\n            @max = sort {$b\
    \ <=> $a} @max;\n        }\n    }\n    return \\@max;\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n) {\n\
    \        if ($j < $k) {\n            push @result, $arr->[$i];\n            $j++;\n\
    \        } else {\n            my $min = min @result;\n            if ($arr->[$i]\
    \ > $min) {\n                my $index = first_index { $_ == $min } @result;\n\
    \                $result[$index] = $arr->[$i];\n            }\n        }\n   \
    \     $i++;\n    }\n    return sort { $b <=> $a } @result;\n}", "    my $len =\
    \ scalar @$arr;\n    my $i = 0;\n    my $j = $len - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    return [@$arr[0..$p]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n    my $n = scalar\
    \ @$arr;\n    for (my $i = 0; $i < $n; $i++) {\n        my $num = $arr->[$i];\n\
    \        if (scalar @result < $k) {\n            push @result, $num;\n       \
    \     if (scalar @result == $k) {\n                @result = sort {$b <=> $a}\
    \ @result;\n            }\n        } else {\n            if ($num > $result[$k\
    \ - 1]) {\n                $result[$k - 1] = $num;\n                @result =\
    \ sort {$b <=> $a} @result;\n            }\n        }\n    }\n    return @result;\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @result;\n    my $len = scalar @$arr;\n    my $i = 0;\n    while ($i < $len)\
    \ {\n        my $j = $i + 1;\n        while ($j < $len) {\n            if ($arr->[$i]\
    \ < $arr->[$j]) {\n                my $tmp = $arr->[$i];\n                $arr->[$i]\
    \ = $arr->[$j];\n                $arr->[$j] = $tmp;\n            }\n         \
    \   $j++;\n        }\n        $i++;\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        push @result, $arr->[$i];\n    }\n    return @result;\n}", "    my\
    \ @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "   \
    \ my $n = scalar @$arr;\n    my @max;\n    for my $i (0..$n-1) {\n        my $j\
    \ = $#max;\n        while ($j >= 0 && $arr->[$i] > $max[$j]) {\n            $j--;\n\
    \        }\n        if ($j < $k-1) {\n            splice @max, $j+1, 0, $arr->[$i];\n\
    \            pop @max if @max > $k;\n        }\n    }\n    return \\@max;\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
