language: pl
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split //, $num;\n    my $count = 0;\n    my %primes = (\n        2 => 1,\n\
    \        3 => 1,\n        5 => 1,\n        7 => 1,\n        11 => 1,\n       \
    \ 13 => 1,\n    );\n    foreach my $n (@nums) {\n        if (exists $primes{$n})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $digit (split //, $num) {\n        $count++ if exists $primes{$digit};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map {$_ => 1} @primes;\n\
    \    for my $i (0..length($num)-1) {\n        my $digit = substr($num, $i, 1);\n\
    \        $count++ if exists $primes{$digit};\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $i (0 .. length($num) - 1) {\n        my $digit = substr($num, $i,\
    \ 1);\n        $count++ if exists $primes{$digit};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        $count++ if exists $primes{$digit};\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_\
    \ } 0 .. $#hex;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if (grep { $hex{$_} eq $digit } @primes) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %hex = (\n        0 =>\
    \ 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7,\n        8 => 8,\
    \ 9 => 9, A => 10, B => 11, C => 12, D => 13, E => 14, F => 15\n    );\n    my\
    \ @digits = split(//, $num);\n    foreach my $digit (@digits) {\n        if (grep\
    \ {$_ == $hex{$digit}} @primes) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    for my $h (@hex) {\n        if ($h\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex eq '2' || $hex eq '3' || $hex eq '5' || $hex eq '7' || $hex eq 'B'\
    \ || $hex eq 'D') {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = (0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n    my @prime\
    \ = (2,3,5,7,11,13);\n    my @num = split(//,$num);\n    foreach my $n (@num)\
    \ {\n        foreach my $p (@prime) {\n            if ($n eq $p) {\n         \
    \       $count++;\n            }\n        }\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $i (0..length($num)-1) {\n\
    \        my $c = substr($num, $i, 1);\n        for my $p (@primes) {\n       \
    \     if ($c eq $p) {\n                $count++;\n                last;\n    \
    \        }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex_map = map { $hex[$_] =>\
    \ $_ } 0 .. $#hex;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if (exists $hex_map{$digit}) {\n            if (grep { $_ == $hex_map{$digit}\
    \ } @primes) {\n                $count++;\n            }\n        }\n    }\n \
    \   return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    my @digits = split //, $num;\n    foreach my $digit (@digits) {\n       \
    \ $count++ if exists $primes{$digit};\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n    \
    \    if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    for my $digit (@digits) {\n   \
    \     if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $h (@hex) {\n        if\
    \ ($h =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split //, $num;\n    foreach my $n (@nums) {\n        if\
    \ ($n =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my @primes = qw(2\
    \ 3 5 7 B D);\n    foreach my $digit (split //, $num) {\n        if (grep {$_\
    \ eq $digit} @primes) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    for my $char (split //, $num) {\n        if (exists $primes{$char})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $digit (split //, $num) {\n        $count++ if $primes{$digit};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_primes = (10, 11, 12, 13,\
    \ 14, 15);\n    my @hex_num = split(//, $num);\n    foreach my $i (@hex_num) {\n\
    \        if (grep {$_ eq $i} @hex_primes) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $digit (@hex) {\n     \
    \   if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $c (split //, $num) {\n        $count++ if $primes{$c};\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_str = ('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex_map\
    \ = map { $hex_str[$_] => $hex[$_] } 0 .. $#hex;\n    my @num_arr = split(//,\
    \ $num);\n    foreach my $n (@num_arr) {\n        if (grep {$_ == $hex_map{$n}}\
    \ @primes) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n\
    \    for my $digit (@digits) {\n        for my $prime (@primes) {\n          \
    \  if ($digit eq $prime) {\n                $count++;\n            }\n       \
    \ }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    foreach my $digit (split //, $num) {\n        $count++ if exists\
    \ $primes{hex($digit)};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (2 => 1, 3 => 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1);\n\
    \    my %hex = (0 => 1, 1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1,\
    \ 8 => 1, 9 => 1, A => 1, B => 1, C => 1, D => 1, E => 1, F => 1);\n    my @digits\
    \ = split(//, $num);\n    foreach my $digit (@digits) {\n        if (exists $primes{$digit})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if (exists $primes{$digit}) {\n            $count++;\n        }\n   \
    \ }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $d (@digits) {\n        if (grep {$_ eq $d} @primes) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n    \
    \    if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_primes = (2, 3, 5, 7, 11,\
    \ 13);\n    my %hex_primes = map { $hex[$_] => $hex_primes[$_] } 0..$#hex;\n \
    \   my @num = split //, $num;\n    for my $i (@num) {\n        if (exists $hex_primes{$i})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = map { $_ => 1 } qw(2 3 5 7 B D);\n    for my $char (split\
    \ //, $num) {\n        $count++ if $primes{$char};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @hex = split //, $num;\n    for my $hex (@hex) {\n      \
    \  if ($primes{$hex}) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %hex_primes = map { $_\
    \ => 1 } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits)\
    \ {\n        $count++ if $hex_primes{$digit};\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_primes = (2, 3, 5, 7, 11, 13);\n    my @hex_digits = split(//,\
    \ $num);\n    foreach my $digit (@hex_digits) {\n        foreach my $prime (@hex_primes)\
    \ {\n            if ($digit eq $prime) {\n                $count++;\n        \
    \    }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my @primes = qw(2\
    \ 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n    for my $digit (split\
    \ //, $num) {\n        $count++ if exists $primes{$digit};\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $d (@digits) {\n  \
    \      if ($primes{$d}) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @hex_primes)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $i (0 .. length($num) - 1) {\n        my $c = substr($num, $i, 1);\n\
    \        $count++ if exists $primes{$c};\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if (exists $primes{$digit}) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_\
    \ } 0 .. $#hex;\n    my @digits = split //, $num;\n    for my $digit (@digits)\
    \ {\n        $count++ if grep { $hex{$_} eq $digit } @primes;\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_digits = split(//, $num);\n    foreach my $digit (@hex_digits)\
    \ {\n        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @hex = split(//, $num);\n  \
    \  foreach my $digit (@hex) {\n        if (grep {$_ eq $digit} @primes) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        11 => 1,\n        13 => 1,\n    );\n    my @digits =\
    \ split(//, $num);\n    foreach my $digit (@digits) {\n        if (exists $primes{$digit})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $digit (@hex) {\n     \
    \   if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_primes = ('2', '3', '5',\
    \ '7', 'B', 'D');\n    my @num = split //, $num;\n    for my $i (@num) {\n   \
    \     for my $j (@hex_primes) {\n            if ($i eq $j) {\n               \
    \ $count++;\n            }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex_digits = (0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex_digits = map { $hex_digits[$_]\
    \ => $_ } 0..$#hex_digits;\n    my @hex_digits_str = ('0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex_digits_str\
    \ = map { $hex_digits_str[$_] => $_ } 0..$#hex_digits_str;\n    my @digits = split\
    \ //, $num;\n    foreach my $digit (@digits) {\n        if (grep { $hex_digits{$hex_digits_str{$digit}}\
    \ == $_ } @primes) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    for my $char (split //, $num) {\n        $count++ if $primes{hex($char)};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        $count++ if exists $primes{$digit};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $d (@digits) {\n  \
    \      if ($primes{$d}) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $c (split //, $num) {\n        $count++ if exists $primes{$c};\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $digit (split //, $num) {\n\
    \        $count++ if grep {$_ eq $digit} @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n    my $count = 0;\n \
    \   for my $digit (@digits) {\n        $count++ if grep {$_ eq $digit} @primes;\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $char (split //, $num) {\n        $count++ if $primes{$char};\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = split(//, $num);\n    my $count = 0;\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @hex = split //, $num;\n   \
    \ foreach my $hex (@hex) {\n        foreach my $prime (@primes) {\n          \
    \  if ($hex eq $prime) {\n                $count++;\n            }\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_ } 0..$#hex;\n    my @digits\
    \ = split //, $num;\n    my $count = 0;\n    for my $digit (@digits) {\n     \
    \   $count++ if grep { $hex{$digit} == $_ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ foreach my $digit (split(//, $num)) {\n        $count++ if exists $primes{$digit};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $char (split //, $num) {\n        $count++ if $primes{$char};\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    for my $digit (split //, $num) {\n        $count++ if exists\
    \ $primes{hex $digit};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split //, $num;\n    foreach my $n (@nums) {\n        if\
    \ ($n =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @num = split(//, $num);\n  \
    \  foreach my $n (@num) {\n        foreach my $p (@primes) {\n            if ($n\
    \ eq $p) {\n                $count++;\n            }\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        $count++ if exists $primes{$digit};\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hex_primes = (\n        '2' => 1,\n        '3' => 1,\n       \
    \ '5' => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n\
    \    foreach my $char (split //, $num) {\n        $count++ if $hex_primes{$char};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $i (0..length($num)-1) {\n\
    \        my $digit = substr($num, $i, 1);\n        if (grep {$_ eq $digit} @primes)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n    \
    \    if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if (exists $primes{$digit}) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if (exists $primes{$digit}) {\n            $count++;\n        }\n   \
    \ }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_primes = (10, 11, 12, 13,\
    \ 14, 15);\n    my @hex_num = split(//, $num);\n    foreach my $digit (@hex_num)\
    \ {\n        if (grep {$_ eq $digit} @hex_primes) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        $count++ if (grep {$_ eq $digit} @primes);\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $char (split //, $num) {\n\
    \        $count++ if grep {$_ eq $char} @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n    \
    \    if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_digits = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D',\
    \ 'E', 'F');\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_\
    \ => 1 } @primes;\n    for my $digit (split //, $num) {\n        $count++ if exists\
    \ $primes{$digit};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $h (@hex) {\n        if\
    \ ($h =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex_map = map { $hex[$_] =>\
    \ $_ } 0 .. $#hex;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        my $dec = $hex_map{$digit};\n        if (grep { $_ == $dec } @primes)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    for my $i (0 .. length($num)\
    \ - 1) {\n        my $c = substr($num, $i, 1);\n        $count++ if (grep {$_\
    \ eq $c} @primes);\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    foreach my $hex (@hex) {\n        if\
    \ ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $d (@digits) {\n  \
    \      if (exists $primes{$d}) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split //, $num;\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_primes = qw(2 3 5 7 B D);\n    my @hex_digits = split(//,\
    \ $num);\n    foreach my $digit (@hex_digits) {\n        if (grep {$_ eq $digit}\
    \ @hex_primes) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @nums = split(//, $num);\n    foreach my $n (@nums) {\n \
    \       if ($primes{$n}) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex = map { $hex[$_]\
    \ => $_ } 0..$#hex;\n    foreach my $char (split //, $num) {\n        $count++\
    \ if grep { $hex{$char} == $_ } @primes;\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    foreach my $digit (split //, $num)\
    \ {\n        $count++ if grep { $digit eq $_ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split //, $num;\n  \
    \  foreach my $n (@nums) {\n        if ( grep { $_ eq $n } @primes ) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_str = ('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex_map\
    \ = map { $hex_str[$_] => $hex[$_] } 0 .. $#hex;\n    my @num_arr = split(//,\
    \ $num);\n    foreach my $n (@num_arr) {\n        if (grep { $_ == $hex_map{$n}\
    \ } @primes) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $i (@hex) {\n        if\
    \ ($i =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $digit (split //, $num) {\n        $count++ if exists $primes{$digit};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821321
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_primes = (0, 0, 1, 1, 0,\
    \ 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0);\n    my %hex_map = map { $hex[$_] => $hex_primes[$_]\
    \ } 0..$#hex;\n    my @digits = split(//, $num);\n    foreach my $digit (@digits)\
    \ {\n        if ($hex_map{$digit}) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %hex_primes = map { $_\
    \ => 1 } @primes;\n    for my $char (split //, $num) {\n        $count++ if exists\
    \ $hex_primes{$char};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $digit (split //, $num) {\n        $count++ if $primes{$digit};\n   \
    \ }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my $count = 0;\n    my @nums = split(//, $num);\n\
    \    foreach my $n (@nums) {\n        if ($n =~ /[A-F]/) {\n            $n = ord($n)\
    \ - 55;\n        }\n        if (grep {$_ == $n} @primes) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    for my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n \
    \           $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        11 => 1,\n        13 => 1,\n    );\n    my @digits =\
    \ split(//, $num);\n    foreach my $digit (@digits) {\n        if ($primes{hex($digit)})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split(//, $num);\n    my $count = 0;\n    foreach my $n (@nums) {\n      \
    \  if ($n =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex = map { $hex[$_]\
    \ => $_ } 0..$#hex;\n    for my $c (split //, $num) {\n        $count++ if grep\
    \ { $hex{$c} == $_ } @primes;\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map { $_ => 1 } @primes;\n\
    \    for my $c (split //, $num) {\n        $count++ if exists $primes{$c};\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = split //, $num;\n    my $count = 0;\n    for my $i (@hex) {\n        if ($i\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep { $_ eq $digit } @primes)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hex = (\n        '0' => 0,\n        '1' => 1,\n        '2' =>\
    \ 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' =>\
    \ 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' =>\
    \ 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E'\
    \ => 14,\n        'F' => 15,\n    );\n    my @primes = (2, 3, 5, 7, 11, 13);\n\
    \    my @digits = split(//, $num);\n    foreach my $digit (@digits) {\n      \
    \  if (grep {$_ == $hex{$digit}} @primes) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    foreach my $hex (@hex) {\n        if\
    \ ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    for my $digit (@digits) {\n        $count++ if grep {$_ eq $digit} @primes;\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $h (@hex) {\n        if\
    \ ($h =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex_primes = map { $hex[$_]\
    \ => $primes[$_] } 0..$#hex;\n    for my $digit (split //, $num) {\n        $count++\
    \ if $hex_primes{$digit};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $h (@hex) {\n        if\
    \ ($h =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $p (@primes) {\n        $count\
    \ += $num =~ s/$p//g;\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @num = split //, $num;\n   \
    \ for my $n (@num) {\n        for my $p (@primes) {\n            if ($n eq $p)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        11 => 1,\n        13 => 1,\n    );\n    my @digits =\
    \ split //, $num;\n    foreach my $d (@digits) {\n        if ($d =~ /[A-F]/) {\n\
    \            $d = ord($d) - ord('A') + 10;\n        }\n        if (exists $primes{$d})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $digit (@hex) {\n     \
    \   if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    my @primes = qw(2 3 5 7 B D);\n  \
    \  foreach my $hex (@hex) {\n        foreach my $prime (@primes) {\n         \
    \   if ($hex eq $prime) {\n                $count++;\n            }\n        }\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (2,3,5,7,11,13);\n    for my $i (0..length($num)-1) {\n\
    \        my $digit = substr($num, $i, 1);\n        $count++ if exists $primes{hex($digit)};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n    my $count =\
    \ 0;\n    foreach my $digit (@digits) {\n        if (grep(/^$digit$/, @primes))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_\
    \ } 0 .. $#hex;\n    my @nums = split //, $num;\n    for my $n (@nums) {\n   \
    \     $count++ if grep { $hex{$n} == $_ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    for my $char\
    \ (split //, $num) {\n        $count++ if $primes{$char};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split //, $num;\n    my $count = 0;\n    foreach my $n (@nums) {\n       \
    \ if ($n =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    foreach my $d (@digits) {\n   \
    \     if ($d =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $hex (@hex) {\n       \
    \ if ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_digits = split(//, $num);\n    foreach my $digit (@hex_digits)\
    \ {\n        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $digit (split //, $num) {\n\
    \        $count++ if grep { $digit eq $_ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my @num = split(//, $num);\n    my $count = 0;\n\
    \    for my $i (@num) {\n        for my $j (@primes) {\n            if ($i eq\
    \ $j) {\n                $count++;\n            }\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_\
    \ } 0 .. $#hex;\n    my @digits = split //, $num;\n    for my $d (@digits) {\n\
    \        $count++ if grep { $hex{$d} == $_ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    foreach my $digit (@digits) {\n\
    \        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    for my $p (@primes) {\n        $count\
    \ += $num =~ s/$p//g;\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n    my $count = 0;\n \
    \   for my $digit (@digits) {\n        $count++ if grep { $_ eq $digit } @primes;\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split //, $num;\n    foreach my $hex (@hex) {\n        if\
    \ ($hex =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    for my $digit (split //, $num) {\n        $count++ if $primes{hex($digit)};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split(//, $num);\n    foreach my $n (@nums) {\n       \
    \ if ($n =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        11 => 1,\n        13 => 1,\n    );\n    my @digits =\
    \ split //, $num;\n    for my $d (@digits) {\n        if ($d =~ /[0-9]/) {\n \
    \           $count++ if $primes{$d};\n        }\n        elsif ($d =~ /[A-F]/)\
    \ {\n            $count++ if $primes{ord($d) - 55};\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        '2' => 1,\n        '3' => 1,\n        '5'\
    \ => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n   \
    \ for my $i (split //, $num) {\n        $count++ if $primes{$i};\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %prime = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    for my $digit\
    \ (split //, $num) {\n        $count++ if $prime{$digit};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split //, $num;\n    for my $n (@nums) {\n        if ($n\
    \ =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split(//, $num);\n    foreach my $n (@nums) {\n       \
    \ if ($n eq \"2\" || $n eq \"3\" || $n eq \"5\" || $n eq \"7\" || $n eq \"B\"\
    \ || $n eq \"D\") {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    for my $digit (@digits) {\n\
    \        if ($primes{$digit}) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my %hex = map { $hex[$_] => $_\
    \ } 0 .. $#hex;\n    my %hex_prime = map { $primes[$_] => $_ } 0 .. $#primes;\n\
    \    my @digits = split //, $num;\n    foreach my $digit (@digits) {\n       \
    \ if (exists $hex_prime{$hex{$digit}}) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    for my $digit (split //, $num) {\n        $count++ if $primes{hex($digit)};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my $count = 0;\n    foreach my $digit (split(//,\
    \ $num)) {\n        foreach my $prime (@primes) {\n            if ($digit eq $prime)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821233
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my @digits = split //, $num;\n    foreach my $digit (@digits)\
    \ {\n        $count++ if $primes{$digit};\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_digits = split //, $num;\n    foreach my $digit (@hex_digits)\
    \ {\n        if ($digit =~ /[2357BD]/) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821233
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my @hex = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @hex_str = ('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    my %hex_map\
    \ = map { $hex_str[$_] => $hex[$_] } 0 .. $#hex;\n    my @num_arr = split(//,\
    \ $num);\n    for my $i (@num_arr) {\n        if (grep { $_ == $hex_map{$i} }\
    \ @primes) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @digits = split(//, $num);\n\
    \    foreach my $digit (@digits) {\n        if (grep {$_ eq $digit} @primes) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes = map { $_ => 1\
    \ } @primes;\n    my %hex = (\n        0 => 0,\n        1 => 1,\n        2 =>\
    \ 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n        6 => 6,\n   \
    \     7 => 7,\n        8 => 8,\n        9 => 9,\n        A => 10,\n        B =>\
    \ 11,\n        C => 12,\n        D => 13,\n        E => 14,\n        F => 15,\n\
    \    );\n    for my $digit (split //, $num) {\n        $count++ if $primes{$hex{$digit}};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821322
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    my @nums = split(//, $num);\n \
    \   foreach my $n (@nums) {\n        if (grep {$_ eq $n} @primes) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821232
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_primes = (2, 3, 5, 7, 11, 13);\n    my @hex_digits = split(//,\
    \ $num);\n    foreach my $digit (@hex_digits) {\n        if (grep {$_ eq $digit}\
    \ @hex_primes) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821322
