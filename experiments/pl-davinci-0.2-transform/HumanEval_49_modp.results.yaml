language: pl
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n & 1);\n\t$n >>= 1;\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $n >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013660
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $c = modp($n/2, $p);\n    $c = ($c * $c) % $p;\n    $c = ($c *\
    \ 2) % $p if $n % 2;\n    return $c;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r * $p) % $MOD;\n\t\
    }\n\t$p = ($p * $p) % $MOD;\n\t$n = int($n / 2);\n    }\n    return $r;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpmzdv6m62.pl line 17.

    '
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n % $p == 0;\n    my $r = 1;\n    while ($n > 0) {\n\
    \        $r = ($r * 2) % $p if $n % 2 == 1;\n        $n = int($n / 2);\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = $n / 2;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    my($b) = 2;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r *\
    \ $b) % $p;\n\t}\n\t$n = int($n / 2);\n\t$b = ($b * $b) % $p;\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013660
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r * $p) % MODULUS;\n\
    \t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % MODULUS;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmprn_ly7xa.pl line 17.

    '
  stdout: ''
  timestamp: 1660013694
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r * $n) % $p;\n\t}\n\
    \t$n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013694
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    my($b) = 2;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r *\
    \ $b) % $p;\n\t}\n\t$n = int($n / 2);\n\t$b = ($b * $b) % $p;\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    my $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * 2) %\
    \ $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013694
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n \
    \       }\n        $n >>= 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013660
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n /= 2;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n % $p == 0;\n    my $r = 1;\n    while ($n > 0) {\n\
    \        $r = ($r * 2) % $p if $n % 2 == 1;\n        $n = int($n / 2);\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n /= 2;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * $n) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n / 2, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n % 2;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    my $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r * $n) % $p;\n\t}\n\
    \t$n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013694
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n/2, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r *\
    \ 2) % $p if $n % 2;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        $r = ($r * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $x = modp($n >> 1, $p);\n    $x = ($x * $x) % $p;\n    $x = ($x\
    \ * 2) % $p if $n & 1;\n    return $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * $n) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        $r = ($r * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: -1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $res = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $res = ($res * $n) %\
    \ $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n\
    \    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ok!
  timestamp: 1660013699
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    my $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    my($b) = 2;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r = ($r * $b)\
    \ % $p;\n\t}\n\t$n = int($n / 2);\n\t$b = ($b * $b) % $p;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = $n / 2;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while($n > 0) {\n        if($n % 2 == 1) {\n            $r = ($r * $p) %\
    \ MOD;\n        }\n        $p = ($p * $p) % MOD;\n        $n = int($n / 2);\n\
    \    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmptptwvk4i.pl line 17.

    '
  stdout: ''
  timestamp: 1660013694
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $res = 1;\n\
    \    while ($n) {\n        $res = ($res * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013694
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $res = 1;\n\
    \    while ($n > 0) {\n        $res = ($res * 2) % $p if $n % 2;\n        $n =\
    \ int($n / 2);\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * $n) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r =\
    \ ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b)\
    \ % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    my($b) = 2;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r = ($r * $b)\
    \ % $p;\n\t}\n\t$n = int($n / 2);\n\t$b = ($b * $b) % $p;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = $n / 2;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    my $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n/2, $p);\n    $r = ($r*$r) % $p;\n    $r = ($r*2)\
    \ % $p if $n % 2 == 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013694
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        $r = ($r * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        $r = ($r * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    return 0 if $n % $p == 0;\n    my $r = 1;\n    while ($n > 0) {\n\
    \        $r = ($r * 2) % $p if $n % 2 == 1;\n        $n = int($n / 2);\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = $n / 2;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 0 if $n\
    \ == 0;\n    return 1 if $n == 1;\n    my $r = 1;\n    while ($n > 0) {\n    \
    \    $r = ($r * 2) % $p if $n % 2 == 1;\n        $n = int($n / 2);\n    }\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013694
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b\
    \ * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * $n) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n) {\n        $r = ($r * 2) % $p if $n & 1;\n        $n >>= 1;\n\
    \    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $r = ($r * $n)\
    \ % $p;\n        }\n        $n = int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($r) = 1;\n\
    \    my($b) = 2;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r *\
    \ $b) % $p;\n\t}\n\t$n = int($n / 2);\n\t$b = ($b * $b) % $p;\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013660
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    return 1 if $n\
    \ == 0;\n    my $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r\
    \ * 2) % $p if $n & 1;\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013630
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n\
    # >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n\
    # >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013630
