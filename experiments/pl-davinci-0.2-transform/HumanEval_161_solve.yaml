name: HumanEval_161_solve
language: pl
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n\
  # \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $res = \"\";\n    my $has_letter = 0;\n  \
    \  for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter\
    \ = 1;\n            $res .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n\
    \            $res .= $c;\n        }\n    }\n    return $has_letter ? $res : scalar\
    \ reverse $s;\n}", "    my $rev = '';\n    if ($s =~ /[a-zA-Z]/) {\n        for\
    \ my $c (split //, $s) {\n            if ($c =~ /[a-z]/) {\n                $rev\
    \ .= uc $c;\n            }\n            elsif ($c =~ /[A-Z]/) {\n            \
    \    $rev .= lc $c;\n            }\n            else {\n                $rev .=\
    \ $c;\n            }\n        }\n    }\n    else {\n        $rev = reverse $s;\n\
    \    }\n    return $rev;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = \"\";\n    my $is_letter\
    \ = 0;\n    for my $i (0..length($s)-1) {\n        my $c = substr($s, $i, 1);\n\
    \        if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n            if\
    \ ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } else {\n    \
    \            $c = lc($c);\n            }\n        }\n        $result .= $c;\n\
    \    }\n    if ($is_letter == 0) {\n        $result = reverse($result);\n    }\n\
    \    return $result;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c\
    \ (@s) {\n        if ($c =~ /[a-z]/i) {\n            push @r, $c =~ /[a-z]/ ?\
    \ uc $c : lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    return join \"\", @r;\n}", "    my $r = '';\n    for (my $i = length($s)\
    \ - 1; $i >= 0; $i--) {\n        my $c = substr($s, $i, 1);\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n \
    \           $r .= lc($c);\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/) {\n  \
    \      for my $c (split //, $s) {\n            if ($c =~ /[a-z]/) {\n        \
    \        $r .= uc $c;\n            } elsif ($c =~ /[A-Z]/) {\n               \
    \ $r .= lc $c;\n            } else {\n                $r .= $c;\n            }\n\
    \        }\n    } else {\n        $r = reverse $s;\n    }\n    return $r;\n}",
  "    my $r = \"\";\n    my $c;\n    for (my $i = 0; $i < length($s); $i++) {\n \
    \       $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $c\
    \ = uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $c = lc($c);\n   \
    \     }\n        $r = $c . $r;\n    }\n    return $r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my $r = reverse $s;\n    $r =~ tr/[a-z]/[A-Z]/ if $r =~ /[a-z]/;\n    $r =~\
    \ tr/[A-Z]/[a-z]/ if $r =~ /[A-Z]/;\n    return $r;\n}", "    my $r = '';\n  \
    \  for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = \"\";\n    if($s =~ /[a-zA-Z]/) {\n        for my $c (split\
    \ //, $s) {\n            if($c =~ /[a-z]/) {\n                $r .= uc $c;\n \
    \           } elsif($c =~ /[A-Z]/) {\n                $r .= lc $c;\n         \
    \   } else {\n                $r .= $c;\n            }\n        }\n    } else\
    \ {\n        $r = reverse $s;\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my $rev = 1;\n    for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n\
    \            $rev = 0;\n            last;\n        }\n    }\n    if ($rev) {\n\
    \        return reverse $s;\n    }\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $c = uc $c;\n        }\n        elsif ($c =~ /[A-Z]/) {\n   \
    \         $c = lc $c;\n        }\n    }\n    return join '', @s;\n}", "    my\
    \ @a = split //, $s;\n    my @b = map {\n        if (/[a-z]/) {\n            uc;\n\
    \        } elsif (/[A-Z]/) {\n            lc;\n        } else {\n            $_;\n\
    \        }\n    } @a;\n    return join '', @b;\n}", "    my $r = '';\n    if($s\
    \ =~ /[a-zA-Z]/) {\n        $r = reverse $s;\n    } else {\n        $r = reverse\
    \ $s;\n    }\n    return $r;\n}", "    my $res = '';\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        $res = reverse $s;\n    } else {\n        $res = reverse $s;\n  \
    \  }\n    return $res;\n}", "    my @a = split //, $s;\n    my @b = map {\n  \
    \      if (/[a-z]/) {\n            uc;\n        } elsif (/[A-Z]/) {\n        \
    \    lc;\n        } else {\n            $_;\n        }\n    } @a;\n    return\
    \ join '', @b;\n}", "    my $r = reverse $s;\n    my @r = split //, $r;\n    my\
    \ @s = split //, $s;\n    my $i = 0;\n    my $j = 0;\n    my $len = scalar @s;\n\
    \    my $res = '';\n    while ($i < $len) {\n        if ($s[$i] =~ /[a-zA-Z]/)\
    \ {\n            $res .= $r[$j];\n        } else {\n            $res .= $s[$i];\n\
    \        }\n        $i++;\n        $j++;\n    }\n    return $res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
