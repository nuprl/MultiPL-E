name: HumanEval_43_pairs_sum_to_zero
language: pl
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2,\
  \ 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5,\
  \ 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $len = scalar(@$l);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            if ($l->[$i] + $l->[$j] == 0) {\n                $flag = 1;\n\
    \                last;\n            }\n        }\n    }\n    if ($flag == 1) {\n\
    \        return 1;\n    } else {\n        return 0;\n    }\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $n = scalar(@$l);\n    my $found = 0;\n\
    \    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n    \
    \        if ($l->[$i] + $l->[$j] == 0) {\n                $found = 1;\n      \
    \          $i = $n;\n                $j = $n;\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $found;\n}", "    my $i = 0;\n  \
    \  my $j = 0;\n    my $len = @$l;\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   for ($j = $i + 1; $j < $len; $j++) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my @list = @$l;\n    my %hash = ();\n    for my $i (@list) {\n\
    \        if (exists $hash{-$i}) {\n            return 1;\n        }\n        $hash{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $n = scalar(@$l);\n    my $found = 0;\n    while ($i < $n) {\n  \
    \      $j = $i + 1;\n        while ($j < $n) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                $found = 1;\n                last;\n            }\n\
    \            $j = $j + 1;\n        }\n        if ($found) {\n            last;\n\
    \        }\n        $i = $i + 1;\n    }\n    return $found;\n}", "    my %hash;\n\
    \    foreach my $i (@$l) {\n        if (exists $hash{-$i}) {\n            return\
    \ 1;\n        }\n        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my $i;\n\
    \    my $j;\n    my $len = scalar(@$l);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        for ($j = $i + 1; $j < $len; $j++) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $i = 0;\n    my $j = 0;\n    my $len = scalar(@$l);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n\
    \            if ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n    \
    \        }\n        }\n    }\n    return 0;\n}", "    my @list = @$l;\n    my\
    \ $len = scalar @list;\n    for (my $i = 0; $i < $len; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $len; $j++) {\n            if ($list[$i] + $list[$j] == 0)\
    \ {\n                return 1;\n            }\n        }\n    }\n    return 0;\n\
    }", "    my $len = scalar(@$l);\n    my $i = 0;\n    my $j = 0;\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n      \
    \      if ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n          \
    \  }\n        }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $e (@$l)\
    \ {\n        if (exists $h{-$e}) {\n            return 1;\n        }\n       \
    \ $h{$e} = 1;\n    }\n    return 0;\n}", "    my %h;\n    for my $i (@$l) {\n\
    \        if (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my %hash;\n    foreach my $i (@$l) {\n\
    \        if (exists $hash{-$i}) {\n            return 1;\n        }\n        $hash{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my $i = 0;\n    my $j = 0;\n    my $n =\
    \ scalar(@$l);\n    while ($i < $n) {\n        $j = $i + 1;\n        while ($j\
    \ < $n) {\n            if ($l->[$i] + $l->[$j] == 0) {\n                return\
    \ 1;\n            }\n            $j = $j + 1;\n        }\n        $i = $i + 1;\n\
    \    }\n    return 0;\n}", "    my $i = 0;\n    my $j = 0;\n    my $found = 0;\n\
    \    for ($i = 0; $i < scalar(@$l); $i++) {\n        for ($j = $i + 1; $j < scalar(@$l);\
    \ $j++) {\n            if ($l->[$i] + $l->[$j] == 0) {\n                $found\
    \ = 1;\n                last;\n            }\n        }\n        if ($found) {\n\
    \            last;\n        }\n    }\n    return $found;\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $n = scalar(@$l);\n    while ($i < $n) {\n        $j =\
    \ $i + 1;\n        while ($j < $n) {\n            if ($l->[$i] + $l->[$j] == 0)\
    \ {\n                return 1;\n            }\n            $j = $j + 1;\n    \
    \    }\n        $i = $i + 1;\n    }\n    return 0;\n}", "    my @list = @$l;\n\
    \    my %hash = ();\n    my $i;\n    my $j;\n    my $k;\n    my $flag = 0;\n \
    \   for ($i = 0; $i < scalar(@list); $i++) {\n        $hash{$list[$i]} = 1;\n\
    \    }\n    for ($j = 0; $j < scalar(@list); $j++) {\n        $k = -$list[$j];\n\
    \        if (exists($hash{$k})) {\n            $flag = 1;\n            last;\n\
    \        }\n    }\n    return $flag;\n}", "    my %hash;\n    foreach my $i (@$l)\
    \ {\n        if (exists $hash{$i}) {\n            return 1;\n        }\n     \
    \   $hash{-$i} = 1;\n    }\n    return 0;\n}", "    my %hash;\n    foreach my\
    \ $x (@$l) {\n        if (exists $hash{-$x}) {\n            return 1;\n      \
    \  }\n        $hash{$x} = 1;\n    }\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
