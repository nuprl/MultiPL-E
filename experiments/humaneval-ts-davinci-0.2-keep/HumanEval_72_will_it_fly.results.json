{
  "language": "ts",
  "name": "HumanEval_72_will_it_fly",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let firstHalf = q.slice(0, q.length / 2);\n    let secondHalf = q.slice(q.length / 2);\n    if (q.length % 2 !== 0) {\n        secondHalf.shift();\n    }\n    secondHalf.reverse();\n    for (let i = 0; i < firstHalf.length; i++) {\n        if (firstHalf[i] !== secondHalf[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333788
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            for (let i = 0; i < half; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    let isPalindrome: boolean = true;\n    for (let i: number = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return sum <= w && isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - i - 1]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] !== q[q.length - i - 1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let palindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    return palindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (isPalindrome(q)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7dlql4t_.ts(18,13): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfhhk9cn3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfhhk9cn3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6o4_0j96.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6o4_0j96.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length === 1) {\n            return true;\n        }\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return true;\n        } else {\n            let middle = Math.floor(q.length / 2);\n            let left = q.slice(0, middle);\n            let right = q.slice(middle + 1);\n            if (left.join('') === right.reverse().join('')) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2xp25s3s.js:45:12)\n    at Object.<anonymous> (/tmp/tmp2xp25s3s.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpov6fb2vc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpov6fb2vc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpov6fb2vc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpov6fb2vc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx3os15bf.js:30:12)\n    at Object.<anonymous> (/tmp/tmpx3os15bf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            let firstHalf = q.slice(0, half);\n            let secondHalf = q.slice(half + 1);\n            let reversedSecondHalf = secondHalf.reverse();\n            if (firstHalf.join() == reversedSecondHalf.join()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6o4_0j96.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6o4_0j96.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return true;\n        } else {\n            let middle = Math.floor(q.length / 2);\n            let left = q.slice(0, middle);\n            let right = q.slice(middle + 1, q.length);\n            if (left.join('') === right.reverse().join('')) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt34kjm3h.js:45:12)\n    at Object.<anonymous> (/tmp/tmpt34kjm3h.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let rev = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== rev[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfrc74j1t.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfrc74j1t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgl4ano3_.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgl4ano3_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let rev = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== rev[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb62mj717.js:36:12)\n    at Object.<anonymous> (/tmp/tmpb62mj717.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return sum <= w && isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            for (let i = 0; i < half; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w && isPalindrome(q)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpejgj5ok_.ts(17,21): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let palindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    return sum <= w && palindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            let firstHalf = q.slice(0, half);\n            let secondHalf = q.slice(half + 1, q.length);\n            let firstHalfReverse = firstHalf.reverse();\n            if (firstHalfReverse.join('') === secondHalf.join('')) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    const sum = q.reduce((a, b) => a + b, 0);\n    const isBalanced = q.toString() === q.reverse().toString();\n    return sum <= w && isBalanced;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp29kowjjw.js:36:12)\n    at Object.<anonymous> (/tmp/tmp29kowjjw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum <= w) {\n    let reversed = q.slice().reverse();\n    for (let i = 0; i < q.length; i++) {\n      if (q[i] !== reversed[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i: number = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w && isPalindrome(q)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyjcdh0b5.ts(17,21): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome: boolean = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    let isBalanced = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let palindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    return palindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333795
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    let isBalanced = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            let mid = Math.floor(q.length / 2);\n            let left = q.slice(0, mid);\n            let right = q.slice(mid + 1, q.length);\n            for (let i = 0; i < left.length; i++) {\n                if (left[i] !== right[right.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx3os15bf.js:30:12)\n    at Object.<anonymous> (/tmp/tmpx3os15bf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let temp = q.slice(0);\n        temp.reverse();\n        if (JSON.stringify(q) === JSON.stringify(temp)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwulld6ro.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwulld6ro.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        if (q.join('') === reverse.join('')) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq4fu5bau.js:33:12)\n    at Object.<anonymous> (/tmp/tmpq4fu5bau.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let palindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    return palindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    if (q.length === 1) {\n        return true;\n    }\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let firstHalf = q.slice(0, q.length / 2);\n    let secondHalf = q.slice(q.length / 2, q.length);\n    let secondHalfReversed = secondHalf.reverse();\n    for (let i = 0; i < firstHalf.length; i++) {\n        if (firstHalf[i] !== secondHalfReversed[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - i - 1]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] !== q[q.length - i - 1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            let firstHalf = q.slice(0, half);\n            let secondHalf = q.slice(half + 1, q.length);\n            let firstHalfReverse = firstHalf.reverse();\n            if (firstHalfReverse.toString() == secondHalf.toString()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return sum <= w && isPalindrome;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] != q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    } else {\n        return true;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpopmzwj2n.js:32:12)\n    at Object.<anonymous> (/tmp/tmpopmzwj2n.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333799
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] != q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333799
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333799
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwulld6ro.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwulld6ro.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = false;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] === q[q.length - 1 - i]) {\n                isBalanced = true;\n            } else {\n                isBalanced = false;\n                break;\n            }\n        }\n    }\n    return isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333799
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgl4ano3_.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgl4ano3_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333788
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1a8x0z1y.js:36:12)\n    at Object.<anonymous> (/tmp/tmp1a8x0z1y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333799
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reversed = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reversed[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprxk6fh69.js:36:12)\n    at Object.<anonymous> (/tmp/tmprxk6fh69.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw0gwlc6l.js:33:12)\n    at Object.<anonymous> (/tmp/tmpw0gwlc6l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = false;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] === q[q.length - 1 - i]) {\n                isBalanced = true;\n            } else {\n                isBalanced = false;\n                break;\n            }\n        }\n    }\n    return isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            let firstHalf = q.slice(0, half);\n            let secondHalf = q.slice(half + 1, q.length);\n            let reversed = secondHalf.reverse();\n            if (firstHalf.toString() === reversed.toString()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.slice().reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    else {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] != reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu4mghxpn.js:38:12)\n    at Object.<anonymous> (/tmp/tmpu4mghxpn.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length === 1) {\n            return true;\n        }\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy61480k4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy61480k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - i - 1]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] != reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo0v1e1si.js:36:12)\n    at Object.<anonymous> (/tmp/tmpo0v1e1si.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    if (q.length === 1) {\n        return true;\n    }\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfhhk9cn3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfhhk9cn3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.slice().reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333788
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333788
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfhhk9cn3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfhhk9cn3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w && isPalindrome(q)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20x18_t0.ts(17,21): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwulld6ro.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwulld6ro.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] != q[q.length - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reversed = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] != reversed[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpradilzyo.js:36:12)\n    at Object.<anonymous> (/tmp/tmpradilzyo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp29kowjjw.js:36:12)\n    at Object.<anonymous> (/tmp/tmp29kowjjw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] == q[q.length - 1 - i]) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] == q[q.length - 1 - i]) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt_g44n1g.js:52:12)\n    at Object.<anonymous> (/tmp/tmpt_g44n1g.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\ntrue\nundefined\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < Math.floor(q.length / 2); i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpotjrad43.js:36:12)\n    at Object.<anonymous> (/tmp/tmpotjrad43.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    else {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkpasio06.js:38:12)\n    at Object.<anonymous> (/tmp/tmpkpasio06.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgl4ano3_.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgl4ano3_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let palindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - i - 1]) {\n                palindrome = false;\n            }\n        }\n        return palindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333803
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2l1_lkp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb2l1_lkp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (isPalindrome(q)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7dlql4t_.ts(18,13): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return sum <= w && isPalindrome;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 2,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w && isPalindrome(q)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpejgj5ok_.ts(17,21): error TS2304: Cannot find name 'isPalindrome'.\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333793
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw0gwlc6l.js:33:12)\n    at Object.<anonymous> (/tmp/tmpw0gwlc6l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse = q.reverse();\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjdtxfs3q.js:36:12)\n    at Object.<anonymous> (/tmp/tmpjdtxfs3q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    } else {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let left = 0;\n    let right = q.length - 1;\n    while (left < right) {\n        if (q[left] !== q[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = false;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        isBalanced = true;\n    }\n    return isBalanced;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplsaxc8_r.js:31:12)\n    at Object.<anonymous> (/tmp/tmplsaxc8_r.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfhhk9cn3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfhhk9cn3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let isPalindrome = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return isPalindrome;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333796
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reversed = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== reversed[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_ph1z4_8.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_ph1z4_8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    let isLess = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    if (sum > w) {\n        isLess = false;\n    }\n    return isBalanced && isLess;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let left = 0;\n    let right = q.length - 1;\n    while (left < right) {\n        if (q[left] !== q[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333803
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let reverse = q.reverse();\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] != reverse[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn7i6nst5.js:36:12)\n    at Object.<anonymous> (/tmp/tmpn7i6nst5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333804
    },
    {
      "exit_code": 1,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6o4_0j96.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6o4_0j96.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = false;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] === q[q.length - 1 - i]) {\n                isBalanced = true;\n            } else {\n                isBalanced = false;\n                break;\n            }\n        }\n    }\n    return isBalanced;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    let reverse: number[] = [];\n    for (let i = q.length - 1; i >= 0; i--) {\n        reverse.push(q[i]);\n    }\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== reverse[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] !== q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333792
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        let isPalindrome = true;\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n    return false;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            return false;\n        } else {\n            let mid = Math.floor(q.length / 2);\n            let left = q.slice(0, mid);\n            let right = q.slice(mid + 1, q.length);\n            let leftReverse = left.reverse();\n            if (leftReverse.join('') == right.join('')) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 === 0) {\n            return false;\n        } else {\n            let mid = Math.floor(q.length / 2);\n            let left = q.slice(0, mid);\n            let right = q.slice(mid + 1, q.length);\n            for (let i = 0; i < left.length; i++) {\n                if (left[i] !== right[right.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] != q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333799
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            return false;\n        } else {\n            let half = Math.floor(q.length / 2);\n            let firstHalf = q.slice(0, half);\n            let secondHalf = q.slice(half + 1);\n            for (let i = 0; i < firstHalf.length; i++) {\n                if (firstHalf[i] != secondHalf[secondHalf.length - i - 1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        if (q.length % 2 == 0) {\n            for (let i = 0; i < q.length / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let i = 0; i < (q.length - 1) / 2; i++) {\n                if (q[i] != q[q.length - 1 - i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333800
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length / 2; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    let isBalanced = true;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n        if (q[i] !== q[q.length - 1 - i]) {\n            isBalanced = false;\n        }\n    }\n    return isBalanced && sum <= w;\n}\n\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333789
    },
    {
      "exit_code": 0,
      "program": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w) {\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] !== q[q.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "timestamp": 1660333796
    }
  ]
}