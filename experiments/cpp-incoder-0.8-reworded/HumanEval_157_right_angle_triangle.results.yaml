language: cpp
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0) return false;\n    return (a + b > c) && (b + c > a) && (c + a > b);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpynorjxz_: /tmp/tmpynorjxz_.cpp:21: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    assert(a != 0 && b !=\
    \ 0 && c != 0);\n    if ((a + b) > c || (b + c) > a || (c + a) > b) {\n      \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu80xj182: /tmp/tmpu80xj182.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long a = a, b= b, c=\
    \ c;\n    if (a==b) return( (a==c)?true:false);\n    if (a>b) swap(a,b);\n   \
    \ if (b>c) swap(b,c);\n    if (c>a) swap(c,a);\n    long l1 = (long) sqrt((double)(a*a\
    \ + b*b + c*c));\n    long l2 = (long) sqrt((double)(b*b + c*c + a*a));\n    long\
    \ l3 = (long) sqrt((double)(a*a + c*c + b*b));\n    if (l1 > l2 && l1 > l3) {\n\
    \        long n1 = (long) sqrt((double)(a*a + c*c + b*b));\n        long n2 =\
    \ (long) sqrt((double)(b*b + c*c + a*a));\n        long n3 = (long) sqrt((double)(a*a\
    \ + b*b + c*c));\n        long t1 = ((n3*l2-n2*l3)*(n1-n2)/(n1-n3))/(n1-n2);\n\
    \        long t2 = ((n1*l2-n2*l1)*(n1-n2)/(n1-n3))/(n1-n2);\n        return (l1+l2)%2\
    \ == 0?(t1>t2):(t1>t2+2);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_jgec2f.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6_jgec2f.cpp:13:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   13 |     long a = a, b= b,\
    \ c= c;\n      |          ^\n/tmp/tmp6_jgec2f.cpp:13:17: error: declaration of\
    \ \u2018long int b\u2019 shadows a parameter\n   13 |     long a = a, b= b, c=\
    \ c;\n      |                 ^\n/tmp/tmp6_jgec2f.cpp:13:23: error: declaration\
    \ of \u2018long int c\u2019 shadows a parameter\n   13 |     long a = a, b= b,\
    \ c= c;\n      |                       ^\n/tmp/tmp6_jgec2f.cpp:15:14: error: \u2018\
    swap\u2019 was not declared in this scope\n   15 |     if (a>b) swap(a,b);\n \
    \     |              ^~~~\n/tmp/tmp6_jgec2f.cpp:15:14: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6_jgec2f.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6_jgec2f.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6_jgec2f.cpp:2:\n/usr/include"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a + b > c) {\n\t\t\
    long temp = c;\n\t\tc = a;\n\t\ta = temp;\n\t}\n\n\tif (a + c > b) {\n\t\tlong\
    \ temp = b;\n\t\tb = a;\n\t\ta = temp;\n\t}\n\n\tif (b + c > a) {\n\t\tlong temp\
    \ = a;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\n\t// Two edges of a triangle\n\t// Two\
    \ edges of a triangle is such that if one edge is right angle or 90 degree then\
    \ both are right angle\n\tif (a == b || a == c) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptrrjmdt_: /tmp/tmptrrjmdt_.cpp:41: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Base Case\n    if\
    \ (a < 0 || b < 0 || c < 0) {\n        return false;\n    }\n\n    if (a == 0\
    \ || b == 0 || c == 0) {\n        return true;\n    }\n\n    // If a + b + c are\
    \ all equally divisible by three, then the triangle \n    // is a right-angle\
    \ triangle.\n    if ((a + b + c) % 3 != 0) {\n        return false;\n    }\n\n\
    \    // If a + b + c are all equally divisible by three or both sides are \n \
    \   // equally divisible by three, then the triangle is a right-angle \n    //\
    \ triangle.\n    if ((a + b + c) % 3 == 0 && (a + b) % 3 == 0 && (b + c) % 3 ==\
    \ 0) {\n        return true;\n    }\n\n    // If a + b + c are all equally divisible\
    \ by four, then the triangle \n    // is a right-angle triangle.\n    if ((a +\
    \ b + c) % 4 == 0 && (a + b) % 3 == 0 && (b + c) % 3 == 0 && (a + c) % 3 == 0)\
    \ {\n        return true;\n    }\n\n    // If a + b + c are all equally divisible\
    \ by five or both sides are \n    // equally divisible by five then triangle is\
    \ right-angled triangle.\n    if ((a + b + c) % 5 == 0 && (a + b) % 4 == 0 &&\
    \ (b + c) % 4 == 0 && (a + c) % 4 == 0 && (a + c) % 3 == 0) {\n        return\
    \ true;\n    }\n\n    // If a + b + c are all equally divisible by six, then triangle\
    \ is right-\n    // angled triangle.\n    if ((a + b + c) % 6 == 0 && (a + b)\
    \ % 5 == 0 && (b + c) % 5 == 0 && (a + c) % 5 == 0 && (a + c) % 4 == 0 && (a +\
    \ c) % 3 == 0) {\n        return true;\n    }\n\n    // If a + b + c are all equally\
    \ divisible by seven then triangle is right-\n    // angled triangle.\n    if\
    \ ((a + b + c) % 7 == 0 && (a + b) % 6 == 0 && (b + c) % 6 == 0 && (a + c) % 6\
    \ == 0 && (a + c) % 5 == 0 && (a + c) % 4 == 0 && (a + c) % 3 == 0) {\n      \
    \  return true;\n    }\n\n    // If a + b + c are all equally divisible by eight\
    \ or both sides are \n    // equally divisible by eight then triangle is right-angled\
    \ triangle.\n    if ((a + b + c) % 8 == 0 && (a + b) % 7 == 0 && (b + c) % 7 ==\
    \ 0 && (a + c) % 7 == 0 && (a + c) % 6 == 0 && (a + c\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnlwqe7ej.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpnlwqe7ej.cpp:61:119: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   61 |     if ((a + b + c) % 8 ==\
    \ 0 && (a + b) % 7 == 0 && (b + c) % 7 == 0 && (a + c) % 7 == 0 && (a + c) % 6\
    \ == 0 && (a + c\n      |                                                    \
    \                                                             ~     ^\n      |\
    \                                                                            \
    \                                           )\n   62 | }\n      | ~          \
    \                                                                            \
    \                                \n/tmp/tmpnlwqe7ej.cpp:61:119: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   61 |     if ((a + b + c) % 8 ==\
    \ 0 && (a + b) % 7 == 0 && (b + c) % 7 == 0 && (a + c) % 7 == 0 && (a + c) % 6\
    \ == 0 && (a + c\n      |        ~                                           \
    \                                                                   ^\n      |\
    \                                                                            \
    \                                           )\n   62 | }\n      | ~          \
    \                                                                            \
    \                                \n/tmp/tmpnlwqe7ej.cpp:62:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpnlwqe7ej.cpp:62:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   62 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here.\n\
    \  if (a == b && b == c) {\n    return true;\n  }\n  if (a == c || b == c) {\n\
    \    return true;\n  }\n  if (a < b  && b < c) {\n    return true;\n  }\n  if\
    \ (a < c  && c < b) {\n    return true;\n  }\n  if (a == b || a == c || b == c)\
    \ {\n    return false;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1lg89i3v: /tmp/tmp1lg89i3v.cpp:34: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    int a = abs(a), b = abs(b),\
    \ c = abs(c);\n    int max = a + b + c;\n    return (a >= b) && (b >= c) && (c\
    \ >= max);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcigztqd.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpgcigztqd.cpp:13:9: error: declaration\
    \ of \u2018int a\u2019 shadows a parameter\n   13 |     int a = abs(a), b = abs(b),\
    \ c = abs(c);\n      |         ^\n/tmp/tmpgcigztqd.cpp:13:21: error: declaration\
    \ of \u2018int b\u2019 shadows a parameter\n   13 |     int a = abs(a), b = abs(b),\
    \ c = abs(c);\n      |                     ^\n/tmp/tmpgcigztqd.cpp:13:33: error:\
    \ declaration of \u2018int c\u2019 shadows a parameter\n   13 |     int a = abs(a),\
    \ b = abs(b), c = abs(c);\n      |                                 ^\n"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong d1 = b - a;\n\tlong\
    \ d2 = c - a;\n\t// This condition is true if one or both of the sides equals\
    \ 0\n\t// return true if both sides are equal\n\tif (d1 == 0 && d2 == 0) return\
    \ true;\n\t// This condition is true if one of both sides is 90 degrees\n\tif\
    \ (d1 == 180 && d2 == 0) return false;\n\t// If both sides are 180 degree return\
    \ false as no triangle is possible\n\tif (d1 == 180 && d2 == 180) return false;\n\
    \t// If both sides are not 90 degree return true as triangle is possible\n\tif\
    \ (d1 == 180 && d2 != 0) return true;\n\t// If one of the sides is 90 degree return\
    \ false as no triangle is possible\n\tif (d1 != 180 && d2 == 180) return false;\n\
    \t// If both sides are not 90 and are equal to each other\n\tif (d1 != 180 &&\
    \ d2 == 180) return true;\n\t// This condition is true if the two sides are equal\
    \ or near equal\n\t// to each other\n\tif (d1 < 4 && d2 < 4) return true;\n\t\
    // If both sides are not equal\n\t// return true if the difference between the\
    \ sides is greater than 180\n\tif (d1 != d2 && d1 > 180) return true;\n\t// If\
    \ one side is greater than 180 return false\n\tif (d1 > 180 && d2 > 180) return\
    \ false;\n\t// else return true\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppeegqy1a: /tmp/tmppeegqy1a.cpp:42: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Declare a variable\
    \ for a triangle as triangle_sides, it will be initialised with sides of a right-angled\
    \ triangle.\n    long triangle_sides[3] = { a, b, c };\n    // Declare a variable\
    \ for a variable for sum, it is used to store the sum of the three sides.\n  \
    \  long sum = 0;\n    // Declare a variable for an iterator variable which points\
    \ to the beginning of the array.\n    long it = 0;\n    // Declare a variable\
    \ for an iterator variable which points to the end of the array.\n    long end\
    \ = sizeof triangle_sides / sizeof *triangle_sides - 1;\n    // Declare a variable\
    \ for an iterator variable which points to the middle of the array.\n    long\
    \ mid = (end - it) / 2;\n\n    // Find the sum of the three sides.\n    while\
    \ (it < end) {\n        sum += *triangle_sides++;\n        it++;\n    }\n    //\
    \ If sum is equals to 0 then return false.\n    if (sum == 0) {\n        return\
    \ false;\n    }\n    // Calculate the sum of squares of three sides.\n    double\
    \ sum_squaresum = sum * sum;\n    // Calculate a^2 + b^2 + c^2.\n    double sum_squares\
    \ = a * b + b * c + c * a;\n    // Calculate square of product of two sides divided\
    \ by the square of sum of two sides.\n    double product = triangle_sides[0] *\
    \ triangle_sides[1] + triangle_sides[1] * triangle_sides[2];\n    // Calculate\
    \ sum of squares of the product of two sides.\n    double sum_squares_product\
    \ = sum_squares * product;\n    // Calculate square of sum of two sides divided\
    \ by the square of sum of the two sides.\n    double sum_squares_product_square\
    \ = sum_squares_product * sum;\n    // Calculate square of sum of the two sides\
    \ divided by the square of the sum of the two sides.\n    double sum_squares_product_square_2\
    \ = sum_squares_product_square * sum;\n    // Calculate the value of discriminant.\n\
    \    double discriminant = sum_squares_product_square_2 - sum_squares_product\
    \ * sum;\n    // If discriminant is negative or less than 0 then return false.\n\
    \    if (discriminant >= 0) {\n        return false;\n    }\n    // If discriminant\
    \ is greater than 0 then calculate the value of hypotenuse.\n    double hypotenuse\
    \ = sqrt(discriminant);\n    // If hypotenuse is greater than 90 degrees then\
    \ return false.\n    if (hypotenuse > M_PI) {\n        return false;\n    }\n\
    \    // If hypotenuse is less than 90 degrees then calculate the value of one\
    \ angle and two angles.\n    double angle_1 = 2 * triangle_sides[0] / hypotenuse;\n\
    \    double angle_2 = \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblxh8sie.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpblxh8sie.cpp:26:31: error: lvalue required\
    \ as increment operand\n   26 |         sum += *triangle_sides++;\n      |   \
    \                            ^~\n/tmp/tmpblxh8sie.cpp:60:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpblxh8sie.cpp:60:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // write your code here\n\
    \  long sum = a+b+c;\n  if(sum%3==0){\n  return true;\n  }\n  else{\n  return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpysz6kx5o: /tmp/tmpysz6kx5o.cpp:25: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    int d_1 = (a + b + c)\
    \ / 2;\n    int d_2 = (b + c + a) / 2;\n    int d_3 = (c + a + b) / 2;\n    return\
    \ !(d_1 * d_2 < d_2 * d_1 || d_1 * d_3 < d_2 * d_3);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr1lnsqrm: /tmp/tmpr1lnsqrm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong delta = b * b - 4\
    \ * a * c;\n\tlong root1 = (-b + sqrt(delta)) / (2 * a);\n\tlong root2 = (-b -\
    \ sqrt(delta)) / (2 * a);\n\treturn ((root1 < 0) && (root2 < 0)) ? false : true;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9cmg9e8x: /tmp/tmp9cmg9e8x.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if((a + b > c) && (a + c > b) && (b + c > a))\n        return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpm5sc5oay: /tmp/tmpm5sc5oay.cpp:23: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return ((b - c) > a ||\
    \ ((a - b) > c || ((c - a) > b)));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmploa3wfzi: /tmp/tmploa3wfzi.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long c1 = b - c;\n  \
    \  long b1 = c - b;\n    long a1 = a * c;\n\n    long c2 = a1 - b1;\n    long\
    \ a2 = a1 * b;\n\n    long d = a2 + b1;\n    long a3 = a2 * b;\n\n    return (c1\
    \ == c2 || b1 == c2 || a1 == c2 || a2 == c2 || a3 == c2 || \n        d == c2);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp93kad7wz: /tmp/tmp93kad7wz.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a>b)\n\t\treturn false;\n\
    \tif (b>c)\n\t\treturn false;\n\tif (a==b==c)\n\t\treturn true;\n\treturn ((b*b\
    \ + c*c - a*a) >= 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpssm8qv6d: /tmp/tmpssm8qv6d.cpp:24: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your logic here\n\
    \    if(a==b)\n        return c>=b;\n    if(a<b)\n        return (a+b==c) || (b+c==a)\
    \ || (c+a==b);\n    if(a<c)\n        return (c+b==a) || (a==b) || (b+c==a);\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgjdw_frg: /tmp/tmpgjdw_frg.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  bool flag;\n  // Two conditions,\
    \ one condition\n  if (a == b) \n  {\n    if (b == c) \n    {\n      if (a ==\
    \ 0) \n      {\n        flag = true;\n      }\n      else \n      {\n        flag\
    \ = false;\n      }\n    }\n    else if (a == c || b == c) \n    {\n      flag\
    \ = true;\n    }\n  }\n  else if (a == c || b == c) \n  {\n    flag = true;\n\
    \  }\n  else \n  {\n    flag = false;\n  }\n  return flag;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeeif1jxp: /tmp/tmpeeif1jxp.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a == 0 || b == 0 ||\
    \ c == 0)\n    return false;\n  if (a + b > c)\n    return false;\n  if (a + c\
    \ > b)\n    return false;\n  if (b + c > a)\n    return false;\n  long side =\
    \ (a + b + c) / 2;\n  long u1 = (a + b) / 2;\n  long u2 = (b + c) / 2;\n  long\
    \ u3 = (a + c) / 2;\n  if (u1 == a && u2 == b && u3 == c)\n    return true;\n\
    \  if (u1 == b && u2 == c && u3 == a)\n    return true;\n  if (u1 == c && u2 ==\
    \ a && u3 == b)\n    return true;\n  if (u1 == u2 && u2 == u3 && u3 == a)\n  \
    \  return true;\n  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp68hu_onx: /tmp/tmp68hu_onx.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    // If the above calculation does not result in an integer,\n   \
    \ // then no triangle can be found.\n    if(d == 0)\n        return false;\n \
    \   long root = (long)(sqrt(d));\n    return ((root * root) == d);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi7ezuqe0: /tmp/tmpi7ezuqe0.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a + b > c) {\n\t\t\
    std::cout<<\"Right angle triangle is not possible\"<<std::endl;\n\t\treturn false;\n\
    \t}\n\tif (b + c > a) {\n\t\tstd::cout<<\"Right angle triangle is not possible\"\
    <<std::endl;\n\t\treturn false;\n\t}\n\tif (a + c > b) {\n\t\tstd::cout<<\"Right\
    \ angle triangle is not possible\"<<std::endl;\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoq9s_y5o: /tmp/tmpoq9s_y5o.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: 'Right angle triangle is not possible

    '
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long s1=a;\n  long s2=b;\n\
    \  long s3=c;\n  long d=s1-s2;\n  long e=s2-s3;\n  long f=s3-s1;\n  long g=d*d-e*f;\n\
    \  if((g>=0) || (g<0)){\n    return true;\n  }\n  else{\n    return false;\n \
    \ }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe0ybqbqp: /tmp/tmpe0ybqbqp.cpp:30: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a+b>c) {\n       \
    \ return false;\n    }\n    if(a+c>b) {\n        return false;\n    }\n    if(b+c>a)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_8mvyj6j: /tmp/tmp_8mvyj6j.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long l1 = a - b, l2 =\
    \ c - b, l3 = a + c;\n    return std::abs(l1 - l2) < std::abs(l1 - l3) && std::abs(l2\
    \ - l3) < std::abs(l1 - l2);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2zat25vy: /tmp/tmp2zat25vy.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a == b) \n\t\treturn\
    \ (a + c) == b;\n\tif (a == c)\n\t\treturn (b + c) == a;\n\treturn (a + c) ==\
    \ b;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpttbpxfrq: /tmp/tmpttbpxfrq.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  return (b - a == c && a\
    \ >= b) || (c - b == a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcls08f5v: /tmp/tmpcls08f5v.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    return d >= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppel28wi3: /tmp/tmppel28wi3.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (b - a == (c-a));\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0s2_8io2: /tmp/tmp0s2_8io2.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Base case: if the\
    \ length of the three sides is 0, then the triangle is a\n    // right-angled\
    \ triange.\n    if (a == 0 && b == 0 && c == 0)\n        return true;\n    \n\
    \    // Calculate the hypotenuse of the right angle triangle by the\n    // formula\n\
    \    //      hypotenuse = sqrt(a^2 + b^2 + c^2)\n    // and then compare it with\
    \ the right angle triangle that formed\n    // using the formula with the formula.\n\
    \    //\n    // if hypotenuse is a right angled triangle, then return true\n \
    \   long hypotenuse = std::sqrt(a * a + b * b + c * c);\n    if (a >= b + c &&\
    \ a >= c && a >= b + hypotenuse && b >= a + hypotenuse && c >= a + hypotenuse\
    \ && c >= b + hypotenuse)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppv1j64av: /tmp/tmppv1j64av.cpp:32: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\treturn ((a + b > c) &&\
    \ (a + c > b) && (b + c > a));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp862t66hb: /tmp/tmp862t66hb.cpp:20: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (((c-b)>=a&&((c-b)%a==0)&&((c+b)>=a&&((c+b)%a==0)));\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyy16_48r.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpyy16_48r.cpp:13:63: error: expected\
    \ \u2018)\u2019 before \u2018;\u2019 token\n   13 |     return (((c-b)>=a&&((c-b)%a==0)&&((c+b)>=a&&((c+b)%a==0)));\n\
    \      |            ~                                                  ^\n   \
    \   |                                                               )\n"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  return (a * b * c >= 0)\
    \ && (b * c >= 0) && (c * a >= 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5powpq2q: /tmp/tmp5powpq2q.cpp:18: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = a * b;\n  \
    \  long ac = a * c;\n    long bc = b * c;\n    long abc = ab + bc;\n    long acbc\
    \ = ac + bc;\n    return abc > acbc;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpo8u33djq: /tmp/tmpo8u33djq.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n  assert(a > 0 && b >\
    \ 0 && c > 0);\n  if((a + b) > c || (b + c) > a || (c + a) > b) {\n    return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmivyrz69: /tmp/tmpmivyrz69.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a > b) {\n\t\tlong\
    \ temp = b;\n\t\tb = a;\n\t\ta = temp;\n\t}\n\n\tif (a > c) {\n\t\tlong temp =\
    \ c;\n\t\tc = a;\n\t\ta = temp;\n\t}\n\n\tif (b > c) {\n\t\tlong temp = c;\n\t\
    \tc = b;\n\t\tb = temp;\n\t}\n\n\tlong x1 = (a + b) / 2;\n\tlong x2 = (c + a)\
    \ / 2;\n\tlong x3 = (c + b) / 2;\n\n\tif (x1 * x1 + x2 * x2 == x3 * x3) {\n\t\t\
    return true;\n\t}\n\n\treturn false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxgqz77fv: /tmp/tmpxgqz77fv.cpp:43: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b && b>c){\n        return false; \n    }\n    else if (c>a && c>b){\n\
    \        return true;\n    }\n    else if (a>c && a>b){\n        return false;\n\
    \    }\n    else if(b>a && b>c){\n        return false;\n    }\n    else if(c>a\
    \ && c>b){\n        return true;\n    }\n    else if(a==b){\n        if(c>b){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    else if(c==b){\n        if(a>b){\n            return true;\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    else\
    \ if(a==c){\n        if(b>c){\n            return true;\n        }\n        else{\n\
    \            return false;\n        }\n    }\n    else if(b==c){\n        return\
    \ true;\n    }\n    else{\n        return false; \n    }\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpit94fk46: /tmp/tmpit94fk46.cpp:63: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Complete the function\n\
    \    if ((a + b > c) || (b + c > a) || (c + a > b)) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgrkwfzi4: /tmp/tmpgrkwfzi4.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return ((b * b - 4 *\
    \ a * c) >= 0) && ((b * b + 4 * a * c) <= 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphlm1rewg: /tmp/tmphlm1rewg.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long a1, b1, c1, a2, b2,\
    \ c2;\n  long n1, n2, n3;\n  a1 = a2 = c1 = b2 = n1 = 0;\n  a2 = b1 = c2 = n2\
    \ = 0;\n  a3 = b3 = n3 = a = 0;\n  while (b != 0) {\n    n1 = b % 10;\n    b =\
    \ (b - a) / 10;\n    a1 = a1 + n1;\n    a2 = a2 + n2;\n    a3 = a3 + n3;\n   \
    \ c1 = c1 - n1 * a1;\n    c2 = c2 - n2 * a2;\n    c3 = c3 - n3 * a3;\n    if (a\
    \ > b) {\n      a = b;\n      a1 = a2;\n      a2 = a3;\n      a3 = c1;\n     \
    \ c1 = c2;\n      c2 = c3;\n      c3 = n1;\n      n1 = a1;\n      n2 = a2;\n \
    \     n3 = a3;\n    }\n  }\n  long min = a1, minn = min;\n  long max = a1, maxx\
    \ = max;\n  long maxy = a1, maxn = max;\n  if (c2 < 0)\n    minn = 0;\n  else\
    \ if (c3 < 0)\n    maxn = 0;\n  else {\n    a1 = c1 / a1;\n    a2 = c2 / a2;\n\
    \    a3 = c3 / a3;\n    minn = a1 - a2;\n    maxx = a1 + a3;\n    maxy = a2 -\
    \ a3;\n    maxn = a1 + a2 + a3;\n  }\n  return (minn > maxx && minn > maxy &&\
    \ minn < maxn);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpogo9zjpl.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpogo9zjpl.cpp:17:3: error: \u2018a3\u2019\
    \ was not declared in this scope; did you mean \u2018n3\u2019?\n   17 |   a3 =\
    \ b3 = n3 = a = 0;\n      |   ^~\n      |   n3\n/tmp/tmpogo9zjpl.cpp:17:8: error:\
    \ \u2018b3\u2019 was not declared in this scope; did you mean \u2018n3\u2019?\n\
    \   17 |   a3 = b3 = n3 = a = 0;\n      |        ^~\n      |        n3\n/tmp/tmpogo9zjpl.cpp:26:5:\
    \ error: \u2018c3\u2019 was not declared in this scope; did you mean \u2018n3\u2019\
    ?\n   26 |     c3 = c3 - n3 * a3;\n      |     ^~\n      |     n3\n/tmp/tmpogo9zjpl.cpp:45:12:\
    \ error: \u2018c3\u2019 was not declared in this scope; did you mean \u2018n3\u2019\
    ?\n   45 |   else if (c3 < 0)\n      |            ^~\n      |            n3\n"
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > 0 && b > 0 &&\
    \ c > 0) {\n        return ((a * b) - (c * b)) == 0 ? true : false;\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpr7u7kjm5: /tmp/tmpr7u7kjm5.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong sine = (a + b + c)\
    \ / 2;\n\tif (sine % 2 == 0) {\n\t\tdouble x = ((b - a + c) / sine);\n\t\treturn\
    \ fabs(x - 1.0) < 1e-3;\n\t} else {\n\t\tdouble y = ((c - b - a) / sine);\n\t\t\
    return fabs(y - 1.0) < 1e-3;\n\t}\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp781qtx4o: /tmp/tmp781qtx4o.cpp:26: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    int a1 = abs(a - b);\n\
    \    int a2 = abs(a - c);\n    int a3 = abs(b - c);\n    if (a1 == a2) {\n   \
    \     if (a == b && (c == a3)) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp95tpc8hk: /tmp/tmp95tpc8hk.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  return (b * b) - (4 * a\
    \ * c) == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa6vets4g: /tmp/tmpa6vets4g.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ans, x, y, z;\n\
    \    if (a + b > c) {\n        ans = false;\n    } else {\n        x = a;\n  \
    \      y = b;\n        z = c;\n        if (z == a + b) {\n            return true;\n\
    \        }\n        if (b == c || x == c) {\n            return false;\n     \
    \   }\n        long ans = (a + b + c - 1) * (a - b) / (b - c);\n        if (ans\
    \ == a + b && ans == c || ans == a + b - 1 && ans == c - 1) {\n            return\
    \ true;\n        }\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpogd7px8w: /tmp/tmpogd7px8w.cpp:35: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif(a+b > c && b+c > a &&\
    \ a+c > b)\n\t\treturn true;\n\telse \n\t\treturn false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp08ow3gd7: /tmp/tmp08ow3gd7.cpp:23: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Check base cases\n \
    \ if (a == 0)\n    return (b == 0) || (c == 0);\n  if (b == 0)\n    return (a\
    \ == 0) || (c == 0);\n  if (c == 0)\n    return (b == 0) || (a == 0);\n\n  //\
    \ Check for possible divisors\n  int div_a = a / 2;\n  int div_b = b / 2;\n  int\
    \ div_c = c / 2;\n  if (div_a > div_b && div_a > div_c)\n    return div_a > div_b;\n\
    \  else if (div_b > div_c)\n    return div_b > div_c;\n  else\n    return div_c\
    \ > div_a;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppvw3_m8j: /tmp/tmppvw3_m8j.cpp:35: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long s = a + b + c;\n \
    \ return (s == 0\n          || s == (a - b + c));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg83g7xjm: /tmp/tmpg83g7xjm.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\t\n\tlong a = a;\n\tlong\
    \ b = b;\n\tlong c = c;\n\n\tlong a2 = a*a;\n\tlong b2 = b*b;\n\tlong c2 = c*c;\n\
    \n\tlong a3 = a2*a;\n\tlong b3 = b2*b;\n\tlong c3 = c2*c;\n\n\tlong sum = a2 +\
    \ b2 + c2;\n\tlong det = a3*b3 - a2*c2;\n\n\tif (det == 0) {\n\t\tcout << \"a=\"\
    \ << a << \"  b=\" << b << \"  c=\" << c << \"\\n\";\n\t\tassert(det != 0);\n\t\
    \treturn false;\n\t}\n\telse {\n\t\tlong x = det / sum;\n\t\treturn (b2*x - b3)\
    \ > (a2*x - a3);\n\t}\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9hzehez.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpx9hzehez.cpp:14:7: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   14 |  long a = a;\n      |\
    \       ^\n/tmp/tmpx9hzehez.cpp:15:7: error: declaration of \u2018long int b\u2019\
    \ shadows a parameter\n   15 |  long b = b;\n      |       ^\n/tmp/tmpx9hzehez.cpp:16:7:\
    \ error: declaration of \u2018long int c\u2019 shadows a parameter\n   16 |  long\
    \ c = c;\n      |       ^\n/tmp/tmpx9hzehez.cpp:30:3: error: \u2018cout\u2019\
    \ was not declared in this scope; did you mean \u2018std::cout\u2019?\n   30 |\
    \   cout << \"a=\" << a << \"  b=\" << b << \"  c=\" << c << \"\\n\";\n      |\
    \   ^~~~\n      |   std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpx9hzehez.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n"
  stdout: ''
  timestamp: 1660100016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a <= 0 || b <= 0\
    \ || c <= 0) {\n        return 0;\n    }\n    if (a + b <= c || a + c <= b ||\
    \ b + c <= a) {\n        return 0;\n    }\n\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp79x3z9o9: /tmp/tmp79x3z9o9.cpp:27: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if(b>c && b>a) return true;\n\
    \  if(c>a && c>b) return true;\n  if(b>c && c>a) return true;\n  return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_5n7t_71: /tmp/tmp_5n7t_71.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a + b) > c || (b\
    \ + c) > a || (c + a) > b) return false;\n    if(std::sqrt(a * a + b * b) == std::sqrt(c\
    \ * c + b * b)) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt1wy14g0: /tmp/tmpt1wy14g0.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  long delta=b+c-a;\n  if (delta == 0) {\n    return false;\n  }\n  if (delta\
    \ < 0) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplfxxb2ik: /tmp/tmplfxxb2ik.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>a+c) return\
    \ false;\n    if(b>c+a) return false;\n    if(c>a+b) return false;\n    if(c>b+a)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5fketf6e: /tmp/tmp5fketf6e.cpp:25: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a <= 0) || (b < 0)\
    \ || (c < 0)) {\n        return false;\n    }\n    long d = b * b - 4 * a * c;\n\
    \    if(d == 0) {\n        return false;\n    }\n    long sq1 = sqrln(a);\n  \
    \  long sq2 = sqrln(b);\n    long sq3 = sqrln(c);\n    // Check if a >= 0 and\
    \ b >= 0 and c >= 0 and if a, b, c are all positive.\n    if((sq1 - (sq2 * sq3))\
    \ >= 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibkqn7qn.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpibkqn7qn.cpp:20:16: error: \u2018sqrln\u2019\
    \ was not declared in this scope; did you mean \u2018strlen\u2019?\n   20 |  \
    \   long sq1 = sqrln(a);\n      |                ^~~~~\n      |              \
    \  strlen\n"
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Code here\n  long ans\
    \ = (b - c);\n  long bs = (b+a)*(b+a) - (a*a*a);\n  long cs = (c + b)*(b+a) -\
    \ (a*a*a);\n  return (bs == 0 && cs == 0 && ans == 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0hgqz5h0: /tmp/tmp0hgqz5h0.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long x1 = 0, y1 = 0, z1\
    \ = 0; // initial x1 and y1 coordinate of 1\n  long x2 = 0, y2 = 0, z2 = 0;\n\
    \  long x3 = 0, y3 = 0, z3 = 0;\n  // If either side is 0, then it is a right\
    \ angle triangle and hence return true\n  if (a == 0 || b == 0 || c == 0) {\n\
    \    return true;\n  }\n  // find first point of first triangle\n  x1 = (a + b\
    \ + c) / 2;\n  y1 = (a + b) / 2;\n  z1 = (b + c) / 2;\n  // find first point of\
    \ second triangle\n  x2 = (a + b) / 2;\n  y2 = (b + c) / 2;\n  z2 = a;\n  // find\
    \ first point of third triangle\n  x3 = b;\n  y3 = c;\n  z3 = a + b;\n  // find\
    \ the cross product of the first three points\n  double xC = (x1 - x3) * (y2 -\
    \ y3) - (y1 - y3) * (x2 - x3);\n  double yC = (x1 - x3) * (z2 - z3) - (z1 - z3)\
    \ * (x2 - x3);\n  double zC = (y1 - y3) * (z2 - z3) - (z1 - z3) * (y2 - y3);\n\
    \  // If the cross product is 0, then it is a right angle triangle\n  if (xC ==\
    \ 0 && yC == 0 && zC == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp76ulx5kx: /tmp/tmp76ulx5kx.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // return true if three\
    \ sides are equal\n    if (a == b) return (a == c);\n    else if (a == c) return\
    \ (b == c);\n    else if (b == c) return (a != 0 && b != 0);\n    else return\
    \ (a != 0 && c != 0 && b != 0 && c == 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxem1uf7e: /tmp/tmpxem1uf7e.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b) {\n      \
    \  if (a > c) {\n            return true;\n        }\n        if (c > b) {\n \
    \           return false;\n        }\n    } else {\n        if (b > c) {\n   \
    \         return true;\n        }\n        if (c > a) {\n            return false;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpq94do9e_: /tmp/tmpq94do9e_.cpp:32: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long rad1, rad2, rad3;\n\
    \    rad1 = b * b;\n    rad2 = a * c;\n    rad3 = c * c;\n    return (rad1 ==\
    \ rad3 || (rad1 == (rad2 + rad3)));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjwuc17f5: /tmp/tmpjwuc17f5.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long a1 = a - 1;\n  \
    \  long b1 = b - 1;\n    long c1 = c - 1;\n    if (a == 0)\n        return false;\n\
    \    if (b == 0 || c == 0) {\n        return true;\n    }\n    long sum = a1 +\
    \ b1 + c1;\n    // Check if sum is equal to one side, if it is not then check\
    \ if sum is \n    // equal to another side.\n    if (sum != 1 && sum != 2) {\n\
    \        return false;\n    }\n    // If sum is equal to one side then check if\
    \ sum is equal to another side.\n    if (sum == 1) {\n        long sum1 = a1 +\
    \ b1;\n        if (sum1 != 1 && sum1 != 2) {\n            return false;\n    \
    \    }\n        if (sum1 == 1) {\n            long sum2 = a1 + c1;\n         \
    \   if (sum2 != 1 && sum2 != 2) {\n                return false;\n           \
    \ }\n            if (sum2 == 1) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqnnerimc: /tmp/tmpqnnerimc.cpp:47: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a*a + b*b == c*c){\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplyiq0rzl: /tmp/tmplyiq0rzl.cpp:23: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a + b < c || a +\
    \ c < b || b + c < a)\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr3_ybxkv: /tmp/tmpr3_ybxkv.cpp:20: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // We first calculate the\
    \ hypotenuse\n  long hypotenuse = sqrt(pow(a, 2) + pow(b, 2));\n  // If the hypotenuse\
    \ is zero, no right angled triangle can be formed.\n  if (hypotenuse == 0)\n \
    \   return false;\n  // Now we calculate the side of the triangle\n  long side\
    \ = pow(b, 2) - pow(a, 2);\n  // Now we calculate the hypotenuse of the right\
    \ angled triangle\n  long right_angled_hypotenuse = sqrt(pow(side, 2) + pow(c,\
    \ 2));\n  // If the hypotenuse is zero, no right angled triangle can be formed.\n\
    \  if (right_angled_hypotenuse == 0)\n    return false;\n  // Now we calculate\
    \ the side of the right angled triangle\n  side = pow(c, 2) - pow(b, 2);\n  //\
    \ Now we calculate the hypotenuse of the right angled triangle\n  long side_of_right_angled_triangle\
    \ = sqrt(pow(side, 2) + pow(hypotenuse, 2));\n  // If the hypotenuse is zero,\
    \ no right angled triangle can be formed.\n  if (side_of_right_angled_triangle\
    \ == 0)\n    return false;\n  // Now we calculate the hypotenuse of the right\
    \ angled triangle using the\n  // formulae\n  hypotenuse = pow(c, 2) + pow(a,\
    \ 2);\n  side = pow(b, 2) - pow(a, 2);\n  right_angled_hypotenuse = sqrt(pow(side,\
    \ 2) + pow(hypotenuse, 2));\n  side_of_right_angled_triangle = sqrt(pow(side,\
    \ 2) + pow(hypotenuse, 2));\n  // If the hypotenuses, side of the right angled\
    \ triangle and the side of \n  // the triangle are equal, then the triangle is\
    \ a right angled triangle.\n  if (right_angled_hypotenuse == side_of_right_angled_triangle\
    \ &&\n      side == hypotenuse)\n    return true;\n  return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5rtfcbuh: /tmp/tmp5rtfcbuh.cpp:47: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long angle1, angle2,\
    \ angle3;\n    angle1 = (b * b) + (c * c) - (a * a);\n    angle2 = (2.0 * (c *\
    \ b)) - (2.0 * (a * c));\n    angle3 = (2.0 * (a * b)) - (2.0 * (c * a));\n  \
    \  if (angle1 == 0 && angle2 == 0 && angle3 == 0) return true;\n    if (angle1\
    \ > 0 && angle1 < 180 && angle2 > 0 && angle2 < 180 \n        && angle3 > 0 &&\
    \ angle3 < 180) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1xjb5zoe: /tmp/tmp1xjb5zoe.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\t// If the sides a, b, and\
    \ c are all positive, no triangle can be formed\n\t// for which all three sides\
    \ are non-positive.\n\tif (a < 0 || b < 0 || c < 0)\n\t\treturn false;\n\tif (a\
    \ == 0 || b == 0 || c == 0)\n\t\treturn true;\n\t// If the sides a, b, and c are\
    \ all equal, no triangle can be formed.\n\tif (a == b && a == c)\n\t\treturn false;\n\
    \t// The three sides a, b, and c form a triangle if and only if \n\t// the sum\
    \ of a + b + c = 2 * b\n\tlong s = (a + b + c) / 2;\n\treturn (b == s) || (b ==\
    \ c + s);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0e2tdxuz: /tmp/tmp0e2tdxuz.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if ( a > b )\n        return ( b > c );\n    else if ( b > c )\n        return\
    \ ( a > c );\n    else if ( c > a )\n        return ( c > b );\n    else\n   \
    \     return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpbr3z_md0: /tmp/tmpbr3z_md0.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (b == 0 || c == 0\
    \ || a == 0 || b == c) {\n        return false;\n    }\n\n    long d = (b * b)\
    \ - (4 * a * c);\n    if (d == 0) {\n        return false;\n    }\n    long det\
    \ = b * b - 4 * a * c;\n    if (det < 0) {\n        return false;\n    }\n   \
    \ long root1 = (-b + sqrt(det)) / (2 * a);\n    long root2 = (-b - sqrt(det))\
    \ / (2 * a);\n    if ((root1 == root2) && (root1 != 0) && root1 != 0) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwilskmnh: /tmp/tmpwilskmnh.cpp:35: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if((abs(a-b) <= abs(a-c))\
    \ && (abs(b-c) <= abs(a-b))) {\n    if((abs(b-c) <= abs(a-b)) && (abs(a-c) <=\
    \ abs(b-c))) {\n      if((abs(c-b) <= abs(b-a)) && (abs(b-c) <= abs(c-a))) {\n\
    \        if((abs(c-b) <= abs(a-b)) && (abs(a-c) <= abs(c-b))) {\n          return\
    \ true;\n        } else {\n          return false;\n        }\n      } else {\n\
    \        return false;\n      }\n    } else {\n      return false;\n    }\n  }\
    \ else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp17pfx216: /tmp/tmp17pfx216.cpp:33: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s1=sqrt(a * a+b\
    \ * b);\n    long s2=sqrt(c * c+a * a);\n    long s3=sqrt(a * a + c * c);\n  \
    \  if(s1 == s2) {\n        if(s1 == s3)\n            return true;\n        else\n\
    \            return false;\n    }\n    else \n        return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2qknaxjn: /tmp/tmp2qknaxjn.cpp:29: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s = a + b + c;\n\
    \    long e = (a + b) * (a + b + 1) * (a + b + 2);\n    long t = (a * b) * (b\
    \ * b);\n    long u = (a * b) * (c * c);\n    long v = ((a + b) * c) + (a * c)\
    \ + ((a + b) * b) + (a * b);\n    long d = (s * s * s * 2) + (e * t * 2) + (t\
    \ * t * t) + (t * t * u) + \n             (t * t * v) + (t * t * u) + (t * t *\
    \ v) + (t * t * t);\n    return d == 0;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvhff19iq: /tmp/tmpvhff19iq.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a * b > 0 && c *\
    \ b >= 0 && c * b <= a * a) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpos3ww7ou: /tmp/tmpos3ww7ou.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Initialize all variables\
    \ to null\n  long x, y, a, b, c, d, e, f; \n  // Initialize conditions to false\n\
    \  bool r1, r2, r3;\n  // Initialize result to true\n  bool result = true;\n \
    \ // Initialize temporary variables to false\n  bool r2_x, r2_y, r2_z, r2_w, r1_x,\
    \ r1_y, r1_z, r1_w;\n  // Initialize the double side of triangle to null\n  double\
    \ double_side;\n  // Initialize variables for two sides of the triangle\n  long\
    \ x1, y1, x2, y2, x3, y3, x4, y4;\n  // Initialize conditions to false\n  bool\
    \ r4_x, r4_y, r4_z, r4_w;\n  // Initialize variables to false\n  bool r5_x, r5_y,\
    \ r5_z, r5_w;\n  // Initialize variables to null\n  int l1, l2, l3, l4, l5, l6,\
    \ l7, l8, l9, l10, l11, l12, l13;\n  // Initialize variables to null\n  int i1,\
    \ i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;\n  // Initialize variables\
    \ to null\n  int i1_1, i2_1, i3_1, i4_1, i5_1, i6_1, i7_1, i8_1, i9_1, i10_1,\
    \ i11_1, i12_1, i13_1;\n  // Initialize variables to null\n  int i1_2, i2_2, i3_2,\
    \ i4_2, i5_2, i6_2, i7_2, i8_2, i9_2, i10_2, i11_2, i12_2, i13_2;\n  // Initialize\
    \ variables to null\n  int i1_3, i2_3, i3_3, i4_3, i5_3, i6_3, i7_3, i8_3, i9_3,\
    \ i10_3, i11_3, i12_3, i13_3;\n  // Initialize variables to null\n  int i1_4,\
    \ i2_4, i3_4, i4_4, i5_4, i6_4, i7_4, i8_4, i9_4, i10_4, i11_4, i12_4, i13_4;\n\
    \  // Initialize variables to null\n  int i1_5, i2_5, i3_5, i4_5, i5_5, i6_5,\
    \ i7_5, i8_5, i9_5, i10_5, i11_5, i12_5, i13_5;\n  // Initialize variables to\
    \ null\n  int i1_6, i2_6, i3_6, i4_6, i5_6, i6_6, i7_6, i8_6, i9_6, i10_6, i11_6,\
    \ i12_6, i13_6;\n  // Initialize variables to null\n  int \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpclknesga.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpclknesga.cpp:14:14: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   14 |   long x, y, a, b, c,\
    \ d, e, f;\n      |              ^\n/tmp/tmpclknesga.cpp:14:17: error: declaration\
    \ of \u2018long int b\u2019 shadows a parameter\n   14 |   long x, y, a, b, c,\
    \ d, e, f;\n      |                 ^\n/tmp/tmpclknesga.cpp:14:20: error: declaration\
    \ of \u2018long int c\u2019 shadows a parameter\n   14 |   long x, y, a, b, c,\
    \ d, e, f;\n      |                    ^\n/tmp/tmpclknesga.cpp:47:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpclknesga.cpp:47:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif((b*b) - (4*a*c) != 0)\n\
    \t\treturn false;\n\tlong x1 = (b*b) - (4*a*c);\n\tlong y1 = (2*b) - x1;\n\tlong\
    \ z1 = (2*a);\n\tlong x2 = (2*b) - (2*a);\n\tlong y2 = (2*c) - x2;\n\tlong z2\
    \ = (b*a) - (4*c);\n\tif((x2*x2) - (z1*z1) != 0)\n\t\treturn false;\n\tif((y2*y2)\
    \ - (z2*z2) != 0)\n\t\treturn false;\n\tif((x1*y1) - (z1*z1) != 0)\n\t\treturn\
    \ false;\n\treturn true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv0wwznzp: /tmp/tmpv0wwznzp.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong long ans = a + b +\
    \ c;\n\tif (ans == 0) {\n\t\treturn false;\n\t}\n\tlong long sq = (ans * (ans\
    \ - 1)) / 2;\n\tif (sq == a) {\n\t\treturn true;\n\t} else if (sq == b) {\n\t\t\
    return false;\n\t} else if (sq == c) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa51ig_dl: /tmp/tmpa51ig_dl.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a + b > c)\n    \
    \    return right_angle_triangle(b, c, a);\n\n    // The sides are colinear if\
    \ the sum of the two sides is equal to the\n    // length of the third side.\n\
    \    if (a + c == b || b + c == a)\n        return ((a + b == c) ? true : false);\n\
    \n    // The sides are parallel if the sum of the two sides is less than the\n\
    \    // length of the third side.\n    if (a + b < c)\n        return ((a + b\
    \ < c) ? true : false);\n\n    // The sides are orthogonal if their sum is equal\
    \ to the length of\n    // the third side.\n    if (a + b == c)\n        return\
    \ ((a + b == c) ? true : false);\n\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660100017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // return (a > 0 && b > 0 && c > 0)\n  return (a > 0 && b > 0 && c > 0) ||\
    \ (c > 0 && a > 0 && b > 0)\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7r0xgl91.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7r0xgl91.cpp:15:64: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   15 |   return (a > 0 && b > 0 &&\
    \ c > 0) || (c > 0 && a > 0 && b > 0)\n      |                               \
    \                                 ^\n      |                                 \
    \                               ;\n   16 | }\n      | ~                      \
    \                                         \n"
  stdout: ''
  timestamp: 1660100017
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long angles[3] = {0};\n\
    \  long sides[3] = {0};\n  long sum = 0;\n  // Calculate sum of angles of three\
    \ sides\n  for(long i = 0; i < 3; i++) {\n    sum = 0;\n    // Calculate length\
    \ of each side\n    for(long j = 0; j < i; j++) {\n      sum += (a - b) * (a -\
    \ b) + (b - c) * (b - c) + (c - a) * (c - a);\n    }\n    // Calculate cosine\
    \ and angle of each side\n    sides[i] = sum / i;\n    angles[i] = std::acos(std::sqrt(sum\
    \ / i));\n  }\n  // Return true if any angles are 90 degree, false otherwise\n\
    \  for(long i = 0; i < 3; i++) {\n    if (std::abs(angles[i] - 90.0) < 0.0001)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    return (a + b >= c); // if a + b\
    \ > c, then a + b >= c and a >= b too\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp24xvlnhk: /tmp/tmp24xvlnhk.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Your code goes here\n\
    \    long d, e, f; \n    long a, b, c;\n    \n    if ( a==b && b==c )\n      \
    \  return true;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmhu8vqat.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpmhu8vqat.cpp:15:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   15 |     long a, b, c;\n \
    \     |          ^\n/tmp/tmpmhu8vqat.cpp:15:13: error: declaration of \u2018long\
    \ int b\u2019 shadows a parameter\n   15 |     long a, b, c;\n      |        \
    \     ^\n/tmp/tmpmhu8vqat.cpp:15:16: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   15 |     long a, b, c;\n      |                ^\n/tmp/tmpmhu8vqat.cpp:259:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  259 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if ( (a+b) > c ) {\n\
    \        return false;\n    }\n    if ( b > c ) {\n        return ( a > b) &&\
    \ ( c > a);\n    }\n    return ( a > b) && ( b > c);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpol7vw73m: /tmp/tmpol7vw73m.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    assert(a < b && b < c);\n\
    \    if (a == b) // Triangle has no right angle\n        return true;\n    if\
    \ (a == c) // Triangle has no right angle\n        return true;\n    if (b ==\
    \ c)\n        return false;\n    long a1, a2, b1, b2, c1, c2, d1, d2;\n    a1\
    \ = a * a, b1 = b * b;\n    c1 = c * c;\n    a2 = a * a;\n    b2 = b * b;\n  \
    \  c2 = c * c;\n    d1 = a1 + a2, b1 = b1 + b2, c1 = c1 + c2;\n    d2 = a2 + b1,\
    \ c2 = b2 + c1;\n    d1 = a2 * b1 - b2 * c1;\n    d2 = a2 * c1 - c2 * b1;\n  \
    \  return (d1 * d2) >= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9y8xu21n: /tmp/tmp9y8xu21n.cpp:35: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a + b > c) {\n  \
    \      return false;\n    }\n    if (a + c > b) {\n        return false;\n   \
    \ }\n    if (b + c > a) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2cl77lm0: /tmp/tmp2cl77lm0.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = (b * b) - (4\
    \ * a * c);\n    if (d == 0) return false;\n    long e = ((b * b) - 4 * a * c)\
    \ / d;\n    long f = (((b * b) - 4 * a * c) / d) / 2;\n    if (e < 0 && f < 0\
    \ && a != b) return false;\n    if (e > 0 && f > 0 && a != b) return false;\n\
    \    if (e > 0 && f < 0 && a != b) return false;\n    if (e < 0 && f > 0 && a\
    \ != b) return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwz7xxe2y: /tmp/tmpwz7xxe2y.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = std::abs((a\
    \ + b + c) / 2);\n    long e = (b - d);\n    long f = (c - d);\n    return std::abs(e\
    \ * f) >= ((a + b) * (c - d));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpixda19t7: /tmp/tmpixda19t7.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  long u,v,i,j,sum,x,y;\n  u = (a + b + c) / 2;\n  v = (b + c + a) / 2;\n  sum\
    \ = u + v + u;\n  x = a - u;\n  y = b - v;\n  i = sqrt(sum * sum / 6);\n  j =\
    \ sqrt(x * x / 6 + y * y / 6);\n  if (i != j) {\n    return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwwghuo2j: /tmp/tmpwwghuo2j.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a<0||b<0||c<0) return 0;\n    if(a+b > c) return true;\n    if(a+b < c)\
    \ return false;\n    if(a == b) return true;\n    if(a+c > b) return false;\n\
    \    if(a+c < b) return false;\n    if(a+c == b) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptab3tgx4: /tmp/tmptab3tgx4.cpp:28: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  return (b * b) - (4 * a\
    \ * c) == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa6vets4g: /tmp/tmpa6vets4g.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100015
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    return ((d > 0) && (d < 0));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0qmpk0y7: /tmp/tmp0qmpk0y7.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    d = sqrt(d);\n \
    \   return (b + d < a) && (a + d < c);\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpce1l6evp: /tmp/tmpce1l6evp.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a == 0)\n    return\
    \ (a == b);\n  if (a == c || b == c)\n    return true;\n  else \n    return (a\
    \ == b);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyv40s5z3: /tmp/tmpyv40s5z3.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    assert(a < b && b < c);\n\
    \    if (a == 0 && b == 0 && c == 0) {\n        return true;\n    }\n    if (a\
    \ == 0) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n\
    \    }\n    if (c == 0) {\n        return true;\n    }\n    if ((a + b + c) ==\
    \ 0)\n        return false;\n    long x = ((double)a) / ((double)a + b + c);\n\
    \    long y = ((double)b) / ((double)a + b + c);\n    long z = ((double)c) / ((double)a\
    \ + b + c);\n    if (x*x + y*y == z*z) {\n        if (x * z - y * z == 0)\n  \
    \          return false;\n        else\n            return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp95h6__i: /tmp/tmpp95h6__i.cpp:41: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(abs(a-b) < abs(a-c)\
    \ || abs(a-b) < abs(b-c) || abs(b-c) < abs(a-c) || abs(b-c) < abs(b-c)) {\n  \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr_vbf9oc: /tmp/tmpr_vbf9oc.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a <= 0 || b <= 0\
    \ || c <= 0) {\n        return false;\n    }\n    if (a + b <= c || a + c <= b\
    \ || b + c <= a) {\n        return false;\n    }\n    long x = sqrt(pow((a + b),\
    \ 2.0) + pow((a + c), 2.0) + pow((b + c), 2.0));\n    if (x == (long)(INT_MAX\
    \ / 2)) {\n        return false;\n    }\n    return (pow((b - x), 2.0) == pow((c\
    \ - x), 2.0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpg33531ti: /tmp/tmpg33531ti.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a + b < c) && (b\
    \ + c < a) && (a + c < b)) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52sga5jg: /tmp/tmp52sga5jg.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0) {\n     \
    \   return false;\n    }\n    if (b == 0) {\n        return true;\n    }\n   \
    \ if (c == 0) {\n        return false;\n    }\n    if (abs(b - a) > abs(c - b))\
    \ {\n        return ((b > c) || (a > c));\n    } else {\n        return ((b >\
    \ c) || (a > c));\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpreeb2n1x: /tmp/tmpreeb2n1x.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a == 0 || b == 0 ||\
    \ c == 0)\n\t\treturn false;\n\n\treturn ((b * c) - (a * b)) <= 0;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkfwal7c3: /tmp/tmpkfwal7c3.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long tri_area = a * b\
    \ * c / (4 * b);\n    long long_area = sqrt(tri_area);\n    if (long_area > ((b\
    \ * b) + (c * c) + (a * a)))\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuxdlxklr: /tmp/tmpuxdlxklr.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif(b>c && b>a && b>0)\n\
    \t\treturn true;\n\telse if(c>a && c>b && c>0)\n\t\treturn true;\n\telse if(a>b\
    \ && a>c && a>0)\n\t\treturn true;\n\telse if(b>a && b>c && b>0)\n\t\treturn true;\n\
    \telse if(c>b && c>a && c>0)\n\t\treturn true;\n\telse if(a>b && a>c && a>0)\n\
    \t\treturn true;\n\telse if(b>a && b>c && b>0)\n\t\treturn true;\n\telse if(c>a\
    \ && c>b && c>0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1e92zboq: /tmp/tmp1e92zboq.cpp:35: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong angle = (a + b + c)\
    \ / 2;\n\tlong x1 = (-b - angle) * (Math.sin(angle)) / (2 * (a + b));\n\tlong\
    \ x2 = (-b + angle) * (Math.sin(angle)) / (2 * (a + b));\n\tlong x3 = -(a+b+c)\
    \ * (Math.sin(angle)) / (2 * (a + b + c));\n\tif (x1 == x2 && x2 == x3) {\n\t\t\
    return true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1lbv1ml.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpw1lbv1ml.cpp:14:28: error: \u2018Math\u2019\
    \ was not declared in this scope\n   14 |  long x1 = (-b - angle) * (Math.sin(angle))\
    \ / (2 * (a + b));\n      |                            ^~~~\n"
  stdout: ''
  timestamp: 1660100019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long x1, x2, x3;\n  \
    \  // Calculate the base length of the triangle. \n    x1 = a * b;\n    x2 = a\
    \ * c;\n    x3 = b * c;\n    // Calculate the hypotenuse of the triangle. \n \
    \   long hypot = std::hypot(x1, x2, x3);\n    // Check if the hypotenuse is greater\
    \ than the base length. \n    // If not return false. \n    if (hypot >= a) return\
    \ false;\n    else return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3cp1r1rt: /tmp/tmp3cp1r1rt.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long x1, x2, y1, y2;\n\
    \    // x1 is the x value where side1 meets side2 perpendicular line\n    // x2\
    \ is the x value where side2 meets side1 perpendicular line\n    // y1 is the\
    \ y value where side1 meets side2 perpendicular line\n    // y2 is the y value\
    \ where side2 meets side1 perpendicular line\n    x1 = (double)a / (double)b;\n\
    \    x2 = (double)a / (double)c;\n    y1 = (double)b / (double)c;\n    y2 = (double)c\
    \ / (double)b;\n    return abs(x1 - x2) < 0.0000001 && abs(y1 - y2) < 0.0000001;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpygr7mox0: /tmp/tmpygr7mox0.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a == 0) {\n    return\
    \ true;\n  }\n  if (b == 0 || c == 0) {\n    return false;\n  }\n  return (b *\
    \ c) <= ((a * a) + (b * b) + (c * c));\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi9us6nvd: /tmp/tmpi9us6nvd.cpp:24: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long a = abs(a);\n  \
    \  long b = abs(b);\n    long c = abs(c);\n    if( (a > b) && (b > c) )\n    \
    \    return false;\n    if((a > c) && (b > c))\n        return true;\n    long\
    \ min = (a<b)?a:b;\n    long max = (a<b)?b:a;\n    long temp;\n    if(min==max)\n\
    \        return false;\n    temp = min;\n    if((min==b) || (max==b))\n      \
    \  return false;\n    else if((min==c) || (max==c))\n        return true;\n  \
    \  else if((min==a) || (max==a))\n        return false;\n    else if((min==b)\
    \ || (max==c))\n        return false;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy62iwwup.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpy62iwwup.cpp:13:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   13 |     long a = abs(a);\n\
    \      |          ^\n/tmp/tmpy62iwwup.cpp:14:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   14 |     long b = abs(b);\n      |  \
    \        ^\n/tmp/tmpy62iwwup.cpp:15:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   15 |     long c = abs(c);\n      |          ^\n"
  stdout: ''
  timestamp: 1660100019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==0 && b==0)\n        return true;\n    else if(a==0 && c==0)\n     \
    \   return false;\n    else if(b==0)\n        return false;\n    else if(c==0)\n\
    \        return true;\n    if((a-b)>0 && (a-c)>0)\n        return false;\n   \
    \ if((b-c)>0 && (a-c)>0)\n        return true;\n    if((a-b)>0 && (b-c)>0)\n \
    \       return true;\n    if((a-b)>0 && (a-c)>0)\n        return false;\n    if((b-c)>0\
    \ && (b-a)>0)\n        return false;\n    if((b-c)>0 && (b-a)>0)\n        return\
    \ true;\n    if((b-c)>0 && (b-a)>0)\n        return false;\n    if((b-c)>0 &&\
    \ (b-a)>0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprsiflhf9: /tmp/tmprsiflhf9.cpp:43: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long bsq = b * b; // square\
    \ of the side of a triangle\n  long ac = a + c; // side length\n  long abc = (bsq\
    \ - ac) / 2; // area of triangle\n  if (abc >= ac) {\n    return false;\n  }\n\
    \  if (bsq - ac - abc <= 0) {\n    return true;\n  }\n  // If no angle is 90 degree,\
    \ assume that all angles are right angled triangles.\n  // Otherwise, assume that\
    \ all angles are 90 degree.\n  assert(abc > 0);\n  long d = std::abs(ac - abc\
    \ / 2); // Angle of one side of the triangle to the other side of the triangle\n\
    \  if (a < b) {\n    long x = (bsq - abc) / 2;\n    if (ac > c) {\n      long\
    \ y = (x * x - bsq) / 2;\n      return std::abs(y - ac) < std::abs(x - ac);\n\
    \    } else {\n      return false;\n    }\n  } else if (a > b) {\n    long x =\
    \ (ac - abc) / 2;\n    if (ac > c) {\n      long y = (x * x - ac) / 2;\n     \
    \ return std::abs(y - ac) < std::abs(x - ac);\n    } else {\n      return false;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6_byboda: /tmp/tmp6_byboda.cpp:47: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b - a;\n   \
    \ long e = c - a;\n    long f = d - e;\n    return f*f == b*b;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpllrmm0ci: /tmp/tmpllrmm0ci.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = a + b;\n  \
    \  long ac = a + c;\n    long bc = b + c;\n    long acbc = ac + bc;\n    long\
    \ ac2bc = ac - bc;\n    if (ab == acbc && bc != ac2bc)\n        return true;\n\
    \    if (bc != ab && acbc != bc && bc != ac2bc)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdf5n22at: /tmp/tmpdf5n22at.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a),\
    \ ac = abs(c - a), bc = abs(b - c);\n    return (b == a && c == a && ac > ab)\
    \ || (b == c && c == a && bc > ab) || \n           (b == c && c == b && bc > ab);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0103kp1b: /tmp/tmp0103kp1b.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long x, y, l, m, h;\n\n\
    \  x = (long) sqrt(a * a + b * b);\n  y = (long) sqrt(a * a + c * c);\n\n  l =\
    \ sqrt(x * x + y * y);\n  h = (long) sqrt((long) a + (long) b + (long) c);\n \
    \ m = (long) sqrt((long) x + (long) y + (long) l);\n\n  if (m == h)\n    return\
    \ (a == b) || (a == c) || (b == c);\n  else\n    return a == b == c || y == l\
    \ && x == l;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp29l1x7wj: /tmp/tmp29l1x7wj.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a > 0 && a > b) &&\
    \ (a > c)) return true;\n    if((b > 0 && b > a) && (b > c)) return true;\n  \
    \  if((c > 0 && c > a) && (c > b)) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpif1s4m93: /tmp/tmpif1s4m93.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your code in\
    \ C++17 (if your compiler supports it)\n    long x = ((a + b) * (b + c) - (b -\
    \ a) * (c - a)) / (2.0 * b * c);\n    return x >= 0 && a * x + b * y + c * z >=\
    \ 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_oq2sxa.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpz_oq2sxa.cpp:15:34: error: \u2018y\u2019\
    \ was not declared in this scope\n   15 |     return x >= 0 && a * x + b * y +\
    \ c * z >= 0;\n      |                                  ^\n/tmp/tmpz_oq2sxa.cpp:15:42:\
    \ error: \u2018z\u2019 was not declared in this scope\n   15 |     return x >=\
    \ 0 && a * x + b * y + c * z >= 0;\n      |                                  \
    \        ^\n"
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0) {\n     \
    \   if (b == 0)\n            return c == 90;\n        return b == 90;\n    }\n\
    \    if (b == 0) {\n        return a == 90;\n    }\n    if (c == 0)\n        return\
    \ a == 180;\n    return a == 90 || b == 90 || c == 90;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuqm68bcf: /tmp/tmpuqm68bcf.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong a = abs(a);\n\tlong\
    \ b = abs(b);\n\tlong c = abs(c);\n\tlong sum = a + b + c;\n\tif (a == b && b\
    \ == c) {\n\t\treturn true;\n\t} else if (a == b  && c == b ) {\n\t\treturn true;\n\
    \t} else if (a == c && b == c) {\n\t\treturn true;\n\t} else if (b == c && c ==\
    \ a) {\n\t\treturn true;\n\t}\n\tlong num = a * b;\n\tlong den = a * b * c - a\
    \ * c;\n\tif (den == 0) {\n\t\treturn false;\n\t} else {\n\t\tdouble d = sqrt(num\
    \ / den);\n\t\tif (d >= 0 && d <= 1)\n\t\t\treturn true;\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nikfy9x.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp5nikfy9x.cpp:13:7: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   13 |  long a = abs(a);\n \
    \     |       ^\n/tmp/tmp5nikfy9x.cpp:14:7: error: declaration of \u2018long int\
    \ b\u2019 shadows a parameter\n   14 |  long b = abs(b);\n      |       ^\n/tmp/tmp5nikfy9x.cpp:15:7:\
    \ error: declaration of \u2018long int c\u2019 shadows a parameter\n   15 |  long\
    \ c = abs(c);\n      |       ^\n"
  stdout: ''
  timestamp: 1660100019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s = 0;\n    long\
    \ d = b - c;\n    while (d > 0) {\n        ++s;\n        d -= b;\n    }\n    long\
    \ e = a - s;\n    while (e > 0) {\n        --e;\n        e -= a;\n    }\n    if\
    \ (e == 0 || b - e * a == 0)\n        return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnpybn1dd: /tmp/tmpnpybn1dd.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your code here\n\
    \    long d = ((a + b) > c) ? a + b : c + b;\n    long e = ((c + d) > a) ? c +\
    \ d : a + d;\n    long f = ((e + b) > c) ? e + b : c + b;\n    long g = ((f +\
    \ d) > a) ? f + d : a + d;\n    return ((g > a) ? g : a) == (a + b);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5luskln3: /tmp/tmp5luskln3.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (a < b + c &&\
    \ b < a + c && c < a + b) ? true : false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc60n61ay: /tmp/tmpc60n61ay.cpp:20: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    assert(a>0 && b>0 &&\
    \ c>0);\n    long abc = a+b+c;\n    long x = abc / 2;\n    long y = (abc-x) /\
    \ 2;\n    long z = (abc-x*y) / 2;\n    if (a*a + b*b == c*c) {\n        if (a\
    \ == c) return (y == b);\n        else return (b == c);\n    } else {\n      \
    \  if (a == c) return (y==z);\n        else return (z==b);\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp35njldq: /tmp/tmpp35njldq.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n     if(b==0){\n        \
    \ if(a>=1 && c>=1) return true;\n         else return false;\n     }\n     if(c==0){\n\
    \         if(a>=1 && b>=1) return true;\n         else return false;\n     }\n\
    \     if (a<b) std::swap(a, b);\n     if (a<c) std::swap(a, c);\n     std::swap(a,\
    \ b);\n     if (b==c) return true;\n     long sum1=a*(1-long(a));\n     long sum2=a*(1-long(b));\n\
    \     long sum3=c*(1-long(c));\n     long sum4=b*(1-long(c));\n     long sum5=b*(1-long(a));\n\
    \     return (sum1*sum4==sum3*sum5) ||\n         (sum1*sum3==sum2*sum5);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpozxrryrg: /tmp/tmpozxrryrg.cpp:35: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // initialize cos, sin\n\
    \    double c_sin = std::sin(c), c_cos = std::cos(c);\n    // initialize sin of\
    \ a, cos of a\n    double a_sin = std::sin(a), a_cos = std::cos(a);\n    // initialize\
    \ sin of b, cos of b\n    double b_sin = std::sin(b), b_cos = std::cos(b);\n \
    \   // initialize sin of c, cos of c\n    double c_sin = std::sin(c), c_cos =\
    \ std::cos(c);\n    // initialize s1, s2 by calculating cos and sin\n    double\
    \ s1 = a_cos * b_cos - a_sin * b_sin;\n    double s2 = a_cos * b_sin + a_sin *\
    \ b_cos;\n    // initialize s3 and s4 by calculating cos and sin\n    double s3\
    \ = c_cos * b_cos - c_sin * b_sin;\n    double s4 = c_cos * b_sin + c_sin * b_cos;\n\
    \    // initialize s5, s6, s7 by calculating cos and sin\n    double s5 = a_cos\
    \ * c_cos - a_sin * c_sin;\n    double s6 = a_cos * c_sin + a_sin * c_cos;\n \
    \   double s7 = c_cos * c_cos - c_sin * c_sin;\n    // calculate discriminant\n\
    \    double d = s1 * s4 + s2 * s3;\n    // if discriminant is positive, means\
    \ all sides are equal\n    if (d > 0) {\n        return true;\n    }\n    // if\
    \ discriminant is negative, means two sides are equal\n    if (d < 0) {\n    \
    \    return false;\n    }\n    // if discriminant is zero, means all sides are\
    \ parallel to each other\n    // and hence three sides form a right angle triangle\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bvbee2v.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7bvbee2v.cpp:20:12: error: redeclaration\
    \ of \u2018double c_sin\u2019\n   20 |     double c_sin = std::sin(c), c_cos =\
    \ std::cos(c);\n      |            ^~~~~\n/tmp/tmp7bvbee2v.cpp:14:12: note: \u2018\
    double c_sin\u2019 previously declared here\n   14 |     double c_sin = std::sin(c),\
    \ c_cos = std::cos(c);\n      |            ^~~~~\n/tmp/tmp7bvbee2v.cpp:20:33:\
    \ error: redeclaration of \u2018double c_cos\u2019\n   20 |     double c_sin =\
    \ std::sin(c), c_cos = std::cos(c);\n      |                                 ^~~~~\n\
    /tmp/tmp7bvbee2v.cpp:14:33: note: \u2018double c_cos\u2019 previously declared\
    \ here\n   14 |     double c_sin = std::sin(c), c_cos = std::cos(c);\n      |\
    \                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Check for valid sides\
    \ lengths\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \n    // Sum all the sides and check for a right angle\n    return (a + b > c)\
    \ && (a + c > b) && (b + c > a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgmpmsxl9: /tmp/tmpgmpmsxl9.cpp:26: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = a - b;\n  \
    \  long ac = c - a;\n    long bc = b - c;\n    long abbc = ab * bc;\n    long\
    \ acab = ac * ab;\n    return (abbc == acab);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr0gg4h86: /tmp/tmpr0gg4h86.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = (b * b) - 4\
    \ * (a * c);\n    return d == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_ui3_gke: /tmp/tmp_ui3_gke.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong long d = (b - a) *\
    \ (c - a) * (b - c);\n\t// if c <= b => c is perpendicular to b\n\tif (d <= (long)\
    \ 0)\n\t\treturn false;\n\tlong long x = (b - a) / sqrt(d);\n\tlong long y = (c\
    \ - a) / sqrt(d);\n\treturn (a <= x && x <= c && a <= y && y <= c);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6vylpdus: /tmp/tmp6vylpdus.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s = (a + b + c)\
    \ / 2;\n    long u = c / 2;\n    long v = b / 2;\n    if (a == s)\n        return\
    \ (b == u);\n    if (b == s)\n        return (c == v);\n    if (c == s)\n    \
    \    return (a==v);\n    return ((a*a + b*b + c*c) - (a*v*v + b*u*u + c*v*v))\
    \ < 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4dbs8hzc: /tmp/tmp4dbs8hzc.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if ( a == b ) {\n   \
    \     return ( a == c );\n    } else if ( a == c ) {\n        return ( b == c\
    \ );\n    }\n\n    long s = ( a + b ) * ( b + c ) * ( c + a ) * ( b + a );\n\n\
    \    if ( s == 0 ) {\n        return false;\n    }\n\n    long d = ( a + c ) *\
    \ ( c + b ) * ( b + c ) * ( a + b );\n\n    return ( d == 0 );\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg1snsqse: /tmp/tmpg1snsqse.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your code here\n\
    \    if(b>a&&b>c)return false;\n    if(c>a&&c>b)return false;\n    if(a<b&&a<c)return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpypfyyar4: /tmp/tmpypfyyar4.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long ab = abs(b - a);\n\
    \  long ac = abs(c - a);\n  long abc = abs(ab + ac);\n  if(abc <= ab) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp95dkwesl: /tmp/tmp95dkwesl.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long l1, l2, l3;\n  \
    \  l1 = (b * b) - (4 * a * c);\n    l2 = (2 * b * b) - (4 * a * c);\n    l3 =\
    \ (b * b) - (4 * a * c);\n    return (l1 >= 0) && (l2 >= 0) && (l3 >= 0);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptwybpqve: /tmp/tmptwybpqve.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a >= b + c || b >= a + c || c >= b + a)\n        return false;\n    else\
    \ if((b - a) > (c - b) || 0 > (c - a) || (b - c) > (a - b) || (a - c) > (b - a))\n\
    \        return false;\n    else if((a - b) > (b - c) || (c - a) > (a - c) ||\
    \ (c - b) > (b - c))\n        return true;\n    else if((b - a) > (a - c) || (c\
    \ - b) > (b - c))\n        return false;\n    else if((a - b) > (b - c) || (a\
    \ - c) > (b - c))\n        return true;\n    else if((a - b) > (b - c) || (a -\
    \ c) > (b - c))\n        return false;\n    else if((a - b) > (b - c) || (b -\
    \ a) > (b - c))\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvtm4olie: /tmp/tmpvtm4olie.cpp:35: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long sum = a+b+c;\n \
    \   long det = a*c-b*b;\n    if (det<0) {\n        return false;\n    }\n    long\
    \ theta = (long int) (acos(b * b + c * c) / (2.0 * sqrt(det)));\n    if (theta\
    \ > 180.0) return false;\n    if (b == 0) return true;\n    if (a >= c) {\n  \
    \      if (b > 0) {\n            long temp_a = a - theta;\n            if (temp_a\
    \ < c) return true;\n            long temp_b = b - theta;\n            if (temp_b\
    \ < b) return true;\n            long temp_c = c - theta;\n            if (temp_c\
    \ < c) return true;\n        } else {\n            long temp_b = -b - theta;\n\
    \            if (temp_b < b) return true;\n            long temp_c = c - theta;\n\
    \            if (temp_c < c) return true;\n            long temp_a = a - theta;\n\
    \            if (temp_a < a) return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi1qa75gc: /tmp/tmpi1qa75gc.cpp:42: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your code here\n\
    \    if(a==b){\n        return c>a;\n    }\n    if(a==c){\n        return b>c;\n\
    \    }\n    if(b==c){\n        return a>b;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6qull5xj: /tmp/tmp6qull5xj.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Complete this function\n\
    \    // Do not delete \"return\" statement\n    long long x1, x2, x3;\n    if\
    \ (a>b && b>c && c>a){\n        x1=a;\n        x2=b;\n        x3=c;\n    }\n \
    \   else if (a>c && c>b){\n        x1=a;\n        x2=c;\n        x3=b;\n    }\n\
    \    else if (b>c && a>b){\n        x1=b;\n        x2=c;\n        x3=a;\n    }\n\
    \    else if (a>b && b>c && a>c){\n        x1=a;\n        x2=b;\n        x3=c;\n\
    \    }\n    else if (a>b && b>c && a>c && a>b){\n        x1=a;\n        x2=b;\n\
    \        x3=c;\n    }\n    else if(b>c && a>b && a>c){\n        x1=b;\n      \
    \  x2=c;\n        x3=a;\n    }\n    else if(a>b && a>c && a>b && a>c){\n     \
    \   x1=a;\n        x2=b;\n        x3=c;\n    }\n    else if(a>b && a>c && a>b\
    \ && a>c && a>b){\n        x1=a;\n        x2=b;\n        x3=c;\n    }\n    else\
    \ if(b>c && a>b && a>b && a>c){\n        x1=b;\n        x2=c;\n        x3=a;\n\
    \    }\n    else if(a>b && a>b && a>b && a>b && a>c){\n        x1=a;\n       \
    \ x2=b;\n        x3=b;\n    }\n    else if(a>b && a>c && a>b && a>c && a>b &&\
    \ a>b){\n        x1=a;\n        x2=b;\n        x3=b;\n    }\n    else if(b>c &&\
    \ a>b && a>b && a>b && a>b && a>c){\n        x1=b;\n        x2=c;\n        x3=b;\n\
    \    }\n    else if(a>b && a>b && a>b && a>b && a>b && a>b){\n        x1=a;\n\
    \        x2=b;\n        x3=b;\n    }\n    else{\n        x1=b;\n        x2=b;\n\
    \        x3=b;\n    }\n    if (x1>x3) {\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6phow2h8: /tmp/tmp6phow2h8.cpp:95: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // The conditional expression\
    \ is equivalent to:\n    // if (a > b && a > c) \n    // return true;\n    //\
    \ else if(b > a && b > c)\n    // return true;\n    // else\n    // return false;\n\
    \    \n    if (a > b && a > c) return true;\n    else if(b > a && b > c) return\
    \ true;\n    else return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp28avfntt: /tmp/tmp28avfntt.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a == 0)\n\t\treturn\
    \ (b == c) || (b == c-a) || (c == a-b);\n\tif (b == 0)\n\t\treturn (c == a) ||\
    \ (c == a-b) || (a == b-c);\n\treturn (c == a) || (c == b) || (c == a-b) || (a\
    \ == b-c) || (a == c-b);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp4hhm5vcy: /tmp/tmp4hhm5vcy.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a == 0 && b == 0 &&\
    \ c == 0)\n    return true;\n  if (a == 0 || b == 0 || c == 0)\n    return false;\n\
    \  long d = b * b - 4 * a * c;\n  if (d < 0)\n    return false;\n  long sq = sqrt(d);\n\
    \  long rootA = -b + sq;\n  long rootB = 2 * a * c + b;\n  long rootC = b - sq;\n\
    \  if (rootA < rootB || (rootA == rootB && rootC < rootA))\n    return true;\n\
    \  long diff1 = (long) rootB - (long) rootA;\n  long diff2 = (long) rootA - (long)\
    \ rootC;\n  // std::cout << \"diff \" << diff1 << \" \" << diff2 << std::endl;\n\
    \  return diff1 > 0 && diff2 > 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_nmygr6g: /tmp/tmp_nmygr6g.cpp:33: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong x1,y1,x2,y2,x3,y3;\n\
    \tdouble a1,b1,c1,a2,b2,c2,a3,b3,c3;\n\t// Check all the cases of the two triangles.\n\
    \tif(a<=0 || b>=a || c<=b){\n\t\treturn false;\n\t}\n\t// If a==b,b==c then triangles\
    \ are not possible\n\tif(a==b){\n\t\treturn false;\n\t}\n\t// If a==c,c==b then\
    \ triangles are not possible\n\tif(a==c){\n\t\treturn false;\n\t}\n\tif(b==c){\n\
    \t\treturn false;\n\t}\n\t// x1,y1 is first triangle side\n\tx1 = a;\n\ty1 = b;\n\
    \tx2 = c;\n\ty2 = b;\n\tx3 = a;\n\ty3 = c;\n\ta1 = a2 = a3 = b1 = b2 = b3 = c1\
    \ = c2 = c3 = 0.0;\n\ta1 = a3 = b1 = b2 = c1 = a2 = c2 = c3 = 1.0;\n\twhile(true){\n\
    \t\t// Find all the cases of the triangles\n\t\tif(x1==y1){\n\t\t\ta1+=1;\n\t\t\
    \tb1+=1;\n\t\t\tc1+=1;\n\t\t\tx1+=x1;\n\t\t\ty1+=y1;\n\t\t\tbreak;\n\t\t}\n\t\t\
    else if(x1==y3){\n\t\t\ta2+=1;\n\t\t\tb2+=1;\n\t\t\tc2+=1;\n\t\t\tx2+=x2;\n\t\t\
    \ty2+=y2;\n\t\t\tbreak;\n\t\t}\n\t\telse if(x3==y2){\n\t\t\ta3+=1;\n\t\t\tb3+=1;\n\
    \t\t\tc3+=1;\n\t\t\tx3+=x3;\n\t\t\ty3+=y3;\n\t\t\tbreak;\n\t\t}\n\t\telse if(x3==y3){\n\
    \t\t\ta2+=1;\n\t\t\tb2+=1;\n\t\t\tc2+=1;\n\t\t\tx3+=x3;\n\t\t\ty3+=y3;\n\t\t\t\
    break;\n\t\t}\n\t\telse if(x1==x2){\n\t\t\ta1+=1;\n\t\t\tb1+=1;\n\t\t\tc1+=1;\n\
    \t\t\tx1+=x1;\n\t\t\tx2+=x2;\n\t\t\ty1+=y1;\n\t\t\ty2+=y2;\n\t\t\tbreak;\n\t\t\
    }\n\t\telse if(x2==x3){\n\t\t\ta2+=1;\n\t\t\tb2+=1;\n\t\t\tc2+=1;\n\t\t\tx2+=x2;\n\
    \t\t\tx3+=x3;\n\t\t\ty1+=y1;\n\t\t\ty2+=y2;\n\t\t\tbreak;\n\t\t}\n\t\t\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqktuvqh2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpqktuvqh2.cpp:95:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   95 | int main() {\n     \
    \ |            ^\n/tmp/tmpqktuvqh2.cpp:108:1: error: expected \u2018}\u2019 at\
    \ end of input\n  108 | }\n      | ^\n/tmp/tmpqktuvqh2.cpp:12:51: note: to match\
    \ this \u2018{\u2019\n   12 | bool right_angle_triangle(long a, long b, long c)\
    \ {\n      |                                                   ^\n/tmp/tmpqktuvqh2.cpp:108:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  108 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660100020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a<0 || b>c || c<0\
    \ || (a==b && b==c))\n        return 0;\n    // if the angle is less than 90 degree\
    \ return true\n    if(a<91)\n        return true;\n    // if the angle is greater\
    \ than 90 degree and b > c return false\n    if(b<91)\n        return false;\n\
    \    // if b is less than c return true\n    if(b<c)\n        return true;\n \
    \   // if the two are equal return true\n    if(a==b)\n        return true;\n\
    \    // otherwise the angle is less than 180 degrees\n    // a < 180\n    return\
    \ (b>c || (b>c && b<a));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpolpho5zu: /tmp/tmpolpho5zu.cpp:34: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if ( (((b * b) - 4 *\
    \ a * c) >= 0)\n      && (((b * b) - 4 * a * c) <= 0)\n      && ((4 * c - b *\
    \ b) >= 0)\n      && ((4 * c - b * b) <= 0)\n     )\n    {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcj9h9jc9: /tmp/tmpcj9h9jc9.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if(a > b && a > c) {\n\
    \    return false;\n  } else if(b > a && b > c) {\n    return false;\n  } else\
    \ {\n    return true;\n  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxd3semzw: /tmp/tmpxd3semzw.cpp:24: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Your code here\n  long\
    \ d = 0;\n  long sum = a+b+c;\n  if((a+b)!=(c+d))\n  {\n    return false;\n  }\n\
    \  else\n  {\n    if(sum==0)\n    {\n      return true;\n    }\n    else\n   \
    \ {\n      if(a>b+c)\n      {\n        if(a>c)\n        {\n          return(true);\n\
    \        }\n        else\n        {\n          return(false);\n        }\n   \
    \   }\n      else\n      {\n        if(b>c+a)\n        {\n          if(b>a)\n\
    \          {\n            return(true);\n          }\n          else\n       \
    \   {\n            return(false);\n          }\n        }\n        else\n    \
    \    {\n          if(c>a+b)\n          {\n            if(c>b)\n            {\n\
    \              return(true);\n            }\n            else\n            {\n\
    \              return(false);\n            }\n          }\n          else\n  \
    \        {\n            return(false);\n          }\n        }\n      }\n    }\n\
    \  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp191dyotz: /tmp/tmp191dyotz.cpp:76: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a + b > c || a + c\
    \ > b || b + c > a) return false; // not a triangle\n  bool b1 = (a + b == c);\n\
    \  bool b2 = (a + c == b);\n  bool b3 = (b + c == a);\n  if (b1 && b2 && b3) \n\
    \    return true;\n  else \n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc0mhl6f9: /tmp/tmpc0mhl6f9.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0)\n\
    \        return true;\n    else if (a != 0 && b == 0)\n        return (b > a)\
    \ == (c>b);\n    else if (a == 0 && c > b)\n        return false;\n    else if\
    \ (a != 0 && c > b)\n        return (a > b) == (b > c);\n    long ab = abs(a-b);\n\
    \    long ac = abs(a-c);\n    if (ab < ac) {\n        long bc = abs(b-c);\n  \
    \      long abc = abs(a-b);\n        long acb = abs(a-c);\n        return (b >\
    \ c) == (abc > bc) == (acb > ab);\n    }\n    else {\n        long bc = abs(b-c);\n\
    \        long abc = abs(a-c);\n        long acb = abs(a-b);\n        return (b\
    \ > c) == (abc > bc) == (acb > ab);\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5lko7op6: /tmp/tmp5lko7op6.cpp:39: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (a*a + b*b ==\
    \ c*c);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsue91nxc: /tmp/tmpsue91nxc.cpp:19: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s, d, t;\n    //\
    \ Compute S, the length of the hypotenuse.\n    s = (a * b) + (c * c);\n    //\
    \ If S = 0, then the triangle is right angled.\n    if (s <= 0) {\n        return\
    \ true;\n    }\n    // Compute T, the length of the opposite.\n    t = ((b * b)\
    \ - (a * c));\n    // If T = 0 then the triangle is NOT right-angled.\n    if\
    \ (t < 0) {\n        return false;\n    }\n    // Compute D, the length of the\
    \ adjacent.\n    d = ((b * a) - (c * a));\n    // If D = 0 then the triangle is\
    \ NOT right-angled.\n    if (d > 0) {\n        return false;\n    }\n    // D\
    \ is greater than sqrt(S), so if D is not equal to S the triangle is NOT \n  \
    \  // right-angled.\n    if (d != s) {\n        return false;\n    }\n    // T\
    \ is greater than sqrt(T), so if T is not equal to T the triangle is NOT \n  \
    \  // right-angled.\n    if (t != t) {\n        return false;\n    }\n    // D\
    \ is greater than sqrt(S + T), so if D is not equal to S + T the triangle is \n\
    \    // NOT right-angled.\n    if (d != s + t) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpm989g44k: /tmp/tmpm989g44k.cpp:51: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long side1 = (a + b)\
    \ + c;\n    long side2 = (a + c) + b;\n    long side3 = (b + c) + a;\n    // Check\
    \ if one side is 90\n    if (side1 == side2 || side2 == side3 || side3 == side1)\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpezw87wef: /tmp/tmpezw87wef.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long x, y, z;\n    x\
    \ = a + b;\n    y = a + c;\n    z = b + c;\n    if (x < y && y < z) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph6bejl92: /tmp/tmph6bejl92.cpp:25: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0) return (b\
    \ == c) ? ((a + b > c) ? (a - b - c < b - a) : (a - b + c < b - a)) : (a + b >\
    \ c);\n    if (b == 0) return (a == c) ? ((b + c > a) ? (b - c + a < b - a) :\
    \ (b - c + a < b - a)) : (a + c > b);\n    if (c == 0) return (b == a) ? ((a +\
    \ c > b) ? (a - c + b < b - a) : (a - c + b < b - a)) : (a + b > c);\n\n    //\
    \ If two sides are equal\n    if (b > a && b > c) return false;\n\n    // If two\
    \ sides are opposite\n    if (b > a) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n\n    // If the other side is greater than the third side\n    if (b >\
    \ a) {\n        if (c > b) return false;\n        std::swap(a, b);\n    }\n\n\
    \    // If the third side is greater than the first side\n    if (c > a) {\n \
    \       if (b > c) return false;\n        std::swap(a, b);\n    }\n\n    // The\
    \ third side is greater than the second side\n    if (c > b) {\n        if (a>c)\
    \ return false;\n        std::swap(a, b);\n    }\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkxz4l3um: /tmp/tmpkxz4l3um.cpp:47: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a <= 0 || b <= 0\
    \ || c <= 0)\n        return false;\n    long area = std::sqrt((b * b) - (4 *\
    \ a * c));\n    if (area < 0)\n        area = -area;\n    if (area > 0)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpuof2a3r5: /tmp/tmpuof2a3r5.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if ( a > b ) {\n    \
    \    if ( b > c ) {\n            return false;\n        }\n        return ( a\
    \ > c );\n    }\n    return ( b > c );\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphlrs16ps: /tmp/tmphlrs16ps.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long sd = a - b, bd = b\
    \ - c, ad = c - a;\n  if (bd <= 0) return false;\n  if (ad <= 0) return false;\n\
    \  if (sd == 0) return true;\n  long det = ad * bd;\n  // If the determinant is\
    \ equal to 0, then a is right angle or 90 degree.\n  if (det == 0) return true;\n\
    \  // If the determinant is negative, then the three sides form a right-angle\
    \ \n  // triangle. \n  long m = (sd + bd) / det;\n  if (m < 0) return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpldaayngc: /tmp/tmpldaayngc.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif (a == 0 && b == 0 &&\
    \ c == 0)\n\t\treturn false;\n\telse if (a == 0 || b == 0 || c == 0)\n\t\treturn\
    \ true;\n\telse if ((a + b > c) && (a + c > b) && (b + c > a)) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpe7sxfray: /tmp/tmpe7sxfray.cpp:27: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s = a * b + c; //\
    \ side a\n    long t = b * c - a * b; // side b\n    if (s == 0 || t != 0) {\n\
    \        return false;\n    }\n    t = sqrt(((s * s) - (t*t))/(2 * t)); // find\
    \ the third side of the triangle\n    return (s == t) ? true : false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy6n59v7g: /tmp/tmpy6n59v7g.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return ((a + b) > c)\
    \ || ((a + c) > b) || ((b + c) > a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpna4and9d: /tmp/tmpna4and9d.cpp:18: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  int d_c = c - b;\n  int\
    \ d_a = a - b;\n  if (d_a > 0 && d_c > 0) {\n    return d_a == d_c;\n  } else\
    \ if (d_a < 0 && d_c < 0) {\n    return d_a == d_c;\n  } else if (d_a < 0 && d_c\
    \ > 0) {\n    return d_a != d_c;\n  } else if (d_a > 0 && d_c < 0) {\n    return\
    \ d_a != d_c;\n  } else if (d_a == d_c) {\n    return false;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjxnonhuo: /tmp/tmpjxnonhuo.cpp:31: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // If all sides are equal,\n\
    \    if (a == b) {\n        // then it is a right angle triangle.\n        return\
    \ true;\n    }\n    // If two sides are equal, then the triangle is called right\
    \ angle triangle\n    if (a == c) {\n        return true;\n    }\n    // If one\
    \ side is equal, then the triangle is called right angle triangle.\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl6sxauq4: /tmp/tmpl6sxauq4.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return ((b - a) * (c\
    \ - b) <= 0) && ((c - a) * (b - a) <= 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpue40rchp: /tmp/tmpue40rchp.cpp:17: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // write your code here\n\
    \    return ((a + b > c) && (c > b) && (b > a));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp587beata: /tmp/tmp587beata.cpp:20: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s1 = abs(a - b);\n\
    \    long s2 = abs(c - a);\n    long s3 = abs(b - c);\n    long s4 = abs(a + b);\n\
    \    long s5 = abs(a + c);\n    long s6 = abs(b + c);\n\n    if (s1 == s2) {\n\
    \        if (s1 == s3) {\n            if (s1 == s4) {\n                if (s1\
    \ == s5) {\n                    if (s1 == s6) {\n                        if (s1\
    \ == 0) {\n                            return true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp10elwd7q: /tmp/tmp10elwd7q.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong p = a + b + c;\n\t\
    long q = (p * a) * (p - b) * (p - c);\n\treturn (q * q) - ((a * b) * (c - b));\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9oligue0: /tmp/tmp9oligue0.cpp:20: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(( (a<c) && (a>b) ) || ( (c<a) && (b>c) ) ) \n    {\n        return false;\n\
    \    }\n    else\n    {\n        return true;\n    }\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfgdw0aq8: /tmp/tmpfgdw0aq8.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (b < c) {\n    swap(a,\
    \ b);\n  }\n  \n  long d = (a + b + c) / 2;\n  if (d == a) return false; // Equilateral\n\
    \  if (d == b) return true; // Isosceles\n  if (d == c) return false; // Scalene\n\
    \  \n  return false; // Not a right angled triangle\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbcnlg3r6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpbcnlg3r6.cpp:14:5: error: \u2018swap\u2019\
    \ was not declared in this scope\n   14 |     swap(a, b);\n      |     ^~~~\n\
    /tmp/tmpbcnlg3r6.cpp:14:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbcnlg3r6.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbcnlg3r6.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbcnlg3r6.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpbcnlg3r6.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path&"
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    int ab = abs(a), bc =\
    \ abs(b), cd = abs(c);\n    if (ab * bc < cd) {\n        return false;\n    }\n\
    \    return (((b == c) || (bc < cd)) || ((a < c) || (b > c)));\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplbgylp1l: /tmp/tmplbgylp1l.cpp:24: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && b > c &&\
    \ a>c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjkny4tiy: /tmp/tmpjkny4tiy.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long d = b * b - 4 * a\
    \ * c;\n  if (d == 0) {\n    return false;\n  }\n  long s= (-b + sqrt(d)) / (2\
    \ * a);\n  long t = -(-b - sqrt(d)) / (2 * a);\n  return (s == t);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcshxl3bd: /tmp/tmpcshxl3bd.cpp:24: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a >= b) || (a >=\
    \ c) || (b >= c)) return false;\n    long ab = a*a, bab = b*b;\n    long ac =\
    \ a*c, accc = c*c;\n    if(a*b*c >= ab+ab+accc) return false;\n    long abc =\
    \ ab+ac, abbc = ab+bc, aabbc = ab+abc;\n    if(abc*abbc >= aabbc) return false;\n\
    \    long abcc = ab+acc, abbcc = ab+bc, abbbc = ab+abc;\n    if(abc*abbcc >= abbbc)\
    \ return false;\n    long abbbc = ab+bc, abccc = ab+cc, ababcc = ab+abc;\n   \
    \ if(abc*abbcc >= ababc) return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptway69q3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmptway69q3.cpp:17:33: error: \u2018bc\u2019\
    \ was not declared in this scope; did you mean \u2018abc\u2019?\n   17 |     long\
    \ abc = ab+ac, abbc = ab+bc, aabbc = ab+abc;\n      |                        \
    \         ^~\n      |                                 abc\n/tmp/tmptway69q3.cpp:18:20:\
    \ error: \u2018aabbc\u2019 was not declared in this scope; did you mean \u2018\
    abbc\u2019?\n   18 |     if(abc*abbc >= aabbc) return false;\n      |        \
    \            ^~~~~\n      |                    abbc\n/tmp/tmptway69q3.cpp:19:20:\
    \ error: \u2018acc\u2019 was not declared in this scope; did you mean \u2018abcc\u2019\
    ?\n   19 |     long abcc = ab+acc, abbcc = ab+bc, abbbc = ab+abc;\n      |   \
    \                 ^~~\n      |                    abcc\n/tmp/tmptway69q3.cpp:20:12:\
    \ error: \u2018abbcc\u2019 was not declared in this scope; did you mean \u2018\
    abcc\u2019?\n   20 |     if(abc*abbcc >= abbbc) return false;\n      |       \
    \     ^~~~~\n      |            abcc\n/tmp/tmptway69q3.cpp:20:21: error: \u2018\
    abbbc\u2019 was not declared in this scope; did you mean \u2018abbc\u2019?\n \
    \  20 |     if(abc*abbcc >= abbbc) return false;\n      |                    \
    \ ^~~~~\n      |                     abbc\n/tmp/tmptway69q3.cpp:22:12: error:\
    \ \u2018abbcc\u2019 was not declared in this scope; did you mean \u2018abbbc\u2019\
    ?\n   22 |     if(abc*abbcc >= ababc) return false;\n      |            ^~~~~\n\
    \      |            abbbc\n/tmp/tmptway69q3.cpp:22:21: error: \u2018ababc\u2019\
    \ was not declared in this scope; did you mean \u2018abbbc\u2019?\n   22 |   \
    \  if(abc*abbcc >= ababc) return false;\n      |                     ^~~~~\n \
    \     |                     abbbc\n"
  stdout: ''
  timestamp: 1660100022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((a + b > c) || (b\
    \ + c > a) || (c + a > b))\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph5813lsh: /tmp/tmph5813lsh.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = a + b;\n  \
    \  long ac = a + c;\n    long bc = b + c;\n\n    long acb = (ac * bc) - (ab *\
    \ bc);\n\n    return (ac * bc + ab * bc) == 0;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsgtmpy62: /tmp/tmpsgtmpy62.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    \n    if(b>c || a>c){\n        return false;\n    }\n    if(b==c){\n    \
    \    return true;\n    }\n    if(a==c){\n        return false;\n    }\n    if(a>b\
    \ && a>c){\n        return false;\n    }\n    if(b>a && b>c){\n        return\
    \ false;\n    }\n    if(a>b && b>c){\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpitbyfvgx: /tmp/tmpitbyfvgx.cpp:38: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a*a + b*b == c*c){\n        return true;\n    }\n    else return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3bh6iphu: /tmp/tmp3bh6iphu.cpp:23: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // To find if three side\
    \ of a triangle are right angle,\n  // we need to find the length of each side.\n\
    \  // This can be done by the formula below:\n  // sqrt(a^2 + b^2 + c^2)\n  //\
    \ Since, sqrt() function returns a floating point value.\n  // To check if the\
    \ length of side is greater than\n  // or equal to, we need to compare the result\
    \ with\n  // a small epsilon. \n  // If the result of sqrt() is less than the\
    \ small\n  // epsilon, then we can say that these sides are \n  // right angle.\
    \ \n  // If greater than or equal to, we say that \n  // the sides are not right\
    \ angle.\n  double lengthA = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2));\n  double\
    \ lengthB = sqrt(pow(lengthA, 2) + (pow(lengthA, 2) + pow(lengthA, 2)));\n  double\
    \ lengthC = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2));\n  double lengthD = sqrt(pow(lengthA,\
    \ 2) + (pow(lengthA, 2) + pow(lengthA, 2)));\n  // To compare the length, we can\
    \ simply compare the values\n  // of the lengths themselves, like below.\n  if\
    \ (lengthA < 1e-10 && lengthB < 1e-10 && lengthC < 1e-10) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2mbmuej8: /tmp/tmp2mbmuej8.cpp:41: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Check that the lengths\
    \ of the three sides are non-negative.\n  assert(a >= 0);\n  assert(b >= 0);\n\
    \  assert(c >= 0);\n  // If the lengths are equal, three sides are the same length\
    \ (a==b==c).\n  if (a == b == c) return false;\n  // If the lengths are equal\
    \ or if the length of the hypotenuse is greater than \n  // the length of the\
    \ other sides, they are not right angled triangles.\n  long hypotenuse = sqrt(pow(a,\
    \ b) + pow(c, 2));\n  if (hypotenuse > c) return false;\n  // If the length of\
    \ the hypotenuse equals the other sides, then the three \n  // sides are right\
    \ angled triangles.\n  return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpr1c13org: /tmp/tmpr1c13org.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    if (a == b || a == c || b == c)\n   \
    \     return true;\n    if (a == 2 * c || b == 2 * c || c == 2 * c)\n        return\
    \ true;\n    long x1, y1, z1;\n    x1 = (b * c - a * c);\n    y1 = (-b * a * c\
    \ + c * a);\n    z1 = (-b * a + a * b);\n    if ((x1 == 0) && (y1 == 0) && (z1\
    \ == 0))\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplqv3m9ob: /tmp/tmplqv3m9ob.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Declare a boolean\
    \ variable and set it to false.\n    bool flag = false;\n    // If the sides of\
    \ the triangle are equal, then return false.\n    if (a == b && a == c){\n   \
    \     flag = false;\n    }\n    // If the sides of the triangle are one to one,\
    \ then return false.\n    else if (a == b || a == c){\n        flag = false;\n\
    \    }\n    // If the sides of the triangle are two to two, then return true.\n\
    \    else if (a == b && b == c){\n        flag = true;\n    }\n    // If there\
    \ are no more sides, return false.\n    else{\n        flag = true;\n    }\n \
    \   // Return the value of the variable flag.\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqbglj3vm: /tmp/tmpqbglj3vm.cpp:37: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (a * a + b * b <= c\
    \ * c) {\n    return ((a + b > c && a + c > b) || (a + b > c && a + c > c));\n\
    \  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdyay0ny5: /tmp/tmpdyay0ny5.cpp:23: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (b == 0 || c == 0)\
    \ return false;\n    return (b * b) - (4 * c) >= 0;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5i8r9ejv: /tmp/tmp5i8r9ejv.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if((b - a) == 0)\n  \
    \  {\n        if((b - c) == 0)\n        {\n            if(a == c)\n          \
    \      return true;\n            else if(b == c)\n                return false;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    else if((c - b) == 0)\n    {\n        if(a == b)\n            return\
    \ false;\n        else if(b == c)\n            return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpl7akvu5j: /tmp/tmpl7akvu5j.cpp:41: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Base Case\n    if\
    \ (a == 0 && b == 0 && c == 0)\n        return true;\n\n    // If any side is\
    \ 0, then it's a right angle triangle.\n    if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n\n    // If any side is 90 degree, then it's a right angle\
    \ triangle.\n    if (a == 90 && b == 0 || b == 90 && c == 0)\n        return true;\n\
    \n    // If any side is 180, then it's not a right angle triangle.\n    if (a\
    \ == 180 && b == 90 || b == 180 && c == 90)\n        return false;\n\n    // If\
    \ any two sides are 180 degree, then it's a right angle triangle.\n    if (a ==\
    \ 180 && b == 180)\n        return true;\n\n    // If any two sides are 90 or\
    \ 180 degree, then it's not a right angle\n    // triangle.\n    return ((a <\
    \ b) && (b < c)) || ((a > b) && (b > c));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgbj6u592: /tmp/tmpgbj6u592.cpp:40: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long x, y, d, a, b, c,\
    \ d, x1, x2, x3, y1;\n    // cin >> a >> b >> c;\n    a = abs(a);\n    b = abs(b);\n\
    \    c = abs(c);\n    \n    // c = a\n    if (a == b)\n    {\n        cout <<\
    \ \"c==a\" << endl;\n        return false;\n    }\n    \n    // a = b\n    if\
    \ (b == c)\n    {\n        cout << \"a==b\" << endl;\n        return false;\n\
    \    }\n    \n    // b = c\n    if (c == a)\n    {\n        cout << \"b==c\" <<\
    \ endl;\n        return false;\n    }\n    \n    //c = a+b\n    cout << \"c==a+b\"\
    \ << endl;\n    d = a + b;\n    x = a - b;\n    y = b - c;\n    cout << \"d==a+b\"\
    \ << endl;\n    cout << \"x==a-b\" << endl;\n    cout << \"y==b-c\" << endl;\n\
    \    // x = a+b\n    // y = a-b\n    // d = b-c\n    // x = 3-a\n    // y = 3-b\n\
    \    // d = a-b\n    // x2 = a+2\n    // x3 = a+b+2\n    // y1 = a-b-2\n    //\
    \ y2 = b-c-2\n    // x3 = a+b+b+c+2\n    // y3 = a-b-c-2\n    // d = a-b-c\n \
    \   // x1 = (a+b+b+c)+b+2\n    // x2 = (a+b+b+c)-b+b+2\n    // x1 = a+b+b+c+2\n\
    \    // y1 = a+b-c-2\n    // x2 = a+b-c+b+2\n    // y2 = a+b-c+2\n    // x1 =\
    \ a-b+b+c+b+2\n    // y1 = a-b+b-c+2\n    // x3 = a+b-c+b+2\n    // y3 = a-b-c+b+2\n\
    \    // x2 = a+b-c+2\n    // y2 = a-b-c+2\n    // x2 = a-b+2\n    // x1 = a-b+b+2\n\
    \    // y1 = a-b-2\n    // x3 = a-b+b+2\n    // y3 = a-b-2\n    // x1 = a-b+b+c+2\n\
    \    // y1 = a-b-2\n    // x2 = a-b+2\n    // x3 = a-b+b+2\n    // y2 = a-b-2\n\
    \    // x1 = a-b+b+c+2\n    // y2 = a-b-2\n    // x3 = a-b+b+2\n    // y3 = a-b-2\n\
    \    // x3 = a+b+2\n    // y3 = a+b-2\n    // x3 = a+b+b+2\n    // y\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw39voxnm.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpw39voxnm.cpp:13:19: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   13 |     long x, y, d, a,\
    \ b, c, d, x1, x2, x3, y1;\n      |                   ^\n/tmp/tmpw39voxnm.cpp:13:22:\
    \ error: declaration of \u2018long int b\u2019 shadows a parameter\n   13 |  \
    \   long x, y, d, a, b, c, d, x1, x2, x3, y1;\n      |                      ^\n\
    /tmp/tmpw39voxnm.cpp:13:25: error: declaration of \u2018long int c\u2019 shadows\
    \ a parameter\n   13 |     long x, y, d, a, b, c, d, x1, x2, x3, y1;\n      |\
    \                         ^\n/tmp/tmpw39voxnm.cpp:13:28: error: redeclaration\
    \ of \u2018long int d\u2019\n   13 |     long x, y, d, a, b, c, d, x1, x2, x3,\
    \ y1;\n      |                            ^\n/tmp/tmpw39voxnm.cpp:13:16: note:\
    \ \u2018long int d\u2019 previously declared here\n   13 |     long x, y, d, a,\
    \ b, c, d, x1, x2, x3, y1;\n      |                ^\n/tmp/tmpw39voxnm.cpp:22:9:\
    \ error: \u2018cout\u2019 was not declared in this scope; did you mean \u2018\
    std::cout\u2019?\n   22 |         cout << \"c==a\" << endl;\n      |         ^~~~\n\
    \      |         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpw39voxnm.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpw39voxnm.cpp:22:27:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   22 |         cout << \"c==a\" << endl;\n      |         \
    \                  ^~~~\n      |                           std::endl\nIn file\
    \ included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw39voxnm.cpp:2:\n/usr/include/c++/9/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599"
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \    long x = b * b - 4 * a * c;\n    long y = abs(x);\n    long sign = (x < 0)\
    \ ? -1 : 1;\n    if (y == 0 || y > sign) \n        return false; \n    x = a *\
    \ a + b * b - 4 * a * c;\n    y = abs(x);\n    if (y == 0 || y > sign)\n     \
    \   return false;\n    x = a * a + a * a - a * b;\n    y = abs(x);\n    if (y\
    \ == 0 || y > sign)\n        return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85wo466d: /tmp/tmp85wo466d.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long det, p, q;\n  p =\
    \ a + b + c;\n  q = a + (b - c);\n  det = p - q;\n  if (det == 0) {\n    return\
    \ true;\n  }\n  else { // det < 0\n    return false;\n  }\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6eg3pj47: /tmp/tmp6eg3pj47.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (a + b > c ||\
    \ b + c > a || a + c > b);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa_53d8tb: /tmp/tmpa_53d8tb.cpp:18: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a+b+c == 0){\n   \
    \     return true; // Triangle is valid if all sides are same\n    }\n\n    long\
    \ s = (a+b < c) ? a : c;\n    long t = (b < s) ? b : s;\n    long u = (b+c < s)\
    \ ? c : s;\n    long v = (c+a < t) ? a : t;\n\n    return (s*s-t*u == 0);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwadx9neu: /tmp/tmpwadx9neu.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here.\n\
    \  assert(a > 0 && b > 0 && c > 0);\n  return (((b*b) - (a*c)) >= 0);\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo44qwu26: /tmp/tmpo44qwu26.cpp:20: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\t// Code here\n\tlong sum\
    \ = a+b+c;\n\tassert(a+b>c);\n\tassert(c>b);\n\treturn (a+b+c==sum);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa5drkjo0: /tmp/tmpa5drkjo0.cpp:15: bool right_angle_triangle(long int,
    long int, long int): Assertion `a+b>c'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long s=(a+b+c)/2;\n    long e=(a*a+b*b+c*c)/2;\n    if(a*a+b*b==c*c){\n \
    \       return true;\n    }\n    else if(s>e){\n        return false;\n    }\n\
    \    else if(s<e){\n        long p=(a+b)/2;\n        long q=(a*a+b*b)/2;\n   \
    \     if(p<q){\n            return right_angle_triangle(p,c,q);\n        }\n \
    \       else{\n            return right_angle_triangle(q,p,c);\n        }\n  \
    \  }\n    else{\n        long p1=a/2;\n        long p2=b/2;\n        long p3=c/2;\n\
    \        if(p1*p1+p2*p2>p3*p3){\n            return right_angle_triangle(p2,p3,p1);\n\
    \        }\n        else{\n            return right_angle_triangle(p1,p2,p3);\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9jpjjv7y: /tmp/tmp9jpjjv7y.cpp:48: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  long u = a;\n  long v =\
    \ b;\n  long w = c;\n  long x = std::abs(u);\n  long y = std::abs(v);\n  long\
    \ z = std::abs(w);\n  long r = std::max((std::abs(x) > std::abs(y) ? x : y), (std::abs(x)\
    \ > std::abs(z) ? x : z));\n  long r2 = std::max((std::abs(x) > std::abs(y) ?\
    \ y : x), (std::abs(x) > std::abs(z) ? y : z));\n  return (((r - r2) < ((a * b)\
    \ / 3)) && ((r2 - r) < ((b * c) / 3)));\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp33jxw55y: /tmp/tmp33jxw55y.cpp:28: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tif((a + b < c) && (c >\
    \ b)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj_9ip_8t: /tmp/tmpj_9ip_8t.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here.\n\
    \  std::cout << \"a\" << a << \"\\nb\" << b << \"\\nc\" << c << std::endl;\n \
    \ long d = a*b*c - b*a * c;\n  std::cout << \"d\" << d << std::endl;\n  long abc\
    \ = std::abs(d);\n  if(abc < 1e-9){\n    return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpal1mx1ml: /tmp/tmpal1mx1ml.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: 'a3

    b4

    c5

    d0

    a1

    b2

    c3

    d0

    '
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (b * b) - 4 *\
    \ (c * a) < 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjsqcns9q: /tmp/tmpjsqcns9q.cpp:18: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == b) return c\
    \ > a;\n    if (a == c) return b > c;\n    if (b == c) return a > b;\n    // Not\
    \ a right angle triangle. Must not be possible.\n    assert(false);\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx2tbpnsb: /tmp/tmpx2tbpnsb.cpp:17: bool right_angle_triangle(long int,
    long int, long int): Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (b > a && b > c) {\n\
    \        return false;\n    }\n    if (a > b && a > c) {\n        return false;\n\
    \    }\n    if (c > a && c > b) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq0kiatny: /tmp/tmpq0kiatny.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == b && b == c)\
    \ {\n        return true;\n    }\n\n    if (a == c) {\n        return false;\n\
    \    }\n\n    if (b == c) {\n        return false;\n    }\n\n    long a1 = abs(a\
    \ - b);\n    long a2 = abs(a - c);\n    long b1 = abs(b - c);\n\n    if (a1 <\
    \ b1 && a1 < c1) {\n        return true;\n    }\n\n    if (a2 < b1 && a2 < c1)\
    \ {\n        return true;\n    }\n\n    if (b1 < a1 && b1 < c1) {\n        return\
    \ true;\n    }\n\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t48fqlf.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp0t48fqlf.cpp:29:25: error: \u2018c1\u2019\
    \ was not declared in this scope; did you mean \u2018b1\u2019?\n   29 |     if\
    \ (a1 < b1 && a1 < c1) {\n      |                         ^~\n      |        \
    \                 b1\n/tmp/tmp0t48fqlf.cpp:33:25: error: \u2018c1\u2019 was not\
    \ declared in this scope; did you mean \u2018b1\u2019?\n   33 |     if (a2 < b1\
    \ && a2 < c1) {\n      |                         ^~\n      |                 \
    \        b1\n/tmp/tmp0t48fqlf.cpp:37:25: error: \u2018c1\u2019 was not declared\
    \ in this scope; did you mean \u2018b1\u2019?\n   37 |     if (b1 < a1 && b1 <\
    \ c1) {\n      |                         ^~\n      |                         b1\n"
  stdout: ''
  timestamp: 1660100024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  if (abs(a + b + c) <= 1)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjls_5kgn: /tmp/tmpjls_5kgn.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long d = b * b - 4 * a * c;\n    return d >= 0;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp59iwrra3: /tmp/tmp59iwrra3.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long s= (c*c - a*a);\n\
    \    long t= b*b - a*c;\n    long u=sqrt(s);\n    long v=(a+b+c)/2;\n    long\
    \ w=((-t)*(b-a))/(2-(a*b)-(c*a));\n    if(u>1 && v>1 && w>1) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjrlghy7u: /tmp/tmpjrlghy7u.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long x = 0, y = 0;\n    long x1 = 0, y1 = 0, x2 = 0, y2 = 0;\n\n    if(a==0\
    \ || b==0 || c==0){\n        return false;\n    }\n\n    x1 = a;\n    y1 = x;\n\
    \    x2 = b;\n    y2 = y;\n    for(int i=1; i<=x; i++){\n        if(y==0){\n \
    \           return false;\n        }\n        y = y - x2;\n        x2 = x1 - x2;\n\
    \        x1 = x;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx3f3ckqb: /tmp/tmpx3f3ckqb.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\t// Two corner of the triangle\n\
    \tlong mid = (a + b + c) / 2;\n\tif (a > b + c || a > c + b)\n\t\treturn false;\n\
    \telse if (a > c + b || a > b + c)\n\t\treturn true;\n\telse if (b > a + c ||\
    \ b > c + a)\n\t\treturn false;\n\telse if (b > c + a || b > a + c)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpit69lz7s: /tmp/tmpit69lz7s.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (b == 0) return false;\n\
    \    if (b == c) return false;\n    if (b == a + 1) return true;\n    if (a ==\
    \ b) return false;\n    if (a == c) return true;\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > c) std::swap(a, c);\n    bool\
    \ a = std::abs(a - b) < 1e-10;\n    bool b = std::abs(b - c) < 1e-10;\n    bool\
    \ c = std::abs(c - a) < 1e-10;\n    if (!b || !c) return false;\n    double a1\
    \ = std::abs(a) / b;\n    double b1 = std::abs(b) / c;\n    double c1 = std::abs(c)\
    \ / a;\n    double b2 = std::abs(b) / c;\n    double c2 = std::abs(c) / a;\n \
    \   double r1 = (b1 < c1) ? (a1 / b2) : (c1 / b2);\n    double r2 = (c1 < a1)\
    \ ? (b1 / c2) : (a / c2);\n    return (r1 < 1e-10) && (r2 < 1e-10);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo39b14hl.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpo39b14hl.cpp:21:10: error: declaration\
    \ of \u2018bool a\u2019 shadows a parameter\n   21 |     bool a = std::abs(a -\
    \ b) < 1e-10;\n      |          ^\n/tmp/tmpo39b14hl.cpp:22:10: error: declaration\
    \ of \u2018bool b\u2019 shadows a parameter\n   22 |     bool b = std::abs(b -\
    \ c) < 1e-10;\n      |          ^\n/tmp/tmpo39b14hl.cpp:23:10: error: declaration\
    \ of \u2018bool c\u2019 shadows a parameter\n   23 |     bool c = std::abs(c -\
    \ a) < 1e-10;\n      |          ^\n"
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\tlong sine1, sine2, sine3;\n\
    \tdouble cosine1, cosine2, cosine3;\n\tlong a1, b1, c1, a2, b2, c2;\n\tdouble\
    \ cosine, angle;\n\t\n\ta1 = b1 = c1 = a2 = b2 = c2 = 0.0;\n\t\n\ta1 = (long)\
    \ pow(a, 3);\n\tb1 = (long) pow(b, 3);\n\tc1 = (long) pow(c, 3);\n\t\n\ta2 = (long)\
    \ pow(a, 2);\n\tb2 = (long) pow(b, 2);\n\tc2 = (long) pow(c, 2);\n\t\n\tsine1\
    \ = a1 * b2 - a2 * b1;\n\tcosine1 = b1 * c2 - b2 * c1;\n\t\n\tsine2 = a2 * c1\
    \ - a1 * c2;\n\tcosine2 = b1 * c2 - b2 * c1;\n\t\n\tsine3 = a1 * b2 - a2 * b1;\n\
    \tcosine3 = b1 * c2 - b2 * c1;\n\t\n\tcosine = cosine1 * cosine2 + cosine2 * cosine3;\n\
    \tangle = acos(cosine);\n\t\n\tif (sine1 != 0.0) {\n\t\tif (angle >= 0.0) {\n\t\
    \t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tif\
    \ (angle < 90.0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\t\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpejjvamyq: /tmp/tmpejjvamyq.cpp:57: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  assert(b > a);\n  assert(c\
    \ > b);\n  long d = a + b + c;\n  long ac = abs(a - c);\n  long bc = abs(b - c);\n\
    \  long ad = abs(a - d);\n  long bd = abs(b - d);\n  long product = ac * bd;\n\
    \  if (product < (ac + bd)) {\n    return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpic2ucn42: /tmp/tmpic2ucn42.cpp:29: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660100025
