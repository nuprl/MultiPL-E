name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>>\
  \ is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\n\
  long is_bored(std::string S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    std::string boredom = \"\";\n    int count = 0;\n    for(int i\
    \ = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n            boredom =\
    \ \"\";\n        } else if (S[i] == '?') {\n            boredom = \"\";\n    \
    \    } else if (S[i] == '!') {\n            boredom = \"\";\n        } else {\n\
    \            boredom = boredom + S[i];\n        }\n        if(boredom.find(\"\
    I\") == 0) {\n            count++;\n        }\n    }\n    return count;", "  \
    \  // Your code here\n    \n    long count = 0;\n    for(char ch : S){\n     \
    \   if(ch == 'I'){\n            count += 1;\n        }\n    }\n    return count;",
  "    // Code here\n    long n = S.size();\n    long ans = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n    \
    \        ans++;\n    }\n    return ans;", "  long n = 0;\n  for (int i = 0; i\
    \ < S.size(); i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n \
    \     n++;\n    }\n  }\n  return n;", "  assert(S.size() >= 2); // check if S\
    \ has at least 2 words (not counting empty string)\n  int cnt = 0;\n  int prev_was_I\
    \ = 0, last_was_I = 0;\n  int prev_is_bored = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == 'I') {\n      if (prev_was_I == 0) {\n        cnt +=\
    \ 1;\n        last_was_I = 1;\n      } else if (last_was_I == 1) {\n        cnt\
    \ += 1;\n      }\n      prev_was_I = 1;\n    }\n    if (S[i] == '.') {\n     \
    \ if (prev_is_bored == 0 && S[i+1] == '!') {\n        cnt += 1;\n        prev_is_bored\
    \ = 1;\n      } else if (prev_is_bored == 1 && S[i+1] == '?') {\n        cnt +=\
    \ 1;\n      }\n      last_was_I = 0;\n      prev_is_bored = 0;\n    }\n  }\n \
    \ return cnt;", "    long cnt = 0;\n    std::string word;\n    \n    for (auto\
    \ &c: S) {\n        if (c != '.' && c != '?' && c != '!')\n            continue;\n\
    \        \n        if (word == \"I\" && c == '.') {\n            cnt++;\n    \
    \        continue;\n        }\n        \n        word += c;\n    }\n    \n   \
    \ return cnt;", "    int bored = 0;\n    std::string pattern = \"^I\";\n    std::regex\
    \ r(pattern);\n    std::smatch m;\n    for (auto itr = std::sregex_iterator(S.begin(),\
    \ S.end(), r);\n         itr != std::sregex_iterator(); ++itr) {\n        if (m.size()\
    \ >= 1) {\n            bored += m.size();\n        }\n    }\n    return bored;",
  "   long boredoms = 0;\n   assert(S.size() > 1);\n   assert(S.find_first_of(\".?!\"\
    ) == std::string::npos);\n\n   for (auto i : S) {\n      boredoms += (std::tolower(i)\
    \ == std::tolower(i[0]));\n   }\n\n   return boredoms;", "  int count = 0;\n \
    \ int i = 0;\n  int k = 0;\n  while (i < S.length()) {\n    if (S[i] == ' ') i++;\n\
    \    else if (S[i] == '.') i++;\n    else if (S[i] == '?') i++;\n    else if (S[i]\
    \ == '!') i++;\n    else if (S[i] == 'I') {\n      i++;\n      count++;\n    }\n\
    \    i++;\n  }\n  return count;", "    // Get the length of the string S\n   \
    \ int n = S.size();\n    // Initialize a counter\n    int count = 0;\n    // Initialize\
    \ an array to store the number of times each letter appears\n    int *counter\
    \ = new int[n];\n    // Store the letters in counter\n    for (int i = 0; i <\
    \ n; ++i) {\n        counter[S[i]-'A']++;\n    }\n    // Start traversing the\
    \ string from the first character and\n    // check each character if its a boredom\n\
    \    for (int i = 0; i < n; ++i) {\n        if (S[i] == 'I') {\n            //\
    \ If current character is a 'I', increment counter by 1\n            count++;\n\
    \            // If the next character is a letter\n            if (S[i+1] != '.'\
    \ && S[i+1] != '?' && S[i+1] != '!') {\n                // If next character is\
    \ not a letter, add counter to count\n                count += counter[S[i+1]-'A'];\n\
    \            }\n        }\n    }\n    // Return the count of boredoms found\n\
    \    return count;", "  long boredoms = 0;\n  for (int i = 0; i <= S.size() -\
    \ 1; ++i) {\n    if (isalpha(S[i]) && (S[i] == 'I'))\n      ++boredoms;\n  }\n\
    \  return boredoms;", "    if (S.empty())\n        return 0;\n    // Initialize\
    \ a vector of strings to store the different words encountered\n    std::vector<std::string>\
    \ words(S.begin(), S.end());\n    // Initialise the count variable to store the\
    \ number of boredoms encountered\n    long boredoms = 0;\n    \n    // Count the\
    \ number of boredoms \n    for (auto const & word : words) {\n        if (word\
    \ == \"I\")\n            ++boredoms;\n    }\n    return boredoms;", "    int boredom_count\
    \ = 0, i;\n    for (i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n\
    \            if (i > 0 && S[i - 1] == '.' && S[i + 1] == '.') {\n            \
    \    // found two consecutive boredoms\n                boredom_count += 2;\n\
    \            } else if (i > 0 && S[i - 1] == '.') {\n                // found\
    \ a boredom\n                boredom_count++;\n            } else {\n        \
    \        // found the end of the boredom\n                boredom_count++;\n \
    \           }\n        }\n    }\n    return boredom_count;", "    assert(S.size()\
    \ > 0);\n    int count = 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n  \
    \      if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long boredom = 0;\n    std::vector <std::string> words;\n\
    \    std::stringstream ss(S);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    for (auto &word :\
    \ words) {\n        if (word == \"I\") {\n            boredom++;\n        }\n\
    \    }\n    return boredom;", "    if(S.empty()) {\n        return 0;\n    }\n\
    \    int count = 0;\n    for(int i = 0; i < S.length(); ++i) {\n        if(S[i]\
    \ == '.') {\n            if((S[i+1] == '.') && (S[i+2] == '.') && (S[i+3] == '.')\
    \ && (S[i+4] == '.')) {\n                ++count;\n            }\n        }\n\
    \        else if(S[i] == '?') {\n            if((S[i+1] == '?') && (S[i+2] ==\
    \ '?') && (S[i+3] == '?') && (S[i+4] == '?')) {\n                ++count;\n  \
    \          }\n        }\n        else if(S[i] == '!') {\n            if((S[i+1]\
    \ == '!') && (S[i+2] == '!') && (S[i+3] == '!') && (S[i+4] == '!')) {\n      \
    \          ++count;\n            }\n        }\n        else {\n            if((S[i]\
    \ == 'I') && (S[i+1] == 'I') && (S[i+2] == 'I') && (S[i+3] == 'I') && (S[i+4]\
    \ == 'I')) {\n                ++count;\n            }\n        }\n    }\n    return\
    \ count;", "    int flag=0;\n    std::string str1(S);\n    str1.erase(0, str1.find_first_not_of(\"\
    .\"));\n    str1.erase(str1.find_last_not_of(\".\"));\n    str1.erase(0, str1.find_first_not_of(\"\
    ?\"));\n    str1.erase(str1.find_last_not_of(\"?\"));\n    str1.erase(0, str1.find_first_not_of(\"\
    !\"));\n    str1.erase(str1.find_last_not_of(\"!\"));\n\n    if(str1.compare(0,\
    \ 4, \"I\"))\n    {\n        flag++;\n    }\n\n    return flag;", "    string\
    \ p=\"I\";\n    int count = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]==p){\n\
    \            count++;\n        }\n    }\n    return count;", "  int count = 0;\n\
    \  for(int i=0; S[i] != 0; i++){\n    if(S[i] == '.' || S[i] == '!' || S[i] ==\
    \ '?'){\n      count++;\n    }\n  }\n  return count;", "  int nboredoms = 0;\n\
    \  int i = 0;\n  while(i < S.size()) {\n    while(i < S.size() && S[i] == ' ')\
    \ {\n      i++;\n    }\n    while(i < S.size() && S[i] != '.' && S[i] != '?' &&\
    \ S[i] != '!') {\n      i++;\n    }\n    if(i == S.size()) {\n      return nboredoms;\n\
    \    }\n    if(S[i] == '.') {\n      i++;\n      while(i < S.size() && S[i] ==\
    \ ' ') {\n        i++;\n      }\n      nboredoms += 2;\n    }\n    else if((S[i]\
    \ == '?') || (S[i] == '!')) {\n      i++;\n      while(i < S.size() && S[i] ==\
    \ ' ') {\n        i++;\n      }\n      if(S[i] == '?') {\n        nboredoms +=\
    \ 1;\n      }\n      else if((S[i] == '!')) {\n        nboredoms += 0;\n     \
    \ }\n    }\n    else {\n      nboredoms++;\n    }\n  }\n  return nboredoms;",
  "  int n = 0;\n  for (auto c : S)\n    if (c == '.' || c == '?' || c == '!')\n \
    \     ++n;\n  return n;", "  // TODO\n  return 0;", "    // Write your code here\n\
    \    std::string temp = S.substr(0, 4);\n    for (int i = 0; i < temp.length();\
    \ i++) {\n        if (temp[i] == 'I') {\n            return 1;\n        }\n  \
    \  }\n    return 0;", "  int boredom = 0;\n  int index = 0;\n  for (int i = 0;\
    \ i < S.size(); i++) {\n    if (S[i] == 'I') {\n      boredom++;\n    }\n    else\
    \ if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n     \
    \ }\n    }\n    else if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n      \
    \  boredom++;\n      }\n    }\n    else if (S[i] == '?') {\n      if (S[i + 1]\
    \ == '?') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '!') {\n\
    \      if (S[i + 1] == '!') {\n        boredom++;\n      }\n    }\n    else if\
    \ (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n      }\n\
    \    }\n    else if (S[i] == '?') {\n      if (S[i + 1] == '?') {\n        boredom++;\n\
    \      }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n \
    \       boredom++;\n      }\n    }\n    else if (S[i] == '.') {\n      if (S[i\
    \ + 1] == '.') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '?')\
    \ {\n      if (S[i + 1] == '?') {\n        boredom++;\n      }\n    }\n    else\
    \ if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n     \
    \ }\n    }\n    else if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n      \
    \  boredom++;\n      }\n    }\n    else if (S[i] == '!') {\n      if (S[i + 1]\
    \ == '!') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '.') {\n\
    \      if (S[i + 1] == '.') {\n        boredom++;\n      }\n    }\n    else if\
    \ (S[i] == '!') {\n      if (S[i + 1] == '!') {\n        boredom++;\n      }\n\
    \    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n\
    \      }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n \
    \       boredom++;\n      }\n    }\n    else if (S[i] == '!') {\n      if (S[i\
    \ + 1] == '!') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '.')\
    \ {\n      if (S[i + 1] == '.') {\n        boredom++;\n      }\n    }\n    else\
    \ if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n        boredom++;\n     \
    \ }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n      \
    \  boredom++;\n      }\n    }\n", "    int flag = 0;\n    for (int i = 0; i <\
    \ S.size(); i++)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n\
    \        {\n            flag = flag + 1;\n        }\n    }\n    return flag;",
  "    assert(S.size() != 0);\n    int count = 0;\n    for (auto i: S) {\n       \
    \ if ((i == '.') || (i == '?') || (i == '!')) {\n            ++count;\n      \
    \  }\n    }\n    return count;", "    long cnt=0;\n    for (int i=0; i<S.length();\
    \ i++){\n        if (S[i] == 'I' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] ==\
    \ '.'){\n            cnt ++;\n        }\n    }\n    return cnt;", "    long boredoms\
    \ = 0;\n    std::istringstream ss(S);\n    std::string word;\n    while(std::getline(ss,\
    \ word, '.')) {\n        if(word == \"I\") {\n            boredoms ++;\n     \
    \   }\n    }\n    return boredoms;", "    if (S == \"I\") return 1;\n    if (S\
    \ == \"love\") return 1;\n    if (S == \"weather\") return 1;\n    if (S == \"\
    sun\") return 1;\n    if (S == \"sky\") return 1;\n    if (S == \"is\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;", "    int counter = 0;\n    bool flag = false;\n    int\
    \ i = 0;\n    while (i < S.length()) {\n        if (S.at(i) == '?' || S.at(i)\
    \ == '!')\n            flag = true;\n        else if (S.at(i) == '.')\n      \
    \      flag = false;\n        else if (flag) {\n            if (S.at(i) == 'I')\n\
    \                counter++;\n            i++;\n        }\n        i++;\n    }\n\
    \    return (counter);", "    long boredom = 0;\n    \n    for (char i : S) {\n\
    \        if (i == '.' || i == '?' || i == '!') {\n            boredom++;\n   \
    \     }\n    }\n\n    return boredom;", "    long count = 0 ;\n    for (auto c\
    \ : S) {\n        if (c == 'I') {\n            ++count;\n        }\n    }\n  \
    \  return count;", "    int count = 0, found = 0;\n    \n    for (int i=0; i<S.size();\
    \ i++){\n        if (S[i] == '.'){\n            if (S.substr(i, 2) == \"I\"){\n\
    \                found = 1;\n            }\n            count++;\n        }\n\
    \        \n        if (S[i] == '!' || S[i] == '?' || S[i] == ' '){\n         \
    \   found = 0;\n        }\n    }\n    return count;", "    int count = 0;\n  \
    \  for(int i = 0; i < S.length(); i++){\n        if(S[0] == 'I'){\n          \
    \  count++;\n        }\n    }\n    return count;", "    int n = S.size();\n  \
    \  long sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (isalpha(S[i]))\
    \ {\n            if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \      sum++;\n            }\n        }\n    }\n    return sum;", "    std::size_t\
    \ start = 0;\n    std::string word = S;\n    for (std::size_t i = 1; i < S.size();\
    \ i++) {\n        if (S[i] == '.') {\n            if (word == \"I\") {\n     \
    \           return i;\n            }\n        } else if (S[i] == '?') {\n    \
    \        if (word == \"I\") {\n                return i;\n            }\n    \
    \    } else if (S[i] == '!') {\n            if (word == \"I\") {\n           \
    \     return i;\n            }\n        } else if (S[i] == ' ') {\n          \
    \  if (word == \"I\") {\n                return i;\n            }\n        } else\
    \ if (S[i] == '\\n' || S[i] == '\\r') {\n            start = i;\n            word\
    \ = S;\n        } else {\n            word = S;\n        }\n    }\n    if (word\
    \ == \"I\") {\n        return -1;\n    }\n    return 0;", "    int count = 0;\n\
    \    for (int i = 0; i < S.size(); i++) {\n        char ch = S[i];\n        if\
    \ (ch == '.' || ch == '?' || ch == '!') {\n            count++;\n        }\n \
    \   }\n    return count;", "    //  Write your code here\n    return 0L;", " \
    \   int count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] ==\
    \ 'I' || S[i] == '.' || S[i] == '!' || S[i] == '?') {\n            count++;\n\
    \        }\n    }\n    return count;", "  long boredoms = 0;\n  std::string::const_iterator\
    \ it;\n  it = S.begin();\n  it = std::search(it, S.end(), std::begin(\"I\"), std::end(\"\
    I\"));\n  while (it != S.end()) {\n    ++boredoms;\n    it = std::search(it, S.end(),\
    \ std::begin(\".\"), std::end(\".\"));\n  }\n  return boredoms;", "    // Write\
    \ your code here\n    vector<string> arr1;\n    for(int i = 0; i<S.length(); i++){\n\
    \        string word = S.substr(i,1);\n        if(word==\"I\"){\n            arr1.push_back(word);\n\
    \        }\n    }\n    long boredoms = 0, i;\n    for (i=0;i<arr1.size();i++){\n\
    \        if(arr1[i]==\".\"){\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;", "    // Complete this function\n    int count = 0;\n    for (size_t\
    \ i = 0; i < S.size(); i++) {\n        if (S[i] == 'I' && S[i + 1] == '.') {\n\
    \            count++;\n        }\n    }\n    return count;", "    // Your code\
    \ goes here\n    long n = 0, i, count = 0;\n    for(i = 0; i < S.length(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count++;\n\
    \        }\n    }\n    if(count <= 1) {\n        return (0);\n    }\n    else\
    \ {\n        return (1);\n    }", "    int count=0, i=0;\n    for(int j=0;j<S.size();j++){\n\
    \        if(S[j]=='I'){\n            count++;\n            i=0;\n        }\n \
    \       else{\n            count++;\n            i=1;\n        }\n    }\n    return\
    \ count;", "    // Your code here\n    std::string a = \".?!\";\n    for(int i\
    \ = 0; i<S.length(); i++)\n    {\n        for(int j = 0; j<a.length(); j++)\n\
    \        {\n            if(S[i] == a[j])\n            {\n                return\
    \ 1;\n            }\n        }\n    }\n    return 0;", "    // Complete this function\n\
    \    long boredoms = 1;\n    long size = S.length();\n    for (int i = 0; i <\
    \ size; i++) {\n        if (S[i] == '.') {\n            boredoms = boredoms +\
    \ 1;\n        }\n        else if (S[i] == '?') {\n            boredoms = boredoms\
    \ + 1;\n        }\n        else if (S[i] == '!') {\n            boredoms = boredoms\
    \ + 1;\n        }\n        else {\n            boredoms = boredoms + 0;\n    \
    \    }\n    }\n    return boredoms;", "    long count = 0;\n    for (auto c :\
    \ S) {\n        if (c == '.' || c == '?' || c == '!') {\n            count++;\n\
    \        }\n    }\n    return count;", "    int flag = 0;\n    std::string str\
    \ = \"\";\n    for(unsigned int i = 0; i < S.length(); i++) {\n        if (S[i]\
    \ == \".\") flag++;\n        else if (S[i] == \"?\" || S[i] == \"!\") flag++;\n\
    \        else if (S[i] == 'I')\n            flag += 2;\n        else if (S[i]\
    \ == '.')\n            str += S[i];\n        else if (S[i] == '?')\n         \
    \   str += S[i];\n        else\n            str += S[i];\n    }\n    if (flag\
    \ == 0)\n        return (1);\n    else if ((str.find(\"#\") != std::string::npos)\
    \ && (flag == 3))\n        return (1);\n    else\n        return (0);", "    int\
    \ boredom_cnt=0;\n    int i=0;\n    for(i=0;i<S.size();i++){\n        if(S[i]==\"\
    I\"){\n            boredom_cnt++;\n        }\n    }\n    return boredom_cnt;",
  "    string word = \"\";\n    int count = 0;\n    for(int i = 0 ; i < S.length()\
    \ ; i++){\n        char c = S[i];\n        if(!isalpha(c)) {\n            word\
    \ += c;\n            continue;\n        }\n        if(word == \"I\" || word ==\
    \ \"i\"){\n            count++;\n        }\n        word = c;\n    }\n    return\
    \ count;", "  // Good luck!\n  long ans = 0;\n  for (int i = 0; i <S.length();\
    \ i++) {\n    if (isalpha(S[i]) && S[i] == 'I') {\n      ans += 1;\n    }\n  }\n\
    \  \n  return ans;", "    int i, count = 0;\n    // A bored sentence starts with\
    \ \"I\".\n    if (S.find(\"I\") == 0)\n    {\n        // The bored sentence can\
    \ be broken down into its parts.\n        std::string::size_type pos = S.find('?');\n\
    \        std::string part = S.substr(0, pos);\n        S = S.substr(pos + 1);\n\
    \        int len = part.length();\n        // Look for \"I\" in the sentence,\
    \ and keep counting boredoms.\n        for (i = 0; i < len; ++i)\n        {\n\
    \            if (part[i] == 'I')\n            {\n                ++count;\n  \
    \          }\n        }\n    }\n    return count;", "    // Complete the function\
    \ body here\n    // ...\n    return 0; // Replace this line with your code", " \
    \ int i, j, k, n, boredom = 0;\n  // Find length of string\n  n = S.length();\n\
    \  // Initialize a 2D array\n  char** p = new char*[n];\n  for(i = 0; i < n; ++i)\
    \ {\n    p[i] = new char[n + 1];\n  }\n\n  // Copy string into p[][]\n  for(i\
    \ = 0; i < n; ++i) {\n    strcpy(p[i], S.c_str());\n  }\n\n  // Search for '.',\
    \ '!', '?'\n  for(i = 0; i < n; ++i) {\n    // Search for '.', '!', '?' in p[][]\n\
    \    for(j = 0; j < n; ++j) {\n      // Count boredom\n      if(p[i][j] == '.')\
    \ {\n        boredom++;\n      } else if(p[i][j] == '!') {\n        boredom--;\n\
    \      } else if(p[i][j] == '?') {\n        boredom--;\n      }\n    }\n  }\n\n\
    \  // Return boredom\n  return boredom;", "\tint boredom_count = 0;\n\tstd::vector<\
    \ std::string > boredoms = { \"I\", \"you\", \"he\", \"she\", \"it\", \"we\",\
    \ \"they\" };\n\tstd::vector< std::string >::iterator it;\n\tfor( it = boredoms.begin()\
    \ ; it != boredoms.end() ; it++ ) {\n\t\tif( S.find( *it ) != std::string::npos\
    \ ) {\n\t\t\tboredom_count++;\n\t\t}\n\t}\n\treturn boredom_count;", "    int\
    \ count = 0;\n    std::string token;\n    std::stringstream iss(S);\n    while\
    \ (std::getline(iss, token, ',.?!')) {\n        if (token == \"I\") {\n      \
    \      count++;\n        }\n    }\n    return count;", "  int c = 0;\n  for (int\
    \ i = 0; i < S.size(); ++i) {\n    if (S[i] == '?' || S[i] == '.')\n      c++;\n\
    \    else if (S[i] == '!') {\n      if (c == 0 || c == S.size() - 1)\n       \
    \ c++;\n      else {\n        c--;\n        break;\n      }\n    }\n  }\n  return\
    \ c;", "    // Write your code here\n    int N=0;\n    for (auto &i : S){\n  \
    \      if (i=='I'){\n            N++;\n        }\n    }\n    return N;", "   \
    \ long ans=0;\n    int n = S.length();\n    for (int i=0; i<n; i++)\n    {\n \
    \       if (S[i]=='I' && S[i+1]=='.')\n        {\n            ans++;\n       \
    \ }\n    }\n    return ans;", "  long count = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    // Look at the ith character of the string.\n    if (S[i] == '.')\
    \ \n      // If it's \".\", increment count by 1.\n      count++;\n    else if\
    \ (S[i] == '?') {\n      // If it's \"?\", increment count by 1.\n      count++;\n\
    \    } else if (S[i] == '!') {\n      // If it's \"!\", increment count by 1.\n\
    \      count++;\n    }\n  }\n  return count;", "  // You can use the count_if()\
    \ algorithm from STL\n  auto p = S.begin();\n  long count = 0;\n  while (p!=S.end())\
    \ {\n    if (*p == 'I' && *(p+1) == 'I' && *(p+2) == 'I') {\n      p+=3;\n   \
    \   count += 1;\n    }\n    p++;\n  }\n  return count;", "    std::string str\
    \ = \"I \";\n    long count = 0;\n    for (char& c: str)\n        if (S.find(c)\
    \ != std::string::npos) {\n            ++count;\n        }\n    return count;",
  "  // Complete this function\n  int count = 0;\n  if (S[0] == \"I\") {\n    count++;\n\
    \  }\n  return count;", "    // TODO: Write your code here\n    int counter =\
    \ 0;\n    for(int i = 0; i < S.size(); ++i){\n        if(S[i] == 'I'){\n     \
    \       counter++;\n        }\n    }\n    return counter;", "    long ans = 0;\n\
    \    std::string w;\n    for (std::size_t i = 0; i != S.size(); ++i) {\n     \
    \   if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            w = S[i];\n\
    \            if (w[0] == 'I') {\n                ans += 1;\n            }\n  \
    \      }\n    }\n    return ans;", "    // Write your code here.\n    return 0;",
  "    int flag = 0;\n    std::string word = \" \";\n    int count = 0;\n    for(int\
    \ i = 0; i < S.length(); i++) {\n        if(S[i] == '.') {\n            flag++;\n\
    \            word = S;\n        }\n        else if(S[i] == '?') {\n          \
    \  flag--;\n            word = S;\n        }\n        else if(S[i] == '!') {\n\
    \            word = S;\n        }\n        if(S[i] == '.') {\n            flag++;\n\
    \            word = S;\n        }\n        else if(S[i] == '?') {\n          \
    \  flag--;\n            word = S;\n        }\n        else if(S[i] == '!') {\n\
    \            word = S;\n        }\n        if(flag == 1) {\n            count++;\n\
    \        }\n        if(flag == -1) {\n            count--;\n        }\n    }\n\
    \    return count;", "    long ans = 0, i;\n    for (i = 0; i < S.size(); i++)\n\
    \        if (S[i] == '.')\n            ans += 1;\n        else if (S[i] == '!')\n\
    \            ans -= 1;\n        else if (S[i] == '?')\n            ans -= 1;\n\
    \        else\n            ans += 1;\n    return ans;", "    int boredom = 0;\n\
    \    int i = 0;\n    long flag = 0;\n    while ((S[i - 1] != '.') && (S[i - 1]\
    \ != '?') && (S[i - 1] != '!')) {\n        boredom++;\n    }\n    int j = i -\
    \ 1;\n    while (j >= 0) {\n        if (S[j] != \".\") {\n            flag = 1;\n\
    \            break;\n        }\n        j--;\n    }\n    long len = (boredom ==\
    \ 0) ? 0 : (boredom > 1) ? 1 : boredom;\n    while (j >= 0) {\n        if (S[j]\
    \ == \".\") {\n            flag = 1;\n            break;\n        }\n        j--;\n\
    \    }\n    j = i + 1;\n    while (j < S.size()) {\n        if (S[j] != \".\"\
    ) {\n            flag = 1;\n            break;\n        }\n        j++;\n    }\n\
    \    int l = (len == 0) ? 0 : (len > 1) ? 1 : len;\n    if (flag == 1) {\n   \
    \     boredom++;\n        boredom++;\n    }\n    return boredom;", "    // Write\
    \ your code here.\n    char S1[100];\n    strcpy(S1, S.c_str());\n    int boredom_count\
    \ = 0;\n    char boredom[4];\n    if (strcmp(S1, \"I\") == 0) boredom_count =\
    \ 1;\n    else \n    {\n        for (int i = 0; i < strlen(S1); i++) \n      \
    \  {\n            if (S1[i] == '.')\n            {\n                boredom_count++;\n\
    \                break;\n            }\n        }\n    }\n    return boredom_count;",
  "    long count = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            ++count;\n        }\n \
    \   }\n    return count;", "    long count = 0; \n    assert(S.size() > 0);\n\
    \    for (long i = 0; i < (long)S.size(); ++i) {\n        if (S.at(i) == \".\"\
    \ || S.at(i) == \"?\" || S.at(i) == \"!\") count += 1;\n    }\n    return count;",
  "    assert(S.size() >= 1);\n    long boredoms = 0;\n    int i = 0;\n    while (i\
    \ < S.size()) {\n        if (S[i] == 'I' || S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!')\n            boredoms++;\n        i++;\n    }\n    return boredoms;",
  "    std::map<std::string,long> map;\n    int count=0;\n    for (int i = 0; i< S.length();\
    \ i++)\n    {\n        if (S[i]=='I')\n            count+=1;\n        else if\
    \ (S[i]=='.' || S[i]=='?' || S[i]=='!')\n        {\n            count+=1;\n  \
    \          map[S[i]]=count;\n            count=0;\n        }\n    }\n    return\
    \ map[S[0]];", "  long ans=0;\n  for (int i=0;i<S.size();i++) {\n    // '?' is\
    \ the delimeter of boredom sentences\n    if (S[i]=='?') { ans++; }\n    // '.'\
    \ is the delimeter of a sentence\n    else if (S[i]=='.') { ans++; }\n    // '!'\
    \ is the delimeter of a sentence\n    else if (S[i]=='!') { ans++; }\n    // 'I'\
    \ is the delimeter of boredom sentences\n    else if (S[i]=='I') { ans++; }\n\
    \  }\n  return ans;", "    int boredoms = 0;\n    for(int i = 0 ; i < S.size();\
    \ i++){\n        if(S[i] == '.'){\n            if(S[i+1] == '.'){\n          \
    \      if(S[i+2] == '.'){\n                    if(S[i+3] == '.'){\n          \
    \              boredoms += 1;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return boredoms;", "  // Write your code here.\n\
    \  int i=0;\n  long n=0;\n  for(auto i=S.begin();i!=S.end();i++)\n  {\n    if(i=='i')\n\
    \    {\n        n++;\n    }\n  }\n  return n;", "    long count = 0;\n    int\
    \ i; \n    for(i = 0; i<S.size(); i++) {\n        if(S[i] == '.') count++;\n \
    \       if(S[i] == '?') count++;\n        if(S[i] == '!') count++;\n    }\n  \
    \  return count;", "    long boredom = 0;\n    int n = 0;\n    for (auto c : S)\
    \ {\n        if (c == '.') {\n            ++n;\n            if (n == 1) {\n  \
    \              boredom += 1;\n            }\n        } else if (c == '?' || c\
    \ == '!') {\n            ++n;\n            if (n == 1) {\n                boredom\
    \ += 1;\n            }\n        }\n    }\n    return boredom;", "    long boredoms\
    \ = 0;\n    std::string temp = S;\n    for (char i : temp) {\n        if (i ==\
    \ '.' || i == '?' || i == '!') {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;", // Your code here, "    if (S.empty()) return 0;\n   \
    \ int boredom_count = 0;\n    std::string boredoms = \"I am\";\n    std::size_t\
    \ found = S.find(boredoms, 0);\n    while (found != std::string::npos) {\n   \
    \     boredom_count++;\n        found = S.find(boredoms, found + 1);\n    }\n\
    \    return boredom_count;", "    // Declare an array to hold the number of occurrences\
    \ of each word.\n    std::vector<int> v(S.size());\n    // Loop through the string.\n\
    \    for (auto c : S) {\n        // If the current letter is not a period, question\
    \ mark, or exclamation point,\n        // ignore it and move on to the next letter.\n\
    \        if (c != '.' && c != '?' && c != '!') continue;\n        // If the current\
    \ letter is a period, question mark, or exclamation point,\n        // add 1 to\
    \ the current count.\n        else if (c == '.' || c == '?' || c == '!') v[c]\
    \ += 1;\n        // Otherwise, ignore it and move on to the next letter.\n   \
    \     else continue;\n    }\n    // Return 0 if there are no boredoms.\n    return\
    \ std::count(v.begin(), v.end(), 0);", "\tstd::stack<std::string> st;\n\tstd::string\
    \ word = \"\";\n\tbool flag = false;\n\tsize_t count = 0;\n\tfor (int i = 0; i\
    \ < S.size(); i++) {\n\t\tif (flag) {\n\t\t\tif (S[i] == \".\") {\n\t\t\t\tst.push(word);\n\
    \t\t\t}\n\t\t\tif (S[i] == '?') {\n\t\t\t\tst.push(word);\n\t\t\t}\n\t\t\tif (S[i]\
    \ == '!') {\n\t\t\t\tst.push(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tflag =\
    \ false;\n\t\t} else {\n\t\t\tif (S[i] == \".\") {\n\t\t\t\tflag = true;\n\t\t\
    \t\tcontinue;\n\t\t\t} else {\n\t\t\t\tword += S[i];\n\t\t\t}\n\t\t}\n\t}\n\t\
    while (!st.empty()) {\n\t\tif (st.top() == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t\
    \tst.pop();\n\t}\n\treturn count;", "    long boredom_count = 0;\n    // Check\
    \ for every word in S, if it starts with \"I\".\n    for(auto &c : S){\n     \
    \   if (c == 'I'){\n            boredom_count++;\n        }\n    }\n    return\
    \ boredom_count;", "    std::vector<std::string> arr;\n    std::string boredom_word;\n\
    \    int flag = 0;\n    \n    // We use C++ strings to manipulate individual characters\
    \ and strings\n    // to manipulate words. You will see these used throughout\
    \ the example\n    // below.\n    \n    // Split S into an array of words, using\
    \ spaces as the separator.\n    for (auto &i : S) {\n        if ((i != '.') &&\
    \ (i != ',') && (i != ' ')) {\n            arr.push_back(i);\n        }\n    }\n\
    \    \n    // Use a map to count the number of occurrences of each word.\n   \
    \ std::map<std::string, int> word_count;\n    for (auto &i : arr) {\n        if\
    \ (i == \"I\") {\n            boredom_word = \"I\";\n        } else {\n      \
    \      boredom_word = i + \".\";\n        }\n        word_count[boredom_word]\
    \ += 1;\n    }\n    \n    // We check if the map contains a value that equals\
    \ 1.\n    for (auto &i : word_count) {\n        if (i.second == 1) {\n       \
    \     flag = 1;\n            break;\n        }\n    }\n    \n    return flag;",
  "    int count = 0; // Initialize a variable to store our answer\n    char boredoms[]\
    \ = {'.', '?', '!'}; // Create a variable that holds the boredom words (period,\
    \ question mark and exclamation mark)\n    std::string word; // Create an empty\
    \ string variable\n    int count = 0; // Initialize a variable to store our answer\n\
    \    long word_count = 0; // Initialize a variable that counts our word\n    int\
    \ i = 0; // Initialize a variable that counts our words\n    std::string word_boredom;\
    \ // Initialize an empty string variable\n    for (int i = 0; i < S.size(); i++)\
    \ {\n        word = S[i]; // Assign the current character of S to word\n     \
    \   for (int j = 0; j < sizeof(boredoms) / sizeof(boredoms[0]); j++) {\n     \
    \       word_boredom = boredoms[j]; // Assign the current character of boredoms\
    \ to word_boredom\n            if (word.find(word_boredom) != std::string::npos)\
    \ { // Search for word in boredoms array\n                count++; // If found,\
    \ increment our count by 1\n            }\n        }\n        word_count++; //\
    \ Increment word count\n    }\n    return count; // return the value", "    long\
    \ result = 0;\n    std::string boredom_words[] = {\"I\", \"We\", \"You\", \"He\"\
    , \"She\", \"It\", \"We\", \"You\", \"She\"};\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (boredom_words[i] == S[0]) {\n            ++result;\n   \
    \         if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n                ++result;\n\
    \        }\n    }\n    return result;", "  long counter = 0;\n  S.erase(S.begin(),\
    \ S.begin() + 1);\n  S.erase(S.begin() + S.find(\".\"));\n  S.erase(S.begin()\
    \ + S.find(\"?\"));\n  S.erase(S.begin() + S.find(\"!\"));\n  for (int i = 0;\
    \ i < S.length(); i++) {\n    if (S[i] == 'I' && S[i + 1] == '.' && S[i + 2] !=\
    \ '.') {\n      counter++;\n    }\n  }\n  return counter;", "        long boredoms\
    \ = 0;\n        std::istringstream iss(S);\n        std::string word;\n      \
    \  std::getline(iss, word, '.');\n        while (word == \"I\") {\n          \
    \      std::getline(iss, word, '.');\n                boredoms += 1;\n       \
    \ }\n        return boredoms;", "  long n = 0;\n  for (int i = 0; i <= S.size()\
    \ - 1; i++) {\n    if (S[i] == 'I') {\n      n++;\n    }\n  }\n  return n;", "\t\
    std::bitset<26> bs;\n\tfor(int i=0;i<S.size();i++){\n\t\tif(i==0){\n\t\t\tif((S[i]=='I')\
    \ && (S[i+1]=='I'))\n\t\t\t\tbs.set(1);\n\t\t}\n\t\telse{\n\t\t\tif((S[i]=='?')\
    \ || (S[i]=='!'))\n\t\t\t\tbs.set(1);\n\t\t}\n\t}\n\treturn bs.count();", "  \
    \  long cnt = 0;\n    for(auto i : S){\n        if(i =='i' || i == 'I'){\n   \
    \         cnt++;\n        }\n    }\n    return cnt;", "    \n        long result\
    \ = 0;\n        \n        for(long i = 0; i < S.size(); i++)\n        {\n    \
    \        \n            if(S[i] == 'I')\n            {\n                result++;\n\
    \            }\n        }\n    \n        std::cout << result << std::endl;\n \
    \   \n        return result;", "    vector<string> S1;\n    // To get each word\
    \ in the given sentence.\n    copy(S.begin(), S.end(), back_inserter(S1));\n \
    \   // To get rid of spaces.\n    transform(S1.begin(), S1.end(), S1.begin(),\
    \ ::tolower);\n    long counter = 0;\n    // To find each boredom in the given\
    \ sentence.\n    for (int i = 0; i < S1.size(); i++) {\n        if (S1[i] == \"\
    i\") {\n            counter++;\n        }\n    }\n    return counter;", "  //\
    \ Write your code here\n  long cnt = 0;\n  for(int i=0;i<S.size();i++) {\n   \
    \ if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      cnt++;\n    }\n  }\n\
    \  return cnt;", "    long boredom = 0;\n    for (char &i : S) {\n        i =\
    \ tolower(i); // Ignore case\n        if (i == 'i') {\n            boredom++;\n\
    \        }\n    }\n    return boredom;", "    std::stack<std::string> s;\n   \
    \ std::map<std::string,long> m;\n    for(char c: S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') s.push(c);\n        else if(c == 'I') s.push(\"\");\n\
    \        else if(c == ')') s.pop();\n        else if(c == ']') s.pop();\n    \
    \    else if(c == ']') s.pop();\n        else if(c == ']') s.pop();\n        else\
    \ if(c == ']') s.pop();\n        else if(c == ']') s.pop();\n        else if(c\
    \ == ']') s.pop();\n        else if(c == '.' || c == ']') {\n            long\
    \ boredoms = 0;\n            while(!s.empty()) {\n                if(s.top() ==\
    \ \"\") break;\n                boredoms += m[s.top()];\n                s.pop();\n\
    \            }\n            if(c == '.') return boredoms;\n            else m[s.top()]\
    \ += 1;\n        }\n    }\n    return -1;", "    int count = 0;\n    bool inI\
    \ = false;\n    for(auto word : S){\n        if(word == \"I\")\n            inI\
    \ = true;\n        if(word == \".\" || word == \"?\" || word == \"!\")\n     \
    \       count++;\n        if(inI && word == \"I\")\n            count--;\n   \
    \ }\n    return count;", "  int n = S.size();\n  int ans = 0;\n  for (int i =\
    \ 0; i < n; i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n   \
    \   ans += 1;\n    }\n  }\n  return ans;", "    int count = 0;\n    int lastChar\
    \ = -1;\n    int lastLetter = 0;\n    int foundI = -1;\n    for (auto c : S) {\n\
    \        if (isalpha(c)) {\n            lastLetter = c;\n        } else if (c\
    \ == 'I') {\n            foundI = lastLetter;\n        }\n        // else if last\
    \ letter is I, increment counter\n        else if (!isalpha(c) && isalpha(lastLetter))\
    \ {\n            if (lastChar == '!' || lastChar == '?' || lastChar == '.') {\n\
    \                ++count;\n            }\n            lastChar = lastLetter;\n\
    \        }\n    }\n    if (foundI != -1) {\n        ++count;\n    }\n    return\
    \ count;", "    long n = 0;\n    for(long i = 0; i < S.size(); ++i) {\n      \
    \  if(S[i] == 'i' || S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  ++n;\n        }\n    }\n    return n;", "  long boredoms = 0;\n  for (int i\
    \ = 0; i < S.size(); i++) {\n    if (S[i] == 'I') {\n      boredoms += 1;\n  \
    \  }\n  }\n  return (boredoms);", "    bool flag=false;\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]=='I'&&S[i+1]!='.'){\n            flag=true;\n            break;\n\
    \        }\n    }\n    return flag?1:0;", "    int n = S.length();\n    long ans\
    \ = 0;\n    for(int i=0;i<n;i++) {\n        if(S[i]==\".\" || S[i]==\"!\" || S[i]==\"\
    ?\")\n            ans++;\n    }\n    return ans;", "\tint flag=0;\n\tstd::string\
    \ str1=\"\";\n\tfor(auto s: S){\n\t\tif(s !=\".\"&&s !=\"?\"&&s !=\"!\"){\n\t\t\
    \tstr1=str1+s;\n\t\t}\n\t}\n\tfor(auto s: str1){\n\t\tif(flag==0){\n\t\t\tif((s[0]==\"\
    I\")&&(s[1]==\"I\")&&(s[2]==\"I\"))\n\t\t\t\tflag=1;\n\t\t}\n\t\telse{\n\t\t\t\
    if((s[0]==\"I\")&&(s[1]==\"I\")&&(s[2]==\"I\"))\n\t\t\t\tflag=2;\n\t\t}\n\t}\n\
    \treturn flag;", "    int counter = 0;\n    // your code goes here\n    for (int\
    \ i = 0; i < S.size(); i++)\n    {\n        if (S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!')\n        {\n            counter++;\n        }\n    }\n    return\
    \ (counter);", "    long cnt = 0;\n    char c = S.front();\n    for(int i = 0;\
    \ i < (S.size()-1); i++) {\n        c = S[i];\n        for(int j = 0; j < (S.size()-i-1);\
    \ j++) {\n            c = S[j];\n        }\n        if(S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            cnt++;\n        }\n    }\n    return cnt;",
  "// Your code here\n//long count = 0;\n//assert(S.size() > 0 && S.size() <= 4);\n\
    //std::map<std::string,int> boredom;\n//std::string boredom_sentence = \"I\";\n\
    //std::string boredom_word = boredom_sentence.substr(0,1);\n//std::string boredom_sentence2\
    \ = boredom_sentence.substr(1,4);\n//bool flag = false;\n//for(int i = 0; i <\
    \ S.size(); i++)\n//{\n//    if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n//\
    \    {\n//        if(flag == true)\n//        {\n//            boredom[boredom_sentence]\
    \ += 1;\n//            boredom[boredom_sentence2] = 1;\n//        }\n//      \
    \  flag = true;\n//        boredom_word = S[i];\n//        boredom_sentence =\
    \ boredom_sentence.substr(1,4);\n//        boredom_sentence2 = boredom_sentence2.substr(1,4);\n\
    //    }\n//    else\n//    {\n//        boredom[boredom_sentence] += 1;\n//  \
    \      boredom[boredom_word] = 1;\n//        flag = false;\n//        boredom_word\
    \ = S[i];\n//        boredom_sentence = boredom_sentence.substr(1,4);\n//    \
    \    boredom_sentence2 = boredom_sentence2.substr(1,4);\n//    }\n//}\n//return\
    \ boredom[boredom_sentence];\n//return count;\n//return -1;", "  int count = 0;\n\
    \  int i = 0;\n  int pos = 0;\n  while (i < S.length()) {\n    if (S[i] == '.')\
    \ {\n      pos = i;\n    }\n    if (S[i] == '?' || S[i] == '!') {\n      int j\
    \ = i;\n      i += 1;\n      while (i < S.length() && S[i] != '?' && S[i] != '!')\
    \ {\n        i += 1;\n      }\n      if (j == pos) {\n        count++;\n     \
    \ }\n    }\n    i += 1;\n  }\n  return count;", "    // Write your implementation\
    \ here\n    return S.find(\"I\")!=std::string::npos;", "    std::stack<std::string>\
    \ st;\n    std::stack<std::string>::iterator it;\n    long ans = 0;\n    for (auto\
    \ it = S.cbegin(); it != S.cend(); ++it) {\n        if (it != S.cbegin() && it\
    \ != S.cend()) {\n            if (*it == '.' || *it == '?' || *it == '!') {\n\
    \                st.push(*it);\n            }\n        }\n        else if (*it\
    \ == '.' || *it == '?' || *it == '!') {\n            st.push(*it);\n        }\n\
    \        if (st.empty() || st.top() == \"I\") {\n            ans++;\n        \
    \    st.pop();\n        }\n    }\n    return ans;", "  int boredoms = 0, i = 0;\n\
    \  while(i < S.size()) {\n    // If S[i] is '.', '?' or '!', increment boredoms\n\
    \    if(S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      boredoms++;\n\
    \    }\n    // If S[i] is 'I', check if there is a boredom before this letter\n\
    \    else if(S[i] == \"I\") {\n      if(boredoms == 0) {\n        return boredoms;\n\
    \      } else {\n        boredoms--;\n      }\n    }\n    i++;\n  }\n  return\
    \ 0;", "    // Complete this function\n    long boredoms = 0;\n    for (int i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\n            boredoms +=\
    \ 1;\n    }\n    return boredoms;", "    int l=S.size();\n    long cnt=0;\n  \
    \  for(int i=0;i<l;i++)\n    {\n        if (S[i]=='I')\n        {\n          \
    \  cnt++;\n        }\n    }\n    return cnt;", "    long len = 0;\n    for(long\
    \ i = 0; i < S.size(); i++) {\n        if((S[i] == '.') || (S[i] == '?') || (S[i]\
    \ == '!')) {\n            len++;\n        }\n    }\n    return (len >= 3)?1:0;",
  "    assert(S.size() > 0);\n    long ans = 0;\n    for (auto word : S) {\n     \
    \   if (word == 'I')\n            ans++;\n    }\n    return ans;", "    vector<string>\
    \ words;\n    string line;\n    size_t pos = 0;\n    size_t boredom_count = 0;\n\
    \    while (pos < S.size()) {\n        pos = S.find_first_of(\".!?\", pos);\n\
    \        string word = S.substr(pos, S.size() - pos);\n        words.push_back(word);\n\
    \        pos += word.length();\n    }\n    sort(words.begin(), words.end());\n\
    \    long num_boredoms = 0;\n    for (size_t i = 0; i < words.size(); ++i) {\n\
    \        if (words[i][0] == 'I') {\n            num_boredoms += 1;\n        }\n\
    \    }\n    return num_boredoms;", "    long boredom_count = 0;\n    for (auto\
    \ &i : S) {\n        if (i == 'I') {\n            boredom_count++;\n        }\n\
    \    }\n    return boredom_count;", "    long boredoms=0;\n    std::string boredom_word=\"\
    I\";\n    std::string delimiter=\".\";\n    std::string delimiter2=\"?\";\n  \
    \  std::string delimiter3=\"!\";\n    std::string delimiter4=\"?!\";\n    for(int\
    \ i=0;i<S.size();++i)\n    {\n        if(S[i]==delimiter)\n        {\n       \
    \     int j=i;\n            while(S[j]!=delimiter)\n            {\n          \
    \      if(S[j]==delimiter2)\n                {\n                    j++;\n   \
    \                 while(S[j]!=delimiter)\n                    {\n            \
    \            if(S[j]==delimiter3)\n                        {\n               \
    \             j++;\n                            while(S[j]!=delimiter)\n     \
    \                       {\n                                if(S[j]==delimiter4)\n\
    \                                {\n                                    j++;\n\
    \                                    while(S[j]!=delimiter)\n                \
    \                    {\n                                        boredom_word+=S[j];\n\
    \                                        j++;\n                              \
    \      }\n                                }\n                                else\n\
    \                                {\n                                    boredom_word+=S[j];\n\
    \                                    j++;\n                                }\n\
    \                            }\n                        }\n                  \
    \      else\n                        {\n                            boredom_word+=S[j];\n\
    \                            j++;\n                        }\n               \
    \     }\n                }\n                else\n                {\n        \
    \            boredom_word+=S[j];\n                    j++;\n                }\n\
    \            }\n            boredom_word+=delimiter;\n        }\n        else\n\
    \        {\n            boredom_word+=S[i];\n        }\n    }\n    for(int i=0;i<S.size();++i)\n\
    \    {\n        if(boredom_word[i]!=\"I\")\n        {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    // Declare a variable that will\
    \ hold the number of boredoms in the string\n    long boredoms = 0;\n    // Initialize\
    \ a bool that indicates if the first letter of the string\n    // is \"I\", and\
    \ set it to false\n    bool firstLetter = true;\n    // Iterate through the string\
    \ and add 1 to boredoms every time the string starts with \"I\"\n    for (char\
    \ c: S) {\n        if (c != '.' && c != '?' && c != '!' && firstLetter)\n    \
    \        boredoms++;\n        firstLetter = false;\n    }\n    // Return the boredoms\
    \ variable\n    return boredoms;", "    int c=0, b=0;\n    for(int i=0; i<S.size();\
    \ i++){\n        if(S[i] == '.'){\n            c++;\n            continue;\n \
    \       }\n        else if(S[i] == '?' || S[i] == '!'){\n            c++;\n  \
    \          continue;\n        }\n        else if(S[i] == \" \" && c>0){\n    \
    \        b++;\n            c=0;\n            continue;\n        }\n        else\
    \ if(S[i] == \" \" && (c==0||b==0)){\n            continue;\n        }\n     \
    \   else if(S[i] == 'I' && (c==0 || b==0)){\n            continue;\n        }\n\
    \        else if(S[i] == 'I' && c>0){\n            b++;\n            c=0;\n  \
    \          continue;\n        }\n        else if(S[i] == 'I' && c==0 && b>0){\n\
    \            c++;\n            b=0;\n            continue;\n        }\n      \
    \  else if(S[i] == 'I' && c>0 && b>0){\n            b++;\n            c=0;\n \
    \           continue;\n        }\n        else if(S[i] == 'I' && c==0 && b>0){\n\
    \            c++;\n            b=0;\n            continue;\n        }\n      \
    \  else if(S[i] == 'I' && c>0 && b==0 && c>0){\n            continue;\n      \
    \  }\n        else if(S[i] == 'I' && c>0 && b==0){\n            c++;\n       \
    \     b=0;\n            continue;\n        }\n        else if(S[i] == 'I' && c>0\
    \ && b>0){\n            b++;\n            c=0;\n            continue;\n      \
    \  }\n        else if(S[i] == 'I' && c==0){\n            b++;\n            c=0;\n\
    \            continue;\n        }\n        else if(S[i] == 'I'){\n           \
    \ c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n    \
    \        c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n",
  "    std::vector<std::string> split_S = split(S);\n    std::map<std::string, int>\
    \ boredomCountMap;\n    std::string boredom;\n    for (std::string &str: split_S)\
    \ {\n        if (str == \"I\"){\n            boredom = str;\n        } else if\
    \ (str.find(\"I\") != std::string::npos){\n            boredomCountMap[boredom]\
    \ += 1;\n            boredom = \"\";\n        }\n    }\n    return boredomCountMap.at(boredom);",
  "    long boredoms = 0;\n    for (int i = 0; i < S.size(); i++){\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n            boredoms++;\n    }\n    return\
    \ boredoms;", "  int count = 0;\n  int flag = 0;\n  for (int i = 0; i <= S.size()\
    \ - 1; i++) {\n    if (S[i] == '.') {\n      if (S[i - 1] == '.') {\n        if\
    \ (S[i + 1] == '?') {\n          count++;\n        }\n        if (S[i + 1] ==\
    \ '!') {\n          count++;\n        }\n      }\n      if (S[i - 1] == '?') {\n\
    \        flag = 1;\n      }\n      if (S[i - 1] == '!') {\n        flag = 0;\n\
    \      }\n    }\n  }\n  return count;", "  // Declare and initialize the result\
    \ variable.\n  long boredom = 0;\n  // Iterate through all the words in the string.\n\
    \  for (int i = 0; i < S.size(); i++) {\n    // If the word starts with \"I\"\
    , increment the boredom variable.\n    if (S[i] == 'I') {\n      boredom++;\n\
    \      // If the word starts with \"!\", decrement the boredom variable.\n   \
    \ } else if (S[i] == '!') {\n      boredom--;\n      // If the word starts with\
    \ \".\", increment the boredom variable.\n    } else if (S[i] == '.') {\n    \
    \  boredom++;\n    }\n  }\n  return boredom;", "  int cnt = 0;\n  for (auto s\
    \ : S) \n      if (s == \"I\")\n          cnt++;\n  return cnt;", "  std::map<std::string,bool>\
    \ m;\n  // Loop through all the words\n  for(int i=0;i<S.size();i++) {\n    //\
    \ If current word is a boredom word\n    if(S[i]=='I') {\n      // If current\
    \ word is present for the first time\n      if(!m[S[i]]) {\n        // Increment\
    \ the count for the first time\n        m[S[i]] = true;\n      }\n    }\n  }\n\
    \  // Return count\n  return m.size();", "    // Complete the function below.\n\
    \    long count = 0;\n    std::string word;\n    std::string sentence_1;\n   \
    \ std::string sentence_2;\n    for (int i = 0; i < S.length(); i++) {\n      \
    \  sentence_1 = S;\n        sentence_2 = sentence_1.substr(0, i);\n        word\
    \ = sentence_2.substr(0, sentence_2.find(\".\"));\n        if (word == \"I\" &&\
    \ sentence_2.find(\"!\") != std::string::npos) {\n            count++;\n     \
    \   } else if (word != \"I\" && sentence_2.find(\"?\") != std::string::npos) {\n\
    \            count++;\n        }\n    }\n    return count;", "    vector<char>\
    \ boredom;\n    boredom.push_back('!');\n    boredom.push_back('.');\n    boredom.push_back('?');\n\
    \    int boredom_num = 0;\n    int start = 0;\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (boredom.find(S[i]) == boredom.end()) continue;\n       \
    \ start = i;\n        boredom_num++;\n        i = boredom.find(S[i], start);\n\
    \        boredom_num++;\n        i = boredom.find(S[i], start);\n        boredom_num++;\n\
    \        i = boredom.find(S[i], start);\n        boredom_num++;\n    }\n    return\
    \ boredom_num;", "\tint i = 0, j = 0, k = 0, m = S.size(), n;\n\tlong count =\
    \ 0;\n\twhile (i < m) {\n\t\tn = S.find(\" \", i);\n\t\tif (n == -1) n = m;\n\t\
    \tif (S[i] == '.') count++;\n\t\tif (S[i] == '?' || S[i] == '!') {\n\t\t\tcount--;\n\
    \t\t\tif (S[i] == '!') k++;\n\t\t}\n\t\tif (S[i] == 'I' && k < n) count++;\n\t\
    \ti = n;\n\t}\n\treturn count;", "    std::string word;\n    int boredom_cnt =\
    \ 0;\n    for (int i = 0; i != S.length(); i++) {\n        if (S[i] == '.') {\n\
    \            word = S.substr(0, i);\n            if (word == \"I\")\n        \
    \        boredom_cnt++;\n        }\n    }\n    return (boredom_cnt);", "    //\
    \ Write your code here\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  count++;\n        }\n    }\n    return count;", "    int flag = 0;\n    std::string\
    \ temp = \"\";\n    S.find(temp);\n    temp = \".\";\n    for (int i = 0; i <\
    \ S.size(); i++) {\n        if (S[i] == temp) flag++;\n        else temp = \"\
    .\";\n    }\n    return flag;", "    std::string w;\n    long ans=0;\n    for(auto\
    \ x: S){\n        if(x=='I'){\n            ans=1;\n        }\n    }\n    return\
    \ ans;", "    int count = 0;\n    for (int i = 0; i < S.size(); i++) {\n     \
    \   if (S[i] == '.') {\n            if (S[i + 1] == '.') {\n                if\
    \ (S[i + 2] == '?') {\n                    if (S[i + 3] == '!')\n            \
    \            count += 1;\n                }\n            }\n        }\n    }\n\
    \    return (count);", "    // Write your code here.\n    return boredom(S);",
  "    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == '.') {\n            if (S[i + 1] == '.') {\n                count++;\n  \
    \          } else {\n                count--;\n            }\n        } else if\
    \ (S[i] == '?') {\n            count++;\n        } else if (S[i] == '!') {\n \
    \           count--;\n        }\n    }\n    return count;", "    assert(S.size()\
    \ > 0);\n    long boredoms = 0;\n    for (auto itr = S.begin(); itr != S.end();\
    \ ++itr) {\n        bool is_bored = true;\n        if (*itr == '.') {\n      \
    \      is_bored = false;\n        } else if (*itr == '?') {\n            is_bored\
    \ = false;\n        } else if (*itr == '!') {\n            is_bored = false;\n\
    \        }\n        if (is_bored) {\n            ++boredoms;\n        }\n    }\n\
    \    return boredoms;", "    bool found = false;\n    int count = 0; //to count\
    \ the number of boredoms\n    for (int i = 0; i < S.length(); i++) {\n       \
    \ if (S[i] == '.') {\n            if (S[i + 1] == '.') {\n                if (S[i\
    \ + 2] == '.') {\n                    if (S[i + 3] == 'I') {\n               \
    \         found = true;\n                        count++;\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return count;",
  "    std::string boredom = \"\";\n    std::vector<std::string> V;\n    for (std::string\
    \ word; std::getline(std::cin, word); ) {\n        std::string w_lower = word;\n\
    \        w_lower.tolower();\n        V.push_back(w_lower);\n    }\n    // Return\
    \ 0 if the given string contains no boredoms.\n    if (V.size() == 0) return 0;\n\
    \    // Return 1 if the given string contains only one boredom (the\n    // boredom\
    \ is a single \"I\").\n    if (V.size() == 1) return 1;\n    bool flag = false;\n\
    \    for (std::string word; std::getline(std::cin, word); ) {\n        std::string\
    \ w_lower = word;\n        w_lower.tolower();\n        if (std::find(V.begin(),\
    \ V.end(), w_lower) != V.end())\n            flag = true;\n    }\n    if (flag\
    \ == false) return 0;\n    else return 1;", "    // Initialize your data structure\
    \ here.\n    long bored = 0;\n    // Do not print or modify any global variables\
    \ here\n    if (S != \"\" && S[0] != '.' && S[1] != '?' && S[2] != '!')\n    \
    \    for (auto &c : S)\n            if (c == 'I')\n                bored++;\n\
    \    return bored;", "    long ans = 0;\n    for (int i = 0; i < S.size(); i++)\n\
    \        if (S[i] == '.' || S[i] == '!' || S[i] == '?')\n            ans++;\n\
    \    return ans;", "  long long answer = 0;\n  for (int i = 0; i < S.size(); i++)\
    \ {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      answer++;\n \
    \   }\n  }\n  \n  return answer;", "    int boredoms = 0;\n    for (auto c : S)\
    \ {\n        if (c == 'I')\n            ++boredoms;\n    }\n    return boredoms;",
  "    int boredom_count = 0, word_count = 0;\n    std::string boredom_flag = \"I\"\
    ;\n    std::string sentence;\n    for (size_t i = 1; i < S.length(); i++) {\n\
    \        sentence = S;\n        boredom_count = word_count;\n        // We will\
    \ break this sentence into words using space as delimiter\n        std::string\
    \ words[3] = {};\n        std::string delimiter = \" \";\n        size_t pos =\
    \ 0;\n        while (pos < sentence.length()) {\n            pos = 0;\n      \
    \      std::string sub = sentence.substr(0, pos + delimiter.length());\n     \
    \       pos = sub.find_first_of(delimiter);\n            if (pos != std::string::npos)\
    \ {\n                std::string word = sub;\n                words[word_count]\
    \ = word;\n                word_count++;\n                sentence = sentence.substr(pos\
    \ + delimiter.length());\n            }\n        }\n        // Checking the boredom\n\
    \        if (boredom_flag.compare(words[0])) {\n            boredom_count++;\n\
    \        }\n        word_count = boredom_count;\n    }\n    return boredom_count;",
  "    // Add your code here\n    long ans = 0;\n    for (auto &i : S) {\n       \
    \ if (i == \"I\") {\n            ans += 1;\n        }\n    }\n    return ans;",
  "  // Complete this function\n  std::map<std::string,long> temp;\n  for (size_t\
    \ i = 0;i < S.length();++i)\n  {\n      \n    \n    if (temp[S[i]] == 0)\n   \
    \ {\n        temp[S[i]] = 1;\n    }\n    else\n    {\n        temp[S[i]]++;\n\
    \    }\n  }\n  return temp[\"I\"];", "  int n = S.length();\n  long boredom =\
    \ 0;\n  for (int i = 0; i < n; i++) {\n    char c = S[i];\n    if (c == '.' ||\
    \ c == '!' || c == '?') {\n      boredom++;\n    }\n  }\n  return boredom;", " \
    \   // Write your code here\n    long count = 0, flag = false, len = 0;\n    len\
    \ = S.length();\n    for (int i = 0; i < len; i++){\n        if (S[i] == '.'){\n\
    \            flag = true;\n        }\n        else if (S[i] == '?' || S[i] ==\
    \ '!'){\n            flag = false;\n        }\n        if (flag){\n          \
    \  count++;\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            count = count + 1;\n  \
    \      }\n    }\n    return count;", "    long boredom = 0;\n    bool flag = false;\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        // Check if the word starts\
    \ with 'I'\n        if (S[i] == \"I\" && flag == false) {\n            boredom++;\n\
    \            flag = true;\n        }\n        // Check if it ends with '.', '?'\
    \ or '!'\n        else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n\
    \            flag = false;\n        }\n    }\n    return boredom;", "    long\
    \ count = 0;\n    assert(S.size() >= 1);\n    for (int i = 0; i < S.size(); ++i)\
    \ {\n        if (S[i] == '.') {\n            if (i + 1 < S.size()) {\n       \
    \         if (S[i + 1] == '!' || S[i + 1] == '?') {\n                    i +=\
    \ 2;\n                    count++;\n                }\n            }\n       \
    \ }\n        if (S[i] == '?') {\n            if (i + 1 < S.size()) {\n       \
    \         if (S[i + 1] == '!' || S[i + 1] == '?') {\n                    i +=\
    \ 2;\n                    count++;\n                }\n            }\n       \
    \ }\n        if (S[i] == '!') {\n            if (i + 1 < S.size()) {\n       \
    \         if (S[i + 1] == '!' || S[i + 1] == '?') {\n                    i +=\
    \ 2;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;", "    int i=0;\n    long count=0;\n    for(int\
    \ i=0;i<S.size();i++)\n    {\n        if(S[i]=='I')\n        {\n            count++;\n\
    \        }\n    }\n    return count;", "  long boredoms = 0;\n  long boredom_idx\
    \ = 0;\n  for (int i = 0; i < S.length(); i++) {\n    if (S.at(i) == 'I') {\n\
    \      boredom_idx = i;\n      boredoms++;\n    }\n  }\n  return boredoms;", " \
    \   // Write your code here\n    std::map<std::string, long> count;\n    size_t\
    \ found = S.find('I', 0);\n    while (found != std::string::npos) {\n        if\
    \ (found > 0 && S[found - 1] != '.')\n            count[\".\"] ++;\n        if\
    \ (found > 0 && S[found - 1] != '?')\n            count[\"?\"] ++;\n        if\
    \ (found > 0 && S[found - 1] != '!')\n            count[\"!\"] ++;\n        found\
    \ = S.find('I', found + 1);\n    }\n    std::map<std::string, long>::iterator\
    \ it = count.begin();\n    for( ; it != count.end(); ++it) {\n        if (it->second\
    \ == 0) return 0;\n    }\n    return 1;", "    long n = 0;\n    for (char c :\
    \ S) {\n        if (c == '.') {\n            n++;\n        } else if (c == '?')\
    \ {\n            n++;\n        } else if (c == '!') {\n            n++;\n    \
    \    }\n    }\n    return n;", "    if (S[0] == 'I') {\n        return 0;\n  \
    \  }\n    int cnt = 0;\n    for (size_t i = 0; i < S.length(); i++) {\n      \
    \  char c = S[i];\n        if (c == '.') {\n            break;\n        }\n  \
    \      if (c == '?') {\n            break;\n        }\n        if (c == '!') {\n\
    \            break;\n        }\n    }\n    return cnt;", "   long count = 0;\n\
    \   for(size_t i = 0; i < S.size(); i++) {\n      if(S[i] == '.') {\n        \
    \ if(S[i-1] == '.') {\n            count++;\n         }\n      } else if(S[i]\
    \ == '?') {\n         if(S[i-1] == '.') {\n            count++;\n         }\n\
    \      } else if(S[i] == '!') {\n         if(S[i-1] == '.') {\n            count++;\n\
    \         }\n      } else {\n         if(S[i] == 'I' && S[i-1] == 'I') {\n   \
    \         count++;\n         }\n      }\n   }\n   return count;", "    int bored\
    \ = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            bored++;\n        }\n    }\n    return\
    \ bored;", "    long bored = 0;\n    for(int i = 0; i < S.size(); ++i) {\n   \
    \     if(S[i] == 'I' && S[i+1] == '.' && S[i+2] == '!') {\n            bored +=\
    \ 1;\n        }\n    }\n    return bored;", "  // Your code here\n  long n = 0,\
    \ i, j, k, l, j1, j2;\n  // k = 0, l = S.length() - 1;\n  j = i = 0;\n  while\
    \ (i < S.length()) {\n    // j = 0, i = 1\n    if (S[i] == '.') {\n      if (S[j]\
    \ != '?' && S[j] != '!') {\n        // j = 1\n        if (S[j] == '.') {\n   \
    \       j++;\n        }\n        j++;\n      }\n    }\n    j++;\n    i--;\n  }\n\
    \  // return n;\n  return j - i;", "    int count = 0;\n    for (int i=0;i<S.size();i++)\
    \ {\n        if (S[i] == 'i')\n            count++;\n    }\n    return count;",
  "    long cnt = 0;\n    char c = S[0];\n    for (int i = 1; i < S.size(); i++) {\n\
    \        c = S[i];\n        if (c == '.' || c == '?' || c == '!') {\n        \
    \    cnt++;\n        } else {\n            cnt = 0;\n        }\n    }\n    return\
    \ cnt;", "    int bored = 0, i = 0;\n    while(i < S.size()) {\n        if(S[i]\
    \ == '.') {\n            bored += 1;\n        }\n        if(S[i] == '?' || S[i]\
    \ == '!') {\n            bored += 1;\n        }\n        i += 1;\n    }\n    return\
    \ bored;", "    // Write your code here\n    return S.find(\"I\") == 0;", "  \
    \  std::map<char,long> m;\n    long ans = 0;\n    \n    std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n    \n    for (int i = 0; i != S.size(); ++i)\
    \ {\n        if (S[i] == 'i') {\n            ans += 1;\n        }\n        m[S[i]]\
    \ += 1;\n    }\n    \n    return ans;", "  // Solution goes here\n  return 0;",
  "    // Complete this function\n    long num_boredoms = 0;\n    char boredoms[100]\
    \ = {'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I'};\n    for (int i = 0; i < S.length(); i++) {\n        char c = S[i];\n\
    \        if (c == \".\" || c == \"?\" || c == \"!\") {\n            if (boredoms[num_boredoms]\
    \ == 'I') {\n                boredoms[num_boredoms] = '\\0';\n               \
    \ num_boredoms++;\n            }\n        }\n    }\n    if (num_boredoms == 0)\
    \ {\n        long num = 0;\n        for (int i = 0; i < S.length(); i++) {\n \
    \           char c = S[i];\n            if (c == '.' || c == '?' || c == '!')\
    \ {\n                if (num == 0)\n                    num++;\n            }\n\
    \        }\n        return num;\n    }\n    return num_boredoms;", "    long count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == \"I\"){\n \
    \           count++;\n        }\n    }\n    return count;", "    long ans = 0;\n\
    \    for (char &c: S) {\n        if (c != '.' && c != '?' && c != '!') {\n   \
    \         assert(c == 'I');\n            ++ans;\n        }\n    }\n    return\
    \ ans;", "    long cnt=0;\n    for (int i=0; i<S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            cnt++;\n        }\n    }\n    return cnt;", "  int i\
    \ = 0, j = 0;\n  int ans = -1;\n  for (int i = 0; i < S.length(); i++) {\n   \
    \ if (S[i] == '.') {\n      j++;\n    } else if (S[i] == '?' || S[i] == '!') {\n\
    \      j--;\n    }\n  }\n  if (S[i] == '.') {\n    ans = j;\n  }\n  assert(ans\
    \ >= 0);\n  return ans;", "    std::vector<std::pair<int,int>> res;\n    std::string\
    \ boredom = \"I\";\n    int boredom_cnt=0;\n    for (int i = 0; i <S.length();\
    \ i++) {\n        if(S[i] == boredom){\n            boredom_cnt++;\n        }\n\
    \    }\n    if(boredom_cnt > 0){\n        res.push_back({boredom_cnt,1});\n  \
    \  }\n    return res.size();", "    // TODO: Write your code here\n    return\
    \ 0;", "    long bored = 0;\n    long word_count = 0;\n    for(auto i : S){\n\
    \        if(i == 'I')\n            bored++;\n        if(i == '.')\n          \
    \  word_count++;\n        if(i == '!' || i == '?' || i == ' ')\n            word_count--;\n\
    \    }\n    return bored+word_count;", "    long count = 0;\n    for (char &c:\
    \ S) {\n        // if char is not a '.', '?' or '!', continue loop\n        if\
    \ ((c != '.') && (c != '?') && (c != '!')) {\n            continue;\n        }\n\
    \        // if char is a '.', get next char, check it against all chars from\n\
    \        // 'I'\n        if (c == '.') {\n            c = S.at(++i);\n       \
    \     for (char &c1: S) {\n                if ((c != 'I') && (c != '.') && (c\
    \ != '?') && (c != '!')) {\n                    continue;\n                }\n\
    \                c = c1;\n                count++;\n            }\n        }\n\
    \    }\n    return count;", "  // Use a map to count the number of times each\
    \ unique letter appears.\n  // Initialize map to contain 256 entries (each entry\
    \ initialized to 0).\n  std::map<char, int> count_map;\n  for (int i = 0; i <\
    \ S.size(); i++) {\n    // Check for a match for each of the three special cases.\n\
    \    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      if (S[i] != S[i-1])\
    \ {\n        // A match was found. Increment the count for that letter.\n    \
    \    count_map[S[i] - 'a']++;\n      }\n    } else {\n      // A non-special character\
    \ was found, so increment the count for that\n      // letter.\n      count_map[S[i]-'a']++;\n\
    \    }\n  }\n\n  // Return the number of boredoms.\n  for (auto c : count_map)\n\
    \    if (count_map[c] > 1)\n      return (long) count_map[c] - 1;\n\n  // Otherwise,\
    \ the sentence is no boredom.\n  return 0;", "  int N=0;\n  for (int i=0;i<S.size();i++)\
    \ {\n    if ((S[i]=='I') || (S[i]=='i'))\n      N++;\n  }\n  return N;", "  long\
    \ count = 0;\n  for (int i = 0; i < (S.size()) - 1; i++) {\n    if (S[i] == 'I'\
    \ && S[i+1] == '.') {\n      count++;\n    } else if (S[i] == '.') {\n      if\
    \ (S[i+1] == '!' || S[i+1] == '?') {\n        count++;\n      } else {\n     \
    \   count--;\n      }\n    } else if (S[i] == '!' || S[i] == '?') {\n      count--;\n\
    \    }\n  }\n  return count;", "    long ans = 0;\n    std::string P = \"I\";\n\
    \    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == P[0])\
    \ ans += 1;\n        P.push_back(*it);\n    }\n    return ans;", "    long flag=0;\n\
    \    for(auto i=0;i<S.size();++i) {\n        if(i==0 || S[i]!=' ' || S[i-1]!='\
    \ ' || S[i-1]!=S[i]){\n            flag+=1;\n        }\n    }\n    return flag;",
  "    long ans = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (S[i]\
    \ == '.') {\n            if (i + 1 < S.length && S[i + 1] == '?' || S[i + 1] ==\
    \ '!')\n                ans++;\n        }\n    }\n    return ans;", "   long c=0;\n\
    \   std::size_t found = S.find(\"I\");\n   while(found!=std::string::npos){\n\
    \      c=c+1;\n      found=S.find(\"I\",found+1);\n   }\n   return c;", "    int\
    \ count = 0;\n    int i = 0;\n    while ((i < S.size())) {\n        if (S.at(i)\
    \ == \"i\") {\n            i++;\n            i++;\n            count++;\n    \
    \    }\n        else if (S.at(i) == \".\" || S.at(i) == \"?\" || S.at(i) == \"\
    !\") {\n            i++;\n        }\n        else {\n            i++;\n      \
    \  }\n    }\n    return (count);", '    // Write your solution here.', "  int\
    \ n=0, boredom=0;\n  for (int i=0; i<S.length(); i++) {\n    if (S[i]=='I') {\n\
    \      boredom++;\n    }\n  }\n  return boredom;", "    int a = 0;\n    for (int\
    \ i = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\n            a++;\n  \
    \      if (S[i] == '.' || S[i] == '?' || S[i] == '!') // '.', '?' or '!' are separators\n\
    \            i++;\n    }\n    return a;", "    // TODO: Write your code here\n\
    \    return 0;", "    int count=0;\n    for(int i=0;i<S.size();i++) {\n      \
    \  if(S[i]=='I')\n            count++;\n    }\n    return count;", "    long cnt\
    \ = 0;\n    std::string boredom = S;\n    int start = 0;\n    int end = boredom.find(\"\
    . ? !\");\n    while (start != end) {\n        if (boredom[start] == 'I') {\n\
    \            ++cnt;\n        }\n        ++start;\n    }\n    return cnt;", " \
    \ assert(S.size() > 0);\n  long ans = 0;\n  for (int i = 0; i < S.size() - 1;\
    \ i++) {\n    char temp = S[i];\n    bool isI = false;\n    switch (temp) {\n\
    \      case 'I':\n        isI = true;\n        break;\n      case '.':\n     \
    \ case '?':\n      case '!':\n        break;\n      default:\n        continue;\n\
    \    }\n    if (!isI) {\n      ans += 1;\n    }\n  }\n  return ans;", "    long\
    \ n = 0;\n    std::string word;\n    S.erase(std::remove(S.begin(), S.end(), '.'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '?'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '!'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '.'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '!'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '?'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '.'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '!'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '!'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '?'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '.'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '!'),\
    \ S.end());\n    for (auto it = S.begin(); it != S.end(); it++) {\n        word\
    \ = *it;\n        if (word == \"I\") {\n            n++;\n        }\n    }\n \
    \   return n;", "    long count = 0;\n    std::string temp;\n    for(int i=0;\
    \ i<S.length(); i++){\n        if((S[i] == '.') || (S[i] == '?') || (S[i] == '!')){\n\
    \            temp.clear();\n        }\n        temp += S[i];\n        if((S[i]\
    \ == 'I')){\n            count++;\n        }\n    }\n    return count;", "   \
    \ std::string word;\n    long boredom=0;\n    for(int i=0;i<S.length();++i){\n\
    \        if(i==0){\n            if((S[i]=='.')||(S[i]=='.')||(S[i]=='?')){\n \
    \               boredom++;\n            }\n        }else if((S[i]=='.')||(S[i]=='!')||(S[i]=='?')){\n\
    \            boredom++;\n        }\n        else if((S[i]=='.')||(S[i]=='!')||(S[i]=='.')||(S[i]=='?')){\n\
    \            boredom++;\n        }\n    }\n    return boredom;", "  long ans =\
    \ 0;\n  assert(S.size() != 0);\n  for(long i = 0; i < S.size(); ++i) {\n    if(S[i]\
    \ == '.') ans += 1;\n    if(S[i] == '?') ans += 1;\n    if(S[i] == '!') ans +=\
    \ 1;\n    if(S[i] == 'I') ans += 1;\n  }\n  return ans;", "    int boredoms =\
    \ 0;\n    int i = 0;\n    int j = 0;\n    int flag = 0;\n    long count = 0;\n\
    \    std::string token;\n    \n    // Step 1: tokenize sentence\n    token = S;\n\
    \    while(i < S.length()) {\n        token = token.substr(i + 1);\n        if(i\
    \ == 0) {\n            break;\n        }\n        if(token == \"?\") { \n    \
    \        if((j + 1) == S.length()) {\n                flag = 1;\n            }\
    \ else {\n                flag = 0;\n            }\n            break;\n     \
    \   }\n        if(token == \"!\") { \n            if((j + 1) == S.length()) {\n\
    \                flag = 0;\n            } else {\n                flag = 1;\n\
    \            }\n            break;\n        }\n        if(token == \".\") {\n\
    \            if((j + 1) == S.length()) {\n                flag = 0;\n        \
    \    } else {\n                flag = 1;\n            }\n            break;\n\
    \        }\n        j = j + 1;\n        i = i + 1;\n    }\n    \n    // Step 2:\
    \ count number of boredoms\n    if(flag == 0) {\n        while(i < S.length())\
    \ {\n            if(S[i] == 'I') {\n                boredoms++;\n            }\n\
    \            i = i + 1;\n        }\n        count = (boredoms);\n    }\n    if(flag\
    \ == 1) {\n        while(j < S.length()) {\n            if(S[j] == 'I') {\n  \
    \              boredoms++;\n            }\n            j = j + 1;\n        }\n\
    \        count = (boredoms);\n    }\n    return count;", "    long boredom = 0;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        if(S[i] != 'I' && S[i] != '.'\
    \ && S[i] != '?' && S[i] != '!') {\n            boredom = 0;\n            break;\n\
    \        }\n        if(S[i] == 'I'){\n            boredom += 1;\n        }\n \
    \   }\n    return boredom;", "    if(S.at(0)=='I')\n        return 0;\n    int\
    \ cnt=0;\n    for(int i=1;i<S.size();i++){\n        if(S[i]=='.' || S[i]=='?'\
    \ || S[i]=='!')\n            cnt++;\n        else if((S[i]=='I') && (S[i-1]=='I'))\n\
    \            cnt++;\n    }\n    return cnt;", "    long boredoms = 0;\n    for(int\
    \ i=0; i<S.size(); i++) {\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;"]
stop_tokens:
- "\n}"
