language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string current = string;\n    for (size_t i = 0; i < current.size();\
    \ ++i) {\n        bool found = false;\n        for (size_t j = 0; j < prefixes.size();\
    \ ++j) {\n            if (prefixes[j].size() >= current.size() &&\n          \
    \      prefixes[j][prefixes[j].size()] == current[i]) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            prefixes.push_back(std::string(current));\n        }\n      \
    \  current = current[i];\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6f9bzu0n: /tmp/tmp6f9bzu0n.cpp:28: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  auto it = string.begin();\n  auto end = string.end();\n  while\
    \ (it != end) {\n    auto next_it = it;\n    ++next_it;\n    while (next_it !=\
    \ end && *next_it == *it) {\n      ++next_it;\n    }\n    prefixes.push_back(std::string(it,\
    \ next_it));\n    it = next_it;\n  }\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpj8gpduif: /tmp/tmpj8gpduif.cpp:24: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Get first character in the input string\n    char first = string.at(0);\n  \
    \  // Create a vector to store all prefixes\n    std::vector<std::string> prefixes;\n\
    \    // Loop through all characters in the input string\n    for (int i = 1; i\
    \ < string.length(); i++) {\n        // If current character is not same as character\
    \ before current character\n        // then it is a prefix and add it to the prefixes\
    \ vector\n        if (string[i] != first) prefixes.push_back(string.substr(0,\
    \ i));\n        // Update first character\n        first = string[i];\n    }\n\
    \    // Return all prefixes vector\n    return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 0) >= this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ output;\n    size_t s = 0, n = string.length();\n    while (n > 0) {\n     \
    \   // Find prefix start index\n        while (n-- && !isalpha(string[n])) ++s;\n\
    \        // Find prefix end index\n        while (n > 0 && !isalpha(string[n -\
    \ 1])) --n;\n        std::string prefix = string.substr(s, n - s);\n        output.push_back(prefix);\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpvvf64i20: /tmp/tmpvvf64i20.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefix;\n    for (size_t i = 0; i < string.length(); ++i) {\n        for (size_t\
    \ j = i; j < string.length(); ++j) {\n            if (i == j) continue;\n    \
    \        prefix.push_back(string[j]);\n        }\n    }\n    return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphke48rax.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmphke48rax.cpp:11:39: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |             prefix.push_back(string[j]);\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphke48rax.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::v"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.length() == 0)\n    return prefixes;\n  prefixes.push_back(string[0]);\n\
    \  if (string.length() == 1)\n    return prefixes;\n  std::string prefix;\n  auto\
    \ last = string.substr(1);\n  for (auto it = last.begin(); it != last.end(); it++)\
    \ {\n    prefix = prefix + string[0];\n    prefixes.push_back(prefix);\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1lo7cz9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpv1lo7cz9.cpp:10:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |   prefixes.push_back(string[0]);\n      |\
    \                               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1lo7cz9.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {ak"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    bool empty = true;\n    for (auto c: string) {\n        empty\
    \ = false;\n        for (auto p: all_prefixes(c)) {\n            prefixes.push_back(p);\n\
    \        }\n    }\n    if (empty) {\n        prefixes.push_back(std::string());\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih626y7r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpih626y7r.cpp:11:35: error: could\
    \ not convert \u2018c\u2019 from \u2018char\u2019 to \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}\n   11 |         for (auto p:\
    \ all_prefixes(c)) {\n      |                                   ^\n      |   \
    \                                |\n      |                                  \
    \ char\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Code to convert a string to vector is available at - https://stackoverflow.com/questions/2669693/splitting-a-string-into-a-vector-of-strings\n\
    \    // Code to remove duplicate strings is available at - https://stackoverflow.com/questions/347441/how-do-you-remove-duplicates-in-stdvector\n\
    \    std::map<char, std::string> dict;\n    for (auto &c : string) {\n       \
    \ dict[c] = \"\";\n    }\n    std::vector<std::string> output;\n    for (auto\
    \ &c : dict) {\n        output.push_back(c.second);\n    }\n    std::sort(output.begin(),\
    \ output.end());\n    return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4orqtfmj: /tmp/tmp4orqtfmj.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.length() < 2) return prefixes;\n  for (size_t i = 0;\
    \ i < string.length(); i++) {\n    std::string prefix = string(i, string.length());\n\
    \    if (prefixes.empty() || prefix.length() < prefixes[0].length())\n      prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk8c8osph.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk8c8osph.cpp:10:51: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ std::__cxx11::basic_string<char>::size_type)\u2019\n   10 |     std::string\
    \ prefix = string(i, string.length());\n      |                              \
    \                     ^\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  std::vector<std::string>::size_type len = string.length();\n  if\
    \ (len == 0) return prefixes;\n  prefixes.push_back(std::string());\n  for (std::string::size_type\
    \ i = 1; i <= len; ++i) {\n    prefixes.push_back(string[0] + std::to_string(i));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6e68yqag: /tmp/tmp6e68yqag.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Base Case\n    if (string.length() == 0) return std::vector<std::string>();\
    \ \n    \n    // Recursive Case\n    std::vector<char> current_string; current_string.push_back(string[0]);\
    \ \n    std::vector<std::string> return_vec; return_vec.push_back(current_string);\
    \ \n    for (auto i = 1, e = string.length(); i < e; i++) {\n        current_string.push_back(string[i]);\
    \ \n        return_vec.push_back(current_string); \n    }\n    return return_vec;\
    \ \n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr9uycb4_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpr9uycb4_.cpp:12:77: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(std::vector<char>&)\u2019\
    \n   12 |     std::vector<std::string> return_vec; return_vec.push_back(current_string);\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/vector:67,\n            \
    \     from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpr9uycb4_.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<char>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<char>\u2019\
    \ to \u2018std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019\
    \ {a"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    std::string shortest, longest;\n\n    // Find all prefixes\
    \ of the shortest string in string\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        if (shortest.length() == 0 || string[i] != shortest[0]) {\n\
    \            shortest = string[i];\n            prefixes.push_back(string[0]);\n\
    \        }\n    }\n\n    // Find all prefixes of the longest string in string\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        if (longest.length()\
    \ == 0 || string[i] != longest[0]) {\n            longest = string[i];\n     \
    \       for (size_t j = shortest.length(); j < longest.length(); ++j)\n      \
    \          prefixes.push_back(shortest.substr(0, j));\n        }\n    }\n\n  \
    \  // Add all prefixes of the longest string to the shortest\n    for (size_t\
    \ i = 0; i < longest.length(); ++i) {\n        prefixes.push_back(longest.substr(0,\
    \ i));\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpky42v05e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpky42v05e.cpp:15:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   15 |             prefixes.push_back(string[0]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpky42v05e.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ res;\n  for (char c : string)\n    for (auto p : all_prefixes(c))\n      res.push_back(p);\n\
    \  return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpie27hkax.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpie27hkax.cpp:9:32: error: could\
    \ not convert \u2018c\u2019 from \u2018char\u2019 to \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}\n    9 |     for (auto p : all_prefixes(c))\n\
    \      |                                ^\n      |                           \
    \     |\n      |                                char\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (size_t i = 0; i + 1 < string.size(); i++) {\n    result.push_back(string[i]);\n\
    \  }\n  result.resize(result.size() + 1);\n  for (size_t i = string.size() - 2;\
    \ i >= 0; i--) {\n    result[i] = string[i] + string[i + 1];\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk8_dvxi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmphk8_dvxi.cpp:9:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     result.push_back(string[i]);\n      |\
    \                               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphk8_dvxi.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if\
    \ (string.length() == 0) {\n        return std::vector<std::string>{};\n    }\n\
    \    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n   \
    \ std::string prefix = \"\";\n    size_t pos = 0;\n    while (pos < string.length())\
    \ {\n        size_t new_pos = string.find(prefix, pos);\n        if (new_pos ==\
    \ string::npos) {\n            prefixes.push_back(prefix);\n            pos =\
    \ string::npos;\n            continue;\n        }\n        prefix = string.substr(pos,\
    \ new_pos - pos);\n        pos = new_pos + 1;\n    }\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qt2k7oq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3qt2k7oq.cpp:16:24: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   16 |         if (new_pos\
    \ == string::npos) {\n      |                        ^~~~~~\n/tmp/tmp3qt2k7oq.cpp:18:19:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   18 |\
    \             pos = string::npos;\n      |                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ results;\n    size_t start = 0;\n    size_t length = string.length();\n\n  \
    \  // Find longest prefix\n    while (length > 1) {\n        start++;\n      \
    \  length--;\n    }\n\n    // Add to results\n    results.push_back(string);\n\
    \n    // Remember current position\n    size_t end = start;\n    \n    // Loop\
    \ over all characters in string from start position\n    while (start < length)\
    \ {\n        // Look for next character after current position\n        size_t\
    \ i = string.find(static_cast<char>(string[end]), start);\n        if (i != string::npos)\n\
    \            end = i + 1;\n        else {\n            // Found end of longest\
    \ prefix\n            results.push_back(string.substr(start, end - start));\n\
    \            // Remember start of next prefix \n            start = end;\n   \
    \         // Look for next character after current position\n            i = string.find(static_cast<char>(string[end]),\
    \ start);\n            if (i != string::npos)\n                end = i + 1;\n\
    \            else\n                end++;\n        }\n    }\n    return results;\
    \ \n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeog7bn0u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpeog7bn0u.cpp:27:18: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   27 |         if (i\
    \ != string::npos)\n      |                  ^~~~~~\n/tmp/tmpeog7bn0u.cpp:36:22:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   36 |\
    \             if (i != string::npos)\n      |                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string);\n\
    \    vector<string> prefix;\n    int l = string.length();\n    for (int i = 0;\
    \ i < l; i++)\n        prefix.push_back(string(i, string[i]));\n    return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpi1u4i6zv.cpp:2:\n/tmp/tmpi1u4i6zv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpi1u4i6zv.cpp:7:5: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |     assert(string);\n      |     ^~~~~~\n\
    /tmp/tmpi1u4i6zv.cpp:8:5: error: \u2018vector\u2019 was not declared in this scope\n\
    \    8 |     vector<string> prefix;\n      |     ^~~~~~\n/tmp/tmpi1u4i6zv.cpp:8:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi1u4i6zv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi1u4i6zv.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpi1u4i6zv.cpp:8:20:\
    \ error: \u2018prefix\u2019 was not declared in this scope\n    8 |     vector<string>\
    \ prefix;\n      |                    ^~~~~~\n/tmp/tmpi1u4i6zv.cpp:11:45: error:\
    \ no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (int&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   11 |         prefix.push_back(string(i, string[i]));\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); i++)\n    prefixes.emplace_back(string);\n\
    \  prefixes.emplace_back(string);\n  while (prefixes.size() > 1) {\n    std::string\
    \ prefix = prefixes.back();\n    prefixes.pop_back();\n    for (int i = 1; i <\
    \ prefixes.size() - 1; i++) {\n      prefixes[i] = prefix + prefixes[i + 1];\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpv5o31ee3: /tmp/tmpv5o31ee3.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string);\n\
    \n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size() + 1);\n\
    \n  // First prefix is the entire string\n  prefixes.push_back(std::move(string));\n\
    \n  // For each remaining character, see if there are any prefixes ending with\
    \ the next character\n  for (std::string::size_type i = string.size(); i > 0;\
    \ --i) {\n    // If no prefixes ending with this character, add an empty prefix\
    \ to the vector\n    if (prefixes.empty()) {\n      prefixes.push_back(std::move(std::string()));\n\
    \    }\n\n    // If there is at least one prefix ending with this character\n\
    \    if (prefixes.back().back() == '\\0') {\n      // Add the previous prefix\
    \ to the vector\n      prefixes.push_back(std::move(prefixes.back()));\n\n   \
    \   // Remove the last character from the prefix\n      prefixes.back().pop_back();\n\
    \    } else {\n      // Otherwise, add the previous prefix and remove the previous\
    \ prefix from the vector\n      prefixes.push_back(std::move(prefixes.back()));\n\
    \      prefixes.back().pop_back();\n    }\n  }\n\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpg4oezpor.cpp:2:\n/tmp/tmpg4oezpor.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpg4oezpor.cpp:7:3: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |   assert(string);\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  std::string tmp;\n  while (!prefixes.empty())\
    \ {\n    tmp = prefixes.back();\n    prefixes.pop_back();\n    for (int i = 0;\
    \ i < tmp.length(); ++i) {\n      for (int j = 0; j < prefixes.size(); ++j) {\n\
    \        if (i == 0) {\n          if (tmp[i] != prefixes[j].substr(0, i)) {\n\
    \            prefixes.push_back(prefix + tmp);\n          }\n        } else if\
    \ (i == tmp.length() - 1) {\n          if (tmp[i] != prefixes[j].substr(tmp.length()\
    \ - 1, i)) {\n            prefixes.push_back(prefix + tmp);\n          }\n   \
    \     } else {\n          if (tmp[i] != prefixes[j].substr(0, i) && tmp[i] !=\
    \ prefixes[j].substr(i + 1, i)) {\n            prefixes.push_back(prefix + tmp);\n\
    \          }\n        }\n      }\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0i0lg0op.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0i0lg0op.cpp:16:22: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   16 |           if (tmp[i] != prefixes[j].substr(0, i)) {\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0i0lg0op.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0i0lg0op.cpp:16:48:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   16 |           if (tmp[i] != prefixes[j].substr(0,\
    \ i)) {\n      |                                                ^\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0i0lg0op.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0i0lg0op.cpp:16:48: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 a"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.empty()) {\n    return prefixes;\n  }\n\n  auto it =\
    \ string.begin();\n  while (it != string.end()) {\n    prefixes.push_back(string);\n\
    \    it = string.find(*it, string.length());\n    string += *it;\n  }\n\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsgj06o2g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpsgj06o2g.cpp:15:42: error: no match\
    \ for \u2018operator=\u2019 (operand types are \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019})\n   15 |     it = string.find(*it, string.length());\n\
    \      |                                          ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsgj06o2g.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >& __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::operator=(const\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\
    \n  784 |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >& __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::operator=(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&&\u2019\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n\tstd::vector<std::string>\
    \ result;\n\tresult.reserve(string.length());\n\tfor (char ch : string)\n\t{\n\
    \t\tresult.push_back(std::string(\"\"));\n\t\tfor (size_t i = result.size() -\
    \ 1; i >= 0; --i)\n\t\t{\n\t\t\tchar c = ch;\n\t\t\tif (i >= string.length())\n\
    \t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc = string[i];\n\t\t\tresult[i].push_back(c);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpljojvta1: /tmp/tmpljojvta1.cpp:28: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Get all possible prefixes\n    std::vector<std::set<std::string>> prefixes;\n\
    \    std::string prefix;\n    for (std::size_t i = 0; i <= string.size(); ++i)\
    \ {\n        prefix = string;\n        for (std::size_t j = i; j <= string.size();\
    \ ++j) {\n            prefix = prefix + string[j];\n            std::set<std::string>\
    \ prefix_set(prefix);\n            prefixes.push_back(prefix_set);\n        }\n\
    \    }\n    // Sort the prefixes\n    bool swapped = true;\n    while (swapped)\
    \ {\n        swapped = false;\n        for (std::set<std::string>::iterator it\
    \ = prefixes.begin(); it != prefixes.end(); ++it) {\n            for (std::set<std::string>::iterator\
    \ it2 = prefixes.begin(); it2 != prefixes.end(); ++it2) {\n                if\
    \ (it->size() > it2->size()) {\n                    std::set<std::string> temp\
    \ = *it;\n                    *it = *it2;\n                    *it2 = temp;\n\
    \                    swapped = true;\n                }\n            }\n     \
    \   }\n    }\n    // Return the sorted prefixes\n    std::vector<std::string>\
    \ answer;\n    for (std::set<std::string>::iterator it = prefixes.begin(); it\
    \ != prefixes.end(); ++it)\n        answer.push_back(it->begin(), it->end());\n\
    \    return answer;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ovg80xt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9ovg80xt.cpp:14:52: error: no matching\
    \ function for call to \u2018std::set<std::__cxx11::basic_string<char> >::set(std::string&)\u2019\
    \n   14 |             std::set<std::string> prefix_set(prefix);\n      |     \
    \                                               ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp9ovg80xt.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::set<_Key, _Compare,\
    \ _Alloc>::set(_InputIterator, _InputIterator, const allocator_type&)\u2019\n\
    \  271 |  set(_InputIterator __first, _InputIterator __last,\n      |  ^~~\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9ovg80xt.cpp:14:52:\
    \ note:   candidate expects 3 arguments, 1 provided\n   14 |             std::set<std::string>\
    \ prefix_set(prefix);\n      |                                               \
    \     ^\nIn file included from /usr/include/c++/9/set:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n                 from\
    \ /tmp/tmp9ovg80xt.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:265:7: note: candidate:\
    \ \u2018std::set<_Key, _Compare, _Alloc>::set(std::initializer_list<_Tp>, const\
    \ allocator_type&) [with _Key = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n  265 |       set(initializer_list<value_type> __l, const allocator_type&\
    \ __a)\n      |       ^~~\n/usr/include/c++/9/bits/stl_set.h:265:7: note:   candidate\
    \ expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/stl_set.h:259:7: note:\
    \ candidate: \u2018std::set<_Key, _Compare, _Alloc>::set(std::set<_Key, _Compare,\
    \ _Alloc>&&, const allocator_type&) [with _"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  \n  std::string prefix = \"\";\n  for (int i = 0, j = 0; i < string.length();\
    \ i++, j++) {\n    prefix = prefix + string[i];\n    if (j == string.length())\
    \ {\n      prefixes.push_back(prefix);\n      j = 0;\n    }\n  }\n  \n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpcaqmzran: /tmp/tmpcaqmzran.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    auto it = string.begin();\n    std::string longestPrefix(it++,\
    \ string);\n    while (it != string.end()) {\n        prefixes.push_back({longestPrefix,\
    \ std::string(it, string) - longestPrefix});\n        longestPrefix = std::string(++it,\
    \ string);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6pnnu9d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw6pnnu9d.cpp:9:43: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >, std::string&)\u2019\n    9 |     std::string\
    \ longestPrefix(it++, string);\n      |                                      \
    \     ^\nIn file included from /usr/include/c++/9/string:55,\n               \
    \  from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw6pnnu9d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2: note:\
    \ candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpw6pnnu9d.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Your code here\n    std::vector<std::string> v;\n    \n    for(auto i : string){\n\
    \        v.push_back(string(0,i));\n    }\n    for(auto i : string){\n       \
    \ for(auto j : v){\n            v.push_back(string(j,i));\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvzoe45b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpxvzoe45b.cpp:11:31: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int,\
    \ char&)\u2019\n   11 |         v.push_back(string(0,i));\n      |           \
    \                    ^\n/tmp/tmpxvzoe45b.cpp:15:35: error: no match for call to\
    \ \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>&,\
    \ char&)\u2019\n   15 |             v.push_back(string(j,i));\n      |       \
    \                            ^\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ans;\n    // Base case: empty string\n    if (string.length() == 0)\n      \
    \  ans.push_back(std::string());\n    // Recursive case: append everything to\
    \ the front of each element\n    // and recurse on the tail of the string\n  \
    \  else {\n        // Push first element onto stack\n        std::string prefix\
    \ = string;\n        ans.push_back(prefix);\n        // Pop off last element of\
    \ stack\n        // This removes elements from stack until the stack is empty\n\
    \        for (size_t i = 1; i < ans.size(); ++i)\n            ans[ans.size() -\
    \ i] = ans[ans.size() - i - 1] + ans[i];\n        // Finally, push current prefix\
    \ onto stack\n        ans.push_back(prefix);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkuyvba1h: /tmp/tmpkuyvba1h.cpp:28: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    for (size_t i = 1; i < string.length(); i++) {\n        prefixes.push_back(string[i\
    \ - 1]);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyjjjsavn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpyjjjsavn.cpp:10:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |         prefixes.push_back(string[i - 1]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyjjjsavn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char"
  stdout: ''
  timestamp: 1660141278
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Create\
    \ a vector with all prefixes\n  std::string prefix;\n  std::vector<std::string>\
    \ result;\n  // Loop from shortest to longest\n  for (size_t i = 0; string[i]\
    \ != '\\0'; ++i) {\n    prefix = string;\n    // Loop from longest to shortest\n\
    \    for (int j = string.length() - 1; j >= i; j--)\n      prefix += string[j];\n\
    \    // Insert the prefix into the result set\n    result.emplace_back(prefix);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  string\
    \ prefix = string;\n  string suffix = \"\";\n  std::vector<std::string> all_prefixes;\n\
    \n  for (int i = 0; i < string.length(); i++) {\n    std::string prefix_with_suffix\
    \ = prefix + suffix;\n\n    all_prefixes.push_back(prefix_with_suffix);\n    prefix\
    \ = prefix_with_suffix;\n    suffix = string.substr(i);\n  }\n\n  return all_prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r18zcj1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8r18zcj1.cpp:7:9: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n    7 |   string prefix = string;\n\
    \      |         ^~~~~~~\n      |         ;\n/tmp/tmp8r18zcj1.cpp:8:9: error:\
    \ expected \u2018;\u2019 before \u2018suffix\u2019\n    8 |   string suffix =\
    \ \"\";\n      |         ^~~~~~~\n      |         ;\n/tmp/tmp8r18zcj1.cpp:12:38:\
    \ error: \u2018prefix\u2019 was not declared in this scope\n   12 |     std::string\
    \ prefix_with_suffix = prefix + suffix;\n      |                             \
    \         ^~~~~~\n/tmp/tmp8r18zcj1.cpp:12:47: error: \u2018suffix\u2019 was not\
    \ declared in this scope\n   12 |     std::string prefix_with_suffix = prefix\
    \ + suffix;\n      |                                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  result.reserve(string.size());\n\n  // Prefix length\n  int prefix_len\
    \ = 1;\n\n  for (auto ch : string) {\n    result.push_back(std::to_string(prefix_len));\n\
    \    prefix_len++;\n  }\n\n  result.push_back(std::to_string(prefix_len));\n\n\
    \  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmphm3mx65h: /tmp/tmphm3mx65h.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    // We will use the stack to push characters in the string one by\
    \ one and then\n    // we will pop the characters from stack to construct a prefix\
    \ of the input\n    // string.\n    stack<char> prefix_stack;\n    result.push_back(string);\n\
    \    while (!prefix_stack.empty()) {\n        // Pop one character from stack\n\
    \        char current_char = prefix_stack.top();\n        prefix_stack.pop();\n\
    \        \n        // If character is not prefix character, then prefix character\
    \ is a prefix of\n        // current character in the stack, and we will add current\
    \ character in result vector.\n        if (current_char != string.front() && result.back().size()\
    \ > 0) {\n            result.push_back(current_char);\n        }\n        \n \
    \       // If character is prefix character, then push it into stack, and prefix\
    \ character will\n        // be popped from the stack and added to result vector\n\
    \        else {\n            prefix_stack.push(string.front());\n            string.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmparjtie5q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmparjtie5q.cpp:11:5: error: \u2018\
    stack\u2019 was not declared in this scope; did you mean \u2018std::stack\u2019\
    ?\n   11 |     stack<char> prefix_stack;\n      |     ^~~~~\n      |     std::stack\n\
    In file included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmparjtie5q.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmparjtie5q.cpp:11:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   11 |     stack<char> prefix_stack;\n      |    \
    \       ^~~~\n/tmp/tmparjtie5q.cpp:13:13: error: \u2018prefix_stack\u2019 was\
    \ not declared in this scope\n   13 |     while (!prefix_stack.empty()) {\n  \
    \    |             ^~~~~~~~~~~~\n/tmp/tmparjtie5q.cpp:21:42: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   21 |             result.push_back(current_char);\n      |               \
    \                           ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmparjtie5q.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basi"
  stdout: ''
  timestamp: 1660141277
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  // Add prefix of empty string\n  prefixes.push_back(string);\n\
    \n  // Add prefix of 1 character string\n  if (string.length() == 1) prefixes.push_back(string[0]);\n\
    \n  // Add prefixes of 2 character strings\n  else if (string.length() == 2) prefixes.push_back(string.substr(0,\
    \ 1));\n  else if (string.length() == 3) prefixes.push_back(string.substr(0, 2));\n\
    \  else if (string.length() == 4) prefixes.push_back(string.substr(0, 3));\n \
    \ else if (string.length() == 5) prefixes.push_back(string.substr(0, 4));\n  else\
    \ if (string.length() == 6) prefixes.push_back(string.substr(0, 5));\n  else if\
    \ (string.length() == 7) prefixes.push_back(string.substr(0, 6));\n  else if (string.length()\
    \ == 8) prefixes.push_back(string.substr(0, 7));\n  else if (string.length() ==\
    \ 9) prefixes.push_back(string.substr(0, 8));\n  else if (string.length() == 10)\
    \ prefixes.push_back(string.substr(0, 9));\n  else if (string.length() == 11)\
    \ prefixes.push_back(string.substr(0, 10));\n  else if (string.length() == 12)\
    \ prefixes.push_back(string.substr(0, 11));\n  else if (string.length() == 13)\
    \ prefixes.push_back(string.substr(0, 12));\n  else if (string.length() == 14)\
    \ prefixes.push_back(string.substr(0, 13));\n  else if (string.length() == 15)\
    \ prefixes.push_back(string.substr(0, 14));\n  else if (string.length() == 16)\
    \ prefixes.push_back(string.substr(0, 15));\n  else if (string.length() == 17)\
    \ prefixes.push_back(string.substr(0, 16));\n  else if (string.length() == 18)\
    \ prefixes.push_back(string.substr(0, 17));\n  else if (string.length() == 19)\
    \ prefixes.push_back(string.substr(0, 18));\n  else if (string.length() == 20)\
    \ prefixes.push_back(string.substr(0, 19));\n\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4uykd9de.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4uykd9de.cpp:13:57: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   13 |   if (string.length() == 1) prefixes.push_back(string[0]);\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uykd9de.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_t"
  stdout: ''
  timestamp: 1660141278
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    auto len = string.length();\n    auto prefix = string;\n    while\
    \ (prefixes.size() < len) {\n        auto found = prefix.find(prefixes[0]);\n\
    \        if (found == std::string::npos) {\n            prefixes.push_back(prefix);\n\
    \        } else {\n            prefix = prefixes[0];\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); i++) {\n    for (int j = 0;\
    \ j < i; j++) {\n      if (string[i] == string[j]) {\n        prefixes.push_back(string[j]);\n\
    \      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes188je0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpes188je0.cpp:11:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |         prefixes.push_back(string[j]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpes188je0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ string_prefixes;\n\n    // Base case - empty string\n    if (string.length()\
    \ == 0) {\n        string_prefixes.emplace_back(string);\n        return string_prefixes;\n\
    \    }\n\n    // Get all chars of current string and recurse\n    auto current_chars\
    \ = string.cbegin();\n    for (char c: current_chars) {\n        string_prefixes.emplace_back(c);\n\
    \        string_prefixes.push_back(all_prefixes(string() + c));\n    }\n\n   \
    \ return string_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbj_1h_r6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbj_1h_r6.cpp:17:18: error: no matching\
    \ function for call to \u2018begin(__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >&)\u2019\n   17 |     for (char c: current_chars) {\n      |              \
    \    ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbj_1h_r6.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpbj_1h_r6.cpp:17:18: note:   \u2018__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   17 |     for (char c: current_chars) {\n      |                  ^~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/"
  stdout: ''
  timestamp: 1660141277
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ all_prefixes;\n  std::string prefix;\n  for (size_t i = 0; i < string.size();\
    \ i++) {\n    prefix = \"\";\n    for (size_t j = 0; j < i; j++) {\n      prefix\
    \ = prefix + string[j];\n    }\n    all_prefixes.push_back(prefix);\n  }\n  return\
    \ all_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpux0f3erp: /tmp/tmpux0f3erp.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    auto it = string.begin();\n    auto end = string.end();\n   \
    \ // Add first character of the string\n    prefixes.emplace_back(std::string(it,\
    \ it+1));\n    it++;\n    // While there are characters left in the string\n \
    \   while (it != end) {\n        // Add all prefixes of length 1 to current location\n\
    \        prefixes.emplace_back(std::string(it, end));\n        it = string.find(*it,\
    \ it);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisls_fr4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpisls_fr4.cpp:17:33: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::find(char&, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   17 |         it = string.find(*it,\
    \ it);\n      |                                 ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpisls_fr4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::all"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    auto find_prefix = [&string](std::string prefix) {\n        if\
    \ (string.find(prefix) == 0)\n            result.emplace_back(prefix);\n    };\n\
    \    find_prefix(\"a\");\n    find_prefix(\"ab\");\n    find_prefix(\"abc\");\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehuvlos9.cpp: In lambda function:\n/tmp/tmpehuvlos9.cpp:10:13:\
    \ error: \u2018result\u2019 is not captured\n   10 |             result.emplace_back(prefix);\n\
    \      |             ^~~~~~\n/tmp/tmpehuvlos9.cpp:8:32: note: the lambda has no\
    \ capture-default\n    8 |     auto find_prefix = [&string](std::string prefix)\
    \ {\n      |                                ^\n/tmp/tmpehuvlos9.cpp:7:30: note:\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > result\u2019 declared here\n\
    \    7 |     std::vector<std::string> result;\n      |                       \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1660141277
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ prefix = vector<string>();\n    prefixes.push_back(prefix);\n    for (auto it\
    \ = string.begin(); it != string.end(); ++it) {\n        if (*it == '[') {\n \
    \           prefix.clear();\n            continue;\n        }\n        for (size_t\
    \ i = 0; i < prefixes.size(); ++i) {\n            prefixes[i][prefix.size()] =\
    \ *it;\n        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdz42pcop.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdz42pcop.cpp:7:19: error: \u2018\
    vector\u2019 was not declared in this scope\n    7 |     auto prefix = vector<string>();\n\
    \      |                   ^~~~~~\n/tmp/tmpdz42pcop.cpp:7:19: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpdz42pcop.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11: note:\
    \   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdz42pcop.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpdz42pcop.cpp:7:34:\
    \ error: expected primary-expression before \u2018)\u2019 token\n    7 |     auto\
    \ prefix = vector<string>();\n      |                                  ^\n/tmp/tmpdz42pcop.cpp:8:5:\
    \ error: \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    8 |     prefixes.push_back(prefix);\n      |     ^~~~~~~~\n\
    \      |     all_prefixes\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0, n = string.length(); i < n; ++i) {\n     \
    \   for (size_t j = i; j < n; ++j) {\n            prefixes.push_back(string(i,\
    \ j));\n        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26zsjhc9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp26zsjhc9.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ size_t&)\u2019\n   10 |             prefixes.push_back(string(i, j));\n    \
    \  |                                           ^\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  if (string.length()\
    \ == 0) return {};\n  string longestPrefix = string;\n  std::string shortestPrefix\
    \ = string;\n  do {\n    auto endOfLongestPrefix = longestPrefix.find_first_of(shortestPrefix);\n\
    \    if (endOfLongestPrefix == std::string::npos) {\n      longestPrefix = shortestPrefix.substr(1);\n\
    \      continue;\n    }\n    longestPrefix = longestPrefix.substr(0, endOfLongestPrefix);\n\
    \    shortestPrefix = shortestPrefix.substr(1);\n  } while (longestPrefix != shortestPrefix);\n\
    \  return { longestPrefix };\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxd_m8yd0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpxd_m8yd0.cpp:8:9: error: expected\
    \ \u2018;\u2019 before \u2018longestPrefix\u2019\n    8 |   string longestPrefix\
    \ = string;\n      |         ^~~~~~~~~~~~~~\n      |         ;\n/tmp/tmpxd_m8yd0.cpp:11:31:\
    \ error: \u2018longestPrefix\u2019 was not declared in this scope; did you mean\
    \ \u2018shortestPrefix\u2019?\n   11 |     auto endOfLongestPrefix = longestPrefix.find_first_of(shortestPrefix);\n\
    \      |                               ^~~~~~~~~~~~~\n      |                \
    \               shortestPrefix\n/tmp/tmpxd_m8yd0.cpp:18:12: error: \u2018longestPrefix\u2019\
    \ was not declared in this scope; did you mean \u2018shortestPrefix\u2019?\n \
    \  18 |   } while (longestPrefix != shortestPrefix);\n      |            ^~~~~~~~~~~~~\n\
    \      |            shortestPrefix\n/tmp/tmpxd_m8yd0.cpp:19:26: error: could not\
    \ convert \u2018{longestPrefix}\u2019 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n   19 |   return\
    \ { longestPrefix };\n      |                          ^\n      |            \
    \              |\n      |                          <brace-enclosed initializer\
    \ list>\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    std::string prefix = \"\";\n    \n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefix += string[i];\n        \n        // Only add prefixes\
    \ not already added\n        if (!result.count(prefix)) {\n            result.push_back(prefix);\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_ayb39f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7_ayb39f.cpp:14:21: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018count\u2019\n   14 |         if (!result.count(prefix)) {\n      |   \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660141278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (const auto i : std::all_of(string.begin(), string.end(), [](auto\
    \ const &char) {\n    return char != '\\0';\n  })) {\n    prefixes.emplace_back(std::string(string.begin(),\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36vab83z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp36vab83z.cpp:8:80: error: expected\
    \ \u2018,\u2019 or \u2018...\u2019 before \u2018char\u2019\n    8 |   for (const\
    \ auto i : std::all_of(string.begin(), string.end(), [](auto const &char) {\n\
    \      |                                                                     \
    \           ^~~~\n/tmp/tmp36vab83z.cpp: In lambda function:\n/tmp/tmp36vab83z.cpp:9:12:\
    \ error: expected primary-expression before \u2018char\u2019\n    9 |     return\
    \ char != '\\0';\n      |            ^~~~\n/tmp/tmp36vab83z.cpp:9:11: error: expected\
    \ \u2018;\u2019 before \u2018char\u2019\n    9 |     return char != '\\0';\n \
    \     |           ^~~~~\n      |           ;\n/tmp/tmp36vab83z.cpp:9:17: error:\
    \ expected unqualified-id before \u2018!=\u2019 token\n    9 |     return char\
    \ != '\\0';\n      |                 ^~\n/tmp/tmp36vab83z.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmp36vab83z.cpp:10:4: error: \u2018begin\u2019 was not declared in this\
    \ scope\n   10 |   })) {\n      |    ^\n/tmp/tmp36vab83z.cpp:10:4: note: suggested\
    \ alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp36vab83z.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   \u2018std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n\
    \      |     ^~~~~\nIn file included from /usr/include/c++/9/filesystem:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp36vab83z.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3:\
    \ note:   \u2018std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmp36vab83z.cpp:10:4: error: \u2018\
    end\u2019 was not declared in this scope\n   10 |   })) {\n      |    ^\n/tmp/tmp36vab83z.cpp:10:4:\
    \ note: suggested alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp36vab83z.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std:"
  stdout: ''
  timestamp: 1660141278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n\n  std::string pre = string;\n\
    \  while (true) {\n    prefixes.push_back(pre);\n    pre = pre.substr(0, pre.rfind(char('\
    \ ')));\n    if (pre.empty()) break;\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmplok2ub4c: /tmp/tmplok2ub4c.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141278
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  while (!prefixes.empty()) {\n  \
    \  auto prefix = prefixes.back();\n    prefixes.pop_back();\n    size_t prefix_size\
    \ = prefix.size();\n    for (size_t i = 0; i <= prefix_size; i++) {\n      prefixes.push_back(prefix\
    \ + std::string(1, i));\n    }\n  }\n  return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Code\
    \ from https://leetcode.com/problems/all-prefixes-of-a-string-ii/\n  std::vector<std::string>\
    \ result;\n  result.reserve(string.size() + 1);\n  result.resize(1);\n  result[0]\
    \ = string;\n\n  for (size_t i = 1; i < string.size(); i++) {\n    std::string\
    \ prefix = string[i];\n    result[result.size() - 1] += prefix;\n  }\n\n  return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk462efig.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk462efig.cpp:14:34: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   14 |     std::string prefix\
    \ = string[i];\n      |                                  ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    auto iter = string.begin();\n    auto begin = iter;\n    while\
    \ (iter != string.end()) {\n        result.emplace_back(std::string(begin, iter));\n\
    \        iter = iter + 1 /* skip delimiter */;\n        begin = iter;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpabz5u6o1: /tmp/tmpabz5u6o1.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  if (string.length()\
    \ == 0) return {};\n  \n  std::string prefix = \"\";\n  std::vector<std::string>\
    \ prefix_vector;\n  for (size_t i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ == string[0]) {\n      prefix.push_back(string[i]);\n    } else {\n      prefix_vector.push_back(prefix);\n\
    \      prefix.push_back(string[i]);\n    }\n  }\n  prefix_vector.push_back(prefix);\n\
    \  return prefix_vector;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpe_av8lko: /tmp/tmpe_av8lko.cpp:26: int main(): Assertion `candidate(("WWW"))
    == (std::vector<std::string>({(std::string)"W", (std::string)"WW", (std::string)"WWW"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ res;\n  res.reserve(string.size());\n  char prev = string[0];\n  for (char c:\
    \ string.substr(1)) {\n    if (c == '\\0') break;\n    res.push_back((std::to_string(prev)\
    \ + std::string(\"_\") + std::to_string(c)));\n    prev = c; \n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ v;\n    int len = string.length();\n    int i = 0;\n    while (len > 0) {\n\
    \        v.push_back(string[i]);\n        ++i;\n        --len;\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1bai9ra.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpy1bai9ra.cpp:11:30: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |         v.push_back(string[i]);\n      |\
    \                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy1bai9ra.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka "
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string);\n\
    \  std::string prefix = string;\n  std::vector<std::string> all_prefixes;\n  for\
    \ (; string.length() > 0; string.pop_back()) {\n    all_prefixes.push_back(prefix);\n\
    \    prefix = prefix + '0';\n  }\n  return all_prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmp6ahi8uuv.cpp:2:\n/tmp/tmp6ahi8uuv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6ahi8uuv.cpp:7:3: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |   assert(string);\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::stack<std::stack<std::stack<std::string>>>\
    \ s;\n    s.push(std::stack<std::stack<std::string>>());\n    s.top().push(string);\n\
    \    while (!s.empty()) {\n        std::stack<std::stack<std::string>> tmp;\n\
    \        std::string currStr = s.top().top();\n        tmp += std::stack<std::string>(currStr.begin(),\
    \ currStr.end());\n        s.pop();\n        for (size_t i = 0; i < currStr.size();\
    \ ++i) {\n            std::stack<std::string> newTmp;\n            newTmp.push(tmp);\n\
    \            for (auto s: tmp) {\n                newTmp.push(s);\n          \
    \  }\n            tmp.swap(newTmp);\n        }\n    }\n    std::vector<std::string>\
    \ result;\n    for (auto s: tmp) {\n        result += s;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ijms_g6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7ijms_g6.cpp:9:24: error: no matching\
    \ function for call to \u2018std::stack<std::stack<std::__cxx11::basic_string<char>\
    \ > >::push(std::string&)\u2019\n    9 |     s.top().push(string);\n      |  \
    \                      ^\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp7ijms_g6.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::stack<std::__cxx11::basic_string<char> >; _Sequence = std::deque<std::stack<std::__cxx11::basic_string<char>\
    \ >, std::allocator<std::stack<std::__cxx11::basic_string<char> > > >; std::stack<_Tp,\
    \ _Sequence>::value_type = std::stack<std::__cxx11::basic_string<char> >]\u2019\
    \n  233 |       push(const value_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::stack<std::__cxx11::basic_string<char> >&\u2019}\n  233\
    \ |       push(const value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_stack.h:238:7: note: candidate: \u2018void std::stack<_Tp,\
    \ _Sequence>::push(std::stack<_Tp, _Sequence>::value_type&&) [with _Tp = std::stack<std::__cxx11::basic_string<char>\
    \ >; _Sequence = std::deque<std::stack<std::__cxx11::basic_string<char> >, std::allocator<std::stack<std::__cxx11::basic_string<char>\
    \ > > >; std::stack<_Tp, _Sequence>::value_type = std::stack<std::__cxx11::basic_string<char>\
    \ >]\u2019\n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018std::stack<std::stack<std::__cxx11::basic_string<char>\
    \ > >::value_type&&\u2019 {aka \u2018std::stack<std:"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefix_candidates;\n\n  // We add all prefixes up to the length of the string\
    \ \n  for (int i = 0; i < string.length(); i++) {\n    // We add the prefix to\
    \ the prefix-candidates\n    prefix_candidates.push_back(string);\n\n    // We\
    \ remove the first character of the prefix \n    // and add the new prefix to\
    \ all prefix-candidates\n    prefix_candidates.push_back(string(string[0], string[i\
    \ - 1]));\n  }\n\n  return prefix_candidates;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsv383u7c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpsv383u7c.cpp:16:64: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   16 |     prefix_candidates.push_back(string(string[0], string[i - 1]));\n\
    \      |                                                                ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Complete solution: \n    // https://stackoverflow.com/questions/61160114/creating-a-vector-of-all-prefixes-from-shortest-to-longest-string\n\
    \    // https://stackoverflow.com/a/61160114/1257601\n\n    // Use recursion\n\
    \    // https://stackoverflow.com/questions/545445/recursively-find-all-substrings-of-a-string-in-c\n\
    \    // https://www.geeksforgeeks.org/substrings-set-1-introduction/\n\n    //\
    \ This solution requires less space than this one\n    // https://stackoverflow.com/questions/16396263/how-to-get-all-strings-in-the-list-of-substrings-in-a-given-string\n\
    \n    // This solution also works with strings with repeated characters\n    //\
    \ https://stackoverflow.com/questions/12635704/printing-all-subsequences-of-a-given-string\n\
    \n    std::vector<std::string> result;\n    std::string prefix = \"\";\n    \n\
    \    for (size_t i = 1; i < string.length(); ++i) \n    {\n        prefix = prefix\
    \ == \"\" ? string : prefix + string[i];\n        result.push_back(prefix);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpxgowxwzy: /tmp/tmpxgowxwzy.cpp:34: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Write your code here\n    std::vector<std::string> results;\n    std::string\
    \ prefix = \"\";\n    std::string remain = string;\n    int index = -1;\n    while\
    \ (index < 0 && remain != \"\") {\n        prefix = remain;\n        remain =\
    \ remain[remain.length() - 1];\n        ++index;\n    }\n    results.push_back(prefix);\n\
    \    int index = -1;\n    std::string current = \"\";\n    while (index != -1)\
    \ {\n        index = string.find(current, index + 1);\n        if (index != -1)\
    \ {\n            current = string.substr(index);\n            results.push_back(current);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmcdhc9m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnmcdhc9m.cpp:18:9: error: redeclaration\
    \ of \u2018int index\u2019\n   18 |     int index = -1;\n      |         ^~~~~\n\
    /tmp/tmpnmcdhc9m.cpp:11:9: note: \u2018int index\u2019 previously declared here\n\
    \   11 |     int index = -1;\n      |         ^~~~~\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    // Fill the prefix vector with all possible prefixes\n    std::string\
    \ prefix = string;\n    while (!prefix.empty())\n    {\n        prefix = prefix.substr(0,\
    \ prefix.size() - 1);\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmiw2pd2j: /tmp/tmpmiw2pd2j.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.length();\n    std::vector<std::string> v;\n    v.reserve(n + 1);\n\
    \    for (int i = 0; i <= n; i++) {\n        v.push_back(string(i, string.at(i)));\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6760zh6r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6760zh6r.cpp:11:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   11 |         v.push_back(string(i, string.at(i)));\n      |              \
    \                             ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.size(); ++i)\n    prefixes.push_back(string.substr(0,\
    \ i));\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyxyg2xiv: /tmp/tmpyxyg2xiv.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  result.push_back(string);\n  if (string.empty()) return result;\n\
    \  for (auto i = string.length() - 1; i >= 0; i--) {\n    result.push_back(string[i]);\n\
    \    result.insert(result.begin() + 1, string(string.length() - i - 1, string[i]));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp729ff9qp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp729ff9qp.cpp:11:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |     result.push_back(string[i]);\n      |\
    \                               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp729ff9qp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {ak"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Find\
    \ first index of last index of any char in string\n  int length = string.length();\n\
    \  int index = 1;\n  while (index != length) {\n    int cur_index = string.rfind(string[index],\
    \ index - 1);\n    if (cur_index == string::npos)\n      return std::vector<std::string>();\n\
    \    string prefix = string.substr(0, cur_index);\n    index += 1;\n    result.push_back(prefix);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmhdft2xw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmhdft2xw.cpp:12:22: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   12 |     if (cur_index\
    \ == string::npos)\n      |                      ^~~~~~\n/tmp/tmpmhdft2xw.cpp:14:11:\
    \ error: expected \u2018;\u2019 before \u2018prefix\u2019\n   14 |     string\
    \ prefix = string.substr(0, cur_index);\n      |           ^~~~~~~\n      |  \
    \         ;\n/tmp/tmpmhdft2xw.cpp:16:5: error: \u2018result\u2019 was not declared\
    \ in this scope\n   16 |     result.push_back(prefix);\n      |     ^~~~~~\n/tmp/tmpmhdft2xw.cpp:16:22:\
    \ error: \u2018prefix\u2019 was not declared in this scope\n   16 |     result.push_back(prefix);\n\
    \      |                      ^~~~~~\n/tmp/tmpmhdft2xw.cpp:18:10: error: \u2018\
    result\u2019 was not declared in this scope\n   18 |   return result;\n      |\
    \          ^~~~~~\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    int n = string.length();\n    for (int i = 0; i != n; ++i) {\n\
    \        int j = i;\n        while (i != j && string[i] == string[j]) {\n    \
    \        ++j;\n        }\n        result.push_back(string[i : j]);\n        i\
    \ = j;\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvnp7t40k.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpvnp7t40k.cpp:14:35: error: found\
    \ \u2018:\u2019 in nested-name-specifier, expected \u2018::\u2019\n   14 |   \
    \      result.push_back(string[i : j]);\n      |                             \
    \      ^\n      |                                   ::\n/tmp/tmpvnp7t40k.cpp:14:33:\
    \ error: \u2018i\u2019 is not a class, namespace, or enumeration\n   14 |    \
    \     result.push_back(string[i : j]);\n      |                              \
    \   ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); ++i) {\n    for (int j = 0;\
    \ j < string.length(); ++j) {\n      for (int k = 0; k < string.length(); ++k)\
    \ {\n        prefixes.push_back(string(i, j + 1, k));\n      }\n    }\n  }\n \
    \ return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqe864y9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmptqe864y9.cpp:11:46: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ int, int&)\u2019\n   11 |         prefixes.push_back(string(i, j + 1, k));\n\
    \      |                                              ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    int length_of_string = string.size();\n    for (int i = 0; i\
    \ < length_of_string; ++i) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpu3k619m4: /tmp/tmpu3k619m4.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        if (string[i] == string[0]) {\n            prefix = prefix +\
    \ string[i];\n            prefixes.push_back(prefix);\n            prefix = \"\
    \";\n        } else {\n            prefix = prefix + string[i];\n        }\n \
    \   }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp397g347e: /tmp/tmp397g347e.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  result.reserve(std::distance(string.begin(), string.end()));\n  for\
    \ (const auto& element : all_prefixes(string.rbegin(), string.rend())) {\n   \
    \ result.emplace_back(element);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr0bwag23.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpr0bwag23.cpp:9:56: error: could\
    \ not convert \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::rbegin()\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reverse_iterator = std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]()\u2019\
    \ from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019 {aka \u2018\
    std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n    9 |   for (const auto& element : all_prefixes(string.rbegin(), string.rend()))\
    \ {\n      |                                           ~~~~~~~~~~~~~^~\n     \
    \ |                                                        |\n      |        \
    \                                                std::__cxx11::basic_string<char>::reverse_iterator\
    \ {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >}\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.length(); i++) {\n        std::string\
    \ prefix = string;\n        if (i > 0) {\n            prefix += string[i];\n \
    \       }\n        result.push_back(prefix);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpeq8j4ruf: /tmp/tmpeq8j4ruf.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (auto i = string.length()\
    \ - 1; i >= 0; --i) {\n    prefixes.push_back(string);\n  }\n  for (auto i = string.length();\
    \ i < string.length(); ++i) {\n    prefixes.push_back(string.substr(0, i));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  for (int i = 0; i < string.length(); i++) {\n    for (int j =\
    \ 0; j < i; j++) {\n      if (string[i] == string[j]) {\n        prefixes.push_back(string[i]\
    \ + string[j]);\n        break;\n      }\n    }\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9c__57pg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9c__57pg.cpp:12:49: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   12 |         prefixes.push_back(string[i] + string[j]);\n      |        \
    \                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9c__57pg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |     "
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    size_t length = 0;\n    size_t max_length = 0;\n    for (size_t\
    \ i = 0; i < string.length(); i++) {\n        if (string[i] == string[i + 1])\n\
    \            length++;\n        else\n            length = 1;\n        if (length\
    \ >= max_length) {\n            prefixes.push_back(string);\n            max_length\
    \ = length;\n        } else {\n            length = 0;\n        }\n    }\n   \
    \ return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_rn_1di2: /tmp/tmp_rn_1di2.cpp:27: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  result.reserve(string.length());\n  for (size_t i = 0; i < string.length();\
    \ i++) {\n    result.push_back(string);\n    result.push_back(string(string.length()\
    \ - i, string[i]));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94_rt0_g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp94_rt0_g.cpp:11:59: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::size_type,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   11 |     result.push_back(string(string.length() - i, string[i]));\n     \
    \ |                                                           ^\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ res;\n  std::string temp = string;\n  // While input string not empty\n  while\
    \ (!temp.empty()) {\n    // Add input prefix to the result vector\n    res.push_back(temp);\n\
    \    // Remove the first character from the input string\n    temp.erase(0, 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7b0b4pgj: /tmp/tmp7b0b4pgj.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    // Iterate over each character and add a prefix of the string\
    \ to the vector\n    for (char c : string) {\n        std::string prefix = \"\"\
    ;\n        // Iterate over each character and add each prefix to prefixes vector\n\
    \        for (int i = 0; i < string.length(); i++) {\n            // if current\
    \ character is equal to string index i\n            if (string[i] == c) {\n  \
    \              prefix = prefix + string[i];\n                prefixes.push_back(prefix);\n\
    \            }\n        }\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4jvgv9ir: /tmp/tmp4jvgv9ir.cpp:25: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (char c : string) if (isalpha(c)) {\n    for (char c1 : all_prefixes(string))\
    \ prefixes.push_back(c + c1);\n  }\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn6g68ia.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcn6g68ia.cpp:9:39: error: cannot\
    \ convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018char\u2019 in\
    \ initialization\n    9 |     for (char c1 : all_prefixes(string)) prefixes.push_back(c\
    \ + c1);\n      |                                       ^\n/tmp/tmpcn6g68ia.cpp:9:67:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(int)\u2019\n    9 |     for (char c1 : all_prefixes(string)) prefixes.push_back(c\
    \ + c1);\n      |                                                            \
    \       ^\nIn file included from /usr/include/c++/9/vector:67,\n             \
    \    from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpcn6g68ia.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ prefix = string[0];\n    std::vector<std::string> prefixes;\n    for (size_t\
    \ i = 1; i < string.length(); ++i) {\n        prefix = string[i] + prefix;\n \
    \       prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_rr3ty7s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_rr3ty7s.cpp:11:34: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   11 |         prefixes.push_back(prefix);\n      |                       \
    \           ^\nIn file included from /usr/include/c++/9/vector:67,\n         \
    \        from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp_rr3ty7s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    if (string.size() == 0) return prefixes;\n    for (size_t i =\
    \ 0; i < string.size() - 1; i++) {\n        prefixes.push_back(string[i]);\n \
    \   }\n    prefixes.push_back(string[string.size() - 1]);\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcc3r9l6t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcc3r9l6t.cpp:10:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |         prefixes.push_back(string[i]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcc3r9l6t.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value"
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::string\
    \ pref(\"<empty>\");\n    std::vector<std::string> prefixes;\n    for(size_t i\
    \ = 1; i < string.length(); i++) {\n        std::string::size_type pref_len =\
    \ string.find_first_of(string[0], i);\n        if(pref_len != std::string::npos)\
    \ {\n            pref.assign(&string[0], pref_len);\n            prefixes.push_back(pref);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpo_8maujm: /tmp/tmpo_8maujm.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ all_prefixes;\n  for (size_t i = 0; i < string.size(); ++i) {\n    size_t j\
    \ = i;\n    for (; j < string.size() && string[j] == string[i]; ++j);\n    all_prefixes.push_back(string.substr(i,\
    \ j - i + 1));\n  }\n  return all_prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf5ib_xux: /tmp/tmpf5ib_xux.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Initialize\
    \ vector of prefixes\n  std::vector<std::string> prefixes;\n  // Initialize prefix\
    \ length\n  size_t prefix_len = 1;\n  // Loop through input string and copy characters\
    \ to prefixes vector\n  for (auto c : string) {\n    // Add character to prefix\
    \ vector if character is not whitespace\n    if (std::isspace(c)) {\n      prefixes.push_back(std::string());\n\
    \    } else {\n      prefixes.back() += c;\n    }\n    // Check if prefix length\
    \ is greater than string length\n    if (prefixes.back().length() > string.length()\
    \ - prefix_len) {\n      // Reset prefix length\n      prefix_len = 1;\n     \
    \ // Reset prefixes vector\n      prefixes.clear();\n    }\n  }\n  // Return prefix\
    \ vector as vector of strings\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::sort(string.begin(),\
    \ string.end());\n    std::vector<std::string> strings;\n    auto it = string.begin();\n\
    \    while (it < string.end()) {\n        if (it + 1 != string.end()) {\n    \
    \        strings.push_back(\"a\" + std::string(it, \"a\" + std::string(it + 1)));\n\
    \        }\n        ++it;\n    }\n    return strings;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4p1uk2zf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4p1uk2zf.cpp:12:77: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >)\u2019\n   12 |             strings.push_back(\"\
    a\" + std::string(it, \"a\" + std::string(it + 1)));\n      |                \
    \                                                             ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4p1uk2zf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2: note:\
    \ candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp4p1uk2zf.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp"
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    auto len = string.length();\n    prefixes.reserve(len);\n   \
    \ for (size_t i = 0; i < len; i++) {\n        for (size_t j = i; j < len; j++)\
    \ {\n            prefixes.emplace_back(string.substr(i, j));\n        }\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp80ruzdwd: /tmp/tmp80ruzdwd.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefix_vec;\n    for (int i = 0; i < string.length(); i++) {\n        prefix_vec.push_back(string);\n\
    \        prefix_vec.back()[i] = string[i];\n    }\n\n    for (int i = string.length();\
    \ i > 0; i--) {\n        prefix_vec.push_back(string);\n        prefix_vec.back()[i-1]\
    \ = string[i - 1];\n    }\n    return prefix_vec;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpuccins3x: /tmp/tmpuccins3x.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  // Return vector if empty string\n  if (string.empty()) return result;\n\
    \  // Use prefix & recurse\n  std::string::size_type start = 0;\n  std::string::size_type\
    \ end = 0;\n  while (end < string.length()) {\n    end = string.find(string, start);\n\
    \    if (end != string::npos) {\n      result.push_back(string{start, end - start});\n\
    \    }\n    start = end + 1;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23ej47ou.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp23ej47ou.cpp:15:16: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   15 |     if (end !=\
    \ string::npos) {\n      |                ^~~~~~\n/tmp/tmp23ej47ou.cpp:16:30:\
    \ error: expected \u2018)\u2019 before \u2018{\u2019 token\n   16 |       result.push_back(string{start,\
    \ end - start});\n      |                       ~      ^\n      |            \
    \                  )\n"
  stdout: ''
  timestamp: 1660141280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  vector<string>\
    \ prefixes;\n  for (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy857dt39.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpy857dt39.cpp:7:3: error: \u2018\
    vector\u2019 was not declared in this scope\n    7 |   vector<string> prefixes;\n\
    \      |   ^~~~~~\n/tmp/tmpy857dt39.cpp:7:3: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy857dt39.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy857dt39.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpy857dt39.cpp:7:18:\
    \ error: \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    7 |   vector<string> prefixes;\n      |             \
    \     ^~~~~~~~\n      |                  all_prefixes\n"
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    // iterate over all substrings of the input string starting at\
    \ the first character\n    for (int i = 0; i < string.length(); ++i) {\n     \
    \   result.push_back(string);\n    }\n    // iterate over all substrings of the\
    \ input string starting at the second character\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        for (int j = i + 1; j < string.length(); ++j) {\n          \
    \  result.push_back(string[i] + string[j]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04jdxqcu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp04jdxqcu.cpp:15:51: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   15 |             result.push_back(string[i] + string[j]);\n      |      \
    \                                             ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp04jdxqcu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      | "
  stdout: ''
  timestamp: 1660141281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Your\
    \ code here\n  \n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpzzunc4t_: /tmp/tmpzzunc4t_.cpp:12: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size() + 1);\n    for (size_t i = 0;\
    \ i < string.size(); ++i) {\n        auto pos = string.find(string[i]);\n    \
    \    while (pos != string::npos) {\n            prefixes.emplace_back(string.substr(0,\
    \ i));\n            pos = string.find(string[i], pos + 1);\n        }\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmv5nfqon.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmv5nfqon.cpp:11:23: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   11 |         while\
    \ (pos != string::npos) {\n      |                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  \n  // If string length is 0 or less than or equal to 1, return\
    \ empty prefix vector\n  if(string.length() <= 1) return prefixes;\n  \n  // Iterate\
    \ through every character of the input string \n  for(auto itr = string.rbegin();\
    \ itr != string.rend(); itr++){\n    // Iterate through every prefix character\
    \ from shortest to longest\n    for(auto it1 = prefixes.rbegin(); it1 != prefixes.rend();\
    \ it1++){\n      // If a prefix character is found that matches the current character\
    \ of the input, \n      // then add the current prefix character to current prefix\
    \ vector\n      if(*itr == *it1) prefixes.push_back(*it1);\n    }\n  }\n  \n \
    \ return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7g6uywmn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7g6uywmn.cpp:18:15: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   18 |       if(*itr == *it1) prefixes.push_back(*it1);\n      |         \
    \ ~~~~ ^~ ~~~~\n      |          |       |\n      |          char    std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7g6uywmn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7g6uywmn.cpp:18:19:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   18 |       if(*itr == *it1) prefixes.push_back(*it1);\n\
    \      |                   ^~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7g6uywmn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7g6uywmn.cpp:18:19: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   18 |       if(*itr ==\
    \ *it1) prefixes.push_back(*it1);\n   "
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    if (string.empty())\n        return prefixes;\n    std::vector<std::size_t>\
    \ indices(string.size());\n    for (std::size_t i = 0; i < string.size(); i++)\n\
    \        indices[i] = i;\n    indices.back() = string::npos; // sentinel, marks\
    \ end of string\n    for (std::size_t i = 0; i < string.size(); i++)\n       \
    \ indices.push_back(indices[i] + 1);\n    std::sort(indices.begin(), indices.end(),\
    \ [&](std::size_t a, std::size_t b) {\n        return string[a] < string[b];\n\
    \    });\n    for (std::size_t i = 0; i < indices.size() - 1; i++)\n        prefixes.push_back(string.substr(indices[i],\
    \ indices[i + 1] - indices[i]));\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd42os1gb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpd42os1gb.cpp:13:22: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   13 |     indices.back()\
    \ = string::npos; // sentinel, marks end of string\n      |                  \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1660141281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(\"\");\n    for (size_t i = 1; i < string.size();\
    \ i++) {\n        prefixes.push_back(string[i - 1] + string[i]);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wn0wo76.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9wn0wo76.cpp:10:53: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   10 |         prefixes.push_back(string[i - 1] + string[i]);\n      |    \
    \                                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9wn0wo76.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n    "
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    result.reserve(string.size());\n    for (std::string::const_iterator\
    \ it = string.begin(); it != string.end(); ++it)\n        for (std::string::const_iterator\
    \ it2 = string.begin(); it2 != it; ++it2)\n            result.push_back(std::string{*it,\
    \ *it2});\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpcr2e3z3p: /tmp/tmpcr2e3z3p.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Make array of pairs from first letter to all letters except first letter\n \
    \   std::vector<std::pair<std::string,std::string>> letters(string.begin(),string.end()-1);\n\
    \    // Initialize vector of all prefixes\n    std::vector<std::string> prefixes;\n\
    \    // Loop through all pairs and add them to the vector\n    for (std::pair<std::string,std::string>\
    \ pair : letters) {\n        prefixes.push_back(pair.first);\n        prefixes.push_back(pair.second);\n\
    \    }\n    // Return vector of all prefixes\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpcq594luf.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >*]\u2019:\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _ForwardIterator\
    \ = std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >*; _Tp = std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:   required from \u2018\
    void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator, _ForwardIterator,\
    \ std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >; _Alloc = std::allocator<s"
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  size_t i = 0;\n  size_t j =\
    \ 0;\n  for (; string[i] != '\\0'; i++, j++) {\n    prefixes.push_back(string[j]);\n\
    \  }\n  j++;\n  for (; string[i] != '\\0'; i++, j++) {\n    prefixes.push_back(string[j]);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84lv7yit.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp84lv7yit.cpp:12:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |     prefixes.push_back(string[j]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp84lv7yit.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    int i = string.length() - 1;\n    while (i >= 0) {\n        prefixes.push_back(string.substr(i,\
    \ string.length()));\n        i = i - 1;\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpalodigc3: /tmp/tmpalodigc3.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  string\
    \ prefix = string;\n  std::vector<std::string> prefixes;\n  while (prefix.size()\
    \ > 0) {\n    prefixes.push_back(prefix);\n    prefix = prefix.substr(0, prefix.size()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3k6y4f1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb3k6y4f1.cpp:7:9: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n    7 |   string prefix = string;\n\
    \      |         ^~~~~~~\n      |         ;\n/tmp/tmpb3k6y4f1.cpp:9:10: error:\
    \ \u2018prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n    9 |   while (prefix.size() > 0) {\n      |          ^~~~~~\n      |   \
    \       prefixes\n"
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(std::string());\n    for (char c : string)\n\
    \        for (char pc : all_prefixes(string)) {\n            if (c == pc) {\n\
    \                prefixes.push_back(pc);\n                break;\n           \
    \ }\n        }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpysj8was1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpysj8was1.cpp:10:43: error: cannot\
    \ convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018char\u2019 in\
    \ initialization\n   10 |         for (char pc : all_prefixes(string)) {\n   \
    \   |                                           ^\n/tmp/tmpysj8was1.cpp:12:38:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   12 |                 prefixes.push_back(pc);\n\
    \      |                                      ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpysj8was1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known con"
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefix;\n  for (const auto &str : string) {\n    prefix.emplace_back(std::string(str));\n\
    \  }\n  while (prefix.back().size() >= string) {\n    prefix.pop_back();\n  }\n\
    \  return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpal0v46p4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpal0v46p4.cpp:9:40: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(const\
    \ char&)\u2019\n    9 |     prefix.emplace_back(std::string(str));\n      |  \
    \                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpal0v46p4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpal0v46p4.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8:\
    \   required by substitution of \u2018template<class _CharT, class _Traits, class"
  stdout: ''
  timestamp: 1660141282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::string\
    \ prefix = \"\";\n  std::vector<std::string> result;\n  while (!string.empty())\
    \ {\n    prefix = prefix + string[0];\n    result.push_back(prefix);\n    string\
    \ = string.substr(1);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0; i <= string.size(); ++i) {\n        std::string\
    \ prefix = string;\n        while (i + 1 < string.size() && string[i] == string[i\
    \ + 1]) {\n            prefix = prefix + (i + 1);\n            ++i;\n        }\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnx_zpreq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnx_zpreq.cpp:11:29: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018size_t\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   11 |             prefix = prefix + (i + 1);\n     \
    \ |                      ~~~~~~ ^ ~~~~~~~\n      |                      |    \
    \       |\n      |                      |           size_t {aka long unsigned\
    \ int}\n      |                      std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnx_zpreq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnx_zpreq.cpp:11:37:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018size_t\u2019 {aka \u2018long unsigned int\u2019}\n   11 |        \
    \     prefix = prefix + (i + 1);\n      |                                    \
    \ ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n      \
    \           from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnx_zpreq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typena"
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  size_t string_length = string.length();\n  size_t current_length\
    \ = 0;\n  while (current_length != string_length) {\n    if (string[current_length]\
    \ == '.') {\n      current_length++;\n      continue;\n    }\n    prefixes.push_back(string{current_length,\
    \ string.length()});\n    current_length++;\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpps7rf13m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpps7rf13m.cpp:15:30: error: expected\
    \ \u2018)\u2019 before \u2018{\u2019 token\n   15 |     prefixes.push_back(string{current_length,\
    \ string.length()});\n      |                       ~      ^\n      |        \
    \                      )\n"
  stdout: ''
  timestamp: 1660141282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (int i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string(i, string[i]));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputa6mu5j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmputa6mu5j.cpp:7:3: error: \u2018\
    vector\u2019 was not declared in this scope\n    7 |   vector<std::string> prefixes;\n\
    \      |   ^~~~~~\n/tmp/tmputa6mu5j.cpp:7:3: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmputa6mu5j.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmputa6mu5j.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmputa6mu5j.cpp:7:21:\
    \ error: expected primary-expression before \u2018>\u2019 token\n    7 |   vector<std::string>\
    \ prefixes;\n      |                     ^\n/tmp/tmputa6mu5j.cpp:7:23: error:\
    \ \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018all_prefixes\u2019\
    ?\n    7 |   vector<std::string> prefixes;\n      |                       ^~~~~~~~\n\
    \      |                       all_prefixes\n/tmp/tmputa6mu5j.cpp:10:43: error:\
    \ no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (int&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   10 |     prefixes.push_back(string(i, string[i]));\n      |             \
    \                              ^\n"
  stdout: ''
  timestamp: 1660141283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    \n    // If string is empty or if all characters are the same\n  \
    \  // then return empty vector\n    if (string.length() == 0 || string.size()\
    \ == 1) return ret;\n    \n    // Find the longest string prefix\n    size_t longest\
    \ = 0, i = string.length() - 1;\n    for (; i >= 0; i--) if (string[i] == string[longest])\
    \ longest = i;\n    \n    // Construct prefix vector\n    for (; longest < string.length();\
    \ longest++) ret.push_back(string[longest]);\n    return ret;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88s_53dw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp88s_53dw.cpp:18:79: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   18 |     for (; longest < string.length(); longest++)\
    \ ret.push_back(string[longest]);\n      |                                   \
    \                                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp88s_53dw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion"
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if\
    \ (string.empty()) return {std::string(\"\")};\n    \n    std::string prefix;\n\
    \    std::vector<std::string> results;\n    \n    // If there is only one character,\
    \ return only that\n    if (string.length() <= 1) return {string};\n    \n   \
    \ // Loop through all characters of input string\n    for (int i = 0; i < string.length();\
    \ i++) {\n        // If character at index i is not a letter, skip it\n      \
    \  if (string[i] >= 'A' && string[i] <= 'Z' || string[i] >= 'a' && string[i] <=\
    \ 'z') continue;\n        \n        // Otherwise, set prefix to character at index\
    \ i\n        prefix = string[i];\n        \n        // If prefix is empty, remove\
    \ prefix from results vector\n        if (prefix.empty()) {\n            prefix\
    \ = results.back();\n            results.pop_back();\n        }\n        \n  \
    \      // Otherwise, add prefix to results vector\n        else results.push_back(prefix);\n\
    \    }\n    \n    return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpatzxvz5p: /tmp/tmpatzxvz5p.cpp:37: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::stack<std::string>\
    \ stack;\n    stack.push(string);\n    std::vector<std::string> prefixes;\n  \
    \  while (!stack.empty()) {\n        std::string prefix = stack.top();\n     \
    \   stack.pop();\n        if (!prefix.empty()) prefixes.push_back(prefix);\n \
    \       for (auto &c : prefix) {\n            stack.push(c);\n        }\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesx9s9o0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpesx9s9o0.cpp:15:25: error: no matching\
    \ function for call to \u2018std::stack<std::__cxx11::basic_string<char> >::push(char&)\u2019\
    \n   15 |             stack.push(c);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpesx9s9o0.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660141282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  // Initialize prefix to empty string\n  std::string prefix = \"\"\
    ;\n  // Loop until either empty prefix or end of string\n  while (!string.empty())\
    \ {\n    // Copy each character of the prefix to the output\n    result.push_back(prefix);\n\
    \    // Replace prefix with next character in string\n    prefix = string[0];\n\
    \    // Remove the prefix from string\n    string = string.substr(1);\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf2sdigxp: /tmp/tmpf2sdigxp.cpp:24: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    if (string.empty()) {\n        return result;\n    }\n    auto\
    \ len = string.length();\n    for (auto i = 0; i < len; i++) {\n        // If\
    \ all chars before the current one are repeated, then we know that prefix of current\
    \ character is going to be unique.\n        if (i != 0 && !string.substr(0, i).compare(string.substr(0,\
    \ i)) == 0) {\n            result.push_back(string);\n            break;\n   \
    \     }\n        // If not all chars before the current one are repeated, then\
    \ current char is repeating from longest to shortest, so the prefix of current\
    \ char is unique.\n        else if (i != 0) {\n            result.push_back(string.substr(0,\
    \ i));\n        }\n        // If first char of the string is not repeating itself\n\
    \        else if (i == 0) {\n            result.push_back(string.substr(0, i));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmef8o1xj: /tmp/tmpmef8o1xj.cpp:32: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefix;\n  std::vector<std::string> temp;\n  int size = string.size();\n  for\
    \ (int i = 0; i < size; i++) {\n    temp.push_back(string[i]);\n  }\n  for (int\
    \ i = size; i >= 0; i--) {\n    prefix.push_back(temp[i]);\n  }\n  return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyco2tllk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpyco2tllk.cpp:11:29: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |     temp.push_back(string[i]);\n      | \
    \                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyco2tllk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka "
  stdout: ''
  timestamp: 1660141283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ res;\n    res.reserve(string.size() + 1);\n    for (auto i : string) res.emplace_back(std::string(1,\
    \ i));\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppohv37il: /tmp/tmppohv37il.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if\
    \ (string.length() == 0)\n        return {};\n    std::vector<std::string> result;\n\
    \    result.reserve(string.length());\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        for (size_t j = i; j < string.length(); ++j) {\n           \
    \ result.push_back(string[static_cast<int>(i)] + string[static_cast<int>(j)]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvaccrd5m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpvaccrd5m.cpp:13:87: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   13 |             result.push_back(string[static_cast<int>(i)] + string[static_cast<int>(j)]);\n\
    \      |                                                                     \
    \                  ^\nIn file included from /usr/include/c++/9/vector:67,\n  \
    \               from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvaccrd5m.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::bas"
  stdout: ''
  timestamp: 1660141283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  auto prefix_len = string.size();\n  for (auto i = 0ul; i < prefix_len;\
    \ ++i) {\n    for (auto j = i; j < prefix_len; ++j) {\n      prefixes.emplace_back(string.substr(i,\
    \ j));\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2tz5kqgp: /tmp/tmp2tz5kqgp.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    if (string.length() == 0) return prefixes;\n    std::vector<std::string>\
    \ result;\n    prefixes.push_back(string[0]);\n    for (int i = 1; i < string.length();\
    \ i++) {\n        result.push_back(std::string(1, string[i]));\n        result.push_back(prefixes.back()\
    \ + std::string(1, string[i]));\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpicfp7zvq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpicfp7zvq.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpicfp7zvq.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.size()\
    \ > 0);\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n    prefixes.back().push_back(string[i]);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_opa69rk: /tmp/tmp_opa69rk.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    size_t len = string.length();\n    // If the input string is\
    \ empty, return empty vector\n    if (len == 0)\n        return prefixes;\n  \
    \  // If the input string is length 1 return empty vector\n    if (len == 1)\n\
    \        return prefixes;\n    // Initialize a vector of string with len-1 element\n\
    \    // Initialize first and last elements as empty strings\n    std::vector<std::string>\
    \ strings(len - 1);\n    strings[0] = \"\";\n    strings[len - 1] = \"\";\n  \
    \  // Initialize two iterators to traverse the strings\n    size_t i = 0, j =\
    \ len - 1;\n    // Do the prefix calculations\n    while (i <= j) {\n        //\
    \ If current character is last character\n        if (i == j) {\n            //\
    \ Add the current prefix to prefix vector\n            prefixes.push_back(strings[i]);\n\
    \            // Increment j to skip this character\n            ++j;\n       \
    \ }\n        else {\n            // Increment i to skip this character\n     \
    \       ++i;\n            // Increment j to skip this character\n            ++j;\n\
    \            // Get the current prefix string\n            std::string prefix\
    \ = strings[i];\n            // Add prefix to the prefix vector\n            prefixes.push_back(prefix);\n\
    \            // Get next prefix string\n            std::string next = strings[j];\n\
    \            // If next prefix string is not empty\n            if (!next.empty())\
    \ {\n                // Get the previous prefix string\n                std::string\
    \ prevPre = strings[i - 1];\n                // If the current prefix string is\
    \ not prefix of the next prefix string\n                // Then add the current\
    \ prefix and next prefix string to the strings vector\n                if (!prevPre.compare(prefix))\
    \ {\n                    // Add the current prefix and next prefix string to the\
    \ strings vector\n                    strings[j] = prefix + next;\n          \
    \          // Increment j to skip next character\n                    ++j;\n \
    \                   // Decrement i to skip next character\n                  \
    \  --i;\n                }\n                // Else, add the current prefix and\
    \ next prefix string to the strings vector\n                else\n           \
    \         strings[j] = prefix + next;\n                // Increment j to skip\
    \ next character\n                ++j;\n            }\n            // Else, add\
    \ the current prefix and next prefix string to the strings vector\n          \
    \  else {\n                strings[j] = prefix + next;\n                ++j;\n\
    \            }\n        }\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (char prefix : string) {\n        std::string prefix = prefix\
    \ + \"\";\n        prefixes.push_back(prefix);\n        for (char prefix : all_prefixes(prefix))\
    \ {\n            std::string prefix = prefix + \"\";\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78mk66y4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp78mk66y4.cpp:9:21: error: redeclaration\
    \ of \u2018std::string prefix\u2019\n    9 |         std::string prefix = prefix\
    \ + \"\";\n      |                     ^~~~~~\n/tmp/tmp78mk66y4.cpp:8:15: note:\
    \ \u2018char prefix\u2019 previously declared here\n    8 |     for (char prefix\
    \ : string) {\n      |               ^~~~~~\n/tmp/tmp78mk66y4.cpp:11:47: error:\
    \ cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018char\u2019\
    \ in initialization\n   11 |         for (char prefix : all_prefixes(prefix))\
    \ {\n      |                                               ^\n/tmp/tmp78mk66y4.cpp:12:25:\
    \ error: redeclaration of \u2018std::string prefix\u2019\n   12 |            \
    \ std::string prefix = prefix + \"\";\n      |                         ^~~~~~\n\
    /tmp/tmp78mk66y4.cpp:11:19: note: \u2018char prefix\u2019 previously declared\
    \ here\n   11 |         for (char prefix : all_prefixes(prefix)) {\n      |  \
    \                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660141283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (auto first = string.begin(); first != string.end();) {\n\
    \        prefixes.push_back({string.substr(first, string.length())});\n      \
    \  first = string.find_first_of(*first, first);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_sy3lqxk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_sy3lqxk.cpp:9:43: error: cannot\
    \ convert \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019}\n    9 |         prefixes.push_back({string.substr(first,\
    \ string.length())});\n      |                                           ^~~~~\n\
    \      |                                           |\n      |                \
    \                           __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\nIn file included from /usr/include/c++/9/string:55,\n                 from\
    \ /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_sy3lqxk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2838:24: note:\
    \   initializing argument 1 of \u2018std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::substr(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2838 |       substr(size_type __pos = 0, size_type __n = npos)\
    \ const\n      |              ~~~~~~~~~~^~~~~~~~~\n/tmp/tmp_sy3lqxk.cpp:9:67:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(<brace-enclosed initializer list>)\u2019\n    9 |         prefixes.push_back({string.substr(first,\
    \ string.length())"
  stdout: ''
  timestamp: 1660141283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    for (std::string::size_type i = 0; i < string.length(); i++)\
    \ {\n        for (std::string::size_type j = i; j < string.length(); j++) {\n\
    \            prefixes.emplace_back(string.substr(i, j));\n        }\n    }\n\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpoo7v1bim: /tmp/tmpoo7v1bim.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Store prefix strings in vector\n    std::vector<std::string> result;\n    \n\
    \    // Store the characters that form the prefix into stack\n    std::stack<char>\
    \ stack;\n    \n    // Add characters to the stack to form prefix strings\n  \
    \  for (int i = 0; i < string.size(); i++) {\n        // If the character matches\
    \ the top of the stack, add to result vector\n        if (string[i] == stack.top())\
    \ {\n            result.push_back(std::string(stack.top(), i));\n            \n\
    \            // Remove the character that was added from stack\n            stack.pop();\n\
    \        }\n        // Push character on to stack\n        else {\n          \
    \  stack.push(string[i]);\n        }\n    }\n    // Push the remaining characters\
    \ on the stack\n    while (!stack.empty()) {\n        result.push_back(std::string(stack.top(),\
    \ stack.size()));\n        stack.pop();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ retval;\n  retval.push_back(\"\");\n  retval.push_back(string.substr(0, 1));\n\
    \  auto last = retval.back();\n  for (auto i = string.begin() + 1; i < string.end();\
    \ ++i) {\n    if (string[i] != last) {\n      retval.push_back(string.substr(0,\
    \ i - 1));\n      last = string[i];\n    }\n  }\n  return retval;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaz33ifpq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpaz33ifpq.cpp:12:15: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019)\n   12 |     if (string[i] != last)\
    \ {\n      |               ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaz33ifpq.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1050:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ = const char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1050 |       operator[] (size_type __pos) const\
    \ _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1050:29:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1050 |       operator[] (size_type __pos)\
    \ const _GLIBCXX_NOEXCEPT\n      |                   ~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:1067:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_Cha"
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < (int) string.size(); ++i) {\n    std::string\
    \ temp = string(0,i) + string(1,string.size() - i);\n    prefixes.push_back(temp);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshighp8h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpshighp8h.cpp:9:34: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int,\
    \ size_t&)\u2019\n    9 |     std::string temp = string(0,i) + string(1,string.size()\
    \ - i);\n      |                                  ^\n/tmp/tmpshighp8h.cpp:9:64:\
    \ error: no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (int, std::__cxx11::basic_string<char>::size_type)\u2019\n    9 |     std::string\
    \ temp = string(0,i) + string(1,string.size() - i);\n      |                 \
    \                                               ^\n"
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ output;\n  output.reserve(string.size());\n  for (size_t i = 0, imax = string.size();\
    \ i < imax; ++i) {\n    for (size_t j = i; j < imax; ++j) {\n      output.push_back(string.substr(i,\
    \ j));\n    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpeekrkl18: /tmp/tmpeekrkl18.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141284
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    int length = 0;\n    do {\n        result.push_back(string);\n\
    \        length = string.length();\n    } while (length >= string.length());\n\
    \    while (length-- > 0) {\n        string += string[0];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141289
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  // Base case: empty string\n  if (string.empty()) {\n    return\
    \ prefixes;\n  }\n\n  // If the first character does not match the first character\
    \ of the\n  // previous string, then we have a new prefix\n  std::string prefix\
    \ = string;\n  if (prefix[0] != string[0]) {\n    prefix = prefix + string[0];\n\
    \    prefixes.push_back(prefix);\n  }\n\n  // If we started with a prefix and\
    \ are still checking prefixes from the\n  // start to the end, add the longest\
    \ prefix we found\n  for (size_t i = 1;; ++i) {\n    std::string suffix = prefix\
    \ + string[i];\n    // If we've found a shorter prefix, append it to the vector\n\
    \    if (suffix[0] == prefix[0] && suffix.length() < prefix.length()) {\n    \
    \  prefix.swap(suffix);\n      prefixes.push_back(prefix);\n    }\n    // Else,\
    \ we're done checking prefixes, so we're done\n    else if (suffix.length() <\
    \ prefix.length()) {\n      break;\n    }\n    // Otherwise, prepend the prefix\
    \ (this could happen when all were\n    // checking were the prefix from the start\
    \ of the string\n    else {\n      prefix.swap(suffix);\n    }\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.length()\
    \ >= 1);\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    std::string prefix(string.begin(), string.begin() + i);\n    prefixes.emplace_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpaad30xuj: /tmp/tmpaad30xuj.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.length() >= 1'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Use\
    \ bitset for optimal performance\n  std::vector<std::bitset<64>> prefixes(string.length()\
    \ + 1);\n  for (int i = 0; i < string.length(); i++) {\n    prefixes[string[i]].set(i);\n\
    \  }\n  std::vector<std::string> result;\n  result.reserve(prefixes.size());\n\
    \  for (std::size_t i = 0; i <= string.length(); i++) {\n    result.push_back(std::string(1,\
    \ i));\n  }\n  while (!prefixes.empty()) {\n    auto it = std::max_element(prefixes.begin(),\
    \ prefixes.end());\n    std::size_t index = it->index;\n    prefixes.erase(it);\n\
    \    result.push_back(std::string(string[index], index));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfff9pnwa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfff9pnwa.cpp:19:29: error: \u2018\
    class std::bitset<64>\u2019 has no member named \u2018index\u2019\n   19 |   \
    \  std::size_t index = it->index;\n      |                             ^~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfff9pnwa.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::bitset<64>*,\
    \ std::vector<std::bitset<64> > >; _Iterator2 = __gnu_cxx::__normal_iterator<std::bitset<64>*,\
    \ std::vector<std::bitset<64> > >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5698:12:\
    \   required from \u2018constexpr _ForwardIterator std::__max_element(_ForwardIterator,\
    \ _ForwardIterator, _Compare) [with _ForwardIterator = __gnu_cxx::__normal_iterator<std::bitset<64>*,\
    \ std::vector<std::bitset<64> > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:5722:43:   required from \u2018constexpr\
    \ _FIter std::max_element(_FIter, _FIter) [with _FIter = __gnu_cxx::__normal_iterator<std::bitset<64>*,\
    \ std::vector<std::bitset<64> > >]\u2019\n/tmp/tmpfff9pnwa.cpp:18:64:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23: error: no match for\
    \ \u2018operator<\u2019 (operand types are \u2018std::bitset<64>\u2019 and \u2018\
    std::bitset<64>\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |   \
    \             ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfff9pnwa.cpp:2:\n"
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.length() == 0) return prefixes;\n  auto prefix_search\
    \ = std::search(string.begin(), string.end(), string[0]);\n  while (prefix_search\
    \ != string.end()) {\n    prefixes.emplace_back(string.substr(0, prefix_search));\n\
    \    prefix_search = std::search(\n        prefix_search + 1,\n        string.end(),\n\
    \        string[prefix_search + 1],\n        prefix_search);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66ap7r4m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp66ap7r4m.cpp:11:44: error: cannot\
    \ convert \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019}\n   11 |     prefixes.emplace_back(string.substr(0, prefix_search));\n\
    \      |                                            ^~~~~~~~~~~~~\n      |   \
    \                                         |\n      |                         \
    \                   __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\nIn file included from /usr/include/c++/9/string:55,\n                 from\
    \ /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp66ap7r4m.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2838:45: note:\
    \   initializing argument 2 of \u2018std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::substr(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2838 |       substr(size_type __pos = 0, size_type __n = npos)\
    \ const\n      |                                   ~~~~~~~~~~^~~~~~~~~~\n/tmp/tmp66ap7r4m.cpp:15:15:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_stri"
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ res;\n  std::string tmp = string;\n  do {\n    res.push_back(tmp);\n  } while\
    \ (std::next_permutation(tmp.begin(), tmp.end()));\n  return res;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpxujm1fhl: /tmp/tmpxujm1fhl.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string[i\
    \ - 1]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjhec4u8m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjhec4u8m.cpp:9:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     prefixes.push_back(string[i - 1]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjhec4u8m.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_"
  stdout: ''
  timestamp: 1660141284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n\tstd::vector<std::string>\
    \ output;\n\tfor (int i = 0; i < string.size(); i++) {\n\t\toutput.push_back(string(string.begin()+i,\
    \ string.begin()+i+1));\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmoevd_9l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmoevd_9l.cpp:9:63: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >)\u2019\n    9 |   output.push_back(string(string.begin()+i, string.begin()+i+1));\n\
    \      |                                                               ^\n"
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string longest = string;\n    int prefix_length = 0;\n \
    \   for (int i = 0; i < string.length(); ++i) {\n        for (int j = i; j < string.length();\
    \ ++j) {\n            if (string[i] == string[j] && i + 1 < string.length() &&\
    \ string[i + 1] == string[j + 1]) {\n                ++i;\n                ++j;\n\
    \                continue;\n            }\n            if (i == j) continue;\n\
    \            std::string sub = string.substr(i, j + 1);\n            if (sub.length()\
    \ > longest.length()) {\n                longest = sub;\n                prefix_length\
    \ = j - i;\n            }\n        }\n    }\n    prefixes.push_back(longest);\n\
    \    for (int i = 0; i < string.length(); ++i) {\n        for (int j = i; j <\
    \ string.length(); ++j) {\n            if (string[i] == string[j] && i + 1 < string.length()\
    \ && string[i + 1] == string[j + 1]) {\n                ++i;\n               \
    \ ++j;\n                continue;\n            }\n            if (i == j) continue;\n\
    \            std::string sub = string.substr(i, j + 1);\n            if (prefix_length\
    \ > sub.length()) {\n                prefixes.push_back(sub);\n            }\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4rj0pabu: /tmp/tmp4rj0pabu.cpp:44: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ prefix = string[0];\n    std::vector<std::string> prefixes(1, prefix);\n   \
    \ for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string[i\
    \ - 1] + prefix);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7sh575d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpz7sh575d.cpp:8:48: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::vector(int,\
    \ char&)\u2019\n    8 |     std::vector<std::string> prefixes(1, prefix);\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz7sh575d.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpz7sh575d.cpp:8:48: note:   deduced conflicting types for parameter\
    \ \u2018_InputIterator\u2019 (\u2018int\u2019 and \u2018char\u2019)\n    8 | \
    \    std::vector<std::string> prefixes(1, prefix);\n      |                  \
    \                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz7sh575d.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n  6"
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  if (string == \"\") {\n    return result;\n  }\n  else if (string.length()\
    \ == 1) {\n    return {string};\n  }\n  else if (string.length() > 2) {\n    std::vector<std::string>\
    \ prefix = all_prefixes(string.substr(1));\n    for (std::string prefix : prefix)\
    \ {\n      result.push_back(prefix + \"|\" + string.substr(0, prefix.length()));\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfn2cxhwq: /tmp/tmpfn2cxhwq.cpp:25: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    int len = string.length();\n    for (int i = 0; i < len; i++) {\n\
    \        int prefix_len = i;\n        while (string.at(prefix_len) != '\\0') {\n\
    \            prefix_len++;\n        }\n        result.push_back(string.substr(0,\
    \ prefix_len));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 6) >= this->size() (which is 6)\n"
  stdout: ''
  timestamp: 1660141285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ prefix = string[0];\n    std::vector<std::string> prefixes;\n    for (size_t\
    \ i = 1; i < string.size(); ++i) {\n        prefixes.push_back((prefix + string.substr(i,\
    \ 1)));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp7ujtovl: /tmp/tmpp7ujtovl.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Use\
    \ a map to store the prefix string\n  std::string prefix;\n  std::map<std::string,\
    \ std::string> prefix_map;\n\n  // Add the first prefix string\n  prefix_map[\"\
    \"] = string;\n\n  // For each string in the string, add all its prefixes\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefix = prefix_map.at(string.substr(0,\
    \ i));\n\n    // If prefix doesn't exist in the map, add the prefix string and\
    \ set\n    // the prefix string as the current prefix string\n    if (prefix.empty())\
    \ prefix = string;\n    prefix_map[i] = prefix;\n  }\n\n  // Return the prefix\
    \ strings in a vector\n  std::vector<std::string> result(prefix_map.size());\n\
    \  for (std::map<std::string, std::string>::iterator it = prefix_map.begin();\n\
    \       it != prefix_map.end(); ++it) {\n    result[prefix_map.size() - 1 - it->second.size()]\
    \ = it->second;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqc8lwbs0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqc8lwbs0.cpp:21:15: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 and \u2018size_t\u2019 {aka \u2018\
    long unsigned int\u2019})\n   21 |     prefix_map[i] = prefix;\n      |      \
    \         ^\nIn file included from /usr/include/c++/9/map:61,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n             \
    \    from /tmp/tmpqc8lwbs0.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7: note:\
    \ candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34: note:\
    \   no known conversion for argument 1 from \u2018size_t\u2019 {aka \u2018long\
    \ unsigned int\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ retval;\n    size_t max_index = string.size() - 1;\n    size_t min_index = 0;\n\
    \    char temp;\n    while(min_index <= max_index) {\n        temp = string[min_index];\n\
    \        retval.push_back(temp);\n        min_index++;\n        if(min_index ==\
    \ max_index) {\n            string copy = string.substr(min_index);\n        \
    \    retval.push_back(copy);\n        }\n    }\n    return retval;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb78h1_g8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb78h1_g8.cpp:13:30: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   13 |         retval.push_back(temp);\n      |                           \
    \   ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpb78h1_g8.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ res;\n  if (string.empty()) {\n    return res;\n  }\n  res.push_back(string(string.begin(),\
    \ string.end()));\n  size_t mid = res.size() / 2;\n  for (size_t i = mid; i >\
    \ 0; i--) {\n    std::string first = res[mid--];\n    std::string second = res[mid--];\n\
    \    string first = first.length() > second.length() ? first : second;\n    res.push_back(string(1,\
    \ first[0]));\n  }\n  return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqtwq5_x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmptqtwq5_x.cpp:11:52: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   11 |   res.push_back(string(string.begin(),\
    \ string.end()));\n      |                                                   \
    \ ^\n/tmp/tmptqtwq5_x.cpp:16:11: error: expected \u2018;\u2019 before \u2018first\u2019\
    \n   16 |     string first = first.length() > second.length() ? first : second;\n\
    \      |           ^~~~~~\n      |           ;\n/tmp/tmptqtwq5_x.cpp:17:37: error:\
    \ no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (int, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   17 |     res.push_back(string(1, first[0]));\n      |                   \
    \                  ^\n"
  stdout: ''
  timestamp: 1660141284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  std::string prefix = \"\";\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    if (i > 0 && string[i] == '.') {\n      // Add the previous prefix\
    \ to the vector if it is not empty.\n      prefixes.push_back(prefix);\n     \
    \ prefix = \"\";\n    }\n    prefix = prefix + string[i];\n  }\n  prefixes.push_back(prefix);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmps6g8oxty: /tmp/tmps6g8oxty.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (size_t i = 0; i <\
    \ string.size(); ++i) {\n        for (size_t j = i; j < string.size(); ++j) {\n\
    \            prefixes.push_back(string[j]);\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdhn48xlr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdhn48xlr.cpp:11:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |             prefixes.push_back(string[j]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhn48xlr.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefix;\n  prefix.push_back(string[0]);\n  for (size_t i = 1; i < string.length();\
    \ ++i) {\n    for (size_t j = 0; j < prefix.size(); ++j) {\n      if (string[i]\
    \ == prefix[j]) {\n        prefix.push_back(std::string(1, string[i]));\n    \
    \    prefix.back().push_back(i);\n        break;\n      }\n    }\n  }\n  return\
    \ prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg17y_n4v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpg17y_n4v.cpp:8:29: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    8 |   prefix.push_back(string[0]);\n      | \
    \                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg17y_n4v.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  string\
    \ current_prefix;\n  std::vector<std::string> prefixes;\n  for (int i = 0; i <\
    \ string.length(); ++i) {\n    current_prefix = current_prefix + string[i];\n\
    \    if (current_prefix.length() > string.length())\n      prefixes.push_back(current_prefix);\n\
    \    else if (current_prefix.length() == string.length())\n      prefixes.push_back(current_prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdzhiknv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprdzhiknv.cpp:7:9: error: expected\
    \ \u2018;\u2019 before \u2018current_prefix\u2019\n    7 |   string current_prefix;\n\
    \      |         ^~~~~~~~~~~~~~~\n      |         ;\n/tmp/tmprdzhiknv.cpp:10:5:\
    \ error: \u2018current_prefix\u2019 was not declared in this scope\n   10 |  \
    \   current_prefix = current_prefix + string[i];\n      |     ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    // iterate over string\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        // iterate over substring\n        for (int j = i; j < string.length()\
    \ && string[i] == string[j]; ++j) {\n            // add prefix to prefix vector\n\
    \            std::string prefix = string.substr(i, j);\n            if (prefixes.find(prefix)\
    \ == prefixes.end()) prefixes.push_back(prefix);\n        }\n    }\n\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05yry7_n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp05yry7_n.cpp:15:26: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018find\u2019\n   15 |             if (prefixes.find(prefix) == prefixes.end())\
    \ prefixes.push_back(prefix);\n      |                          ^~~~\n"
  stdout: ''
  timestamp: 1660141285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  for (size_t i = 0; i < string.length(); ++i) {\n    size_t prefix_len\
    \ = string.length() - i - 1;\n    if (string[i] == '.' || string[i] == '-') {\n\
    \      prefixes.emplace_back(std::string(string.data() + i, prefix_len));\n  \
    \  }\n  }\n\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpg1lfodh9: /tmp/tmpg1lfodh9.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (auto it = string.begin(); it != string.end(); ++it)\n  \
    \      for (auto it2 = string.begin(); it2 != it; ++it2)\n            for (auto\
    \ it3 = string.begin(); it3 != it2; ++it3)\n                prefixes.push_back(std::string(*it,\
    \ *it2, *it3));\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnepkhztx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnepkhztx.cpp:11:63: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(char&,\
    \ char&, char&)\u2019\n   11 |                 prefixes.push_back(std::string(*it,\
    \ *it2, *it3));\n      |                                                     \
    \          ^\nIn file included from /usr/include/c++/9/string:55,\n          \
    \       from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnepkhztx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnepkhztx.cpp:11:63:\
    \ note:   candidate expects 2 arguments, 3 provided\n   11 |                 prefixes.push_back(std::string(*it,\
    \ *it2, *it3));\n      |                                                     \
    \          ^\nIn file included from /usr/include/c++/9/string:55,\n          \
    \       from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    int len = string.length();\n    vector<bool> isPrefix(len, true);\n\
    \    for (int i = 0; i <= len; i++) {\n        for (int j = i; j < len; j++)\n\
    \            if (string[j] == string[i]) {\n                isPrefix[j] = false;\n\
    \                break;\n            }\n        if (isPrefix[i]) result.push_back(string(&string[i],\
    \ i - 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfuonjq6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjfuonjq6.cpp:9:5: error: \u2018\
    vector\u2019 was not declared in this scope\n    9 |     vector<bool> isPrefix(len,\
    \ true);\n      |     ^~~~~~\n/tmp/tmpjfuonjq6.cpp:9:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfuonjq6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfuonjq6.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpjfuonjq6.cpp:9:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n    9 |     vector<bool>\
    \ isPrefix(len, true);\n      |            ^~~~\n/tmp/tmpjfuonjq6.cpp:13:17: error:\
    \ \u2018isPrefix\u2019 was not declared in this scope\n   13 |               \
    \  isPrefix[j] = false;\n      |                 ^~~~~~~~\n/tmp/tmpjfuonjq6.cpp:16:13:\
    \ error: \u2018isPrefix\u2019 was not declared in this scope\n   16 |        \
    \ if (isPrefix[i]) result.push_back(string(&string[i], i - 1));\n      |     \
    \        ^~~~~~~~\n/tmp/tmpjfuonjq6.cpp:16:67: error: no match for call to \u2018\
    (std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type*, int)\u2019\n   16 |         if (isPrefix[i]) result.push_back(string(&strin"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0, j = 0; i < string.length(); i++) {\n    if (j >=\
    \ result.size()) {\n      result.push_back(string[i]);\n      j++;\n    } else\
    \ {\n      if (string[i] == string[j]) {\n        j++;\n      } else {\n     \
    \   result.push_back(string[i]);\n        j = i;\n      }\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgp5r93mb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpgp5r93mb.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |       result.push_back(string[i]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgp5r93mb.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::sort(string.begin(),\
    \ string.end());\n    std::vector<std::string> res;\n    for (auto s : string)\
    \ {\n        if (res.size() == 0 || string[res.back().size()-1] != s) {\n    \
    \        res.emplace_back(s);\n        } else {\n            res.back() += s;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgqz8tt62.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {char&}; _Tp = std::__cxx11::basic_string<char>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>;\
    \ _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018std::vector<_Tp,\
    \ _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with\
    \ _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::reference = std::__cxx11::basic_string<char>&]\u2019\
    \n/tmp/tmpgqz8tt62.cpp:11:31:   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(char&)\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660141285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (auto i = string.cbegin(),\
    \ j = string.cend(); i != j; ++i) {\n        prefixes.push_back(string);\n   \
    \     string += *i;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9_bys38i: /tmp/tmp9_bys38i.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Write your code here\n    int len = string.length();\n    std::vector<std::string>\
    \ retval;\n    retval.push_back(string);\n    for (int i = 0; i < len; i++) {\n\
    \        retval.push_back(string.substr(0, i));\n    }\n    return retval;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpovupr9ps: /tmp/tmpovupr9ps.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    auto curr = string[0];\n    prefixes.push_back(curr);\n    for\
    \ (size_t i = 1; i < string.size(); ++i) {\n        if (string[i] != curr) {\n\
    \            prefixes.push_back(string[i]);\n            curr = string[i];\n \
    \       }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63hzj21_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp63hzj21_.cpp:9:28: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n    9 |     prefixes.push_back(curr);\n      |                            ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp63hzj21_.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp63"
  stdout: ''
  timestamp: 1660141286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.length());\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    for (size_t j = i + 1; j <= string.length(); ++j) {\n      prefixes.push_back(string);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptdwspt_5: /tmp/tmptdwspt_5.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  // Write a loop that iterates through all substrings of string\n\
    \  // and stores the prefix that yields the minimum length\n  for (auto i = string.begin();\
    \ i != string.end(); ++i) {\n    // Initialize an auxiliary string and store the\
    \ prefix\n    // of the current string\n    std::string temp;\n    temp = *i;\n\
    \    // Store the first prefix\n    result.push_back(temp);\n    // Iterate through\
    \ all substrings\n    for (auto j = i; j != string.end(); j++) {\n      // Add\
    \ the current prefix to the auxiliary string\n      temp += *j;\n      // If the\
    \ prefix of the current string and the auxiliary string\n      // both yield a\
    \ substring with the same length, the current\n      // prefix is redundant\n\
    \      if (temp.size() == string.size()) {\n        continue;\n      }\n     \
    \ // If the current prefix yields a shorter substring than the\n      // current\
    \ prefix, the prefix is redundant\n      if (temp.size() < string.size()) {\n\
    \        continue;\n      }\n      // If the current prefix yields a substring\
    \ that is equal in length\n      // to the current prefix, the prefix is redundant\n\
    \      if (temp == string) {\n        continue;\n      }\n      // Otherwise,\
    \ store the prefix of the current string\n      result.push_back(temp);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkpjna4e5: /tmp/tmpkpjna4e5.cpp:46: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string);\n\
    \  std::vector<std::string> prefix_list;\n  prefix_list.reserve(string.size());\n\
    \  for (size_t i = 0; i <= string.size(); i++) {\n    prefix_list.emplace_back(string.substr(0,\
    \ i));\n  }\n  return prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpkyoet9vf.cpp:2:\n/tmp/tmpkyoet9vf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpkyoet9vf.cpp:7:3: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |   assert(string);\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  // Initialize with empty string\n  prefixes.push_back(string);\n\
    \  while (prefixes.size() != 0) {\n    // Remove the last element\n    prefixes.pop_back();\n\
    \    // Iterate over the rest of the string\n    for (size_t i = 0; i + 1 < string.size();\
    \ ++i)\n      // Append the prefix to the list\n      prefixes.push_back(string.substr(i,\
    \ 1) + prefixes[prefixes.size() - 1]);\n  }\n  // Return all prefixes\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefix_list;\n    std::string prefix = \"\";\n    bool found_prefix = false;\n\
    \    // Iterate through each character in the input string\n    for (char c :\
    \ string) {\n        // If the character is found in the prefix string, then add\
    \ the prefix\n        // to the vector of all prefixes\n        if (found_prefix)\
    \ {\n            prefix_list.push_back(prefix);\n            // Initialize prefix\
    \ and set to false for next iteration\n            prefix = \"\";\n          \
    \  found_prefix = false;\n            // Add the character to the prefix string\n\
    \            prefix = prefix + c;\n        } else {\n            // If the character\
    \ is not in the prefix string, then just add the character\n            prefix\
    \ = prefix + c;\n        }\n    }\n    // Return the vector of all prefixes\n\
    \    return prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpdemy3stw: /tmp/tmpdemy3stw.cpp:32: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.length();\n    std::vector<std::string> res;\n    if (n == 0) {\n\
    \        res.push_back(string);\n    } else {\n        for (int i = 0; i < n;\
    \ ++i) {\n            std::vector<std::string> sub = all_prefixes(string.substr(0,\
    \ i));\n            for (auto &s : sub) {\n                s.push_back(string[i]);\n\
    \                res.push_back(s);\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmk7m3m6h: /tmp/tmpmk7m3m6h.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string);\n\
    \  std::vector<std::string> prefix;\n  prefix.push_back(string);\n  for (size_t\
    \ i = 1; i < string.size(); ++i) {\n    prefix.push_back(string.substr(0, i));\n\
    \  }\n  return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpizxca9kf.cpp:2:\n/tmp/tmpizxca9kf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpizxca9kf.cpp:7:3: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |   assert(string);\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string);\n\
    \  string substring;\n  std::vector<std::string> result;\n  while (string) {\n\
    \    substring = string;\n    result.clear();\n    for (size_t i = 0; string;\
    \ i++) {\n      if (string[i] == substring[0]) {\n        string = string.substr(1);\n\
    \        result.push_back(substring);\n      }\n    }\n    if (!result.empty())\n\
    \      result.push_back(substring);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpbp89ui1f.cpp:2:\n/tmp/tmpbp89ui1f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbp89ui1f.cpp:7:3: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018bool\u2019\n    7 |   assert(string);\n      |   ^~~~~~\n/tmp/tmpbp89ui1f.cpp:8:9:\
    \ error: expected \u2018;\u2019 before \u2018substring\u2019\n    8 |   string\
    \ substring;\n      |         ^~~~~~~~~~\n      |         ;\n/tmp/tmpbp89ui1f.cpp:10:10:\
    \ error: could not convert \u2018string\u2019 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n   10 | \
    \  while (string) {\n      |          ^~~~~~\n      |          |\n      |    \
    \      std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpbp89ui1f.cpp:11:5:\
    \ error: \u2018substring\u2019 was not declared in this scope; did you mean \u2018\
    string\u2019?\n   11 |     substring = string;\n      |     ^~~~~~~~~\n      |\
    \     string\n/tmp/tmpbp89ui1f.cpp:13:24: error: could not convert \u2018string\u2019\
    \ from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n   13 |     for (size_t i = 0; string; i++) {\n      |\
    \                        ^~~~~~\n      |                        |\n      |   \
    \                     std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ p = string.rbegin();\n    std::vector<std::string> prefixes;\n    while (*p\
    \ >= string[0]) ++p;\n    while (*p != string[0]) *p++ = ' ';\n    prefixes.push_back({std::string(string,\
    \ p), p});\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mzx5jmo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6mzx5jmo.cpp:11:46: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::string&,\
    \ std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >&)\u2019\n   11 |     prefixes.push_back({std::string(string, p), p});\n\
    \      |                                              ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6mzx5jmo.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2: note:\
    \ candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6mzx5jmo.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/in"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if\
    \ (string.empty()) return std::vector<std::string>{};\n    std::vector<std::string>\
    \ prefixes;\n    int start = 0;\n    while (start < string.length()) {\n     \
    \   prefixes.emplace_back(string);\n        start = find_all(string.cbegin(),\
    \ string.cend(), string[0], prefixes.back());\n    }\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo87soy0n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpo87soy0n.cpp:12:17: error: \u2018\
    find_all\u2019 was not declared in this scope\n   12 |         start = find_all(string.cbegin(),\
    \ string.cend(), string[0], prefixes.back());\n      |                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::stack<std::string>\
    \ s;\n    s.push({string});\n    std::vector<std::string> retval;\n    while (!s.empty())\
    \ {\n        std::string prefix = s.top();\n        s.pop();\n        for (auto\
    \ &char : prefix) {\n            s.emplace(char);\n        }\n        retval.push_back(prefix);\n\
    \    }\n    return retval;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jxmek8v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5jxmek8v.cpp:13:20: error: expected\
    \ unqualified-id before \u2018char\u2019\n   13 |         for (auto &char : prefix)\
    \ {\n      |                    ^~~~\n/tmp/tmp5jxmek8v.cpp:13:20: error: expected\
    \ \u2018;\u2019 before \u2018char\u2019\n   13 |         for (auto &char : prefix)\
    \ {\n      |                    ^~~~\n      |                    ;\n/tmp/tmp5jxmek8v.cpp:13:25:\
    \ error: expected unqualified-id before \u2018:\u2019 token\n   13 |         for\
    \ (auto &char : prefix) {\n      |                         ^\n/tmp/tmp5jxmek8v.cpp:13:33:\
    \ error: expected \u2018;\u2019 before \u2018)\u2019 token\n   13 |         for\
    \ (auto &char : prefix) {\n      |                                 ^\n      |\
    \                                 ;\n/tmp/tmp5jxmek8v.cpp:14:23: error: expected\
    \ primary-expression before \u2018char\u2019\n   14 |             s.emplace(char);\n\
    \      |                       ^~~~\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); ++i) {\n    for (int j = i;\
    \ j < string.size(); ++j) {\n      prefixes.push_back(string + i, j);\n    }\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprshvlrli.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprshvlrli.cpp:10:33: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n   10 |       prefixes.push_back(string\
    \ + i, j);\n      |                          ~~~~~~ ^ ~\n      |             \
    \             |        |\n      |                          |        int\n    \
    \  |                          std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprshvlrli.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmprshvlrli.cpp:10:35:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   10 |       prefixes.push_back(string + i, j);\n    \
    \  |                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprshvlrli.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefix_str;\n  if (string.length() == 0) return prefix_str;\n  prefix_str.push_back(string[0]);\n\
    \  for (auto i = 1, len = string.length() - 1; i < len; i++ ) {\n    prefix_str.push_back(string[i]\
    \ + string[0]);\n  }\n  return prefix_str;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnr2kei5g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnr2kei5g.cpp:9:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |   prefix_str.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnr2kei5g.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 "
  stdout: ''
  timestamp: 1660141286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<char>\
    \ temp;\n    size_t pos = 0;\n    std::string prefix = \"\";\n    for (size_t\
    \ i = 0; i < string.length(); i++) {\n        temp.push_back(string[i]);\n   \
    \     if (i == 0) {\n            pos = i;\n        }\n        if (i == string.length()\
    \ - 1) {\n            prefix = std::string(temp.rbegin(), temp.rend());\n    \
    \        temp.clear();\n        }\n    }\n    std::vector<std::string> result;\n\
    \    result.push_back(prefix);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqhvanflj: /tmp/tmpqhvanflj.cpp:26: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (auto it = string.begin(); it != string.end(); ++it) {\n  \
    \  prefixes.push_back(string(it, string.end()));\n  }\n  sort(prefixes.begin(),\
    \ prefixes.end());\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo43pl451.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpo43pl451.cpp:9:47: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n    9 |     prefixes.push_back(string(it, string.end()));\n      |         \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  // find all prefixes\n  int\
    \ index = 0;\n  while (index < string.size()) {\n    index = string.find(sub_string,\
    \ index);\n    if (index == string::npos) break;\n    prefixes.push_back(string.substr(0,\
    \ index));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3u42kfu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpc3u42kfu.cpp:12:25: error: \u2018\
    sub_string\u2019 was not declared in this scope; did you mean \u2018string\u2019\
    ?\n   12 |     index = string.find(sub_string, index);\n      |              \
    \           ^~~~~~~~~~\n      |                         string\n/tmp/tmpc3u42kfu.cpp:13:18:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   13 |\
    \     if (index == string::npos) break;\n      |                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  int len = 1;\n  for (char c : string) {\n    if (c != string[0])\
    \ {\n      len++;\n    }\n  }\n  prefixes.push_back((std::string(string[0], len)));\n\
    \  for (int i = 1; i < len; ++i) {\n    for (int j = 1; j < len; ++j) {\n    \
    \  for (int k = 1; k < len; ++k) {\n        for (int l = 1; l < len; ++l) {\n\
    \          for (int m = 1; m < len; ++m) {\n            for (int n = 1; n < len;\
    \ ++n) {\n              for (int o = 1; o < len; ++o) {\n                for (int\
    \ p = 1; p < len; ++p) {\n                  for (int q = 1; q < len; ++q) {\n\
    \                    prefixes.push_back((std::string((string[0], i), string[j],\
    \ string[k], string[l], string[m], string[n], string[o], string[p], string[q]))));\n\
    \                  }\n                }\n              }\n            }\n    \
    \      }\n        }\n      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbbr80qg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnbbr80qg.cpp:24:155: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   24 |                     prefixes.push_back((std::string((string[0],\
    \ i), string[j], string[k], string[l], string[m], string[n], string[o], string[p],\
    \ string[q]))));\n      |                                                    \
    \                                                                            \
    \                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnbbr80qg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/subst"
  stdout: ''
  timestamp: 1660141286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  if (string.length() == 0)\n    return result;\n\n  std::vector<std::string>\
    \ prefixes;\n\n  // Initialize prefix with empty string\n  for (int i = 0; i <\
    \ string.length(); i++)\n    prefixes.push_back(\"\");\n\n  // Find the first\
    \ non-empty prefix of string\n  for (int i = 1; i < prefixes.size(); i++) {\n\
    \    if (prefixes[i] == \"\")\n      break;\n\n    // Append current prefix and\
    \ remove it from input string\n    prefixes[i] += string[i];\n    string.replace(i,\
    \ 1, string[i]);\n\n    // Add current prefix to result vector\n    result.push_back(prefixes[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_yo6a09.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpv_yo6a09.cpp:24:35: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::replace(int&, int,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   24 |     string.replace(i, 1, string[i]);\n      |                       \
    \            ^\nIn file included from /usr/include/c++/9/string:55,\n        \
    \         from /usr/include/c++/9/bits/locale_classes.h:40,\n                \
    \ from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv_yo6a09.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpv_yo6a09.cpp:24:35:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   24 |     string.replace(i, 1, string[i]);\n      |                       \
    \            ^\n      |                                   |\n      |         \
    \                          __gnu_cxx::__alloc_t"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  // Initialize an accumulator to store the prefixes found\n  std::multiset<std::string>\
    \ accumulator;\n  accumulator.insert(string);\n\n  // Keep adding elements to\
    \ accumulator and prefixes until there is nothing left to add\n  while (accumulator.size()\
    \ != 0) {\n    std::string next = accumulator.begin()->substr(1);\n    // Check\
    \ if the string already has a prefix with another char\n    // If so, delete it\
    \ then add new prefix to accumulator\n    if (accumulator.count(next) > 0) {\n\
    \      // Get the first element from the multiset\n      std::string first_element\
    \ = accumulator.begin()->substr(1);\n      // Get the size of the first element\n\
    \      size_t first_element_size = accumulator.count(first_element);\n      //\
    \ Remove the first element\n      accumulator.erase(accumulator.begin());\n  \
    \    // Add the new prefix to the accumulator\n      accumulator.insert(next);\n\
    \      // Now that the string has only one prefix, we can add it to the prefixes\n\
    \      prefixes.push_back(next);\n      // Now that the string has two prefixes,\
    \ we can add it to prefixes\n      if (first_element_size == 1) {\n        prefixes.insert(prefixes.begin(),\
    \ first_element);\n      }\n      // If the string is empty, break the loop\n\
    \    } else {\n      break;\n    }\n  }\n\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    for (size_t i = 0; i < string.length(); i++) {\n        prefixes.push_back(string[(i\
    \ + 1 < string.length()) ? i : i + 1]);\n    }\n\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9yav3sra.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9yav3sra.cpp:10:73: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |         prefixes.push_back(string[(i + 1\
    \ < string.length()) ? i : i + 1]);\n      |                                 \
    \                                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9yav3sra.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argumen"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  result.reserve(string.size());\n  result.push_back(string);\n  for\
    \ (std::string::size_type i = 0; i < string.length(); ++i) {\n    for (std::string::size_type\
    \ j = i; j < string.length(); ++j) {\n      result.push_back(string.substr(i,\
    \ j));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmplxq7cvez: /tmp/tmplxq7cvez.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.empty()) {\n    return prefixes;\n  }\n\n  // Initialize\
    \ with the first character\n  prefixes.push_back(string[0]);\n\n  // Remove the\
    \ first character and recurse\n  auto subprefixes = all_prefixes(string.substr(1));\n\
    \n  // Add the prefixes of every remaining substring\n  for (const auto& subprefix\
    \ : subprefixes) {\n    prefixes.insert(prefixes.end(), subprefix.begin(), subprefix.end());\n\
    \  }\n\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8d0jp05.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpy8d0jp05.cpp:13:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   13 |   prefixes.push_back(string[0]);\n      |\
    \                               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy8d0jp05.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {ak"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto const &c: string) {\n\
    \        if (c.isalpha()) {\n            prefix += c;\n        } else {\n    \
    \        if (prefix.size() > 0)\n                prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    if (prefix.size() > 0)\n  \
    \      prefixes.push_back(prefix);\n    return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2o187rc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk2o187rc.cpp:10:15: error: request\
    \ for member \u2018isalpha\u2019 in \u2018c\u2019, which is of non-class type\
    \ \u2018const char\u2019\n   10 |         if (c.isalpha()) {\n      |        \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.length() == 0) return prefixes;\n  int n = string.length();\n\
    \  prefixes.push_back(string);\n  for (int i = 0; i < n; i++) {\n    prefixes.push_back(string[0]\
    \ + string(n - i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpez0y49lh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpez0y49lh.cpp:12:48: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int)\u2019\
    \n   12 |     prefixes.push_back(string[0] + string(n - i));\n      |        \
    \                                        ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ If input string is empty, return empty vector\n    if (string.empty()) {\n \
    \       return {};\n    }\n\n    // Create vector of all prefixes\n    std::vector<std::string>\
    \ all_prefixes;\n    all_prefixes.reserve(string.size());\n\n    // Iterate over\
    \ string\n    for (int i = 0; i < string.size(); ++i) {\n        // Add prefixes\
    \ to vector if prefix is shorter than current string\n        if (string[i] <\
    \ string[0]) {\n            all_prefixes.push_back(string[0].to_string());\n \
    \       }\n\n        // Add prefix to vector if prefix is equal to current string\n\
    \        else if (string[i] == string[0]) {\n            all_prefixes.push_back(string[0].to_string());\n\
    \        }\n\n        // Add prefix to vector if prefix is greater than current\
    \ string\n        else {\n            // Append prefix to prefix vector\n    \
    \        all_prefixes.push_back(string(string[0], string[i]).c_str());\n\n   \
    \         // Add prefixes to string if prefix is greater then current string\n\
    \            auto prefix_itr = all_prefixes.rbegin();\n            int len_str\
    \ = string.size() - i;\n            if (len_str < all_prefixes.size() && string[i]\
    \ >= string[len_str]) {\n                all_prefixes.insert(prefix_itr, string.substr(i,\
    \ len_str).c_str());\n            }\n        }\n    }\n\n    return all_prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5ao0cdk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpz5ao0cdk.cpp:20:46: error: request\
    \ for member \u2018to_string\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](0)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   20 |             all_prefixes.push_back(string[0].to_string());\n\
    \      |                                              ^~~~~~~~~\n/tmp/tmpz5ao0cdk.cpp:25:46:\
    \ error: request for member \u2018to_string\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](0)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   25 |             all_prefixes.push_back(string[0].to_string());\n\
    \      |                                              ^~~~~~~~~\n/tmp/tmpz5ao0cdk.cpp:31:63:\
    \ error: no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   31 |             all_prefixes.push_back(string(string[0],\
    \ string[i]).c_str());\n      |                                              \
    \                 ^\n/tmp/tmpz5ao0cdk.cpp:37:82: error: no matching function for\
    \ call to \u2018std::vector<std::__cxx11::basic_string<char> >::insert(std::reverse_iterator<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > > >&, const char*)\u2019\n  \
    \ 37 |                 all_prefixes.insert(prefix_itr, string.substr(i, len_str).c_str());\n\
    \      |                                                                     \
    \             ^\nIn file included from /usr/include/c++/9/vector:72,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::string\
    \ result;\n  result.push_back(string[0]);\n  for (size_t i = 1; i < string.size();\
    \ i++) {\n    result.push_back(string[0] + string[i]);\n  }\n  std::vector<std::string>\
    \ v(std::begin(result), std::end(result));\n  return v;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpyrb14e7e.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpyrb14e7e.cpp:12:66:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (unsigned int i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpiw__8laq: /tmp/tmpiw__8laq.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  while (string.size() > 0) {\n  \
    \  std::string prefix = string[0];\n    string.erase(0, 1);\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp657c2knv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp657c2knv.cpp:10:34: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   10 |     std::string prefix\
    \ = string[0];\n      |                                  ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.length()\
    \ > 0);\n  std::vector<std::string> ans;\n  // if string contains only single\
    \ character, then just copy it.\n  if (string.length() <= 1) {\n    ans.push_back(string);\n\
    \  } else {\n    // Loop over all characters in string\n    for (std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n      // All prefix of current character\
    \ will be added to ans list\n      // as prefix till this character will be copied\
    \ in string at i\n      std::vector<std::string> newAns;\n      newAns.push_back(string[0]);\n\
    \      for (std::string::size_type j = 0; j < i; j++) {\n        newAns.push_back(string[j]);\n\
    \      }\n      ans.insert(ans.end(), newAns.begin(), newAns.end());\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzagxr0nv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpzagxr0nv.cpp:18:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   18 |       newAns.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzagxr0nv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  std::string prefix = \"\";\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    if (string[i] == string[0]) {\n      prefixes.push_back(prefix);\n\
    \      prefix = \"\";\n      continue;\n    }\n\n    prefix += string[i];\n  }\n\
    \  prefixes.push_back(prefix);\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp82metzuc: /tmp/tmp82metzuc.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    auto length = string.length();\n    for (unsigned int i = 0; i\
    \ < length; ++i) {\n        auto prefix = string[(i - 1)];\n        for (unsigned\
    \ int j = i; j < length; ++j) {\n            prefix = prefix + string[j];\n  \
    \          result.push_back(prefix);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gbykrkd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5gbykrkd.cpp:13:36: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   13 |             result.push_back(prefix);\n      |                     \
    \               ^\nIn file included from /usr/include/c++/9/vector:67,\n     \
    \            from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp5gbykrkd.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  int length = 0;\n  for (auto c : string) {\n    ++length;\n    result.push_back(string);\n\
    \    result.back()[length] = c;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq09j4p1y: /tmp/tmpq09j4p1y.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    for (std::string prefix; prefixes.size() < string.length();\
    \ ++prefix) {\n        if (string.length() - prefix.size() <= 1)\n           \
    \ prefixes.push_back(prefix);\n        else {\n            prefixes.push_back(prefix\
    \ + \"...\");\n            break;\n        }\n    }\n\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36ko9f3_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp36ko9f3_.cpp:9:65: error: no match\
    \ for \u2018operator++\u2019 (operand type is \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n    9 |     for (std::string prefix;\
    \ prefixes.size() < string.length(); ++prefix) {\n      |                    \
    \                                             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.size()\
    \ > 0);\n  std::string prefix = \"\";\n  std::vector<std::string> results;\n \
    \ for (int i = 0; i < string.size(); ++i) {\n    if (string[i] != string[0]) {\n\
    \      prefix = prefix + \"a\";\n      results.push_back(prefix);\n    }\n  }\n\
    \  return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqvp4gm87: /tmp/tmpqvp4gm87.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n\n  // Add prefixes of length 1 to the prefix vector\n  prefixes.push_back(string(string[0]));\n\
    \n  // Go through each character in the string and add the prefix of length \n\
    \  // one to the prefix vector if the character is smaller than the current \n\
    \  // character in the prefix vector\n  for(int i = 1; i < string.length(); i++)\
    \ {\n    char current = string[i];\n    for(int j = 0; j < prefixes.size(); j++)\
    \ {\n      char previous = prefixes[j].front();\n      if(current < previous)\
    \ {\n        prefixes.push_back(string(previous, current));\n        break;\n\
    \      }\n    }\n  }\n\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6wyecs5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb6wyecs5.cpp:10:38: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |   prefixes.push_back(string(string[0]));\n\
    \      |                                      ^\n/tmp/tmpb6wyecs5.cpp:20:52: error:\
    \ no match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (char&, char&)\u2019\n   20 |         prefixes.push_back(string(previous, current));\n\
    \      |                                                    ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n\n    // Return all prefixes\n    auto all = [&](std::string substring)\
    \ {\n        std::string current_prefix = substring;\n        while (current_prefix.length()\
    \ > 0) {\n            prefixes.push_back(current_prefix);\n            current_prefix\
    \ = current_prefix.substr(0, current_prefix.length() - 1);\n        }\n    };\n\
    \n    // Iterate over string from 0 to string.length()-1\n    auto iter = string.cbegin();\n\
    \    while (iter != string.cend() - 1) {\n        // Move from one character to\
    \ the next to the next in string\n        iter += 1;\n        // Do a recursive\
    \ call for the next character\n        all(string(iter));\n    }\n\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppuk3v10p.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmppuk3v10p.cpp:24:24: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >&)\u2019\n   24 |         all(string(iter));\n\
    \      |                        ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.length()\
    \ > 0);\n\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \n    for (size_t i = string.length() - 1; i >= 0; --i) {\n        std::string\
    \ prefix = string[string.length() - i - 1];\n        for (size_t j = 0; j <= i;\
    \ ++j) {\n            prefix = prefix + string[j];\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3b_umpp3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3b_umpp3.cpp:13:60: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   13 |         std::string\
    \ prefix = string[string.length() - i - 1];\n      |                         \
    \                                   ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.length());\n  for (int i = 0; i < string.length();\
    \ i++)\n    prefixes.push_back(string);\n  std::vector<std::string>::iterator\
    \ it;\n  for (it = prefixes.begin(); it != prefixes.end(); ++it)\n    for (int\
    \ j = i; j < string.length(); j++)\n      if (string[j] == *it)\n        prefixes.erase(it);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7skn2mip.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7skn2mip.cpp:13:18: error: \u2018\
    i\u2019 was not declared in this scope\n   13 |     for (int j = i; j < string.length();\
    \ j++)\n      |                  ^\n/tmp/tmp7skn2mip.cpp:14:21: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   14 |       if (string[j] == *it)\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7skn2mip.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7skn2mip.cpp:14:25:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   14 |       if (string[j] == *it)\n      |       \
    \                  ^~\nIn file included from /usr/include/c++/9/regex:62,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7skn2mip.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7skn2mip.cpp:14:25: note:   misma"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.length() == 0) return prefixes;\n  for (int i = string.length()\
    \ - 1; i >= 0; i--) {\n    if (string[i] == '+' || string[i] == '-') continue;\n\
    \    std::string prefix = string[i];\n    for (int j = i + 1; j < string.length();\
    \ j++) {\n      if (string[j] != '+' && string[j] != '-') prefix += string[j];\n\
    \    }\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ewr7l_d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2ewr7l_d.cpp:11:34: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   11 |     std::string prefix\
    \ = string[i];\n      |                                  ^\n"
  stdout: ''
  timestamp: 1660141287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ output;\n  for (size_t i = 0; i < string.size(); i++) {\n    if (i == 0) {\n\
    \      output.push_back(string[i]);\n    } else {\n      output.push_back(string(string[i])\
    \ + string[i - 1]);\n    }\n  }\n  return output;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_j67tttj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_j67tttj.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |       output.push_back(string[i]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_j67tttj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string);\n\
    \    string = string.substr(0, i) + string.substr(i + 1);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmps09cxadc: /tmp/tmps09cxadc.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    size_t n = string.length();\n    std::string prefix = \"\";\n \
    \   for (int i = 0; i < n; ++i) {\n        prefix = prefix + string[i];\n    \
    \    if (i == 0) {\n            result.push_back(prefix);\n        } else {\n\
    \            if (prefix.length() > result.back().length()) {\n               \
    \ result.push_back(prefix);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = string.length(); i < string.length() + 1; ++i)\
    \ {\n    prefixes.emplace_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp0d02of8s: /tmp/tmp0d02of8s.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = string.length(); i > 0; i--) {\n    result.push_back(string[i\
    \ - 1]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0i8utn1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp0i8utn1.cpp:9:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     result.push_back(string[i - 1]);\n  \
    \    |                                   ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp0i8utn1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type"
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  string prefix = string;\n  while (prefixes.size() < string.length())\
    \ {\n    for (int i = string.length(); i > 0; i--) {\n      prefix = prefix +\
    \ string;\n      prefixes.emplace_back(prefix);\n    }\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0iimnt8s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0iimnt8s.cpp:8:9: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n    8 |   string prefix = string;\n\
    \      |         ^~~~~~~\n      |         ;\n/tmp/tmp0iimnt8s.cpp:11:7: error:\
    \ \u2018prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n   11 |       prefix = prefix + string;\n      |       ^~~~~~\n      |    \
    \   prefixes\n"
  stdout: ''
  timestamp: 1660141288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    result.reserve(string.length());\n    for (int i = string.length()\
    \ - 1; i >= 0; i--) {\n        auto prefix = string.substr(0, i + 1);\n      \
    \  result.emplace_back(prefix);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpoj5rrrbe: /tmp/tmpoj5rrrbe.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if\
    \ (string.length() == 0)\n        return {}; // Empty string\n    auto prefix_vec\
    \ = vector<string>{};\n    string current_prefix = string;\n    auto prefix_length\
    \ = current_prefix.length();\n    while (true) {\n        prefix_vec.push_back(current_prefix);\n\
    \        current_prefix = current_prefix.substr(0, prefix_length);\n        if\
    \ (current_prefix.length() == 0)\n            break;\n    }\n    return prefix_vec;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ty9kjhp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7ty9kjhp.cpp:9:23: error: \u2018\
    vector\u2019 was not declared in this scope\n    9 |     auto prefix_vec = vector<string>{};\n\
    \      |                       ^~~~~~\n/tmp/tmp7ty9kjhp.cpp:9:23: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp7ty9kjhp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11: note:\
    \   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ty9kjhp.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp7ty9kjhp.cpp:9:37:\
    \ error: expected primary-expression before \u2018{\u2019 token\n    9 |     auto\
    \ prefix_vec = vector<string>{};\n      |                                    \
    \ ^\n/tmp/tmp7ty9kjhp.cpp:10:11: error: expected \u2018;\u2019 before \u2018current_prefix\u2019\
    \n   10 |     string current_prefix = string;\n      |           ^~~~~~~~~~~~~~~\n\
    \      |           ;\n/tmp/tmp7ty9kjhp.cpp:11:26: error: \u2018current_prefix\u2019\
    \ was not declared in this scope\n   11 |     auto prefix_length = current_prefix.length();\n\
    \      |                          ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  if (string.empty()) return prefixes;\n  \n  size_t shortest, longest\
    \ = 0, sizeOfLongestString = 0;\n  for (size_t i = 0; i < string.size(); ++i)\
    \ {\n    size_t cur = i;\n    size_t curLen = 1;\n    while (true) {\n      curLen++;\n\
    \      if (curLen > string[cur].length()) curLen = 1;\n      if (cur + curLen\
    \ > string.length() - 1) break;\n      if (string[cur + curLen] != string[cur\
    \ + curLen - 1]) break;\n      cur += curLen;\n    }\n    \n    shortest = longest\
    \ > string[i].length() ? longest : string[i].length();\n    longest = cur;\n \
    \   sizeOfLongestString = curLen;\n    \n    for (size_t j = i; j < cur; ++j)\
    \ {\n      if (string[j] != string[cur - 1]) break;\n      prefixes.emplace_back(string[j]);\n\
    \      \n      for (size_t k = j + 1; k < cur; ++k) {\n        if (string[k] !=\
    \ string[cur - 1]) break;\n        prefixes.emplace_back(string[k]);\n      }\n\
    \    }\n  }\n  \n  if (longest - sizeOfLongestString > 1) {\n    prefixes.emplace_back(string[cur\
    \ - 1]);\n    for (size_t i = 1; i < longest - sizeOfLongestString; ++i) {\n \
    \     prefixes.emplace_back(string[cur - 1] + string[i]);\n    }\n  }\n  \n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyeo67cu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmphyeo67cu.cpp:16:32: error: request\
    \ for member \u2018length\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](cur)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   16 |       if (curLen > string[cur].length())\
    \ curLen = 1;\n      |                                ^~~~~~\n/tmp/tmphyeo67cu.cpp:22:36:\
    \ error: request for member \u2018length\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](i)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   22 |     shortest = longest\
    \ > string[i].length() ? longest : string[i].length();\n      |              \
    \                      ^~~~~~\n/tmp/tmphyeo67cu.cpp:22:67: error: request for\
    \ member \u2018length\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](i)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   22 |     shortest = longest\
    \ > string[i].length() ? longest : string[i].length();\n      |              \
    \                                                     ^~~~~~\n/tmp/tmphyeo67cu.cpp:38:34:\
    \ error: \u2018cur\u2019 was not declared in this scope\n   38 |     prefixes.emplace_back(string[cur\
    \ - 1]);\n      |                                  ^~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /"
  stdout: ''
  timestamp: 1660141288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string longest = string;\n    size_t currentLength = 0;\n\
    \    prefixes.push_back(longest);\n\n    for (size_t i = 0; i < longest.length();\
    \ i++) {\n        currentLength = i + 1;\n        std::string prefix = (longest.substr(0,\
    \ currentLength));\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpug4fl9qf: /tmp/tmpug4fl9qf.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  std::vector<char> prefix;\n  prefix[0] = string[0];\n  // add prefix\
    \ to result\n  result.push_back(string(prefix.begin(), prefix.end()));\n  // loop\
    \ through rest of string\n  for (size_t i = 1; i < string.size(); i++) {\n   \
    \ // get prefix\n    prefix[0] = string[i];\n    // add prefix to result\n   \
    \ result.push_back(string(prefix.begin(), prefix.end()));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ebbu2a4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9ebbu2a4.cpp:11:55: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::vector<char>::iterator,\
    \ std::vector<char>::iterator)\u2019\n   11 |   result.push_back(string(prefix.begin(),\
    \ prefix.end()));\n      |                                                   \
    \    ^\n/tmp/tmp9ebbu2a4.cpp:17:57: error: no match for call to \u2018(std::string\
    \ {aka std::__cxx11::basic_string<char>}) (std::vector<char>::iterator, std::vector<char>::iterator)\u2019\
    \n   17 |     result.push_back(string(prefix.begin(), prefix.end()));\n      |\
    \                                                         ^\n"
  stdout: ''
  timestamp: 1660141288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n\tstd::vector<std::string>\
    \ prefixes;\n\tprefixes.emplace_back(string);\n\twhile (string.size() > 1) {\n\
    \t\tsize_t index = string.size() - 1;\n\t\twhile (index > 0 && string[index -\
    \ 1] == string[index]) {\n\t\t\tindex--;\n\t\t}\n\t\tprefixes.emplace_back(string.substr(0,\
    \ index));\n\t\tstring = string.substr(index + 1);\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpu8eivtt7: /tmp/tmpu8eivtt7.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141288
