language: cpp
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ int n = lst.size();\n    for (int i = 0; i < n; i++) {\n        int j = i;\n\
    \        while (j > 0 && lst[j - 1] > lst[j]) {\n            std::swap(lst[j -\
    \ 1], lst[j]);\n            j = j - 1;\n        }\n        res.emplace_back(lst[j]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv8oznm4y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // initialize all values in\
    \ vector to 0.\n    for (auto it : lst)\n        it = 0;\n    // Sort the vector.\n\
    \    std::sort(lst.begin(), lst.end());\n    // Return the vector.\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7hkqymo4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Return empty list if list\
    \ has no values.\n    if (lst.size() == 0) return lst;\n    // Add first element\
    \ to list.\n    lst.push_back(lst.front());\n    // Recursively sort list with\
    \ first element removed, then second element added, etc.\n    return strange_sort_list(lst);\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf6zvg0zq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  long\
    \ min_num = std::numeric_limits<long>::min();\n  long max_num = std::numeric_limits<long>::max();\n\
    \  for (auto num : lst) {\n    if (num < min_num) {\n      result.push_back(min_num);\n\
    \      min_num = num;\n    } else if (num > max_num) {\n      result.push_back(max_num);\n\
    \      max_num = num;\n    } else {\n      result.push_back(num);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7dfxj4s1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() <= 0)\n     \
    \   return lst;\n    std::sort(lst.begin(), lst.end());\n    return lst;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe1277_i7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end(),\
    \ [&](int i, int j) -> bool {\n        return std::max(lst.begin(), lst.end())\
    \ < std::min(lst.begin(), lst.end()) && j > i;\n    });\n    return lst;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp52_t1vxc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res(lst);\n\
    \    std::reverse(std::begin(res), std::end(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptbjv15ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n\
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpko37ei1j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  if (lst.size() == 1) {\n        return lst;\n    }\n    std::vector<long> result\
    \ = lst;\n    // Sort the first half\n    std::sort(result.begin(), result.end(),\
    \ [](long a, long b) -> bool {\n        return a < b;\n    });\n    // Sort the\
    \ second half (from end to first)\n    std::sort(result.rbegin(), result.rend(),\
    \ [](long a, long b) -> bool {\n        return a < b;\n    });\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m8kpwvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty())\n    return lst;\n\
    \n  // Get maximum value\n  long max_val = *std::max_element(lst.begin(), lst.end());\n\
    \n  // Get minimum value\n  long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \n  std::vector<long> res(lst.size());\n  for (size_t i = 0; i < lst.size(); i++)\
    \ {\n    if (lst[i] == min_val)\n      res[i] = max_val;\n    else if (lst[i]\
    \ == max_val)\n      res[i] = min_val;\n    else\n      res[i] = lst[i];\n  }\n\
    \n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7vxt0pee.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long min = *std::min_element(lst.cbegin(),\
    \ lst.cend());\n    long max = *std::max_element(lst.cbegin(), lst.cend());\n\
    \    std::vector<long> ans;\n    ans.push_back(max);\n    ans.push_back(min);\n\
    \    for (long i = min + 1; i <= max; i++)\n        ans.push_back(i);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfk0xg3px.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n        return\
    \ lst;\n\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\n  \
    \  long max_val = *std::max_element(lst.begin(), lst.end());\n\n    if (min_val\
    \ == max_val)\n        return lst;\n\n    auto it = lst.begin();\n    for (auto\
    \ i = min_val; i <= max_val; i++)\n        while (it != lst.end() && *it == i)\n\
    \            it++;\n\n    for (auto it = lst.begin(); it != it; ++it) {\n    \
    \    while (it != lst.end() && *it == max_val)\n            it++;\n        std::iter_swap(it,\
    \ std::prev(it));\n    }\n\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_6f7qlqs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> v;\n    for(auto\
    \ &itr : lst){\n        v.push_back(itr);\n    }\n    sort(v.begin(), v.end(),\
    \ [&](int a, int b) {\n        if(a < b)\n            return -1;\n        else\
    \ if(a > b)\n            return 1;\n        else return 0;\n    });\n    return\
    \ v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzn4akxly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> sorted_list;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    for (int j = i + 1; j < lst.size();\
    \ j++) {\n      if (lst[i] > lst[j]) {\n        auto temp = lst[i];\n        lst[i]\
    \ = lst[j];\n        lst[j] = temp;\n      }\n    }\n  }\n  return sorted_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp22qc676x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (auto i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        } else if (i > max) {\n            max = i;\n        }\n\
    \    }\n    std::vector<long> res;\n    for (auto i : lst) {\n        if (i ==\
    \ max) {\n            res.push_back(max);\n        } else if (i == min) {\n  \
    \          res.push_back(min);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt09_z8c3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end(),\
    \ [](long l, long r){ return l > r; });\n    return lst;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmu_5_1li.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) return lst;\n\
    \    std::vector<long> lst1 = lst, lst2;\n    std::pop_heap(lst1.begin(), lst1.end());\n\
    \    lst2.push_back(*lst1.rbegin());\n    std::pop_heap(lst2.begin(), lst2.end());\n\
    \    lst2.push_back(*lst1.begin());\n    lst2.push_back(*lst1.end());\n    std::make_heap(lst2.begin(),\
    \ lst2.end());\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2k16un6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Your code goes here\n  long\
    \ max,min;\n  if (lst.size()==0)\n    return lst;\n  max=lst[0];\n  min=lst[0];\n\
    \  for (long i=1;i<lst.size();i++)\n  {\n    if (lst[i]<min)\n    {\n      min=lst[i];\n\
    \    }\n    else if (lst[i]>max)\n    {\n      max=lst[i];\n    }\n  }\n  std::vector<long>\
    \ result;\n  for (long i=0;i<lst.size();i++)\n  {\n    if (lst[i]<min)\n    {\n\
    \      result.push_back(min);\n    }\n    else if (lst[i]>max)\n    {\n      result.push_back(max);\n\
    \    }\n    else\n    {\n      result.push_back(lst[i]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6w01esyy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort the vector.\n    sort(lst.begin(),\
    \ lst.end());\n    // Reverse sort.\n    lst.erase(std::unique(\n        lst.begin(),\
    \ lst.end()), lst.end());\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwlv18otc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result(lst.size());\n\
    \    std::iota(result.begin(), result.end(), 0);\n    for (long i = lst.size()\
    \ - 1; i > 0; --i) {\n        long j = 0;\n        long k = lst.size() - 1;\n\
    \        while (j < k) {\n            if (result[k] < result[j]) {\n         \
    \       std::swap(result[k], result[j]);\n                k--;\n            }\n\
    \            else if (result[k] > result[j]) {\n                std::swap(result[j],\
    \ result[k]);\n                j++;\n            }\n            else {\n     \
    \           j++;\n                k--;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm79us0_e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return\
    \ lst;\n  }\n\n  // Store all elements in array.\n  std::vector<long> arr(lst.size(),\
    \ 0);\n  for (size_t i = 0; i < lst.size(); i++) {\n    arr[i] = lst[i];\n  }\n\
    \n  // Sort the array in descending order.\n  std::sort(arr.rbegin(), arr.rend(),\
    \ [](const long &a, const long &b) {\n    return b < a;\n  });\n\n  // Swap minimum\
    \ element with the last element of array.\n  // Last element is going to be minimum,\
    \ so we swap the last element with the minimum.\n  long last = arr[lst.size()\
    \ - 1];\n  long min = arr[arr.size() - 2];\n  arr[arr.size() - 1] = min;\n  arr[arr.size()\
    \ - 2] = last;\n\n  return arr;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztenn90j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Base case when list is empty.\n\
    \    if (lst.empty())\n        return lst;\n    // If the first element is greater\
    \ than the second element.\n    if (lst[0] > lst[1])\n        return std::move(strange_sort_list(std::move(lst)));\n\
    \    // Otherwise, swap the two elements.\n    std::swap(lst[0], lst[1]);\n  \
    \  // Recursively sort the rest of the list.\n    return strange_sort_list(std::move(lst));\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoh6u7fzt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  int n = lst.size();\n  // We first\
    \ sort the smallest first,\n  // so that in the second stage, we find the largest\
    \ numbers first\n  std::stable_sort(lst.begin(), lst.end(), [](long a, long b)\
    \ {\n    return a < b;\n  });\n  // Then we find the largest,\n  // so that in\
    \ the third stage, we sort them in descending order\n  std::stable_sort(lst.begin(),\
    \ lst.end(), [](long a, long b) {\n    return a > b;\n  });\n  // then we find\
    \ the smallest,\n  // so that in the fourth stage, we sort them in ascending order\n\
    \  std::stable_sort(lst.begin(), lst.end(), [](long a, long b) {\n    return a\
    \ < b;\n  });\n  // now we return the vector in descending order\n  return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpns_dreyr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // O(N*log(N))\n    for(auto\
    \ it = lst.begin(); it != lst.end(); ++it)\n        // O(N)\n        for(auto\
    \ jt = lst.begin(); jt != it; ++jt)\n            // O(N)\n            if(*jt >\
    \ *it)\n            {\n                std::iter_swap(it, jt);\n            }\n\
    \    // O(N)\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuv_we2ww.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  std::vector<long> result(lst.size());\n    long current_min = lst[0];\n   \
    \ long current_max = lst[0];\n    for (size_t i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < current_min) {\n            current_min = lst[i];\n    \
    \    } else if (lst[i] > current_max) {\n            current_max = lst[i];\n \
    \       }\n    }\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < current_min) {\n            result.at(i - 1) = current_min;\n            current_min\
    \ = lst[i];\n        } else if (lst[i] > current_max) {\n            result.at(i\
    \ - 1) = current_max;\n            current_max = lst[i];\n        } else {\n \
    \           result.at(i - 1) = lst[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfb6nl9ez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    long smallest = lst[0];\n    long largest = lst[lst.size()\
    \ - 1];\n    std::vector<long> result;\n    // The loop is going to be executed\
    \ twice, the first time we iterate from the smallest to the largest\n    // and\
    \ the second time we iterate from the largest to the smallest\n    for (long i\
    \ = smallest; i <= largest; i++)\n        for (long j = i + 1; j < lst.size();\
    \ j++)\n            if (lst[j] < i)\n                std::swap(lst[j], lst[i]);\n\
    \            else\n                std::swap(lst[j], lst[lst.size() - i - 1]);\n\
    \    // Now we have the result stored in the result vector\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnizwuiiw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> tmp(std::move(lst));\n\
    \    long smallest = tmp.front();\n    long largest = tmp.back();\n    tmp.pop_back();\n\
    \    for (long i : tmp) {\n        // If current value is bigger than its previous\
    \ largest and smaller than its previous smallest,\n        // swap it with previous\
    \ smallest.\n        if (i > largest && i < smallest) {\n            std::swap(smallest,\
    \ i);\n            std::swap(largest, i);\n        } else if (i == smallest) {\n\
    \            smallest = i;\n        } else if (i == largest) {\n            largest\
    \ = i;\n        }\n    }\n    return tmp;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp606v7p7z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort first the biggest\n\
    \    std::sort(lst.begin(), lst.end(), [](long a, long b) { return b < a; });\n\
    \    // Then the smallest\n    std::sort(lst.begin(), lst.end(), [](long a, long\
    \ b) { return a < b; });\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2uwzao0b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> ret;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    long mid = (min + max) / 2;\n    ret.push_back(max);\n\
    \    ret.push_back(mid);\n    ret.push_back(min);\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphqk65_6_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Get maximum element of the\
    \ list.\n    long long max_ele = *std::max_element(lst.begin(), lst.end());\n\
    \    // Sort list with maximum as first element.\n    std::sort(lst.begin(), lst.end(),\
    \ [&max_ele](long long el1, long long el2) {\n        return (el1 > max_ele);\n\
    \    });\n    // Sort list with maximum as last element.\n    std::sort(lst.begin(),\
    \ lst.end(), [&max_ele](long long el1, long long el2) {\n        return (el1 >\
    \ max_ele);\n    });\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqbi_z9fw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return\
    \ lst;\n  }\n  if (lst.size() == 1) {\n    return lst;\n  }\n\n  std::vector<long>\
    \ min_lst(lst);\n  std::vector<long> max_lst(lst);\n  long min = min_lst[0];\n\
    \  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n  }\n  long max = max_lst[0];\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  std::vector<long>\
    \ result;\n  long middle = min + max / 2;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] <= middle && lst[i] > min) {\n      result.push_back(lst[i]);\n\
    \    }\n    if (lst[i] >= middle && lst[i] < max) {\n      result.push_back(lst[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkoew1yq5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0)\n    return\
    \ lst;\n  int max_value = lst[0];\n  int min_value = lst[0];\n  for (int i = 1;\
    \ i < lst.size(); i++) {\n    if (lst[i] > max_value)\n      max_value = lst[i];\n\
    \    if (lst[i] < min_value)\n      min_value = lst[i];\n  }\n  std::vector<long>\
    \ res(max_value, min_value);\n  for (int i = 0; i < lst.size(); i++) {\n    int\
    \ pos = min_value;\n    for (int j = 0; j < i; j++) {\n      if (lst[j] < lst[pos])\n\
    \        pos = j;\n    }\n    res[pos] = lst[i];\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo10lftzq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> v1;\n    v1 = lst;\n    std::sort(v1.begin(),\
    \ v1.end(), [&](long i1, long i2) -> bool {\n        return (v1[i1] > v1[i2]);\n\
    \    });\n    return v1;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdt4afwwq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n\
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpko37ei1j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> res(lst);\n\
    \  std::sort(res.begin(), res.end(), [&](long a, long b) -> bool {\n    return\
    \ a < b;\n  });\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp11w5a4tt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  std::vector<long> ret(lst.size());\n    long min_val = lst[0];\n    long max_val\
    \ = lst[0];\n    for (long val : lst) {\n        max_val = std::max(max_val, val);\n\
    \        min_val = std::min(min_val, val);\n    }\n    ret[0] = min_val;\n   \
    \ ret[1] = max_val;\n    long middle = max_val / 2;\n    long left_val = min_val;\n\
    \    long right_val = max_val;\n    long i = 1;\n    while (true) {\n        while\
    \ (left_val < middle) {\n            ret[i++] = left_val;\n            left_val\
    \ += 1;\n        }\n        while (right_val > middle) {\n            ret[i++]\
    \ = right_val;\n            right_val -= 1;\n        }\n        if (left_val ==\
    \ right_val) break;\n        middle = (left_val + right_val) / 2;\n        left_val\
    \ = middle;\n        right_val = middle;\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbduifgdt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> v;\n    v.assign(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < v.size() - 1; i++) {\n        for (int\
    \ j = i + 1; j < v.size(); j++) {\n            if (v[i] > v[j]) {\n          \
    \      std::swap(v[i], v[j]);\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphtswti8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() > 0) {\n    \
    \    // sort list\n        std::vector<long> sorted_list = lst;\n        std::sort(sorted_list.begin(),\
    \ sorted_list.end(), [](long a, long b) { return a > b; });\n        // set current\
    \ to minimum value\n        long current = sorted_list[0];\n        // set first\
    \ element to minimum value\n        sorted_list[0] = std::min(sorted_list[0],\
    \ sorted_list[sorted_list.size() - 1]);\n        // set last element to minimum\
    \ value\n        sorted_list[sorted_list.size() - 1] = std::min(sorted_list[sorted_list.size()\
    \ - 1], current);\n        // repeat until list is sorted\n        while (true)\
    \ {\n            // swap current to last element\n            std::swap(current,\
    \ sorted_list[sorted_list.size() - 1]);\n            // remove last element from\
    \ list\n            sorted_list.pop_back();\n            // check if list is sorted\n\
    \            if (sorted_list.size() == 0) break;\n        }\n    }\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vqwju7p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\t// Sort the list\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\t// Find maximum and minimum of each sub-list\n\tauto max_it =\
    \ lst.end();\n\tfor (auto it = lst.begin(); it != max_it; ++it) \n\t\t*it = std::max_element(*it,\
    \ max_it);\n\tauto min_it = lst.end();\n\tfor (auto it = lst.begin(); it != min_it;\
    \ ++it) \n\t\t*it = std::min_element(*it, min_it);\n\treturn lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbottbu79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) {\n       \
    \ return lst;\n    }\n    auto min_val = lst.front();\n    auto max_val = lst.back();\n\
    \    lst.front() = max_val;\n    lst.back() = min_val;\n    std::vector<long>\
    \ ret(lst);\n    do {\n        ret.push_back(lst.back());\n        lst.pop_back();\n\
    \    } while (!lst.empty() && lst.back() == max_val);\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq9102dzh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  if\
    \ (lst.size() == 1) {\n    return lst;\n  }\n  std::vector<long> result;\n  result.push_back(lst.front());\n\
    \  std::list<long> sorted_list = lst;\n  sorted_list.sort();\n  result.insert(result.begin()\
    \ + 1, sorted_list.begin(), sorted_list.end());\n  return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpme0cq7ia.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Check if vector is empty.\n\
    \    if (lst.size() == 0)\n        return lst;\n\n    std::vector<long> result;\n\
    \    // Check minimum value in the vector and move it to the front of the list.\n\
    \    // If we found a minimum, repeat the process of finding maximum and minimum.\n\
    \    if (lst[0] > lst[1]) {\n        long temp = lst[0];\n        lst[0] = lst[1];\n\
    \        lst[1] = temp;\n        temp = lst[0];\n        lst[0] = lst[1];\n  \
    \      lst[1] = temp;\n        result.push_back(lst[0]);\n    }\n\n    // If we\
    \ have more than one element, then we start from minimum.\n    if (lst.size()\
    \ > 1) {\n        long temp = lst[0];\n        long min = lst[1];\n\n        for\
    \ (int i = 2; i < lst.size(); i++) {\n            if (lst[i] > min) {\n      \
    \          temp = lst[i];\n                lst[i] = lst[i - 1];\n            \
    \    lst[i - 1] = temp;\n                temp = lst[i];\n                lst[i]\
    \ = lst[i - 1];\n                lst[i - 1] = temp;\n                result.push_back(lst[i]);\n\
    \                min = lst[i];\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptdcwxzpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    auto it = lst.begin();\n   \
    \ std::vector<long> new_lst;\n    for (auto it : lst) {\n        if (it == lst.end())\
    \ {\n            break;\n        }\n        std::swap(*it, *--it);\n        new_lst.push_back(*it);\n\
    \    }\n    return new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp77lxjo_v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // write your code here\n  \
    \  long minval = lst[0];\n    long maxval = lst[0];\n    for (long i = 0; i <\
    \ lst.size(); ++i) {\n        minval = std::min(minval, lst[i]);\n        maxval\
    \ = std::max(maxval, lst[i]);\n    }\n    for (long i = 0; i < lst.size(); ++i)\
    \ {\n        if (minval <= lst[i]) {\n            lst[i] -= minval;\n        \
    \    lst[i] += maxval;\n        }\n    }\n    return lst;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpicndzya6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0)\n    return\
    \ lst;\n  if (lst.size() == 1)\n    return lst;\n  // Initialize helper arrays\n\
    \  std::vector<long> lst_min, lst_max;\n  std::vector<long> lst_tmp;\n  lst_min.reserve(lst.size());\n\
    \  lst_max.reserve(lst.size());\n  for (long val : lst)\n    lst_min.push_back(val);\n\
    \  for (long val : lst)\n    lst_max.push_back(val);\n  for (long i = 0; i < lst_min.size();\
    \ ++i) {\n    lst_tmp.push_back(lst_min[i]);\n    if (i < lst_min.size() - 1)\
    \ {\n      if (lst_min[i] > lst_min[i + 1]) {\n        lst_tmp.push_back(lst_min[i]);\n\
    \      }\n    }\n  }\n  for (long i = lst_min.size(); i < lst_max.size(); ++i)\
    \ {\n    lst_tmp.push_back(lst_max[i - lst_min.size() + 1]);\n    if (i < lst_min.size()\
    \ - 1) {\n      if (lst_max[i - lst_min.size()] > lst_max[i + 1]) {\n        lst_tmp.push_back(lst_max[i\
    \ - lst_min.size() + 1]);\n      }\n    }\n  }\n  for (long i = lst_min.size();\
    \ i < lst_tmp.size(); ++i) {\n    lst_tmp.push_back(lst_min[i - lst_min.size()\
    \ + 1]);\n    if (i < lst_min.size() - 1) {\n      if (lst_min[i - lst_min.size()]\
    \ > lst_tmp[i + 1]) {\n        lst_tmp.push_back(lst_min[i - lst_min.size() +\
    \ 1]);\n      }\n    }\n  }\n  for (long i = 0; i < lst_tmp.size(); ++i) {\n \
    \   lst_tmp.push_back(lst_max[i + lst_min.size()]);\n  }\n  std::vector<long>\
    \ lstRet;\n  lstRet.reserve(lst.size());\n  for (long val : lst_tmp)\n    lstRet.push_back(val);\n\
    \  return lstRet;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphy1efani.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> ret(std::begin(lst),\
    \ std::end(lst));\n    std::sort(std::begin(ret), std::end(ret));\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh7gci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0)\n        return result;\n    for(size_t i = 0; i < lst.size();\
    \ i++)\n        result.push_back(lst[i]);\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_80fsn8h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long minVal = lst.front();\n    for (long i = 0; i < lst.size(); i++) {\n  \
    \      if (lst[i] < minVal) {\n            minVal = lst[i];\n        }\n    }\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == minVal) {\n\
    \            res.push_back(lst[i]);\n        }\n    }\n    for (long i = lst.size();\
    \ i < lst.size() * 2; i++) {\n        res.push_back(maxValue(res));\n    }\n \
    \   for (long i = (lst.size() * 2) - 1; i > 0; i--) {\n        res.push_back(maxValue(res));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzv5ekixm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0) return lst;\n\
    \  std::vector<long> newlist;\n  long min = lst[0], max = lst[0];\n  for (long\
    \ i : lst) {\n    if (i < min) min = i;\n    if (i > max) max = i;\n  }\n  //\
    \ Now min/max are the min and max of each number, so find the difference\n  //\
    \ between them (diff should be the number we subtract min from max)\n  // and\
    \ add min to that difference.\n  long diff = max - min;\n  for (long i : lst)\
    \ {\n    newlist.push_back(i + min);\n  }\n  newlist.push_back(max);\n  return\
    \ newlist;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcpl0em57.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res(lst.begin(), lst.end());\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2x0ys66.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max_val = *std::max_element(lst.begin(), lst.end());\n\
    \    for (long i = min_val; i < max_val; i++) {\n        auto it = std::find(lst.begin(),\
    \ lst.end(), i);\n        if (it == lst.end()) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbsufbekf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    size_t len = lst.size();\n \
    \   if (len <= 1)\n        return lst;\n    size_t mid = len / 2;\n    long minval\
    \ = lst[mid];\n    for (size_t i = mid; i < len; ++i) {\n        if (lst[i] <\
    \ minval) {\n            std::swap(lst[mid], lst[i]);\n        }\n    }\n    return\
    \ strange_sort_list(lst);\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9of_bjiy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty())\n    return lst;\n\
    \n  long min_val = lst.front();\n  long max_val = lst.back();\n  long middle =\
    \ (min_val + max_val) / 2;\n\n  // Find minimum value in the given list.\n  auto\
    \ min_itr = std::min_element(lst.begin(), lst.end());\n\n  // Find maximum value\
    \ in the given list.\n  auto max_itr = std::max_element(lst.begin(), lst.end());\n\
    \n  // Find average value in the given list.\n  long avg_val = (min_val + max_val)\
    \ / 2;\n  while (min_itr != max_itr) {\n    if (*min_itr < avg_val) {\n      auto\
    \ temp = *min_itr;\n      *min_itr = avg_val;\n      avg_val = temp;\n    }\n\
    \    ++min_itr;\n  }\n  // Do the same for maximum.\n  avg_val = (min_val + max_val)\
    \ / 2;\n  while (min_itr != max_itr) {\n    if (*max_itr > avg_val) {\n      auto\
    \ temp = *max_itr;\n      *max_itr = avg_val;\n      avg_val = temp;\n    }\n\
    \    --max_itr;\n  }\n  // Now find the middle element in the given list.\n  auto\
    \ mid_itr = std::find_if(lst.begin(), lst.end(),\n                           \
    \   [=](long x) { return x >= middle; });\n\n  // Replace the middle element with\
    \ the minimum and maximum.\n  lst[mid_itr] = avg_val;\n\n  // Recursively sort\
    \ the rest.\n  return strange_sort_list(lst);\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwk49c6x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ results;\n    results.push_back(lst[0]);\n    for(long i=1; i<lst.size(); i++)\
    \ {\n        long min = i;\n        for(long j=i+1; j<lst.size(); j++) {\n   \
    \         if(lst[j] < lst[min]) {\n                min = j;\n            }\n \
    \       }\n        results.push_back(lst[i]);\n        results.push_back(lst[min]);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_49lb45k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end(),\
    \ [&](long a, long b) {\n    return a < b;\n  });\n  return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwagrn30.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sorting function\n    auto\
    \ compare = [](long a, long b) -> bool {\n        return a < b;\n    };\n\n  \
    \  // Return list if it is empty\n    if (lst.size() == 0)\n        return lst;\n\
    \    // Iterate list\n    auto iter = lst.begin();\n    auto next_iter = iter;\n\
    \    while (next_iter != lst.end()) {\n        // Find minimum and maximum\n \
    \       if (*iter < *next_iter) {\n            // Swap\n            *iter = *next_iter;\n\
    \            next_iter = iter;\n        }\n        // Move forward to next element\n\
    \        ++iter;\n    }\n    // Return sorted list\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwfqjsitk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.size() == 1)\n      \
    \  return lst;\n\n    std::vector<long> reversed = lst;\n    std::reverse(reversed.begin(),\
    \ reversed.end());\n    return reversed;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb8qykrdy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Initialize new empty vector.\n\
    \    std::vector<long> vec;\n    // Add first element\n    vec.push_back(lst[0]);\n\
    \    // Check size of vector against minimum.\n    if (lst.size() == 1) {\n  \
    \      return vec;\n    }\n    // If minimum is smaller than 0, then sort by absolute\
    \ value of\n    // the elements.\n    if (lst[0] < 0) {\n        std::sort(lst.begin(),\
    \ lst.end(), std::abs);\n    } else {\n        std::sort(lst.begin(), lst.end(),\
    \ std::less<long>());\n    }\n    // Initialize two iterators.\n    auto first1\
    \ = lst.begin(), first2 = lst.begin();\n    // Compare each element with previous\
    \ element.\n    while (first1 != lst.end() && first2 != lst.end()) {\n       \
    \ long val1 = *first1++;\n        long val2 = *first2++;\n        // Check which\
    \ value is smaller.\n        if (val1 < val2) {\n            // Add the smaller\
    \ element to the output vector.\n            vec.push_back(*first1);\n       \
    \ }\n        // Check which value is larger.\n        else if (val1 > val2) {\n\
    \            // Add the larger element to the output vector.\n            vec.push_back(*first2);\n\
    \        }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9eun38g_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ // Your code here\n    for (auto i : lst) {\n        for (auto j : lst) {\n\
    \            assert(i != j);\n            if (i <= j) {\n                res.push_back(j);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxsjh5orh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort ascending\n    sort(lst.begin(),\
    \ lst.end(), [](long a, long b) {return (a < b);});\n    // Now, sort descending\n\
    \    lst.swap(std::reverse(lst.begin(), lst.end()));\n    return lst;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgypemxo4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long temp;\n    for (auto it\
    \ = lst.begin(); it != lst.end(); ++it) {\n        temp = *it;\n        auto it2\
    \ = std::upper_bound(lst.begin(), lst.end(), temp);\n        lst.insert(it2, temp);\n\
    \    }\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd4c32wp2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // initialize result vector\n\
    \  std::vector<long> result(lst.size());\n  long max = 0;\n  // find minimum value\
    \ among the vector\n  for (auto i : lst) {\n    if (i > max) {\n      max = i;\n\
    \    }\n  }\n  long min = max;\n  // find the maximum of remaining values\n  for\
    \ (auto i : lst) {\n    if (i < min) {\n      min = i;\n    }\n  }\n  // swap\
    \ minimum & maximum values to start from minimum value\n  std::swap(min,max);\n\
    \  // sort remaining values in ascending order\n  for (auto i : lst) {\n    if\
    \ (i <= max) {\n      long tmp = i; \n      i = min;\n      min = tmp;\n    }\n\
    \    result[i] = i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoj2d7_mm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  int n = lst.size();\n  if (n ==\
    \ 0) {\n    return lst;\n  }\n  if (n == 1) {\n    return std::move({lst[0]});\n\
    \  }\n  std::vector<long> res(lst.begin(), lst.begin() + n); // copy\n  std::rotate(res.begin(),\
    \ res.end() - 1, res.end());\n  std::rotate(res.begin(), res.end() - 1, res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl23yuuxr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() != 0);\n \
    \   long first = lst[0];\n    std::vector<long> second;\n    second.push_back(first);\n\
    \    for (const auto& i : lst) {\n        long min_of_remaining = (i + first)\
    \ % 10;\n        long min_of_remaining = min_of_remaining > first ? min_of_remaining\
    \ : first;\n        long max_of_remaining = i % 10;\n        long max_of_remaining\
    \ = max_of_remaining < first ? max_of_remaining : first;\n        second.push_back(min_of_remaining);\n\
    \        second.push_back(max_of_remaining);\n    }\n    return second;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa57_hs96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0)\n    return\
    \ lst;\n  // First sort the list by minimum value.\n  std::stable_sort(lst.begin(),\
    \ lst.end());\n  // Now sort the list by maximum value.\n  std::stable_sort(lst.begin(),\
    \ lst.end(),\n                   [](long a, long b) { return b < a; });\n  return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbyfstumg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> temp;\n  \
    \  bool done = false;\n    while (!done) {\n        done = true;\n        for\
    \ (long i = 0; i < lst.size(); i++) {\n            if (temp.size() == 0) {\n \
    \               temp.push_back(lst[i]);\n                continue;\n         \
    \   }\n            if (lst[i] < temp.back()) {\n                done = false;\n\
    \                temp.push_back(lst[i]);\n                continue;\n        \
    \    }\n            if (lst[i] > temp.back()) {\n                done = false;\n\
    \                std::swap(temp.back(), lst[i]);\n            }\n        }\n \
    \   }\n    return temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp423t9p6s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Find the largest integer\
    \ in the vector.\n    // If there are multiple maximal integers, only take the\
    \ smallest one.\n    auto largest_int = *std::max_element(lst.begin(), lst.end());\n\
    \    // Find the smallest integer in the vector.\n    auto smallest_int = *std::min_element(lst.begin(),\
    \ lst.end());\n    // Return the vector, with all the integers swapped\n    //\
    \ to bring the largest integer to the front,\n    // and all the integers swapped\
    \ again to bring the smallest integer to the front.\n    return std::vector<long>{\n\
    \        *std::iter_swap(largest_int, lst.begin()),\n        *std::iter_swap(smallest_int,\
    \ lst.end())\n    };\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwuouz92w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> strange(lst);\n\
    \    std::vector<long> res(lst);\n    int n = lst.size();\n    // Iterate over\
    \ all elements.\n    for (int i = 0; i < n; i++) {\n        // Iterate over all\
    \ elements but exclude first element.\n        for (int j = 0; j < n - 1; j++)\
    \ {\n            // Iterate over all elements but exclude second element.\n  \
    \          for (int k = j + 1; k < n; k++) {\n                // Compare all elements\
    \ but exclude current element with element at position k.\n                if\
    \ (res[j] > res[k]) {\n                    std::swap(res[j], res[k]);\n      \
    \          }\n            }\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxsnidnwc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    long size = lst.size();\n    std::vector<long> new_lst;\n    new_lst.push_back(lst[0]);\n\
    \    for (long i = 1; i < size; i++) {\n        if (lst[i - 1] < lst[i]) {\n \
    \           new_lst.push_back(lst[i - 1]);\n        }\n        else if (lst[i\
    \ - 1] > lst[i]) {\n            new_lst.push_back(lst[i]);\n        }\n    }\n\
    \    new_lst.push_back(lst[size - 1]);\n    return new_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdidc3bid.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Create variable that holds\
    \ indexes of minimum value elements.\n    std::vector<int> min_idx;\n    // Create\
    \ variable that holds indexes of maximum value elements.\n    std::vector<int>\
    \ max_idx;\n    // Create a variable that holds the index of current maximum element.\n\
    \    int max_idx = 0;\n    // Traverse the list, find minimum element and store\
    \ its index in `min_idx`\n    for (auto & val : lst) {\n        if (val < lst[min_idx[max_idx]])\
    \ {\n            min_idx[max_idx] = val - 1;\n            max_idx = 0;\n     \
    \   } else if (val == lst[min_idx[max_idx]]) {\n            min_idx[max_idx] =\
    \ val - 1;\n        } else {\n            max_idx++;\n        }\n    }\n    //\
    \ Create variable that holds final index of the minimum element of `lst`\n   \
    \ std::vector<int> min_idx2;\n    // Traverse the list, find maximum element and\
    \ store its index in `max_idx`\n    for (auto & val : lst) {\n        if (val\
    \ < lst[min_idx2[max_idx]]) {\n            min_idx2[max_idx] = val - 1;\n    \
    \        max_idx = 0;\n        } else if (val == lst[min_idx2[max_idx]]) {\n \
    \           min_idx2[max_idx] = val - 1;\n        } else {\n            max_idx++;\n\
    \        }\n    }\n    // Create a variable that holds the final index of the\
    \ minimum element of `lst`\n    int final_min_idx = 0;\n    // Create a variable\
    \ that holds the final index of the maximum element of `lst`\n    int final_max_idx\
    \ = 0;\n    // Traverse the list, find minimum element and store its index in\
    \ `final_min_idx`\n    for (auto & val : lst) {\n        if (val < lst[final_min_idx])\
    \ {\n            final_min_idx = val - 1;\n        }\n    }\n    // Traverse the\
    \ list, find maximum element and store its index in `final_max_idx`\n    for (auto\
    \ & val : lst) {\n        if (val < lst[final_max_idx]) {\n            final_max_idx\
    \ = val - 1;\n        }\n    }\n    // Return list\n    return std::vector<long>{lst[final_min_idx],\
    \ lst[max_idx], lst[final_max_idx]};\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuetk2m4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) {\n       \
    \ return lst;\n    }\n    // get first and last elements.\n    long first = lst[0];\n\
    \    long last = lst[lst.size() - 1];\n    // sort them in strange order.\n  \
    \  std::vector<long> new_lst;\n    for (long i = first; i <= last; i++) {\n  \
    \      // get min and max of the remaining elements.\n        long min = i;\n\
    \        long max = last;\n        for (long j = 0; j < lst.size(); j++) {\n \
    \           // If they are equal, swap them, else keep looking for min and max.\n\
    \            if (lst[j] < min) {\n                min = lst[j];\n            }\n\
    \            if (lst[j] > max) {\n                max = lst[j];\n            }\n\
    \        }\n        new_lst.push_back(min);\n        new_lst.push_back(max);\n\
    \    }\n    return new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfu2_npnn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n        return\
    \ lst;\n    long max = lst.front();\n    long min = lst.back();\n    for (size_t\
    \ i = 1; i < lst.size(); ++i) {\n        long current = lst[i];\n        if (max\
    \ < current) {\n            max = current;\n        }\n        if (current < min)\
    \ {\n            min = current;\n        }\n    }\n    std::vector<long> res(lst);\n\
    \    for (size_t i = 0; i < lst.size(); ++i) {\n        long temp = res[i];\n\
    \        long idx = i;\n        while (true) {\n            if (temp < res[idx])\
    \ {\n                res[idx] = temp;\n                break;\n            }\n\
    \            idx += 1;\n            if (idx > res.size() - 1) {\n            \
    \    break;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5l9nmm1z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0) return lst;\n\
    \  long min = lst[0];\n  for (long i = 0; i < lst.size(); ++i) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n      std::swap(lst[i], lst[lst.size() - i -\
    \ 1]);\n    }\n  }\n  long max = lst[lst.size() - 1];\n  for (long i = 0; i <\
    \ lst.size(); ++i) {\n    if (lst[i] > max) {\n      max = lst[i];\n      std::swap(lst[i],\
    \ lst[lst.size() - i - 1]);\n    }\n  }\n  return lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgr_pjd27.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return\
    \ lst;\n  }\n  auto min_val = lst[0];\n  auto max_val = lst[0];\n  for (auto val\
    \ : lst) {\n    if (val < min_val) {\n      min_val = val;\n    } else if (val\
    \ > max_val) {\n      max_val = val;\n    }\n  }\n  min_val = std::min((long)min_val,\
    \ max_val);\n  max_val = std::max((long)min_val, max_val);\n  std::vector<long>\
    \ result;\n  for (auto val : lst) {\n    if (val < min_val) {\n      result.push_back((long)\
    \ max_val);\n      max_val -= 1;\n    } else if (val > max_val) {\n      result.push_back((long)\
    \ min_val);\n      min_val += 1;\n    } else {\n      result.push_back(val);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcri0sc88.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> lst1;\n  for\
    \ (long i = 0; i < lst.size(); ++i) {\n    lst1.push_back(i); // Put all indexes\
    \ from 0 to list size - 1\n  }\n  std::vector<long> lst2;\n  for (long i = 0;\
    \ i < lst1.size(); ++i) {\n    long idx = lst1[i]; // Get index of sorted list\n\
    \    lst2.push_back(lst[idx]);\n    lst2.push_back(lst[idx - 1]);\n  }\n  return\
    \ lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprxjq4egg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  if (lst.size() == 0) {\n        lst2.clear();\n    } else {\n        long largest\
    \ = lst.back();\n        lst2.push_back(lst.back());\n        lst.erase(lst.end()\
    \ - 1);\n        for (long i: lst)\n            if (i > largest) {\n         \
    \       long tmp = largest;\n                largest = i;\n                lst2.push_back(tmp);\n\
    \            }\n        }\n    }\n    return lst2;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74zjgbcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tif (lst.size() == 0)\n\t\treturn\
    \ lst;\n\tint m = lst.front();\n\tint n = lst.back();\n\tstd::vector<long> res;\n\
    \tstd::vector<int> temp;\n\tint min = m; // initialize min with minimum element\
    \ of the vector.\n\tfor (int i = m; i <= n; i++) {\n\t\t// find the minimum element\
    \ in the remaining vector.\n\t\tauto j = i;\n\t\twhile (j > m && lst[j] < min)\
    \ j--;\n\t\tif (j == i) {\n\t\t\t// we found it\n\t\t\tres.push_back(i);\n\t\t\
    \ttemp.push_back(i);\n\t\t\tmin = min;\n\t\t} else {\n\t\t\t// we don't have a\
    \ new minimum element, so we add it to res.\n\t\t\tres.push_back(i);\n\t\t\tif\
    \ (j > min) {\n\t\t\t\tint k = j;\n\t\t\t\twhile (min < lst[k] && k < n)\n\t\t\
    \t\t\tk++;\n\t\t\t\tres.push_back(lst[k]);\n\t\t\t\ttemp.push_back(lst[k]);\n\t\
    \t\t\tmin = lst[k];\n\t\t\t} else {\n\t\t\t\tint k = j;\n\t\t\t\twhile (k < min\
    \ && k < n)\n\t\t\t\t\tk++;\n\t\t\t\tres.push_back(lst[k]);\n\t\t\t\ttemp.push_back(lst[k]);\n\
    \t\t\t\tmin = lst[k];\n\t\t\t}\n\t\t}\n\t}\n\t// copy the remaining elements to\
    \ the resulting vector\n\tfor (int i = n; i < lst.size(); i++) {\n\t\tres.push_back(lst[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqafng8aq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Start with first element and\
    \ add next element to it.\n  long first = lst[0];\n  lst.erase(lst.begin());\n\
    \  std::vector<long> new_lst;\n  new_lst.push_back(first);\n  for (auto it = lst.begin();\
    \ it != lst.end(); ++it) {\n    long next_element = *it;\n    if (next_element\
    \ < first) continue;\n    new_lst.push_back(next_element);\n  }\n  return new_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5pgf7503.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    // Find minimum element in the first element\n    long min_element\
    \ = *std::min_element(lst.begin(), lst.end());\n    // Find maximum of the remaining\
    \ elements.\n    long max_element = *std::max_element(lst.begin(), lst.end());\n\
    \    // Iterate over the remaining elements, and swap the minimum and maximum\n\
    \    for (long i = std::min(lst.size() - 1, max_element); i >= min_element; --i)\
    \ {\n        long temp = lst[i];\n        lst[i] = lst[i + 1];\n        lst[i\
    \ + 1] = temp;\n    }\n    return lst;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7op8r_w0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv91fhi89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        int j = i;\n        while (j\
    \ > 0 && lst[j - 1] > lst[j]) {\n            long temp = lst[j];\n           \
    \ lst[j] = lst[j - 1];\n            lst[j - 1] = temp;\n            j--;\n   \
    \     }\n        res.push_back(lst[j]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjb1kj239.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    std::vector<long>::iterator i1{lst.begin() + 1};\n    std::vector<long>::iterator\
    \ i2{lst.begin() + 1};\n    std::advance(i1, 1);\n    std::advance(i2, 1);\n \
    \   while (i1 != lst.end() || i2 != lst.end()) {\n        if (*i1 > *i2) {\n \
    \           std::iter_swap(i1, i2);\n        }\n        else {\n            std::iter_swap(i2,\
    \ i1);\n        }\n        std::advance(i1, 1);\n        std::advance(i2, 1);\n\
    \    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpane_bg5j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // return empty list when list\
    \ is empty\n  if (lst.size() == 0) {\n    return lst;\n  }\n  std::vector<long>\
    \ sorted_lst;\n  // Initialize with first integer\n  sorted_lst.push_back(lst[0]);\n\
    \  // Sort rest of integers\n  for (size_t i = 1; i < lst.size(); i++) {\n   \
    \ if (lst[i] < lst[i - 1]) {\n      // Swap two numbers and append sorted list\
    \ with swapped number\n      sorted_lst.push_back(lst[i - 1]);\n      sorted_lst.push_back(lst[i]);\n\
    \    }\n  }\n  return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpadvis6wk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n\
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpko37ei1j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res(lst);\n\
    \    for (int i = 1; i < res.size(); i++) {\n        for (int j = i - 1; j >=\
    \ 0; j--) {\n            if (res[j] > res[i]) {\n                long temp = res[i];\n\
    \                res[i] = res[j];\n                res[j] = temp;\n          \
    \  }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyn4qsxgu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.empty())\n        return\
    \ lst;\n    // get min and max from list of all elements.\n    long long min =\
    \ lst[0];\n    long long max = lst[0];\n    for (auto el : lst)\n        if(el\
    \ < min)\n            min = el;\n        if(el > max)\n            max = el;\n\
    \    // now sort list\n    std::vector<long> res(std::begin(lst), std::begin(lst)\
    \ + 2);\n    // Now add max to res\n    res.push_back(max);\n    // Now add min\
    \ to res\n    res.push_back(min);\n    // Now add rest of list to res\n    res.insert(res.end(),\
    \ lst.begin() + 2, lst.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp10gffcjd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0) return lst;\n\
    \  long min_v = *std::min_element(lst.begin(), lst.end());\n  long max_v = *std::max_element(lst.begin(),\
    \ lst.end());\n  std::vector<long> new_list;\n  new_list.push_back(min_v);\n \
    \ new_list.push_back(max_v);\n  for (int i = 1; i < lst.size(); ++i) {\n    new_list.push_back(lst[i]);\n\
    \    if (new_list.back() == max_v) new_list.pop_back();\n  }\n  return new_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9c_1n3de.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  lst.erase(lst.begin(), lst.end());\n\
    \  long largest = *std::max_element(lst.begin(), lst.end());\n  auto it = lst.begin();\n\
    \  while (it != lst.end()) {\n    if (*it > largest) {\n      auto temp = *it;\n\
    \      *it = largest;\n      largest = temp;\n    }\n    ++it;\n  }\n  lst.push_back(largest);\n\
    \  it = lst.begin();\n  while (it != lst.end()) {\n    if (*it < largest) {\n\
    \      auto temp = *it;\n      *it = largest;\n      largest = temp;\n    }\n\
    \    ++it;\n  }\n  lst.push_back(largest);\n  return lst;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpngtrdx1p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  std::vector<long> res(lst);\n    std::sort(res.begin(), res.end(), [](const\
    \ long& lhs, const long& rhs) {\n        return lhs < rhs;\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxcxty4p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  long min = 0;\n  long max = *std::max_element(std::begin(lst),\
    \ std::end(lst));\n  for (int i = 0; i < (int)(lst.size() - 1); ++i) {\n    if\
    \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> ret;\n\
    \  ret.reserve(lst.size());\n  for (int i = 0; i < lst.size(); ++i) {\n    if\
    \ (lst[i] < min) {\n      ret.push_back(lst[i]);\n    }\n  }\n  ret.push_back(max);\n\
    \  ret.insert(ret.end(), min, (min));\n  return ret;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6fki0k9v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    int size = lst.size();\n   \
    \ std::vector<long> lst1(size);\n    for(int i=0; i<size; i++){\n        lst1[i]\
    \ = lst[i];\n    }\n    long max_val = *std::max_element(std::begin(lst1), std::end(lst1));\n\
    \    for(int i=0; i<size; i++){\n        if(max_val <= lst[i]){\n            lst1[i]\
    \ = std::max(lst[i], max_val);\n            max_val -= lst[i];\n        }\n  \
    \  }\n    return lst1;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfokc2dah.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long long i = 1;\n    // sort\
    \ from smallest to largest.\n    for (const auto& ele : lst)\n        ele *= i++;\n\
    \n    // return reverse of the vector sorted from largest to smallest.\n    std::vector<long>\
    \ res(static_cast<size_t>(lst.size()), -1);\n    for (auto it = lst.rbegin();\
    \ it != lst.rend(); ++it)\n        res[it - lst.begin()] = *it;\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy_15layf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n\
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpko37ei1j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) return lst;\n\
    \    std::vector<long> res = lst;\n    std::sort(lst.begin(), lst.end());\n  \
    \  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp27ni2xr1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0)\n        return res;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min)\n            min\
    \ = i;\n        else if (i > max)\n            max = i;\n    }\n    while (max\
    \ > min) {\n        long mid = min + (max - min) / 2;\n        bool found = false;\n\
    \        for (long i : lst) {\n            if (i == mid) {\n                found\
    \ = true;\n                res.push_back(mid - 1);\n                res.push_back(mid);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         res.push_back(mid);\n            res.push_back(mid);\n        }\n  \
    \      max = mid;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6gx69r5z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    int max_value = *std::max_element(lst.begin(),\
    \ lst.end());\n    int min_value = *std::min_element(lst.begin(), lst.end());\n\
    \n    std::vector<long> result;\n    result.push_back(max_value);\n    result.push_back(min_value);\n\
    \n    for (auto i : lst) {\n        if (i > max_value) {\n            result.push_back(max_value);\n\
    \        } else if (i < min_value) {\n            result.push_back(min_value);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp58ht9ojt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2(lst.size());\n\
    \    // initialize with smallest value\n    long min = *std::min_element(lst.begin(),\
    \ lst.end()) + 1;\n    // initialize with largest value\n    long max = *std::max_element(lst.begin(),\
    \ lst.end()) + 1;\n    for (int i = 0; i < lst.size(); i++) {\n        // swap\
    \ with current min and max if current value is minimum or maximum\n        if\
    \ (lst[i] < min || (lst[i] == min && lst[i] > max)) {\n            long temp =\
    \ lst[i];\n            lst[i] = min;\n            min = max;\n            max\
    \ = temp;\n        }\n        // swap with current max and min if current value\
    \ is maximum or minimum\n        else if (lst[i] > max || (lst[i] == max && lst[i]\
    \ < min)) {\n            long temp = lst[i];\n            lst[i] = max;\n    \
    \        max = min;\n            min = temp;\n        }\n        // swap with\
    \ current value if current value is equal\n        else {\n            long temp\
    \ = lst[i];\n            lst[i] = lst[i];\n        }\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpptw3ihex.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Return empty if list is empty\n\
    \    if (lst.empty()) return lst;\n    std::vector<long> v;\n    v.reserve(lst.size());\n\
    \    // If first value is min, swap with last value\n    if (lst.size() > 1 &&\
    \ lst.front() == lst[lst.size() - 1]) lst.erase(lst.end() - 1);\n    // If last\
    \ value is max, swap with first value\n    if (lst.size() > 1 && lst.back() ==\
    \ lst[0]) lst.erase(lst.begin());\n\n    // Iterate over list\n    for (auto it1\
    \ = lst.begin(); it1 != lst.end(); ++it1) {\n        // Iterate over list to find\
    \ max value\n        for (auto it2 = lst.begin(); it2 != lst.end(); ++it2) {\n\
    \            // If this value is greater than last value, swap with it\n     \
    \       if (*it2 > *it1) std::iter_swap(it2, it1);\n        }\n        // Iterate\
    \ over list to find min value\n        for (auto it2 = lst.begin(); it2 != lst.end();\
    \ ++it2) {\n            // If this value is less than first value, swap with it\n\
    \            if (*it2 < *it1) std::iter_swap(it2, it1);\n        }\n        v.push_back(*it1);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn107rv1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n\n    std::vector<long> res = lst;\n    for (long long\
    \ i = 0; i < res.size(); i++) {\n        long long cur_val = res[i];\n       \
    \ long long cur_size = i;\n        for (long long j = i + 1; j + 1 < res.size();\
    \ j++) {\n            if (res[j] < cur_val) {\n                cur_size = j;\n\
    \                cur_val = res[j];\n            }\n        }\n        res.swap(res[cur_size],\
    \ res[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp5jynsma.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.size() == 0)\n      \
    \  return lst;\n    for(size_t i = 1; i < lst.size(); i++) {\n        long tmp\
    \ = lst[i];\n        for(size_t j = i; j > 0 && lst[j-1] < tmp; j--)\n       \
    \     lst[j] = lst[j-1];\n        lst[j] = tmp;\n    }\n    return lst;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr2jpyece.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0) {\n    return\
    \ lst;\n  }\n  // Get the maximum value, which we'll swap with minimum value later\n\
    \  long max_val = *std::max_element(lst.begin(), lst.end());\n  // Put all values\
    \ which are greater than max_val at end\n  lst.insert(lst.end(), std::lower_bound(lst.begin(),\
    \ lst.end(), max_val),\n             lst.end());\n  // Swap minimum values with\
    \ the max_val\n  for (auto it : lst) {\n    if (it == max_val) {\n      it++;\n\
    \    }\n  }\n  // Swap the max_val\n  lst.emplace_back(max_val);\n  return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp51aojnq4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> ret; \n    long smallest = std::numeric_limits<long>::min();\n\
    \    long largest = std::numeric_limits<long>::max();\n    for(long i = 0; i <\
    \ lst.size(); i++){\n        if(lst[i] > largest)\n            largest = lst[i];\n\
    \        if(lst[i] < smallest)\n            smallest = lst[i];\n    }\n    long\
    \ mid = smallest + (largest - smallest) / 2;\n    for(long i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > mid)\n            ret.resize(i+1);\n        if(lst[i]\
    \ < mid)\n            ret.insert(ret.begin()+i, lst[i]);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdo6e_d0w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    bool flag=true;\n    std::vector<long>\
    \ ans;\n    for(int i=0;i<lst.size();i++) {\n        while(lst[i]<lst[i+1] &&\
    \ flag==true) {\n            swap(lst[i],lst[i+1]);\n            ans.push_back(lst[i]);\n\
    \            i++;\n            flag=true;\n        }\n        flag=!flag;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpje_ts7nr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) return std::move(lst);\n\
    \    int size = lst.size();\n    // Find first minimum\n    int min_index = 0;\n\
    \    for (int i = 1; i < size; i++) {\n        if (lst[min_index] > lst[i]) min_index\
    \ = i;\n    }\n    // Swap first minimum with last\n    swap(lst[min_index], lst[size\
    \ - 1]);\n    // Insert last minimum on its place\n    std::vector<long> new_lst;\n\
    \    for (int i = min_index + 1; i < size; i++) {\n        new_lst.push_back(lst[i]);\n\
    \    }\n    // Sort remaining list\n    return strange_sort_list(std::move(new_lst));\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvbxgdf5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Create a vector of vectors,\
    \ where each inner vector\n    // will store sorted values.\n    std::vector<std::vector<long>\
    \ > vs(lst.size());\n    // Fill vectors with initial values\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        vs[i].reserve(lst.size());\n        for (int\
    \ j = 0; j < lst.size(); j++) {\n            vs[i].push_back(lst.at(j));\n   \
    \     }\n    }\n    // Sort all inner vectors and copy to outer vector.\n    for\
    \ (std::vector<std::vector<long> >::iterator vit = vs.begin();\n         vit !=\
    \ vs.end(); ++vit) {\n        std::sort(vit->begin(), vit->end());\n    }\n  \
    \  // Return sorted vector.\n    return vs;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8yuekbof.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Sorting begins\n  std::vector<long>\
    \ temp(lst);\n  std::stable_sort(temp.begin(), temp.end(), [&](long a, long b)\
    \ {\n    return a > b;\n  });\n  // Sorting ends\n  return temp;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpngfle85w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv91fhi89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.empty()) {\n        return\
    \ lst;\n    }\n    if(lst.size() == 1) {\n        return lst;\n    }\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\
    \ {\n        if(lst[i] < min) {\n            min = lst[i];\n        }\n      \
    \  if(lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long middle\
    \ = min + (max - min) / 2;\n    long tmp;\n    std::vector<long> res;\n    for(long\
    \ i = middle; i >= min; --i) {\n        for(long j = i; j < lst.size(); ++j) {\n\
    \            if(lst[j] < middle) {\n                tmp = lst[j];\n          \
    \      lst[j] = lst[i];\n                lst[i] = tmp;\n            }\n      \
    \  }\n        for(long j = i; j < lst.size(); ++j) {\n            if(lst[j] <=\
    \ middle) {\n                res.push_back(lst[j]);\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshf6thpy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2(lst.size());\n\
    \    std::iota(lst2.begin(), lst2.end(), 0);\n    std::vector<long> lst3(lst.size());\n\
    \    for (long i = 1; i < lst.size(); i++) {\n        long j = lst2[i];\n    \
    \    lst3[j - 1] = lst[j];\n        lst3[j] = lst[j - 1];\n    }\n    return lst3;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpavmv3oai.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(!lst.empty());\n    auto\
    \ it = lst.begin();\n    long low = *it;\n    std::vector<long> result;\n    if\
    \ (low != 0) {\n        result.push_back(0);\n        ++it;\n    }\n    while\
    \ (it != lst.end()) {\n        long cur = *it;\n        if (cur == low) {\n  \
    \          ++it;\n            continue;\n        }\n        if (cur > low) {\n\
    \            std::swap(cur, low);\n            ++it;\n            continue;\n\
    \        }\n        std::swap(low, cur);\n        ++it;\n    }\n    result.push_back(low);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcndakq0w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  std::vector<long> res;\n    res.push_back(lst.front());\n    long temp;\n \
    \   for (auto it : lst) {\n        if (it < res.front()) {\n            temp =\
    \ it.front();\n            it.swap(res.front());\n            res.front() = temp;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfpidya6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() != 0);\n \
    \   std::vector<long> sorted_list;\n    if (lst.size() == 1) {\n        sorted_list.push_back(lst[0]);\n\
    \    } else {\n        long min_val = std::numeric_limits<long>::max();\n    \
    \    long max_val = std::numeric_limits<long>::min();\n        for (long elem\
    \ : lst) {\n            if (elem < min_val) min_val = elem;\n            if (elem\
    \ > max_val) max_val = elem;\n        }\n        // Sort elements using the following\
    \ rules:\n        // 1) When there are 2 elements that are the same, sort by the\
    \ first element.\n        // 2) When there are 2 elements that are not the same,\
    \ sort by the first element and then\n        //    by the second element.\n \
    \       // 3) When there are more than 2 elements that are not the same, sort\
    \ the first two elements\n        //    by their first element and then by the\
    \ second element.\n        // 4) When there are more than 2 elements that are\
    \ the same, sort by the first two elements.\n        // 5) (If there are 3 or\
    \ more elements, sort by the first two and then by the last element).\n      \
    \  std::vector<long> sorted_list_1 = strange_sort_list(lst);\n        for (long\
    \ elem : sorted_list_1) {\n            if (sorted_list.size() >= 2) if (elem ==\
    \ sorted_list[0]) sorted_list[1] = elem;\n            else if (sorted_list.size()\
    \ == 2) if (elem == sorted_list[1]) sorted_list[0] = elem;\n            else if\
    \ (sorted_list.size() > 2) sorted_list.insert(sorted_list.begin() + 2, elem);\n\
    \            else sorted_list.push_back(elem);\n        }\n        if (sorted_list.size()\
    \ > 2) sorted_list.insert(sorted_list.begin() + 2, max_val);\n        else if\
    \ (sorted_list.size() == 2) if (sorted_list[1] == max_val) sorted_list[0] = max_val;\n\
    \        else if (sorted_list.size() > 2) sorted_list.insert(sorted_list.begin()\
    \ + 2, max_val);\n        else sorted_list.push_back(max_val);\n    }\n    return\
    \ sorted_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe1lsj4hp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> temp;\n  \
    \  for (auto x : lst) {\n        temp.push_back(x);\n    }\n    std::vector<long>\
    \ ret(temp);\n    sort(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpls1okms5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // TODO: implement me\n    //\
    \ Your code here\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2pl77l8x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // create and initialize all\
    \ vectors and sort them\n    std::vector<long> res(lst);\n    std::sort(res.begin(),\
    \ res.end());\n\n    // for debug\n    for(auto e : res) {\n        std::cout\
    \ << e << ' ';\n    }\n\n    // return the res\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb059t4ej.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Initialize vector with first\
    \ element\n    std::vector<long> lst_cpy(lst);\n    // If vector is empty return\
    \ vector.\n    if (lst.size() == 0) {\n        return lst_cpy;\n    }\n    //\
    \ Initialize vector\n    std::vector<long> lst_ret(lst.size());\n    // Initialize\
    \ max and min values\n    long max = lst[0];\n    long min = lst[0];\n    // Iterate\
    \ over vector\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        } else if (lst[i] < min) {\n  \
    \          min = lst[i];\n        }\n    }\n    // Iterate over vector\n    for\
    \ (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] > max) {\n       \
    \     max = lst[i];\n        } else if (lst[i] < min) {\n            min = lst[i];\n\
    \        }\n    }\n    // Iterate over vector\n    for (size_t i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        } else\
    \ if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    // Iterate\
    \ over vector\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        } else if (lst[i] < min) {\n  \
    \          min = lst[i];\n        }\n    }\n    // Iterate over vector\n    for\
    \ (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n       \
    \     max = lst[i];\n        } else if (lst[i] < min) {\n            min = lst[i];\n\
    \        }\n    }\n    // Iterate over vector\n    for (size_t i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        } else\
    \ if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    // Iterate\
    \ over vector\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        } else if (lst[i] < min) {\n  \
    \          min = lst[i];\n        }\n    }\n    // Iterate over vector\n    for\
    \ (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n       \
    \     max = lst[i];\n        } else if (lst[i] < min) {\n            min = lst[i];\n\
    \        }\n    }\n    // Iterate over vector\n    for (size_t i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        } else\
    \ if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    // Iterate\
    \ over vector\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        } else if (lst[i] < min) {\n  \
    \          min = lst[i];\n        }\n    }\n    // Iterate over vector\n    for\
    \ (size_t i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n       \
    \     max = \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1jw6o92j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  std::vector<long> ret(lst);\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long temp = 0;\n    long\
    \ curr = 0;\n    int index = 0;\n    while (index < lst.size()) {\n        temp\
    \ = ret[index];\n        while (index >= 0) {\n            curr = ret[index];\n\
    \            if (curr > temp) {\n                ret[index] = temp;\n        \
    \        temp = curr;\n            }\n            index--;\n        }\n      \
    \  ret[index] = temp;\n        if (index > 0) {\n            if (ret[index] >\
    \ min) {\n                min = ret[index];\n            }\n            if (ret[index]\
    \ < max) {\n                max = ret[index];\n            }\n        }\n    \
    \    index++;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpum61iyul.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  long\
    \ min_value = *std::min_element(lst.begin(), lst.end());\n  for (long i = min_value;\
    \ i < lst.size(); i++) {\n    result.push_back(i);\n  }\n  long max_value = *std::max_element(lst.begin(),\
    \ lst.end());\n  for (long i = max_value; i > min_value; i--) {\n    result.push_back(i);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprb8xai9i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.empty()) return lst;\n\
    \n    long m = lst.front();\n    long n = lst.back();\n\n    for(long i = 2; i\
    \ < lst.size(); ++i){\n        if(lst[i] > m){\n            m = lst[i];\n    \
    \    }\n        else if(lst[i] < n){\n            n = lst[i];\n        }\n   \
    \ }\n\n    std::vector<long> ans;\n    ans.push_back(m);\n    ans.push_back(n);\n\
    \    for(long i = 2; i < lst.size(); ++i){\n        if(lst[i] > m){\n        \
    \    ans.push_back(lst[i]);\n        }\n        else if(lst[i] < n){\n       \
    \     ans.insert(ans.end(), lst[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps44f3us1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Initialize vector with empty\
    \ elements\n    std::vector<long> rev(lst.size());\n    // Push first element\
    \ to the vector\n    rev.push_back(lst[0]);\n    // Iterate through remaining\
    \ elements of list and sort them\n    for (size_t i = 1; i < lst.size(); ++i)\
    \ {\n        // If current element is less than previous element,\n        //\
    \ swap it with previous element\n        if (lst[i] < rev[i - 1]) {\n        \
    \    std::swap(rev[i], rev[i - 1]);\n        }\n    }\n    return rev;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6js6z0j8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    assert(lst.size() > 0);\n  \
    \  int i = 0;\n    for (i = 1; i < lst.size(); i++) {\n        if (lst[i] > lst[i\
    \ - 1]) {\n            auto temp = lst[i];\n            lst[i] = lst[i - 1];\n\
    \            lst[i - 1] = temp;\n        }\n    }\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyx0yt4m5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  long long len = lst.size();\n\
    \  if (len == 1) return lst;\n  long long max_elem = std::max(lst.begin(), lst.end());\
    \ // maximum value\n  long long min_elem = std::min(lst.begin(), lst.end()); //\
    \ minimum value\n  std::vector<long> res(len);\n  for (long long i = 0; i < len;\
    \ i++) {\n    long long elem = lst[i]; // current value\n    long long j = i;\n\
    \    for (;;) {\n      long long k = lst[j]; // get next element to compare\n\
    \      if (elem > k) {\n        long long temp = elem;\n        elem = k;\n  \
    \      k = temp;\n      }\n      if (elem > max_elem) {\n        break;\n    \
    \  }\n      if (elem == max_elem) {\n        res[i] = elem;\n        res[j] =\
    \ k;\n        res[j + 1] = min_elem;\n        break;\n      }\n      if (k > max_elem)\
    \ {\n        break;\n      }\n      if (k == max_elem) {\n        res[i] = elem;\n\
    \        res[j] = k;\n        res[j + 1] = min_elem;\n        break;\n      }\n\
    \      j++;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9xk3case.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long temp = lst[0];\n    std::vector<long>\
    \ result;\n    // swap first with last element.\n    result.push_back(lst[lst.size()\
    \ - 1]);\n    result.push_back(temp);\n    long pos = 0;\n    for (size_t i =\
    \ 1; i < lst.size(); i++) {\n        // swap position with last element.\n   \
    \     result.push_back(lst[pos]);\n        result.push_back(lst[i]);\n       \
    \ // swap first with remaining element.\n        temp =  lst[i];\n        lst[i]\
    \ = lst[pos];\n        lst[pos] = temp;\n        pos = i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5fq8pfn9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here.\n \
    \   if(lst.empty())\n        return lst;\n    std::vector<long> vec;\n    for(auto\
    \ it=lst.begin(); it!=lst.end(); it++) {\n        vec.push_back(*it);\n    }\n\
    \    for(int i=vec.size()-2; i>=0; i--) {\n        std::swap(vec[i], vec[i+1]);\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprkyhw_pa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> ret;\n   \
    \ // Check if list is empty.\n    if (lst.size() == 0) {\n        return ret;\n\
    \    }\n    // Get the minimum value of the remaining numbers.\n    long min_val\
    \ = *std::min_element(lst.begin(), lst.end()); // C++11 feature, use std::min\n\
    \    // If the list is just one number, the minimum value will be 0 and the sort\
    \ will do nothing.\n    if (lst.size() == 1) {\n        lst.clear();\n       \
    \ ret.push_back(min_val);\n        return ret;\n    }\n    // If the list is just\
    \ one number, the minimum value will be 0 and the sort will do nothing.\n    if\
    \ (lst.size() == 2) {\n        lst.clear();\n        ret.push_back(min_val);\n\
    \        return ret;\n    }\n    // Start with the minimum value, then maximum\
    \ of the remaining numbers.\n    // In each step of the process, pick the next\
    \ minimum value, and swap with the current element in the list.\n    // After\
    \ each swap, the element in the list that was next to the current one will be\
    \ its new maximum.\n    for (long m = min_val, i = 0; i < (lst.size() - 1); i++)\
    \ {\n        for (long n = (lst.size() - 1) - i; n < lst.size(); n++) {\n    \
    \        // Swap\n            if (lst[n] < m) {\n                long tmp = lst[n];\n\
    \                lst[n] = m;\n                m = tmp;\n            }\n      \
    \  }\n    }\n    // If there were no swaps in the process, return the original\
    \ list.\n    if (lst.size() == 0) {\n        lst.clear();\n        ret.push_back(min_val);\n\
    \        return ret;\n    }\n    // If the list is just one number, the minimum\
    \ value will be 0 and the sort will do nothing.\n    if (lst.size() == 1) {\n\
    \        lst.clear();\n        ret.push_back(min_val);\n        return ret;\n\
    \    }\n    // If the list is just one number, the minimum value will be 0 and\
    \ the sort will do nothing.\n    if (lst.size() == 2) {\n        lst.clear();\n\
    \        ret.push_back(min_val);\n        return ret;\n    }\n    // Start with\
    \ the minimum value, then maximum of the remaining numbers.\n    // In each step\
    \ of the process, pick the next minimum value, and swap with the current element\
    \ in the list.\n    // After each swap, the element in the list that was next\
    \ to the current one will be its new maximum.\n    for (long m = min_val, i =\
    \ 0; i < (lst.size() - 1); i++) {\n        for (long n = (lst.size() - 1) - i;\
    \ n < lst.size(); n++) {\n            // Swap\n            if (lst[n] < m) {\n\
    \                long tmp = lst[n];\n                lst[n] = m;\n           \
    \     m = tmp;\n            }\n        }\n    }\n    // If there were no swaps\
    \ in the process, return the original list.\n    if (lst.size() == 0) {\n    \
    \    lst.clear();\n        ret.push_back(min_val);\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjyi6xgyx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv91fhi89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n   \
    \     return lst;\n    }\n    long min = lst[0];\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n    }\n    long max =\
    \ lst[0];\n    for (long i : lst) {\n        if (i > max) {\n            max =\
    \ i;\n        }\n    }\n    long middle = min + max / 2;\n    std::vector<long>\
    \ res(lst);\n    std::sort(res.begin(), res.end(), [middle](int a, int b) {\n\
    \        return a > b ? b - middle : a - middle;\n    });\n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzokxkm_3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    int size = lst.size();\n   \
    \ // Create a vector of pointers, that point to each element in lst\n    std::vector<long\
    \ *> vector_ptr(size);\n    for (int i = 0; i < size; i++) {\n        vector_ptr[i]\
    \ = &lst[i];\n    }\n    // Sort elements to get strange order and make pointer\
    \ point to that element\n    std::sort(vector_ptr.begin(), vector_ptr.end(), [](long\
    \ &a, long &b){return (a<b);});\n    // Go through elements again, now pointing\
    \ to each other\n    for (int i = 0; i < size; i++) {\n        lst[i] = vector_ptr[i];\
    \ // Make elements point to each other\n    }\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5tkw4rui.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> v1;\n    v1.reserve(lst.size());\n\
    \    for (long i = 0; i < (int)lst.size(); i++) {\n        v1.push_back(i);\n\
    \    }\n    std::vector<long> v2;\n    v2.reserve(lst.size());\n    for (long\
    \ i = 0; i < (int)lst.size(); i++) {\n        v2.push_back(lst.at(i));\n    }\n\
    \n    std::sort(v1.begin(), v1.end(), std::less<long>());\n    std::sort(v2.begin(),\
    \ v2.end(), std::less<long>());\n\n    std::vector<long> v3;\n    v3.reserve(v1.size());\n\
    \    for (long i = 0; i < v1.size(); i++) {\n        v3.push_back(v2.at(v1.at(i)));\n\
    \    }\n    return v3;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph7mrwizn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> copy;\n  //\
    \ Copy list to vector.\n  std::copy(lst.begin(), lst.end(), std::back_inserter(copy));\n\
    \  // Sort copy vector in strange order.\n  std::sort(copy.begin(), copy.end(),\
    \ [](long left, long right) -> bool {\n    return left > right;\n  });\n  return\
    \ copy;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6mxgdjrk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.size() == 0)\n      \
    \  return lst;\n    int min_idx = lst.size() - 1;\n    int max_idx = lst.size()\
    \ - 1;\n    while(min_idx >= 0 && lst[min_idx] <= lst[max_idx]) {\n        swap(lst[min_idx],\
    \ lst[max_idx]);\n        max_idx--;\n    }\n    while(max_idx < lst.size() -\
    \ 1 && lst[min_idx] > lst[max_idx]) {\n        swap(lst[max_idx], lst[min_idx]);\n\
    \        min_idx++;\n    }\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg1u7o2z0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> temp(lst);\n\
    \    std::sort(temp.begin(), temp.end(), [](long a, long b) -> bool {\n      \
    \  return a < b;\n    });\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpakd9m_y9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> tmp(lst);\n    std::sort(tmp.begin(), tmp.end(),\
    \ [&lst](long a, long b){\n        int res = a > b ? 1 : a < b ? -1 : 0;\n   \
    \     int l1 = std::max(static_cast<long>(a), static_cast<long>(b));\n       \
    \ int l2 = std::min(static_cast<long>(a), static_cast<long>(b));\n        long\
    \ x = l1 - l2;\n        return x < 0 ? -1 : x > 0 ? 1 : 0;\n    });\n    return\
    \ tmp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps0t7vylh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n\n    // Find the minimum value in lst\n    auto min_it = std::min_element(lst.begin(),\
    \ lst.end());\n    auto min_element = *min_it;\n\n    // Find all the elements\
    \ in lst\n    auto it = std::find(lst.begin(), lst.end(), min_element);\n\n  \
    \  // Get the difference between min and all elements (minus the min)\n    auto\
    \ min_dist = std::distance(it, lst.begin());\n    auto min_dist_from_end = std::distance(it,\
    \ lst.end());\n\n    // Get the difference between min and all elements (minus\
    \ the min plus the min)\n    auto max_dist = std::distance(min_it, lst.begin());\n\
    \    auto max_dist_from_end = std::distance(min_it, lst.end());\n\n    // Swap\
    \ the minimum with the first element in lst\n    lst.swap(*min_it);\n\n    //\
    \ Get the index of the first element in lst\n    auto first_index_min_ind = std::distance(\n\
    \            lst.begin(),\n            std::find(lst.begin(), lst.end(), min_element)\n\
    \        );\n\n    // Get the last index for every element in lst before it (lst[first_index_min_ind])\n\
    \    auto last_index_min_ind = std::distance(\n            lst.begin(),\n    \
    \        std::find(lst.begin(), lst.end(), lst.front())\n        );\n\n    //\
    \ Swap the minimum with the last element in lst\n    lst.swap(*min_it);\n\n  \
    \  // Get the index of the last element in lst\n    auto last_index_min_ind =\
    \ std::distance(\n            lst.begin(),\n            std::find(lst.begin(),\
    \ lst.end(), lst.back())\n        );\n\n    // Get the index of the first element\
    \ in lst\n    auto first_index_max_ind = std::distance(\n            lst.begin(),\n\
    \            std::find(lst.begin(), lst.end(), lst.back())\n        );\n\n   \
    \ // Get the last index for every element in lst before it (lst[first_index_max_ind])\n\
    \    auto last_index_max_ind = std::distance(\n            lst.begin(),\n    \
    \        std::find(lst.begin(), lst.end(), lst.front())\n        );\n\n    //\
    \ Swap the last element in lst with the first element in lst\n    lst.swap(*min_it);\n\
    \n    // Get the index of the last element in lst\n    auto last_index_max_ind\
    \ = std::distance(\n            lst.begin(),\n            std::find(lst.begin(),\
    \ lst.end(), lst.front())\n        );\n\n    // Swap the minimum with the last\
    \ element in lst\n    lst.swap(*min_it);\n\n    // Get the index of the last element\
    \ in lst\n    auto last_index_max_ind = std::distance(\n            lst.begin(),\n\
    \            std::find(lst.begin(), lst.end(), lst.back())\n        );\n\n   \
    \ // Find the difference between \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqgd63eec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv91fhi89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976436
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tassert(lst.size() >= 1);\n\tstd::vector<long>\
    \ ans;\n\tans.push_back(lst.back());\n\tans.push_back(lst.front());\n\tfor (long\
    \ i = 2; i < lst.size(); i++) {\n\t\tif (lst[i] < ans.back()) {\n\t\t\tans.push_back(lst[i]);\n\
    \t\t}\n\t\telse if (lst[i] > ans.front()) {\n\t\t\tans.push_back(lst[i]);\n\t\t\
    }\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt8arlvzp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Create a temp vector\n  \
    \  std::vector<long> temp;\n    // Check if list is empty\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    // Sort first using std::min\n    std::minmax_element(lst.begin(),\
    \ lst.end(), [&](const long& a, const long& b) -> bool {\n        return a < b;\n\
    \    });\n    // Add min/max to temp vector\n    temp.push_back(std::min(*std::min_element(lst.begin(),\
    \ lst.end()) + 1));\n    temp.push_back(std::max(*std::max_element(lst.begin(),\
    \ lst.end()) - 1));\n    // Add min/max to temp vector\n    temp.push_back(std::min(*std::min_element(lst.begin(),\
    \ lst.end()) + 1));\n    temp.push_back(std::max(*std::max_element(lst.begin(),\
    \ lst.end()) - 1));\n    // Return list\n    return temp;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe3uc9_kg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) return lst;\n\
    \    std::vector<long> result;\n    // We start with minimum value and then maximum\
    \ of remaining values.\n    auto minmax = std::minmax_element(lst.begin(), lst.end());\n\
    \    // If we have only one element, return the single element vector.\n    if\
    \ (lst.size() == 1) return {lst.front()};\n    // If we have two elements, we\
    \ do some recursive calls until\n    // we get to the middle. Then, we can apply\
    \ the recursive call\n    // on the list except the middle element.\n    if (lst.size()\
    \ >= 2) {\n        result.push_back(minmax.first);\n        auto minmax_next =\
    \ std::minmax_element(lst.begin() + 1, lst.end());\n        auto min = minmax.first;\n\
    \        auto max = minmax_next.first;\n        auto middle = min + (max - min)\
    \ / 2;\n        result.push_back(middle);\n        result.push_back(minmax_next.second);\n\
    \        result.push_back(minmax.second);\n        // Recursive call is applied\
    \ on the list except the middle value.\n        result.insert(result.begin() +\
    \ 2, strange_sort_list(lst.begin() + 1, lst.begin() + 2));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwzytbykm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n        return\
    \ std::vector<long>();\n    // Find minimum.\n    long min_val = lst[0];\n   \
    \ for (long i : lst) {\n        if (i < min_val)\n            min_val = i;\n \
    \   }\n    // Find maximum.\n    long max_val = lst[0];\n    for (long i : lst)\
    \ {\n        if (i > max_val)\n            max_val = i;\n    }\n    // Find middle\
    \ of minimum and maximum.\n    long mid_val = min_val + max_val / 2;\n    // If\
    \ they are equal, return same vector.\n    if (mid_val == min_val && mid_val ==\
    \ max_val)\n        return lst;\n    // Otherwise, swap them.\n    std::swap(min_val,\
    \ max_val);\n    // Find middle of middle of minimum and maximum.\n    mid_val\
    \ = min_val + max_val / 2;\n    // If they are equal, return same vector.\n  \
    \  if (mid_val == min_val && mid_val == max_val)\n        return lst;\n    //\
    \ Otherwise, swap them.\n    std::swap(min_val, max_val);\n    // Find middle\
    \ of middle of middle of minimum and maximum.\n    mid_val = min_val + max_val\
    \ / 2;\n    // If they are equal, return same vector.\n    if (mid_val == min_val\
    \ && mid_val == max_val)\n        return lst;\n    // Otherwise, swap them.\n\
    \    std::swap(min_val, max_val);\n    // Find middle of middle of middle of middle\
    \ of minimum and maximum.\n    mid_val = min_val + max_val / 2;\n    // If they\
    \ are equal, return same vector.\n    if (mid_val == min_val && mid_val == max_val)\n\
    \        return lst;\n    // Otherwise, swap them.\n    std::swap(min_val, max_val);\n\
    \    // Sort from minimum to maximum.\n    for (long i = min_val; i < max_val;\
    \ i++) {\n        std::swap(lst[i], lst[max_val - i - 1]);\n    }\n    // Sort\
    \ from minimum to maximum.\n    for (long i = min_val; i < max_val; i++) {\n \
    \       std::swap(lst[i], lst[max_val - i - 1]);\n    }\n    // Sort from minimum\
    \ to maximum.\n    for (long i = min_val; i < max_val; i++) {\n        std::swap(lst[i],\
    \ lst[max_val - i - 1]);\n    }\n    // Sort from minimum to maximum.\n    for\
    \ (long i = min_val; i < max_val; i++) {\n        std::swap(lst[i], lst[max_val\
    \ - i - 1]);\n    }\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyrt7km4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Sort from min to max\n  lst.erase(std::sort(lst.begin(),\
    \ lst.end(), [&](int a, int b) -> bool {\n    if (a < b) return true;\n    if\
    \ (a > b) return false;\n    return a < b;\n  }));\n  // Sort from max to min\n\
    \  lst.erase(std::sort(lst.rbegin(), lst.rend(), [&](int a, int b) -> bool {\n\
    \    if (a < b) return true;\n    if (a > b) return false;\n    return a > b;\n\
    \  }), lst.end());\n  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi763aqlg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Base case.\n    if (lst.size()\
    \ == 0)\n        return lst;\n\n    // Create two arrays to hold the original\
    \ and strange lists.\n    // The original will hold the original ordering of the\
    \ elements.\n    // The strange list will hold the strange ordering of the elements.\n\
    \    // Then we'll iterate through the original list and append the elements\n\
    \    // to the strange list in the right order.\n    std::vector<long> orig_list;\n\
    \    std::vector<long> strange_list;\n\n    // Get the original array elements.\n\
    \    for (long i = 0; i < lst.size(); ++i) {\n        orig_list.push_back(lst.at(i));\n\
    \    }\n\n    // Iterate through the original array and put it in the strange\
    \ list in the right order.\n    for (long i = 0; i < orig_list.size(); ++i) {\n\
    \        if (i < orig_list.size() - 1) {\n            strange_list.push_back(orig_list.at(i));\n\
    \        } else if (i > 0) {\n            strange_list.at(i - 1) = orig_list.at(i);\n\
    \        }\n    }\n\n    // Return the strange list.\n    return strange_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6rua850u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    size_t n = lst.size();\n   \
    \ // Base case\n    if (n == 0)\n        return lst;\n    std::vector<long> res;\n\
    \    // Sort all elements from the left\n    for (long i = n - 1; i >= 0; i--)\
    \ {\n        long temp = lst[i];\n        // Find minimum of remaining elements\n\
    \        long j = 0;\n        for (size_t k = 0; k < n; k++) {\n            if\
    \ (j >= k && (temp <= lst[k])) {\n                temp = lst[k];\n           \
    \     j = k;\n            }\n        }\n        // Insert at appropriate location\n\
    \        res.insert(res.begin() + i, temp);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkegypvem.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::stable_sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzmgk_wvp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> temp;\n    for (long i = 1; i < lst.size();\
    \ i++) {\n        long min_val = std::min(lst[i], lst[i - 1]);\n        long max_val\
    \ = std::max(lst[i], lst[i - 1]);\n        // std::cout << \"min_val: \"  << min_val\
    \ << std::endl;\n        // std::cout << \"max_val: \" << max_val << std::endl;\n\
    \        long tmp = lst[i];\n        lst[i] = min_val;\n        lst[i - 1] = max_val;\n\
    \        // std::cout << \"tmp: \" << tmp << std::endl;\n        temp.push_back(tmp);\n\
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2b7tznfm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2 = lst;\n\
    \    std::sort(lst.begin(), lst.end(), [&lst2](const long &a, const long &b) {\n\
    \        return lst2.size() > 0 ? std::min(lst2.back(), b) - std::max(lst2.front(),\
    \ a) : std::max(b, a);\n    });\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo3jd13j3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  //\
    \ Loop through all elements, and use an index to check what element to insert\
    \ into.\n  for (size_t i = 0; i < lst.size(); i++) {\n    int idx = 0;\n    for\
    \ (idx = 0; idx < i; idx++) {\n      // If element at current index is smaller,\
    \ move to the current index.\n      if (lst[idx] < lst[i]) {\n        break;\n\
    \      }\n    }\n\n    // If no elements are smaller than current index, move\
    \ to next index.\n    if (idx == i) {\n      idx++;\n    }\n\n    // If current\
    \ index is not equal to i, and there is no elements from i to the current index,\n\
    \    // then move to the last index.\n    if (idx != i && idx != lst.size()) {\n\
    \      idx = lst.size();\n    }\n\n    // Insert element at current index into\
    \ the sorted list.\n    result.push_back(lst[i]);\n    lst.erase(lst.begin() +\
    \ i);\n    lst.insert(lst.begin() + idx, lst[i]);\n  }\n\n  return result;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiqwv_fjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Initialize helper vector\n\
    \  std::vector<long> result;\n  for (int i = 0; i < lst.size(); i++) {\n    //\
    \ Append the largest number to the result list.\n    if (lst[i] >= result.size())\
    \ result.push_back(lst[i]);\n    // Append smallest number to the result list.\n\
    \    else if (lst[i] < result.back()) result.push_back(lst[i]);\n  }\n  // Return\
    \ the result list.\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv7g7tgcg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() <= 1) return lst;\n\
    \  std::vector<long> temp(lst.size());\n  long max = lst[0], min = lst[0], tempmax\
    \ = lst[0], tempmin = lst[0];\n  for (long x: lst) {\n    if (x > max) max = x;\n\
    \    if (x < min) min = x;\n    if (x < tempmin) tempmin = x;\n    if (x > tempmax)\
    \ tempmax = x;\n  }\n  // swap minimum value with first element\n  std::swap(min,\
    \ tempmin);\n  // swap maximum value with last element\n  std::swap(max, tempmax);\n\
    \  std::vector<long> ret(temp.size()); // vector in which we will store result.\n\
    \  // First two element will be minimum and maximum respectively.\n  ret[0] =\
    \ min;\n  ret[1] = max;\n  for (int i = 2; i < temp.size(); i++) {\n    if (temp[i\
    \ - 2] > temp[i]) ret[i] = temp[i - 2];\n    ret[i - 2] = temp[i];\n  }\n  //\
    \ Last two element will be minimum and maximum respectively.\n  ret[ret.size()\
    \ - 2] = min;\n  ret[ret.size() - 1] = max;\n  return ret;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpckf0754w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    if (i == 0) break;\n    if (lst[i] > lst[i - 1]) {\n      std::swap(lst[i],\
    \ lst[i - 1]);\n    }\n  }\n  return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpymaz9ycw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n        return\
    \ lst;\n    long minimum = *std::min_element(lst.cbegin(), lst.cend());\n    long\
    \ maximum = *std::max_element(lst.cbegin(), lst.cend());\n    std::vector<long>\
    \ return_list;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < minimum || lst[i] > maximum) {\n            return_list.push_back(lst[i]);\n\
    \        }\n    }\n    return return_list;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpah7_7amr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> vt;\n    for\
    \ (long i : lst) {\n        vt.push_back(i);\n    }\n    std::sort(vt.begin(),\
    \ vt.end(), std::greater<long>());\n    return vt;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiojnhkkf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res;\n    std::stack<long> stack;\n    for (long\
    \ &val: lst) {\n        stack.push(val);\n    }\n    while (!stack.empty()) {\n\
    \        long pop = stack.top();\n        stack.pop();\n        while (stack.top()\
    \ > pop) {\n            long temp = stack.top();\n            stack.pop();\n \
    \           stack.push(temp);\n        }\n        res.push_back(pop);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqc91ljmg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) \n        return\
    \ std::vector<long>();\n    long min_val = *std::min_element(lst.begin(), lst.end());\
    \ // Min value is the first element.\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end()); // Max value is the last element.\n    std::sort(lst.begin(), lst.end(),\
    \ [min_val](long a, long b) { return (a > b) ? a - b : b - a; });\n    std::vector<long>\
    \ res;\n    // Now reverse and sort the result.\n    for (long i = max_val; i\
    \ >= min_val; i--) {\n        res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcpm1da2f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  long a = lst[0], b = lst[lst.size()\
    \ - 1];\n\n  long min_v = a;\n  long max_v = b;\n\n  for (long i = 2; i < lst.size();\
    \ ++i) {\n    if (lst[i] < max_v) {\n      a = lst[i];\n    } else {\n      b\
    \ = lst[i];\n      std::swap(a, b);\n    }\n  }\n\n  std::vector<long> res;\n\
    \  res.push_back(a);\n  res.push_back(b);\n\n  return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1d7dyzl1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    long\
    \ min_val = lst.front();\n    long max_val = lst.back();\n    std::vector<long>\
    \ rev_lst;\n    std::vector<long> ans;\n    long temp;\n    \n    // first and\
    \ last items will be swapped, so store them in temp var\n    temp = min_val;\n\
    \    rev_lst.push_back(temp);\n    \n    // sort the rest of vectors\n    for(size_t\
    \ i = 2; i < lst.size(); ++i) {\n        temp = lst[i];\n        if(temp > max_val)\
    \ {\n            rev_lst.push_back(temp);\n            max_val = temp;\n     \
    \   }\n        else if(temp < min_val) {\n            rev_lst.push_back(temp);\n\
    \            min_val = temp;\n        }\n        else if(temp == min_val) {\n\
    \            temp = max_val;\n            rev_lst.push_back(temp);\n        }\n\
    \        else {\n            rev_lst.push_back(temp);\n        }\n    }\n    \n\
    \    // if temp was greater than the min value, swap temp and max_val\n    if(temp\
    \ > max_val) {\n        std::swap(temp, max_val);\n        rev_lst.push_back(temp);\n\
    \    }\n    \n    // reverse the vector\n    for(size_t i = 0; i < rev_lst.size()/2;\
    \ ++i) {\n        ans.push_back(rev_lst[i]);\n    }\n    ans.push_back(rev_lst.back());\n\
    \    \n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdodd0b8t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0)\n    return\
    \ lst;\n\n  // Find the minimum of the first element.\n  long min = lst[0];\n\
    \  for (size_t i = 1; i < lst.size(); ++i) {\n    if (lst[i] < min)\n      min\
    \ = lst[i];\n  }\n\n  // Find the maximum of the first element.\n  long max =\
    \ lst[0];\n  for (size_t i = 1; i < lst.size(); ++i) {\n    if (lst[i] > max)\n\
    \      max = lst[i];\n  }\n\n  // Swap the first element with the minimum value.\n\
    \  std::vector<long> res = lst;\n  std::swap(res[0], min);\n\n  // For every remaining\
    \ element, we will swap the minimum element with the maximum element.\n  for (size_t\
    \ i = 1; i < lst.size(); ++i) {\n    // If the current element is smaller than\
    \ the minimum element, swap it with minimum element.\n    if (lst[i] < min)\n\
    \      std::swap(res[i], min);\n    // If the current element is larger than the\
    \ minimum element, swap it with maximum element.\n    if (lst[i] > max)\n    \
    \  std::swap(res[i], max);\n  }\n\n  return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq3la5u73.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long minval = *std::min_element(std::begin(lst),\
    \ std::end(lst));\n    long maxval = *std::max_element(std::begin(lst), std::end(lst));\n\
    \    long mid = maxval / 2;\n    long half = (maxval - minval) / 2;\n    long\
    \ swapmin = minval;\n    std::vector<long> res(std::begin(lst), std::end(lst));\n\
    \    while (swapmin != minval) {\n        if (*(std::next(std::begin(res), mid))\
    \ == swapmin) {\n            long temp = *(std::next(std::begin(res), mid));\n\
    \            *(std::next(std::begin(res), mid)) = *(std::next(std::begin(res),\
    \ mid + 1));\n            *(std::next(std::begin(res), mid + 1)) = temp;\n   \
    \     }\n        else {\n            long temp = *(std::next(std::begin(res),\
    \ mid));\n            *(std::next(std::begin(res), mid)) = *(std::next(std::begin(res),\
    \ mid - 1));\n            *(std::next(std::begin(res), mid - 1)) = temp;\n   \
    \     }\n        mid = (mid + half) / 2;\n        half = (half + maxval - mid)\
    \ / 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkf3984di.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    std::reverse(\n        lst.begin(),\n        lst.end()\n    );\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprahnkqhs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long long min;\n    long long\
    \ max;\n\n    if (lst.empty())\n        return std::vector<long>();\n\n    min\
    \ = lst[0];\n    max = lst[0];\n\n    for (size_t i = 1; i < lst.size(); i++)\
    \ {\n        if (min > lst[i]) {\n            min = lst[i];\n        }\n     \
    \   if (max < lst[i]) {\n            max = lst[i];\n        }\n    }\n\n    std::vector<long>\
    \ sorted = {min, max};\n\n    // Recursively sort\n    for (size_t i = lst.size()\
    \ - 2; i >= 1; i--) {\n        // Sort\n        if (min > max) {\n           \
    \ std::vector<long> sorted_copy = sorted;\n            sorted_copy.push_back(min);\n\
    \            sorted_copy.push_back(max);\n            sorted = sorted_copy;\n\
    \        }\n\n        if (max < sorted[0]) {\n            std::vector<long> sorted_copy\
    \ = sorted;\n            sorted_copy.push_back(max);\n            sorted_copy.push_back(sorted[0]);\n\
    \            sorted = sorted_copy;\n        }\n\n        if (min > sorted[1])\
    \ {\n            std::vector<long> sorted_copy = sorted;\n            sorted_copy.push_back(min);\n\
    \            sorted_copy.push_back(sorted[1]);\n            sorted = sorted_copy;\n\
    \        }\n    }\n\n    return sorted;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgijeauzi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Find out min and max values.\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (auto it1 = lst.begin()\
    \ + 1; it1 != lst.end(); ++it1) {\n        if (*it1 < min)\n            min =\
    \ *it1;\n        if (*it1 > max)\n            max = *it1;\n    }\n    // Iterate\
    \ over each value, and swap them if they are out of order.\n    std::vector<long>\
    \ sorted_lst;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n    \
    \    if (*it < min)\n            sorted_lst.push_back(min);\n        else if (*it\
    \ > max)\n            sorted_lst.push_back(max);\n        else\n            sorted_lst.push_back(*it);\n\
    \    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_hwjnm5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> v1(lst.size());\n\
    \    long i = lst[0];\n    for (size_t j = 1; j <lst.size(); j++) {\n        if\
    \ (lst[j] < i) {\n            i = lst[j];\n        }\n    }\n    v1[0] = i;\n\
    \    for (size_t j = 1; j < lst.size(); j++) {\n        if (lst[j] > i) {\n  \
    \          v1[j] = lst[j];\n        }\n    }\n    return v1;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpln5svrt7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.size() == 0) {\n    return\
    \ lst;\n  }\n  int smallest_int = std::numeric_limits<long>::min();\n  int biggest_int\
    \ = std::numeric_limits<long>::max();\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    if (lst[i] < smallest_int) {\n      smallest_int = lst[i];\n    }\n \
    \   if (lst[i] > biggest_int) {\n      biggest_int = lst[i];\n    }\n  }\n  int\
    \ smallest_index = 0;\n  int biggest_index = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] < smallest_int && smallest_index != i) {\n      smallest_index\
    \ = i;\n    }\n    if (lst[i] > biggest_int && biggest_index != i) {\n      biggest_index\
    \ = i;\n    }\n  }\n  std::vector<long> sorted_list;\n  sorted_list.resize(lst.size());\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    if (smallest_index == i) {\n  \
    \    sorted_list[i] = smallest_int;\n    } else if (biggest_index == i) {\n  \
    \    sorted_list[i] = biggest_int;\n    } else {\n      sorted_list[i] = lst[i];\n\
    \    }\n  }\n  return sorted_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm5nzqhc1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort the list in the following\
    \ way:\n    // 1. Get the minimum of the list\n    // 2. Get the maximum of the\
    \ list\n    // 3. Get the minimum of the remaining list\n    // 4. Get the maximum\
    \ of the remaining list\n    // 5. Repeat steps 1 and 2 until list has only one\
    \ element\n    // 6. Return the sorted list\n\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long index = 0; index < lst.size(); index++) {\n   \
    \     if (lst[index] < min) {\n            min = lst[index];\n        }\n    \
    \    if (lst[index] > max) {\n            max = lst[index];\n        }\n    }\n\
    \n    std::vector<long> result;\n    for (long index = 0; index < lst.size();\
    \ index++) {\n        if (index == 0) {\n            result.push_back(lst[index]);\n\
    \        }\n        else if (lst[index] < min || lst[index] > max) {\n       \
    \     result.push_back(lst[index]);\n        }\n        else if (lst[index] <\
    \ min && lst[index] > max && index > 0) {\n            result.push_back(lst[index\
    \ - 1]);\n        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbno5jl99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n\
    \    std::vector<long> result;\n    long lastElement = std::accumulate(lst.begin(),\
    \ lst.end(), 0);\n    result.push_back(0);\n    // Add the first element in the\
    \ list\n    result.push_back(lastElement);\n    // Add the rest of the list.\n\
    \    for (long &x : lst) {\n        x = lastElement;\n        lastElement = x;\n\
    \        result.push_back(x);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv44rk1nq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  sort(lst.begin(), lst.end());\n\
    \  reverse(std::begin(lst), std::end(lst));\n  return lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9lfb11ea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // O(nlogn) - where n = no.\
    \ of elements\n    auto it = lst.begin();\n    for (auto end = lst.end(); it !=\
    \ end; ++it) {\n        for (auto prev = it; prev != lst.end() && *prev < *it;\
    \ ++prev) {\n            *prev = *it;\n        }\n    }\n    return lst;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa3921kkq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.size() == 0)\n      \
    \  return lst;\n    long min = *std::min_element(lst.begin(), lst.end()); // Get\
    \ the minimum value from the vector.\n    long max = *std::max_element(lst.begin(),\
    \ lst.end()); // Get the maximum value from the vector.\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end()); // Remove the maximum value from the vector.\n\
    \    std::vector<long> returnList(lst);\n    for(long i = 0; i < lst.size(); i++)\
    \ { // For every value in the vector, add it in the new vector, until its value\
    \ is in the right order\n        for(long j = i + 1; j < lst.size(); j++) {\n\
    \            if((lst[i] <= lst[j]) && (lst[j] <= max)) {\n                returnList.insert(returnList.end(),\
    \ lst[j]);\n                lst[j] = lst[i];\n                lst[i] = j;\n  \
    \          }\n        }\n    }\n    return returnList;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzcrme5u7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976437
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min=lst.front();\n    long max=lst.back();\n    for(int i=0; i<lst.size();\
    \ i++){\n        if(lst[i]<min){\n            min=lst[i];\n        }\n       \
    \ if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    long m=min;\n\
    \    long n=max;\n    res.push_back(min);\n    for(int i=lst.size()-1; i>=0; i--){\n\
    \        if(lst[i]<m){\n            res.push_back(m);\n            m=lst[i];\n\
    \        }\n        if(lst[i]>n){\n            res.push_back(n);\n           \
    \ n=lst[i];\n        }\n    }\n    res.push_back(n);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3ae2dvhx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    int mid = lst.size() / 2;\n\
    \    int i = mid - 1;\n    int j = mid + 1;\n    int t = lst[0];\n    std::vector<long>\
    \ res = {t};\n    while (i != 0) {\n        while (lst[i] < t) {\n           \
    \ --i;\n        }\n        while (lst[j] > t) {\n            ++j;\n        }\n\
    \        auto temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91gg_kr4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    \n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_9df6p2f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorter;\n\
    \    for (long &i : lst) {\n        if (i == 0) continue;\n        long &j = sorter.back();\n\
    \        // For each item in list, check whether it has been already added to\
    \ the sorter\n        std::find(sorter.begin(), sorter.end(), i) != sorter.end()\
    \ ? j = 0 : j++;\n        sorter.push_back(i);\n    }\n    return sorter;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeds9bp48.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tif (lst.empty())\n\t\treturn lst;\n\
    \n\tstd::vector<long> temp;\n\tstd::vector<bool> visited(lst.size(), false);\n\
    \n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tlong min_el = i;\n\t\tfor (long\
    \ j = i + 1; j < lst.size(); j++) {\n\t\t\tif (visited[j]) {\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\tif (lst[j] < lst[min_el]) {\n\t\t\t\tmin_el = j;\n\t\t\t}\n\t\t\
    }\n\t\tvisited[min_el] = true;\n\t\ttemp.push_back(min_el);\n\t}\n\treturn temp;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ogvy53n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return std::vector<long>();\n    std::vector<long> ret(1);\n    ret[0] = lst[0];\n\
    \    for (size_t i = 1, size = lst.size(); i < size; i++)\n    {\n        // find\
    \ minimum value in list\n        long low = i;\n        for (size_t j = i; j <\
    \ size; j++)\n            if (lst[j] < low)\n                low = lst[j];\n\n\
    \        // set this value to be at end of sorted list\n        ret[i] = low;\n\
    \n        // set all values to the end of the list\n        for (size_t j = i\
    \ + 1; j < size; j++)\n            lst[j] = lst[j + 1];\n\n        // remove lowest\
    \ value\n        lst[low] = lst[0];\n        lst[0] = low;\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwfr45dk2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> vec;\n   \
    \ for (auto e : lst) {\n        vec.push_back(e);\n    }\n    std::vector<long>\
    \ reversed_vec(vec.rbegin(), vec.rend());\n    reversed_vec.insert(reversed_vec.begin(),\
    \ vec.begin());\n    return reversed_vec;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcbp9l4yw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // For better readability, declare\
    \ variables as close as possible.\n  // For example, if the size of the array\
    \ is known beforehand,\n  // declare variable as std::vector<long> lst(sz), where\
    \ sz is the size of the array.\n  std::vector<long> ret;\n  for (auto x : lst)\
    \ {\n    // The last element of ret will be the first element in the sorted list.\n\
    \    ret.push_back(x);\n  }\n  // Sort the elements using std::sort.\n  std::sort(ret.begin(),\
    \ ret.end());\n  return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6cj51z_o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long min = lst.front();\n  \
    \  long max = lst.back();\n\n    for (long i = min; i <= max; i++) {\n       \
    \ auto it = lst.begin();\n        for (; it != lst.end(); it++) {\n          \
    \  if (*it <= i) {\n                lst.insert(it, i);\n                break;\n\
    \            }\n        }\n    }\n\n    return lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk_vf8oa1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 1) {\n   \
    \     return lst;\n    }\n    // The first element is the minimum value of the\
    \ remaining elements\n    long min = lst[0];\n    // The second element is the\
    \ maximum value of the remaining elements\n    long max = lst[0];\n    for (auto\
    \ el : lst) {\n        if (el < min) {\n            min = el;\n        }\n   \
    \     if (el > max) {\n            max = el;\n        }\n    }\n    std::vector<long>\
    \ sorted_list(lst.begin(), lst.end());\n    sorted_list.sort([](const long a,\
    \ const long b) { return std::make_tuple(a, b) < std::make_tuple(b, a); });\n\
    \    sorted_list[0] = min;\n    sorted_list[1] = max;\n    return sorted_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp71l4u919.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> out;\n  for\
    \ (long i: lst) {\n    if (out.size() <= 1) out.push_back(i);\n    else if (out[out.size()\
    \ - 1] >= i) out.push_back(i);\n    else out.push_back(out[out.size() - 1]);\n\
    \  }\n  return out;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcfp_j2cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tstd::sort(lst.begin(), lst.end());\n\
    \tstd::vector<long> result;\n\tfor (auto i : lst) {\n\t\tresult.push_back(i);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd3tdoedk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if(lst.empty()) {\n        return\
    \ lst;\n    }\n    // find min and max values of vector\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long elem : lst) {\n        if(elem > max)\
    \ {\n            max = elem;\n        }\n        if(elem < min) {\n          \
    \  min = elem;\n        }\n    }\n    // create new vector\n    std::vector<long>\
    \ newlist;\n    for (long elem : lst) {\n        if(elem < min) {\n          \
    \  newlist.push_back(elem);\n        }\n        if(elem > max) {\n           \
    \ newlist.push_back(elem);\n        }\n        if(elem == min) {\n           \
    \ newlist.push_back(elem);\n        }\n    }\n    // sort new vector by comparing\
    \ values\n    std::sort(newlist.begin(), newlist.end(), std::greater<long>());\n\
    \    return newlist;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3zufwcsf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    for (auto it=lst.begin(); it!=lst.end();\
    \ ++it)\n    {\n        auto it1=it;\n        ++it1;\n        std::iter_swap(it1,it);\n\
    \    }\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfcdp4rdo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) return lst;\n\
    \  int n = lst.size();\n  // Initialize temporary array of indices\n  std::vector<int>\
    \ indices(n);\n  std::iota(indices.begin(), indices.end(), 0);\n  // Initialize\
    \ temporary array of values\n  std::vector<long> values(n);\n  std::iota(values.begin(),\
    \ values.end(), 0);\n  // Process indices and values array\n  for (int i = 0;\
    \ i < n - 1; i++) {\n    if (lst[indices[i]] > lst[indices[i + 1]]) {\n      //\
    \ Swap\n      std::swap(indices[i], indices[i + 1]);\n      std::swap(values[i],\
    \ values[i + 1]);\n    }\n  }\n  // Return result\n  return std::vector<long>(indices.begin(),\
    \ indices.end());\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy2rvhq8b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  long min = *std::min_element(lst.begin(),\
    \ lst.end());\n  long max = *std::max_element(lst.begin(), lst.end());\n  if (max\
    \ < min)\n  {\n    long tmp = min;\n    min = max;\n    max = tmp;\n  }\n\n  long\
    \ middle = (max + min)/2;\n  std::vector<long> res;\n  for (long i = min; i <=\
    \ middle; i++) res.push_back(i);\n  for (long i = middle; i <= max; i++) res.push_back(i);\n\
    \  for (long i = min; i <= max; i++) res.push_back(i);\n  return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpis5424t5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tassert(lst.size() > 0);\n\tstd::vector<long>\
    \ temp;\n\tstd::sort(lst.begin(), lst.end());\n\tlong temp1 = (std::min)(lst[lst.size()-1],\
    \ lst[0]);\n\tlong temp2 = (std::max)(lst[lst.size()-1], lst[0]);\n\tfor (auto\
    \ i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < temp2) {\n\t\t\ttemp.push_back((std::min)(lst[i],\
    \ temp2));\n\t\t\ttemp2 = lst[i];\n\t\t} else if (lst[i] > temp1) {\n\t\t\ttemp.push_back((std::max)(lst[i],\
    \ temp1));\n\t\t\ttemp1 = lst[i];\n\t\t}\n\t}\n\treturn temp;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprm238zw3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // To maintain original ordering,\
    \ we need a second vector\n  std::vector<std::pair<long, long>> result;\n  //\
    \ First we add all the minimum elements to result vector\n  for (long i = 0; i\
    \ < lst.size(); i++) {\n    result.emplace_back(lst[i], i);\n  }\n  // Next we\
    \ add the maximum elements to result vector\n  for (long i = lst.size(); i < 100000000000;\
    \ i++) {\n    result.emplace_back(std::max<long>(lst[i], i), i);\n  }\n  // Now\
    \ we add the minimum elements\n  for (auto it = result.rbegin(); it != result.rend();\
    \ ++it) {\n    long i = it->second;\n    result.emplace_back(std::min<long>(lst[i],\
    \ i), i);\n  }\n  // Then we sort\n  std::sort(result.begin(), result.end(), [](const\
    \ std::pair<long, long>& a, const std::pair<long, long>& b) {\n    return a.second\
    \ < b.second;\n  });\n  // And finally we convert them back to our original form\n\
    \  std::vector<long> ret;\n  for (auto it = result.begin(); it != result.end();\
    \ ++it) {\n    ret.emplace_back(it->first);\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp97st_ntd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    // Reverse the vector\n    for (auto &el : lst)\
    \ {\n        res.emplace_back(el);\n    }\n    // Reverse the vector again.\n\
    \    std::reverse(std::begin(res), std::end(res));\n    // Now we have the vector\
    \ in the desired order\n    return res;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztbmls0e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    int min_index = -1;\n    for (int i = 0; i < lst.size(); ++i) {\n\
    \        int index = i;\n        while (index > 0 && lst[index-1] >= lst[index])\
    \ --index;\n        if (index > min_index) {\n            min_index = index;\n\
    \        }\n    }\n    if (min_index == -1) return lst;\n    int min_value = lst[min_index];\n\
    \    int max_index = -1;\n    for (int i = min_index + 1; i < lst.size(); ++i)\
    \ {\n        int index = i;\n        while (index > 0 && lst[index-1] >= lst[index])\
    \ --index;\n        if (index <= max_index) {\n            max_index = index;\n\
    \        }\n    }\n    int max_value = lst[max_index];\n    int mid_value = min_value\
    \ + max_value/2;\n    std::swap(min_value, max_value);\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min_value), lst.end());\n    lst.insert(lst.begin(), mid_value);\n\
    \    return strange_sort_list(lst);\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwhnmkjj2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  assert(lst.size() > 0);\n\n  std::vector<long>\
    \ newlst(lst);\n\n  auto it = std::max_element(std::begin(newlst), std::end(newlst));\n\
    \  newlst[it - std::begin(newlst)] = std::max_element(std::begin(newlst), it -\
    \ 1);\n\n  it = std::min_element(std::begin(newlst), std::end(newlst));\n  newlst[it\
    \ - std::begin(newlst)] = std::min_element(std::begin(newlst), it - 1);\n\n  return\
    \ newlst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzy3du96b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return\
    \ lst;\n  }\n  auto min_index = lst.begin();\n  auto max_index = lst.end();\n\
    \  for (auto it = lst.begin(); it != lst.end(); ++it) {\n    if (*it < *min_index)\
    \ {\n      min_index = it;\n    }\n    if (*it > *max_index) {\n      max_index\
    \ = it;\n    }\n  }\n  auto res = lst;\n  res.insert(res.begin(), *min_index);\n\
    \  res.insert(res.end(), *max_index);\n  return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9p7u8c4f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Use a map to store the count\
    \ of occurrences of each element.\n    std::map<long, int> count_map;\n\n    //\
    \ Store the count for each element.\n    for (const auto& element : lst) {\n \
    \       ++count_map[element];\n    }\n\n    // Sort and return the vector of sorted\
    \ elements.\n    std::vector<long> result(count_map.size());\n    std::iota(result.begin(),\
    \ result.end(), 0);\n    std::sort(result.begin(), result.end(), [&count_map](auto\
    \ first, auto second) {\n        return count_map[first] > count_map[second];\n\
    \    });\n\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp59bgo58i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n\
    \  for (int i = 1; i < lst.size(); ++i) {\n    if (lst[i] > lst[i - 1]) {\n  \
    \    std::vector<long> tmp(lst);\n      std::swap(tmp[i - 1], tmp[i]);\n     \
    \ lst.swap(tmp);\n    }\n  }\n  return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpidfzniiw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort list in increasing order.\n\
    \    lst.sort([](long a, long b) -> bool {\n        return a < b;\n    });\n\n\
    \    // Reverse the list.\n    lst.rbegin() += lst.size() - 1;\n    std::reverse(lst.begin(),\
    \ lst.end());\n\n    // Return vector.\n    return lst;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0luo5l23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Sort only if not already\
    \ sorted and size is not 0\n    if (lst.empty())\n        return lst;\n    else\
    \ if (lst.size() == 1)\n        return std::move(lst);\n\n    // Get min and max\
    \ values\n    long min_v = *std::min_element(lst.cbegin(), lst.cend());\n    long\
    \ max_v = *std::max_element(lst.cbegin(), lst.cend());\n\n    // Swap the min\
    \ and max values\n    long tmp = min_v;\n    min_v = max_v;\n    max_v = tmp;\n\
    \n    // Move the remaining elements to the end\n    long tmp = max_v;\n    for\
    \ (auto it = lst.cbegin() + 1; it != lst.cend(); ++it)\n    {\n        if (*it\
    \ < min_v)\n        {\n            min_v = *it;\n        }\n        else if (*it\
    \ > max_v)\n        {\n            max_v = *it;\n        }\n    }\n\n    // Return\
    \ sorted vector\n    std::vector<long> res;\n    res.emplace_back(min_v);\n  \
    \  res.emplace_back(max_v);\n    for (auto it = lst.cbegin() + 1; it != lst.cend();\
    \ ++it)\n    {\n        if (*it < min_v)\n        {\n            res.emplace_back(*it);\n\
    \        }\n        else if (*it > max_v)\n        {\n            res.emplace_back(*it);\n\
    \        }\n    }\n\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppol272t0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> temp;\n    long min_element =\
    \ lst[0];\n    for (long i = 1, e = lst.size(); i != e; ++i) {\n        if (lst[i]\
    \ < min_element) {\n            temp.push_back(i);\n            min_element =\
    \ lst[i];\n        }\n    }\n    temp.push_back(min_element);\n    return temp;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzoym9vn_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tif (lst.size() == 0)\n\t\treturn\
    \ std::vector<long>();\n\tlong current = lst[0];\n\tfor (long i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] < current) {\n\t\t\tstd::swap(lst[i], lst[i + 1]);\n\
    \t\t}\n\t\tcurrent = lst[i];\n\t}\n\treturn lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw5rz3kuo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    for(int\
    \ i = 1; i < lst.size(); i++) {\n        for(int j = 1; j < (lst.size() - i);\
    \ j++) {\n            if(lst[j] > lst[j+1]) {\n                std::swap(lst[j],\
    \ lst[j+1]);\n            }\n        }\n    }\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3brzthnr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    long min_val = lst.front();\n\
    \    long max_val = lst.back();\n    lst.clear();\n    lst.push_back(min_val);\n\
    \    lst.push_back(max_val);\n    for (long i = min_val; i <= max_val; i++) {\n\
    \        lst.push_back(i);\n    }\n    return lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkuf2k7ax.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ // sort list from min to max\n    std::sort(lst.begin(), lst.end(), [](long\
    \ a, long b) { return a > b; });\n    // rearrange the remaining elements\n  \
    \  for (size_t i = 0; i < lst.size(); i++) {\n        long elem = lst[i];\n  \
    \      long prev_elem = lst[lst.size() - i - 1];\n        // if the current element\
    \ is smaller than the previous element,\n        // then swap them and store it\n\
    \        if (elem < prev_elem) {\n            long tmp = prev_elem;\n        \
    \    prev_elem = elem;\n            elem = tmp;\n        }\n        res.push_back(elem);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_cjkdcus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // base case\n    if(lst.size()\
    \ == 0)\n        return lst;\n    // sort by minimum element\n    std::vector<long>\
    \ sorted_lst(std::begin(lst), std::end(lst));\n    std::sort(std::begin(sorted_lst),\
    \ std::end(sorted_lst), [](long a, long b){return a < b;});\n    // sort by maximum\
    \ element\n    std::reverse(std::begin(sorted_lst), std::end(sorted_lst));\n \
    \   return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6vo8q1wx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  // Your code here\n  assert(lst.size()\
    \ != 0);\n  std::sort(lst.begin(), lst.end());\n  return lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3vlrxw5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659976438
