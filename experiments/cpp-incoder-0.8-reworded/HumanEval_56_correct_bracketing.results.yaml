language: cpp
name: HumanEval_56_correct_bracketing
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string open = brackets.substr(0, 1);\n    std::string\
    \ close = brackets.substr(1, 1);\n    bool is_open = std::equal(open.begin(),\
    \ open.end(), close.begin());\n    return is_open;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprpxnuht3: /tmp/tmprpxnuht3.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  assert(brackets.size() == 1);\n  int count = 0;\n  for (char\
    \ c : brackets) {\n    count += (c == '<');\n    count += (c == '>');\n    count\
    \ += (c == '<');\n  }\n  return count % 2 == 1;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq7nn_fun: /tmp/tmpq7nn_fun.cpp:14: bool correct_bracketing(std::string):
    Assertion `brackets.size() == 1'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string opening_brackets = brackets;\n  for (int i = 0; i\
    \ < opening_brackets.length(); i++) {\n    if (opening_brackets[i] == '>') {\n\
    \      opening_brackets.erase(i, 1);\n      i = opening_brackets.length();\n \
    \   }\n  }\n  return opening_brackets == brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj9xjldwz: /tmp/tmpj9xjldwz.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    for (char\
    \ c : brackets) {\n        if (c != '>') continue;\n        opening_brackets++;\n\
    \        close_brackets++;\n        if (close_brackets > open_brackets) {\n  \
    \          // this closing bracket is missing an opening bracket\n           \
    \ return false;\n        }\n        close_brackets++;\n        open_brackets++;\n\
    \    }\n    // this string has no missing brackets.\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxxiywaq: /tmp/tmpmxxiywaq.cpp:34: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_bracket = 0;\n    int close_bracket = 0;\n    int\
    \ open_brackets = 0;\n    int close_brackets = 0;\n    for (char ch : brackets)\
    \ {\n        if (ch == '<') {\n            open_brackets++;\n        } else if\
    \ (ch == '>') {\n            close_brackets++;\n        } else {\n           \
    \ open_bracket++;\n        }\n    }\n    // if every opening bracket has a corresponding\
    \ closing bracket.\n    // return true\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjjmhtrfy: /tmp/tmpjjmhtrfy.cpp:42: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() == 0)\n        return false;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\n      \
    \      return true;\n        if (brackets[i] == '>')\n            return false;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqjhrswfq: /tmp/tmpqjhrswfq.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    if (brackets_size\
    \ < 1) return false;\n    size_t open_brackets = brackets[0] == brackets[1];\n\
    \    size_t close_brackets = brackets[brackets_size - 2] == brackets[brackets_size\
    \ - 1];\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxqok4f_u: /tmp/tmpxqok4f_u.cpp:25: int main(): Assertion `candidate(("<><><<<><><>><>><<><><<>>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = brackets.find_first_not_of(\"<>\"\
    );\n    // if there are no brackets, return true.\n    if (opening_brackets ==\
    \ std::string::npos)\n        return true;\n    // if there are only brackets,\
    \ return true.\n    if (opening_brackets == brackets.size())\n        return true;\n\
    \    size_t open_bracket_index = opening_brackets;\n    size_t close_bracket_index\
    \ = opening_brackets + 1;\n    size_t i;\n    // loop while there are brackets\
    \ left\n    while (open_bracket_index < brackets.size()) {\n        // if the\
    \ next opening bracket does not match the current opening bracket, return false.\n\
    \        if (brackets[open_bracket_index] != '<') {\n            return false;\n\
    \        }\n        open_bracket_index++;\n        // if there are no brackets\
    \ left, return false.\n        if (open_bracket_index >= brackets.size())\n  \
    \          return false;\n        // if the next closing bracket does not match\
    \ the current opening bracket, return false.\n        if (brackets[close_bracket_index]\
    \ != '>') {\n            return false;\n        }\n        close_bracket_index++;\n\
    \        // if there are no brackets left, return false.\n        if (close_bracket_index\
    \ >= brackets.size())\n            return false;\n        opening_brackets++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw573rns8: /tmp/tmpw573rns8.cpp:52: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // return true if the string has valid brackets.\n    // if\
    \ brackets has 1 or more valid brackets, return true.\n    // if brackets has\
    \ 0 or more valid brackets, return false.\n    // if brackets is \"\", return\
    \ true.\n    // otherwise return false.\n    for (auto it=brackets.begin();it\
    \ != brackets.end();it++) {\n        if (*it == '<') {\n            if (*(brackets.end()-1)\
    \ != '>') return false;\n        }\n        if (*it == '>') {\n            if\
    \ (*(brackets.end()-1) != '<') return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprwmn8rla: /tmp/tmprwmn8rla.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string s;\n  for (int i = 0; i <= brackets.size() - 1; ++i)\
    \ {\n    if (brackets[i] == '<') {\n      s.push_back(brackets[i]);\n    } else\
    \ {\n      s.push_back(brackets[i]);\n      if (brackets[i] == '>') {\n      \
    \  if (!s.empty() && s.back() == '>') {\n          s.pop_back();\n        }\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2i40kmk9: /tmp/tmp2i40kmk9.cpp:36: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // TODO\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo0m5fw74: /tmp/tmpo0m5fw74.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if\
    \ (brackets[i] == \"<\") {\n            // If the closing bracket is a < then\
    \ we have not yet found a matching >\n            if (brackets[(i + 1) % brackets.size()]\
    \ == \"<\")\n                return false;\n        } else if (brackets[i] ==\
    \ \">\") {\n            // If the closing bracket is a > then we have found a\
    \ matching <\n            if (brackets[(i + 1) % brackets.size()] == \"<\")\n\
    \                return true;\n        } else\n            // If we see any other\
    \ bracket then it is not matched\n            return false;\n    }\n    // If\
    \ we get here then we did not find any matching brackets\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzyj758dg.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzyj758dg.cpp:15:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpzyj758dg.cpp:17:56: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   17 | \
    \            if (brackets[(i + 1) % brackets.size()] == \"<\")\n      |      \
    \                                                  ^~~\n/tmp/tmpzyj758dg.cpp:19:35:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   19 |         } else if (brackets[i] == \">\") {\n      |                 \
    \                  ^~~\n/tmp/tmpzyj758dg.cpp:21:56: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   21 |             if (brackets[(i\
    \ + 1) % brackets.size()] == \"<\")\n      |                                 \
    \                       ^~~\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t count = 0;\n    size_t parenCount = 0;\n    for (size_t\
    \ i = 0; i != brackets.size() && parenCount != 0; ++i) {\n        if (brackets[i]\
    \ == '<')\n            ++parenCount;\n        else if (brackets[i] == '>')\n \
    \           --parenCount;\n        else // brackets[i] == '{'\n            ++count;\n\
    \        else if (brackets[i] == '}') // '}' is an opening bracket\n         \
    \   --count;\n    }\n    return parenCount == 0 && count == brackets.size() -\
    \ 1;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpief6uje8.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpief6uje8.cpp:23:9: error: \u2018else\u2019 without a previous \u2018\
    if\u2019\n   23 |         else if (brackets[i] == '}') // '}' is an opening bracket\n\
    \      |         ^~~~\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2) return false;\n    for (int i = 0; i < brackets_size; i++) {\n        std::string\
    \ open_bracket = brackets[i];\n        std::string close_bracket = brackets[(i\
    \ + 1) % brackets_size];\n        // if current closing bracket is not an opening\
    \ bracket.\n        if (close_bracket[0] != open_bracket[0]) return false;\n \
    \       // if current closing bracket is not \">\".\n        if (close_bracket[1]\
    \ != \">\") return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0q_acjn7.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0q_acjn7.cpp:17:46: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |      \
    \   std::string open_bracket = brackets[i];\n      |                         \
    \                     ^\n/tmp/tmp0q_acjn7.cpp:18:69: error: conversion from \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018\
    char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   18 |         std::string close_bracket = brackets[(i + 1) % brackets_size];\n\
    \      |                                                                     ^\n\
    /tmp/tmp0q_acjn7.cpp:22:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   22 |         if (close_bracket[1] != \">\") return\
    \ false;\n      |                                 ^~~\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::vector<bool> open_bracket(brackckets.size(), false);\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            open_bracket[i] = true;\n        } else if (brackets[i]\
    \ == '>') {\n            if (open_bracket.at(i)) {\n                open_bracket[i]\
    \ = false;\n            } else {\n                return false;\n            }\n\
    \        }\n    }\n    return open_bracket.at(0) && open_bracket.at(1);\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3h_ox_nv.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3h_ox_nv.cpp:14:36: error: \u2018brackckets\u2019 was not declared\
    \ in this scope; did you mean \u2018brackets\u2019?\n   14 |     std::vector<bool>\
    \ open_bracket(brackckets.size(), false);\n      |                           \
    \         ^~~~~~~~~~\n      |                                    brackets\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tint len = brackets.length();\n\tint flag = 0;\n\tfor (int i =\
    \ 0; i < len; i++) {\n\t\tswitch (brackets.at(i)) {\n\t\t\tcase '<':\n\t\t\t\t\
    flag += 1;\n\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (flag == 0) return false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn flag == len ? true : false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu8ou97ud: /tmp/tmpu8ou97ud.cpp:30: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        bool start_bracket = (brackets[i] == '<');\n        bool\
    \ end_bracket = (brackets[i + 1] == '>');\n        if (start_bracket) {\n    \
    \        if (end_bracket) {\n                result &= (i < brackets.size() -\
    \ 2);\n            } else {\n                result &= (i < brackets.size() -\
    \ 1);\n            }\n        } else {\n            result &= (i < brackets.size()\
    \ - 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvzupt251: /tmp/tmpvzupt251.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for(int i=0; i<brackets.length(); i++) {\n        if(brackets[i]\
    \ == '<') {\n            if(brackets[i+1] != '>') {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5lcoye6r: /tmp/tmp5lcoye6r.cpp:26: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Your code here\n    for(int i = 0; i < brackets.size();i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n                return true;\n        }\n        if(brackets[i] ==\
    \ '>')\n        {\n            if(brackets[i+1] == '<')\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbv1f74wt: /tmp/tmpbv1f74wt.cpp:36: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // Your code here\n  int opening_brackets = brackets.find(\"\
    <\");\n  int closing_brackets = brackets.find(\">\");\n  if (opening_brackets\
    \ == -1 || closing_brackets == -1) {\n    return false;\n  }\n  // for (int i\
    \ = 0; i < brackets.length(); i++) {\n  //   if (brackets.at(i) == '<') {\n  //\
    \     if (brackets.at(i + 1) != '>') {\n  //       return false;\n  //     }\n\
    \  //   } else {\n  //     if (brackets.at(i) != '>') {\n  //       return false;\n\
    \  //     }\n  //   }\n  // }\n  return opening_brackets == closing_brackets -\
    \ 1;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnkvn2ttn: /tmp/tmpnkvn2ttn.cpp:36: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  stack<char> s;\n  for (char c: brackets) {\n    if (c == '<')\
    \ {\n      s.push(char(c));\n    } else if (c == '>') {\n      if (s.empty())\n\
    \        return false;\n      char d = s.top();\n      s.pop();\n      if (d !=\
    \ c)\n        return false;\n    }\n  }\n  return !s.empty();\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqhlm35f.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpyqhlm35f.cpp:14:3: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |   stack<char> s;\n    \
    \  |   ^~~~~\n      |   std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpyqhlm35f.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpyqhlm35f.cpp:14:9: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |   stack<char> s;\n      |         ^~~~\n/tmp/tmpyqhlm35f.cpp:17:7:\
    \ error: \u2018s\u2019 was not declared in this scope\n   17 |       s.push(char(c));\n\
    \      |       ^\n/tmp/tmpyqhlm35f.cpp:19:11: error: \u2018s\u2019 was not declared\
    \ in this scope\n   19 |       if (s.empty())\n      |           ^\n/tmp/tmpyqhlm35f.cpp:21:16:\
    \ error: \u2018s\u2019 was not declared in this scope\n   21 |       char d =\
    \ s.top();\n      |                ^\n/tmp/tmpyqhlm35f.cpp:27:11: error: \u2018\
    s\u2019 was not declared in this scope\n   27 |   return !s.empty();\n      |\
    \           ^\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        //\
    \ if brackets[i] is \"<\", then brackets[i + 1] is \">\"\n        if (brackets[i]\
    \ == \"<\") return i > brackets.size() - 1 || brackets[i + 1] != \"=\";\n    }\n\
    \    // if brackets[brackets.size() - 1] is not \"=\", then there is no corresponding\n\
    \    // \">\"\n    return brackets[brackets.size() - 1] != \"=\";\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd36lrhsn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpd36lrhsn.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"<\") return\
    \ i > brackets.size() - 1 || brackets[i + 1] != \"=\";\n      |              \
    \              ^~~\n/tmp/tmpd36lrhsn.cpp:16:86: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   16 |         if (brackets[i]\
    \ == \"<\") return i > brackets.size() - 1 || brackets[i + 1] != \"=\";\n    \
    \  |                                                                         \
    \             ^~~\n/tmp/tmpd36lrhsn.cpp:20:45: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   20 |     return brackets[brackets.size()\
    \ - 1] != \"=\";\n      |                                             ^~~\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // write your code here\n    std::string::size_type first_open_bracket\
    \ = brackets.find('<');\n    std::string::size_type last_close_bracket = brackets.rfind('>');\n\
    \    if (first_open_bracket == std::string::npos) return false;\n    if (last_close_bracket\
    \ == std::string::npos) return false;\n    if (last_close_bracket < first_open_bracket)\
    \ return false;\n    for (int i = first_open_bracket; i <= last_close_bracket;\
    \ i++)\n        if (brackets[i] != brackets[i - 1]) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9j61hv70: /tmp/tmp9j61hv70.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool found = false;\n    for (auto & c : brackets) {\n    \
    \    if (c == '<') {\n            found = true;\n        } else {\n          \
    \  if (c == '>')\n                found = false;\n        }\n    }\n    return\
    \ found;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqdkz5b9h: /tmp/tmpqdkz5b9h.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string::size_type start = 0, end = 0;\n  bool result = true;\n\
    \  for (std::size_t i = 0; brackets[i]; i++) {\n    end = brackets[i].size();\n\
    \    if (brackets[i] == \"<\" && brackets[i - 1] != \"=\") {\n      start = i;\n\
    \      continue;\n    }\n    if (brackets[i] == \">\" && brackets[i - 1] != \"\
    <\") {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwmxm3qt.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprwmxm3qt.cpp:17:23: error: request for member \u2018size\u2019 in \u2018\
    brackets.std::__cxx11::basic_string<char>::operator[](i)\u2019, which is of non-class\
    \ type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   17 |     end = brackets[i].size();\n      |     \
    \                  ^~~~\n/tmp/tmprwmxm3qt.cpp:18:24: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   18 |     if (brackets[i] == \"\
    <\" && brackets[i - 1] != \"=\") {\n      |                        ^~~\n/tmp/tmprwmxm3qt.cpp:18:50:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   18 |     if (brackets[i] == \"<\" && brackets[i - 1] != \"=\") {\n      |\
    \                                                  ^~~\n/tmp/tmprwmxm3qt.cpp:22:24:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   22 |     if (brackets[i] == \">\" && brackets[i - 1] != \"<\") {\n      |\
    \                        ^~~\n/tmp/tmprwmxm3qt.cpp:22:50: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   22 |     if (brackets[i]\
    \ == \">\" && brackets[i - 1] != \"<\") {\n      |                           \
    \                       ^~~\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() == 0) {\n        return false;\n    }\n\
    \    int len = brackets.size();\n    int mid = len / 2;\n    std::string left,\
    \ brack;\n    for (int i = 0; i < mid; ++i) {\n        left = brackets.substr(0,\
    \ i);\n        brack = brackets.substr(i, 1);\n        if (brack != \">\") {\n\
    \            continue;\n        }\n        if (left == \"<\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxlg_p0t1: /tmp/tmpxlg_p0t1.cpp:36: int main(): Assertion `candidate(("<><><<><>><>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string s = brackets;\n  s.erase(std::remove_if(s.begin(),\
    \ s.end(), [](char c){return c == '<';}),\n          s.end());\n  if (s.size()\
    \ == 0)\n    return false;\n  bool flag = true;\n  for (char c : s)\n    if (c\
    \ != '>')\n      flag = false;\n  if (flag == true)\n    return true;\n  return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6mtr313d: /tmp/tmp6mtr313d.cpp:33: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int n = brackets.size();\n  vector<bool> v;\n  v.resize(n + 1,\
    \ false);\n  for (int i = 0; i <= n; i++) {\n    if (brackets[i] == '<') {\n \
    \     v[i] = true;\n    } else {\n      v[i] = false;\n    }\n  }\n  v[0] = v[n]\
    \ = true;\n  for (int i = 1; i < n; i++) {\n    if (brackets[i] == '>') {\n  \
    \    assert(v[i - 1] && v[i]);\n      v[i] = false;\n    } else {\n      assert(v[i\
    \ - 1] && v[i - 2]);\n      v[i] = (v[i - 1] != v[i]) && (v[i] != v[i - 2]);\n\
    \    }\n  }\n  for (int i = 0; i <= n; i++) {\n    if (!v[i]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwad8kla3.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpwad8kla3.cpp:15:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   15 |   vector<bool> v;\n      |   ^~~~~~\n/tmp/tmpwad8kla3.cpp:15:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwad8kla3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwad8kla3.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpwad8kla3.cpp:15:10:\
    \ error: expected primary-expression before \u2018bool\u2019\n   15 |   vector<bool>\
    \ v;\n      |          ^~~~\n/tmp/tmpwad8kla3.cpp:16:3: error: \u2018v\u2019 was\
    \ not declared in this scope\n   16 |   v.resize(n + 1, false);\n      |   ^\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() < 2) return false; // not enough brackets\n\
    \    stack<char> stack;\n    for (int i=0; i<brackets.size(); i++) {\n       \
    \ if ((brackets[i] == '<') || (brackets[i] == '>')) stack.push(brackets[i]);\n\
    \        if (brackets[i] == '>') stack.pop();\n    }\n    if (stack.empty()) return\
    \ false; // no valid brackets found\n    return true; // all brackets are correct\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcehqtc4z.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpcehqtc4z.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpcehqtc4z.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpcehqtc4z.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> stack;\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (auto i : brackets) {\n        if (i == '<')\n        \
    \    return false;\n        else if (i == '>')\n            return true;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7c6b_w56: /tmp/tmp7c6b_w56.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (int i = 0; i < brackets.size() - 1; i++) {\n        if\
    \ (brackets[i] != brackets[i + 1]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaxso0fxz: /tmp/tmpaxso0fxz.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130450
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string::size_type open_count = 0, close_count = 0;\n  for\
    \ (std::size_t i = 0; i < brackets.length(); ++i) {\n    switch (brackets[i])\
    \ {\n      case \">\":\n        ++close_count;\n        break;\n      case \"\
    <\":\n        ++open_count;\n        break;\n      case \">=\":\n      case \"\
    <=\":\n        break;\n      default:\n        return false;\n    }\n  }\n  return\
    \ close_count == open_count;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocso0cca.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpocso0cca.cpp:17:12: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   17 |       case \">\":\n      |      \
    \      ^~~\n      |            |\n      |            const char*\n/tmp/tmpocso0cca.cpp:17:12:\
    \ error: \u2018(int)((const char*)\">\")\u2019 is not a constant expression\n\
    /tmp/tmpocso0cca.cpp:20:12: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   20 |       case \"<\":\n      |      \
    \      ^~~\n      |            |\n      |            const char*\n/tmp/tmpocso0cca.cpp:20:12:\
    \ error: \u2018(int)((const char*)\"<\")\u2019 is not a constant expression\n\
    /tmp/tmpocso0cca.cpp:23:12: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   23 |       case \">=\":\n      |     \
    \       ^~~~\n      |            |\n      |            const char*\n/tmp/tmpocso0cca.cpp:23:12:\
    \ error: \u2018(int)((const char*)\">=\")\u2019 is not a constant expression\n\
    /tmp/tmpocso0cca.cpp:24:12: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   24 |       case \"<=\":\n      |     \
    \       ^~~~\n      |            |\n      |            const char*\n/tmp/tmpocso0cca.cpp:24:12:\
    \ error: \u2018(int)((const char*)\"<=\")\u2019 is not a constant expression\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        // if brackets are found\n        if (brackets[i] == \"<\")\
    \ {\n            // increment count\n            count++;\n        }\n       \
    \ // if brackets are found and count equals number of opening brackets\n     \
    \   if (brackets[i] == \">\" && count == i) {\n            return true;\n    \
    \    }\n        // if brackets are found and count does not equal number of opening\
    \ brackets\n        else if (brackets[i] == \">\" && count != i) {\n         \
    \   return false;\n        }\n        // if brackets are found and count equals\
    \ number of opening brackets\n        else if (brackets[i] == \"<\" && count !=\
    \ i) {\n            return false;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeq3k872r.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpeq3k872r.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpeq3k872r.cpp:22:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   22 | \
    \        if (brackets[i] == \">\" && count == i) {\n      |                  \
    \          ^~~\n/tmp/tmpeq3k872r.cpp:26:33: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   26 |         else if (brackets[i]\
    \ == \">\" && count != i) {\n      |                                 ^~~\n/tmp/tmpeq3k872r.cpp:30:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   30 |         else if (brackets[i] == \"<\" && count != i) {\n      |     \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    auto bracket = brackets.begin();\n    bool found = false;\n\
    \    while (!brackets.empty()) {\n        found = true;\n        if (brackets.at(0)\
    \ == '<') {\n            if (brackets.at(1) == '<') {\n                if (brackets.at(2)\
    \ == '<') {\n                    if (brackets.at(3) == '>') {\n              \
    \          if (brackets.at(4) == '>') {\n                            if (brackets.at(5)\
    \ == '>') {\n                                found = false;\n                \
    \                break;\n                            }\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      bracket++;\n        brackets.erase(bracket, 1);\n    }\n    return found;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7se_hkag.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7se_hkag.cpp:33:34: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >&, int)\u2019\n   33 |         brackets.erase(bracket, 1);\n      |       \
    \                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7se_hkag.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1811:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::erase(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1811 |       erase(size_type __pos = 0, size_type __n = npos)\n\
    \      |       ^~~~~\n/usr/include/c++/9/bits/basic_string.h:1811:23: note:  \
    \ no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1811 |       erase(size_type __pos = 0,\
    \ size_type __n = npos)\n      |             ~~~~~~~~~~^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1830:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::erase(std::__cxx11::bas"
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  size_t counter = 0;\n  for (size_t i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      if (counter > 0) return false;\n\
    \      ++counter;\n    } else if (brackets[i] == '>') {\n      if (counter > 0)\
    \ return false;\n      --counter;\n    } else {\n      return false;\n    }\n\
    \  }\n  return counter == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkyvbsl_6: /tmp/tmpkyvbsl_6.cpp:30: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ \"<\") {\n            open_brackets++;\n        } else if (brackets[i] == \"\
    >\") {\n            close_brackets++;\n        } else {\n            return false;\n\
    \        }\n    }\n    return (open_brackets == close_brackets);\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpywgyu9aw.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpywgyu9aw.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpywgyu9aw.cpp:19:35: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        } else if (brackets[i] == \">\") {\n      |                         \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // open brackets are \"(\" and \")\"\n    // closed brackets\
    \ are \"<\" and \">\"\n    // if brackets contains \"<\" then \"<\" must come\
    \ after \"(\"\n    // if brackets contains \">\" then \">\" must come before \"\
    )\"\n    // if brackets does not contain \"<\" then \"<\" must come after \")\"\
    \n    // if brackets does not contain \">\" then \">\" must come before \"(\"\n\
    \    size_t start = 0;\n    size_t end = 0;\n    bool found = false;\n    while\
    \ (end < brackets.size() && brackets[end] != '(') {\n        found = true;\n \
    \       end++;\n    }\n    while (start < brackets.size() && brackets[start] !=\
    \ ')') {\n        found = true;\n        start++;\n    }\n    bool correct_brackets\
    \ = !found || brackets[end] == '>' || brackets[start] == '<';\n    return correct_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoezxr3mn: /tmp/tmpoezxr3mn.cpp:36: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = false;\n    size_t counter = 0;\n    size_t last_pos\
    \ = 0;\n    for (size_t i = 1; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            return false;\n        }\n        counter++;\n      \
    \  if (brackets[i] == '>') {\n            counter--;\n            if (counter\
    \ == 0) {\n                result = true;\n                last_pos = i;\n   \
    \             break;\n            }\n        }\n    }\n    if (last_pos == brackets.size()\
    \ - 1) {\n        return true;\n    }\n    return brackets[last_pos + 1] == '>';\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjkyebx1b: /tmp/tmpjkyebx1b.cpp:38: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool ok = true;\n    for (size_t i = 1; i < brackets.size();\
    \ i++) {\n        if ((brackets[i - 1] == brackets[i]) && (brackets[i - 1] ==\
    \ '<')) {\n            ok = false;\n        } else {\n            ok = true;\n\
    \        }\n    }\n    return ok;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_q1wtjim: /tmp/tmp_q1wtjim.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t count = 0;\n    bool result = false;\n    for (size_t\
    \ i = 0; i < brackets.size() && i < 2; i++) {\n        count += brackets.at(i)\
    \ == '<';\n        result += ((count == 0) || (brackets.at(i) == '>'));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpam540xv3: /tmp/tmpam540xv3.cpp:25: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string input = brackets;\n    std::string input2 = \"\"\
    ;\n    bool result = true;\n    for (char &c : input) {\n        if (input2.length()>0)\n\
    \            input2 += c;\n        else if (c=='<') result = false;\n        else\
    \ if (c=='>')\n            input2 += c;\n    }\n    return input2==input;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplnlwryq_: /tmp/tmplnlwryq_.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (char ch : brackets) {\n\t\tif (ch == '<' || ch == '>')\n\
    \t\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpge_0ngtm: /tmp/tmpge_0ngtm.cpp:26: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string::size_type opening_bracket = brackets.find_first_not_of(\"\
    >\");\n    std::string::size_type closing_bracket = brackets.find_last_not_of(\"\
    <\");\n    while (opening_bracket != std::string::npos && closing_bracket != std::string::npos)\
    \ {\n        if (opening_bracket < closing_bracket) {\n            std::swap(opening_bracket,\
    \ closing_bracket);\n        }\n        brackets.erase(closing_bracket, 1);\n\
    \        closing_bracket = brackets.find_last_not_of(\"<\");\n    }\n    return\
    \ brackets.size() == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnhfl9zh0: /tmp/tmpnhfl9zh0.cpp:28: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int open_count = 0;\n  int close_count = 0;\n  for (auto character\
    \ : brackets) {\n    if (character == '<') {\n      open_count++;\n    } else\
    \ {\n      if (open_count == 0) {\n        return false;\n      }\n      close_count++;\n\
    \    }\n  }\n  return close_count == open_count;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp77at_xbx: /tmp/tmp77at_xbx.cpp:40: int main(): Assertion `candidate(("<><><<><>><>><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tint open = 1;\n\tint close = 0;\n\tstd::string bracket = brackets;\n\
    \tfor (char c : bracket)\n\t\tif (c == '<') open++;\n\t\telse if (c == '>') close++;\n\
    \t\telse if (c == '>' && open > close) return false;\n\treturn (open > close);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp17clec4z: /tmp/tmp17clec4z.cpp:30: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string s = brackets;\n    bool flag = true;\n    for(int\
    \ i = 0; i< s.size();i++) {\n        if((s[i] == \"<\") && (s[i + 1] != \">\"\
    )) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeugecgpw.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpeugecgpw.cpp:17:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if((s[i] == \"<\") && (s[i + 1]\
    \ != \">\")) {\n      |                     ^~~\n/tmp/tmpeugecgpw.cpp:17:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   17\
    \ |         if((s[i] == \"<\") && (s[i + 1] != \">\")) {\n      |            \
    \                              ^~~\n"
  stdout: ''
  timestamp: 1660130448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2) {\n        return true;\n    }\n    for (int i = 0; i < (int)brackets_size\
    \ - 1; ++i) {\n        if (brackets[i] != brackets[i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmegmnuq_: /tmp/tmpmegmnuq_.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // check brackets\n    size_t size = brackets.size();\n   \
    \ for (int i = 0; i < size; i++) {\n        if (brackets[i] != '<' && brackets[i]\
    \ != '>')\n            return false;\n    }\n    // check brackets size\n    if\
    \ (size % 2 != 0)\n        return false;\n    // check brackets\n    int cnt =\
    \ 0;\n    for (int i = 0; i < size; i++) {\n        if (brackets[i] == '<')\n\
    \            cnt += 1;\n        else if (brackets[i] == '>')\n            cnt\
    \ -= 1;\n        if (cnt != 0)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwu2a6k9p: /tmp/tmpwu2a6k9p.cpp:37: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<std::pair<std::string, std::string> > bracketstack;\n\
    \  for (char c: brackets) {\n    std::string openingBracket = \"\";\n    std::string\
    \ closingBracket = \"\";\n    if (c == '<') {\n      bracketstack.push(std::pair<std::string,\
    \ std::string>(\"<\", \">\"));\n    }\n    else if (c == '>') {\n      bracketstack.push(std::pair<std::string,\
    \ std::string>(\">\", \"<\"));\n    }\n    else {\n      openingBracket = bracketstack.top().first;\n\
    \      closingBracket = bracketstack.top().second;\n      bracketstack.pop();\n\
    \    }\n    if (openingBracket == closingBracket) {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvcwt3crp: /tmp/tmpvcwt3crp.cpp:37: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] != '<') return false;\n    }\n    for (int i = len;\
    \ i > 0; --i) {\n        if (brackets[i-1] != '>') return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1voo2jfz: /tmp/tmp1voo2jfz.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = brackets.size();\n    int close_brackets\
    \ = 0;\n    bool open_bracket = true;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_bracket = true;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \         open_bracket = false;\n        } else if (!open_bracket) {\n       \
    \     return false;\n        }\n    }\n\n    return close_brackets == open_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_a37m6s: /tmp/tmpc_a37m6s.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            return false;\n        }\n    }\n    for (int i = 0;\
    \ i < brackets.size(); i++) {\n        if (brackets[i] != '>') {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbya9l4ai: /tmp/tmpbya9l4ai.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // find number of opening brackets\n    int number_of_open_brackets\
    \ = brackets.find(\"<\");\n    if (number_of_open_brackets == std::string::npos)\
    \ {\n        return false;\n    }\n    int number_of_closed_brackets = brackets.find(\"\
    >\", number_of_open_brackets);\n    if (number_of_closed_brackets == std::string::npos)\
    \ {\n        return false;\n    }\n    // verify that they are all open brackets\n\
    \    bool all_open = true;\n    for (int i = 0; i < number_of_open_brackets; i++)\
    \ {\n        if (brackets[i] != \"<\") {\n            all_open = false;\n    \
    \        break;\n        }\n    }\n    for (int i = number_of_open_brackets; i\
    \ < number_of_closed_brackets; i++) {\n        if (brackets[i] != \">\") {\n \
    \           all_open = false;\n            break;\n        }\n    }\n    return\
    \ all_open;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibu9yi_o.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpibu9yi_o.cpp:26:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   26 |         if (brackets[i] != \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpibu9yi_o.cpp:32:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   32 | \
    \        if (brackets[i] != \">\") {\n      |                            ^~~\n"
  stdout: ''
  timestamp: 1660130451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string open = brackets.substr(0,1);\n    std::string close\
    \ = brackets.substr(1,1);\n    int open_count = 0, close_count = 0;\n    for(int\
    \ i = 0; i<brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n  \
    \      {\n            if(open == brackets.substr(i,1))\n                open_count++;\n\
    \            else if(open != brackets.substr(i,1))\n            {\n          \
    \      return false;\n            }\n        }\n        else if(brackets[i] ==\
    \ '>')\n        {\n            if(close == brackets.substr(i,1))\n           \
    \     close_count++;\n            else if(close != brackets.substr(i,1))\n   \
    \         {\n                return false;\n            }\n        }\n    }\n\
    \    if(open_count == close_count)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf4wuo9re: /tmp/tmpf4wuo9re.cpp:47: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tstd::stack<char> stack;\n\tbool result = true;\n\n\tfor (char\
    \ bracket : brackets) {\n\t\tswitch (bracket) {\n\t\t\tcase '>':\n\t\t\tcase '<':\n\
    \t\t\t\tif (stack.empty()) {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t\tif (stack.top() != '<') {\n\t\t\t\t\tresult = false;\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\
    \t\tstack.push('<');\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (!stack.empty())\
    \ {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstack.push('>');\n\
    \t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstack.push(bracket);\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmiwlg3.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpurmiwlg3.cpp:31:4: error: duplicate case value\n   31 |    case '<':\n\
    \      |    ^~~~\n/tmp/tmpurmiwlg3.cpp:20:4: note: previously used here\n   20\
    \ |    case '<':\n      |    ^~~~\n/tmp/tmpurmiwlg3.cpp:34:4: error: duplicate\
    \ case value\n   34 |    case '>':\n      |    ^~~~\n/tmp/tmpurmiwlg3.cpp:19:4:\
    \ note: previously used here\n   19 |    case '>':\n      |    ^~~~\n"
  stdout: ''
  timestamp: 1660130451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (size_t i = 0; i < brackets.size() - 1; i++)\n        if\
    \ (brackets[i] == '<' && brackets[i + 1] != '>')\n            return false;\n\
    \    if (brackets.back() == '>')\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppmp1kea_: /tmp/tmppmp1kea_.cpp:24: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  size_t count = 0;\n  // traverse the string.\n  for (size_t i\
    \ = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      // if\
    \ opening bracket encountered before.\n      if (count > 0) {\n        // if closing\
    \ bracket has not been encountered before.\n        if (count != i) {\n      \
    \    // wrong bracketing was found.\n          return false;\n        }\n    \
    \    continue;\n      }\n      // found a opening bracket.\n      count++;\n \
    \   } else {\n      // if closing bracket encountered before.\n      if (count\
    \ == i) {\n        // wrong bracketing was found.\n        return false;\n   \
    \   }\n    }\n  }\n  // no wrong bracketing.\n  return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp51q7coqr: /tmp/tmp51q7coqr.cpp:42: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // initialize a stack and push the brackets onto it\n  std::stack<std::string>\
    \ brackets_stack;\n  for (char &bracket : brackets) {\n    brackets_stack.push(bracket);\n\
    \  }\n  // now iterate through the stack and check if the brackets are balanced\n\
    \  while (brackets_stack.size() != 0) {\n    // the stack will grow up to a certain\
    \ size, so we need to pop the top of the stack before we try and pop it\n    //\
    \ back to the top after we finish popping it.\n    auto bracket = brackets_stack.top();\n\
    \    brackets_stack.pop();\n\n    if (bracket == \"<\") {\n      brackets_stack.push(brackets_stack.top());\n\
    \      brackets_stack.pop();\n    } else if (bracket == \">\") {\n      brackets_stack.push(brackets_stack.top());\n\
    \      brackets_stack.pop();\n    } else if (bracket == \"<=\") {\n      brackets_stack.push(brackets_stack.top());\n\
    \      brackets_stack.pop();\n    } else if (bracket == \">=\") {\n      brackets_stack.push(brackets_stack.top());\n\
    \      brackets_stack.pop();\n    } else {\n      return false;\n    }\n  }\n\n\
    \  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef5cq0r6.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpef5cq0r6.cpp:17:32: error: no matching function for call to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::push(char&)\u2019\n   17 |    \
    \ brackets_stack.push(bracket);\n      |                                ^\nIn\
    \ file included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpef5cq0r6.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660130451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = false;\n    for (std::string::size_type i =\
    \ 0; i < brackets.size(); i++) {\n        bool match = false;\n        if (brackets[i]\
    \ == '<') {\n            for (std::string::size_type j = i + 1; j < brackets.size();\
    \ j++) {\n                if (brackets[j] == '>') {\n                    match\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    } else if (brackets[i] == '>') {\n            for (std::string::size_type\
    \ j = i + 1; j < brackets.size(); j++) {\n                if (brackets[j] == '<')\
    \ {\n                    match = true;\n                    break;\n         \
    \       }\n            }\n        }\n        correct = correct || match;\n   \
    \ }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr8jzlhx9: /tmp/tmpr8jzlhx9.cpp:42: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  if (brackets.length() <= 1 || brackets[0] != '<' || brackets[brackets.length()-1]\
    \ != '>') {\n    return false;\n  }\n  int open = 0;\n  int close = 0;\n  int\
    \ i = 0;\n  while (i < brackets.length()) {\n    if (brackets[i] == '<') {\n \
    \     open++;\n    } else if (brackets[i] == '>') {\n      close++;\n    } else\
    \ {\n      if (open < close) {\n        return false;\n      }\n    }\n    i++;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe__lmbmy: /tmp/tmpe__lmbmy.cpp:40: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  for (auto c : brackets) {\n    if (c == '<') return false;\n\
    \    if (c == '>') return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpox5qq5rg: /tmp/tmpox5qq5rg.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t length = brackets.size();\n    if (length == 0) return\
    \ false;\n    if (brackets[0] == '<' && brackets[length - 1] == '>')\n       \
    \ return true;\n    if (brackets[length - 1] == '<' && brackets[0] == '>')\n \
    \       return true;\n    if (brackets[0] == '<' && brackets[1] == '<' && brackets[length\
    \ - 2] == '>')\n        return true;\n    if (brackets[length - 2] == '<' && brackets[1]\
    \ == '<' && brackets[0] == '>')\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppb52vd90: /tmp/tmppb52vd90.cpp:32: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    if (len < 2) {\n        return\
    \ true;\n    }\n    for (int i = 1; i < len - 1; ++i) {\n        if (brackets[i]\
    \ != brackets[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw73y8w46: /tmp/tmpw73y8w46.cpp:28: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    auto opening_brackets = brackets.begin();\n    auto opening_brackets_end\
    \ = brackets.end();\n    auto closed_brackets_begin = brackets.begin() + 1;\n\n\
    \    for (; opening_brackets != opening_brackets_end; ++opening_brackets) {\n\
    \        if (*opening_brackets != '<') return false;\n        while (++closed_brackets_begin\
    \ != brackets.end() && *closed_brackets_begin != '>') ;\n        ++closed_brackets_begin;\n\
    \        if (closed_brackets_begin == brackets.end()) return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwh8sl6al: /tmp/tmpwh8sl6al.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // Write your code here.\n  std::stack<int> stack;\n  std::string\
    \ open_brackets = brackets;\n  // stack is used so push and pop are fast. Think\
    \ about how this would work\n  // without it.\n  while (open_brackets.size() >\
    \ 0) {\n    if (open_brackets.at(0) == '<') {\n      stack.push(brackets.at(0));\n\
    \      open_brackets = open_brackets.substr(1);\n    } else if (open_brackets.at(0)\
    \ != '>') {\n      return false;\n    } else {\n      bool matched = false;\n\
    \      while (!stack.empty() && stack.top() != '>') {\n        if (open_brackets.at(stack.top())\
    \ == '<') {\n          matched = true;\n          break;\n        }\n        if\
    \ (open_brackets.at(stack.top()) == '>') {\n          break;\n        }\n    \
    \    stack.pop();\n      }\n      if (!matched) {\n        return false;\n   \
    \   }\n      open_brackets = open_brackets.substr(1);\n    }\n  }\n  // the stack\
    \ is empty if no closing brackets matched.\n  return stack.empty();\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 60) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  for (int i = 0; i < brackets.size() - 1; i++) {\n    if (brackets[i]\
    \ < brackets[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqdo0l2gt: /tmp/tmpqdo0l2gt.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // Your code goes here\n  int left = 0;\n  int right = brackets.length()\
    \ - 1;\n  while (left < right) {\n    if (brackets[left] == '<' && brackets[right]\
    \ == '>')\n      return true;\n    else if (brackets[left] == '>' && brackets[right]\
    \ == '<')\n      return true;\n    else if (brackets[left] == '<' && brackets[right]\
    \ == '>')\n      return true;\n    else if (brackets[left] == '>' && brackets[right]\
    \ == '<')\n      return true;\n    else if (brackets[left] == '<')\n      left++;\n\
    \    else if (brackets[right] == '>')\n      right--;\n    else if (brackets[left]\
    \ == '<' && brackets[right] == '<')\n      left++;\n    else if (brackets[left]\
    \ == '>' && brackets[right] == '>')\n      right--;\n    else\n      return false;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd9on1zeb: /tmp/tmpd9on1zeb.cpp:45: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    std::string bracket_pair;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        bracket_pair = brackets[i];\n\
    \        if (bracket_pair == \"<\") {\n            if (i < brackets.size() - 1)\
    \ {\n                if (brackets[i + 1] != \">\") {\n                    correct\
    \ = false;\n                }\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9fru4uk.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpl9fru4uk.cpp:20:40: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |                 if (brackets[i + 1] != \"\
    >\") {\n      |                                        ^~~\n"
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    assert(brackets.size() % 2UL == 0UL);\n    auto bracket = brackets.begin();\n\
    \    bool valid = true;\n    for (size_t i = 1UL; i < brackets.size() / 2UL; ++i)\
    \ {\n        if (brackets[i] != brackets[i - 1]) {\n            valid = false;\n\
    \            break;\n        }\n    }\n    return valid;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwr1took5: /tmp/tmpwr1took5.cpp:28: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int openings = 0;\n    int closings = 0;\n    for (int i =\
    \ 0; i < brackets.size();) {\n        if (brackets[i] == '<')\n            openings++;\n\
    \        else\n            closings++;\n        if (openings > closings)\n   \
    \         return false;\n        i = brackets.find('>', i);\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0avgf0zp: /tmp/tmp0avgf0zp.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (std::string::size_type i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] != '<') return false;\n        ++i;\n        auto\
    \ found = brackets.find(\"<\", i);\n        if (found == std::string::npos) return\
    \ false;\n        if (brackets[i] != '>') return false;\n        ++i;\n      \
    \  if (brackets[i] != '>') return false;\n        ++i;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcp1wpiqo: /tmp/tmpcp1wpiqo.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (auto& bracket : brackets) {\n\t\tif (bracket != '<') return\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmprfps_d4k: /tmp/tmprfps_d4k.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tassert(brackets.length() > 0);\n\t\n\tauto pos = brackets.find_first_of(\"\
    <>\");\n\tif (pos == std::string::npos) {\n\t\treturn false;\n\t}\n\t\n\tassert(brackets[pos]\
    \ == '>');\n\t\n\tfor (auto i = pos+1; i < brackets.length(); i++) {\n\t\tassert(brackets[i]\
    \ != '<');\n\t\t\n\t\tif (brackets[i] == '>') {\n\t\t\tassert(brackets[i+1] ==\
    \ '<');\n\t\t\t\n\t\t\t// closing bracket\n\t\t\tbrackets[i] = '>';\n\t\t\tbrackets[i+1]\
    \ = '<';\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_2s94gz: /tmp/tmpc_2s94gz.cpp:21: bool correct_bracketing(std::string):
    Assertion `brackets[pos] == ''>'''' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  for (int i = 0; i < brackets.size() - 1; i++) {\n    if (brackets[i]\
    \ != \"<\" && brackets[i] != \">\")\n      return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzr_4dc8.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmptzr_4dc8.cpp:15:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |     if (brackets[i] != \"<\" && brackets[i]\
    \ != \">\")\n      |                        ^~~\n/tmp/tmptzr_4dc8.cpp:15:46: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   15\
    \ |     if (brackets[i] != \"<\" && brackets[i] != \">\")\n      |           \
    \                                   ^~~\n"
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // I haven't tested with other operators.\n  std::unordered_set<char>\
    \ brackets;\n  brackets.insert(brackets.begin(), brackets.begin() + brackets.size()\
    \ - 1);\n  for (auto c : brackets)\n    if (c == '<' || c == '>')\n      return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ysk362n.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7ysk362n.cpp:15:28: error: declaration of \u2018std::unordered_set<char>\
    \ brackets\u2019 shadows a parameter\n   15 |   std::unordered_set<char> brackets;\n\
    \      |                            ^~~~~~~~\n/tmp/tmp7ysk362n.cpp:16:54: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::unordered_set<char>::iterator\u2019\
    \ {aka \u2018std::__detail::_Node_iterator<char, true, false>\u2019} and \u2018\
    std::unordered_set<char>::size_type\u2019 {aka \u2018long unsigned int\u2019})\n\
    \   16 |   brackets.insert(brackets.begin(), brackets.begin() + brackets.size()\
    \ - 1);\n      |                                     ~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n\
    \      |                                                   |                 |\n\
    \      |                                                   |                 std::unordered_set<char>::size_type\
    \ {aka long unsigned int}\n      |                                           \
    \        std::unordered_set<char>::iterator {aka std::__detail::_Node_iterator<char,\
    \ true, false>}\n"
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string openingbrackets = \"<\";\n    std::string closingbrackets\
    \ = \">\";\n    std::string bracketschecked = brackets;\n    for (char ch: bracketschecked)\
    \ {\n        if (openingbrackets.find(ch) != std::string::npos) {\n          \
    \  openingbrackets = openingbrackets.substr(openingbrackets.find(ch) + 1);\n \
    \           closingbrackets = closingbrackets.substr(openingbrackets.find(ch)\
    \ + 1);\n        }\n    }\n    return (openingbrackets == closingbrackets);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp17heigi3: /tmp/tmp17heigi3.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // count number of opening brackets\n  int num_brackets = 0;\n\
    \  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n\
    \      num_brackets++;\n    } else if (brackets[i] == '>') {\n      num_brackets--;\n\
    \    }\n  }\n  return (num_brackets == 0);\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6i94zlj4: /tmp/tmp6i94zlj4.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string right_bracket = \"<\";\n    std::string left_bracket\
    \ = \">\";\n    for (char c : brackets) {\n        if (c == left_bracket) {\n\
    \            right_bracket += \"<\";\n        } else if (c == right_bracket) {\n\
    \            right_bracket += \">\";\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxr51uh4l.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxr51uh4l.cpp:17:15: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   17 |         if (c == left_bracket) {\n      |             ~ ^~ ~~~~~~~~~~~~\n\
    \      |             |    |\n      |             char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxr51uh4l.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpxr51uh4l.cpp:17:18:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   17 |         if (c == left_bracket) {\n      |    \
    \              ^~~~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxr51uh4l.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpxr51uh4l.cpp:17:18: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   17 |         if (c ==\
    \ left_bracket) {\n      |                  ^~~~"
  stdout: ''
  timestamp: 1660130452
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (int i = 0; i < brackets.size(); ++i) {\n\t\tif (brackets[i]\
    \ != \"<\") return false;\n\t\telse if (brackets[brackets.size() - 1 - i] != \"\
    <\") return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk1b1vff.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmphk1b1vff.cpp:15:22: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |   if (brackets[i] != \"<\") return false;\n\
    \      |                      ^~~\n/tmp/tmphk1b1vff.cpp:16:49: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   16 |   else\
    \ if (brackets[brackets.size() - 1 - i] != \"<\") return false;\n      |     \
    \                                            ^~~\n"
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  if(brackets.size() == 0) return false;\n  int open_brackets =\
    \ 0;\n  int close_brackets = 0;\n  for(int i = 0; i < brackets.size(); i++){\n\
    \    if(brackets[i] == '<'){\n      open_brackets++;\n    }else if(brackets[i]\
    \ == '>'){\n      close_brackets++;\n    }else{\n      assert(0);\n    }\n  }\n\
    \  return open_brackets == close_brackets;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy0df9utx: /tmp/tmpy0df9utx.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130452
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::stack<char> bracket_stack;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            bracket_stack.push(*it);\n\
    \        } else if (*it == '>') {\n            if (bracket_stack.empty()) return\
    \ false; // no opening brackets found\n            if (bracket_stack.top() ==\
    \ '<') {\n                bracket_stack.pop();\n            } else {\n       \
    \         return false; // more than one opening bracket\n            }\n    \
    \    } else if (*it == '>') {\n            if (bracket_stack.empty()) return false;\
    \ // no opening brackets found\n            if (bracket_stack.top() != '<') {\n\
    \                return false; // more than one opening bracket\n            }\n\
    \            bracket_stack.pop();\n        } else {\n            return false;\
    \ // not a valid opening bracket\n        }\n    }\n    return bracket_stack.empty();\
    \ // no incorrect bracketing found\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    assert(brackets.size() > 1);\n    std::string result = brackets.substr(1,\
    \ brackets.size() - 2);\n    std::stack<char> bracket;\n    for (int i = 0; i\
    \ < result.length(); i++) {\n        if (bracket.empty() && (result[i] == '<'\
    \ || result[i] == '>')) bracket.push(result[i]);\n        else if (!bracket.empty()\
    \ && bracket.top() == '<') bracket.pop();\n        else if (!bracket.empty() &&\
    \ bracket.top() == '>') bracket.pop();\n        else return false;\n    }\n  \
    \  return bracket.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_obj4da: /tmp/tmpc_obj4da.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    auto brackets_pos = brackets.find(\"<\");\n    if (brackets_pos\
    \ == std::string::npos)\n        return false; // brackets does not contain \"\
    <\"\n    auto brackets_end_pos = brackets.find(\">\", brackets_pos);\n    if (brackets_end_pos\
    \ == std::string::npos)\n        return false; // brackets does not contain \"\
    >\"\n    if (brackets_end_pos != brackets_pos)\n        return false; // brackets\
    \ contains nested \"<>\"\n    if (brackets_end_pos == brackets.size() - 1)\n \
    \       return false; // brackets contains \">>\"\n    auto brackets_start_pos\
    \ = brackets.find(\">\", brackets_pos + 1);\n    if (brackets_start_pos == std::string::npos)\n\
    \        return false; // brackets does not contain \"<>\"\n    if (brackets_start_pos\
    \ != 0)\n        return false; // brackets contains \"<>\"\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa6bmm8kt: /tmp/tmpa6bmm8kt.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::stack<char> bracketsStack;\n    bracketsStack.push(brackets[0]);\n\
    \    for (int i = 1; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            while (bracketsStack.top() != '<')\n                bracketsStack.pop();\n\
    \        } else if (brackets[i] == '>') {\n            while (bracketsStack.top()\
    \ != '>')\n                bracketsStack.pop();\n        } else {\n          \
    \  bracketsStack.push(brackets[i]);\n        }\n    }\n    return bracketsStack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int brackets_len = brackets.size();\n    for (int i = 0; i\
    \ < brackets_len; i++) {\n        if (brackets[i] != brackets[brackets_len - 1\
    \ - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxkz3940u: /tmp/tmpxkz3940u.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::stack<int> s;\n    bool ok = false;\n    for (auto &c:\
    \ brackets) {\n        if (std::isdigit(c)) {\n            s.push(c - '0');\n\
    \        } else {\n            if (s.empty()) return false;\n            int last\
    \ = s.top();\n            if (c != last) {\n                ok = false;\n    \
    \            break;\n            } else {\n                s.pop();\n        \
    \    }\n        }\n    }\n    return ok;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnfc3f819: /tmp/tmpnfc3f819.cpp:34: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  size_t brackets_size = brackets.size();\n  // if brackets is\
    \ empty, it means no opening or closing brackets are found\n  if (brackets_size\
    \ == 0) {\n    return false;\n  }\n  bool flag = false;\n  for (size_t i = 0;\
    \ i < brackets_size; ++i) {\n    bool found = false;\n    for (size_t j = 0; j\
    \ < brackets.size(); ++j) {\n      if (brackets[i] == brackets[j]) {\n       \
    \ found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return\
    \ false;\n    }\n    flag = flag || found;\n  }\n  return flag;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpejmkrueg: /tmp/tmpejmkrueg.cpp:41: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // write your code here\n    bool res = true;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        int opening_bracket = brackets[i];\n\
    \        if (brackets.size() - i == 1) {\n            if (opening_bracket != brackets.back())\
    \ {\n                res = false;\n            }\n        } else {\n         \
    \   if (opening_bracket != brackets[i + 1]) {\n                res = false;\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpezky9_s_: /tmp/tmpezky9_s_.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t open = brackets.size();\n \
    \   for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (i == open) {\n                result = false;\n    \
    \            break;\n            }\n        } else if (brackets[i] == '>') {\n\
    \            if (i == open) {\n                result = true;\n              \
    \  break;\n            }\n        } else {\n            result = false;\n    \
    \        break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjo4o5xlk: /tmp/tmpjo4o5xlk.cpp:40: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Create a std::stack of bool where each index\n    // represents\
    \ whether the corresponding opening bracket\n    // is found or not.\n    // If\
    \ it's true, then it means that an opening bracket\n    // is found and the closing\
    \ bracket is not found.\n    // If it's false, then it means that the closing\
    \ bracket\n    // is found and the opening bracket is not found.\n    bool stack[brackets.size()\
    \ + 1];\n\n    // Initialize stack[0] to be true\n    stack[0] = true;\n\n   \
    \ // Loop through each bracket\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        // If the stack is empty, then it means\n        // that no brackets\
    \ are found and therefore\n        // the brackets are not correct.\n        if\
    \ (stack[brackets.size() - 1] == false)\n            return false;\n\n       \
    \ // If the current bracket is not at the top of the\n        // stack, then it\
    \ means that an opening bracket is\n        // found and the closing bracket is\
    \ not found.\n        if (i == 0)\n            stack[i] = true;\n        // If\
    \ the current bracket is at the top of the stack,\n        // then it means that\
    \ a closing bracket is found and\n        // the opening bracket is not found.\n\
    \        else\n            stack[i] = false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7kl7u2k7: /tmp/tmp7kl7u2k7.cpp:53: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130453
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    auto it = brackets.begin();\n    bool ok = true;\n    while\
    \ (it != brackets.end()) {\n        if (*it != '>' && it++ != '<') {\n       \
    \     ok = false;\n            break;\n        }\n        it++;\n    }\n    return\
    \ ok;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqdzd_ze.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsqdzd_ze.cpp:17:32: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018char\u2019)\n   17 |         if (*it != '>' && it++ != '<')\
    \ {\n      |                           ~~~~ ^~ ~~~\n      |                  \
    \           |     |\n      |                             |     char\n      | \
    \                            __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n      \
    \           from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsqdzd_ze.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpsqdzd_ze.cpp:17:35: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018char\u2019\n   17 |         if (*it != '>' && it++ != '<') {\n   \
    \   |                                   ^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsqdzd_ze.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:904:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator!=(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Cont"
  stdout: ''
  timestamp: 1660130452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if\
    \ ((brackets[i] == '<') && (brackets[i + 1] == '>')) return false;\n        if\
    \ ((brackets[i] == '>') && (brackets[i + 1] == '>')) return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmps9aapgvm: /tmp/tmps9aapgvm.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.empty()) return false;\n    int count = 0;\n \
    \   bool flag = false;\n    for (int i = 1; i < brackets.size() - 1; i++) {\n\
    \        if (brackets[i + 1] == '>' && brackets[i - 1] == '>') {\n           \
    \ count++;\n            if (brackets[i + 1] == brackets[i - 1]) {\n          \
    \      count++;\n            }\n        } else if (brackets[i + 1] == '<' && brackets[i\
    \ - 1] == '<') {\n            count++;\n            if (brackets[i + 1] == brackets[i\
    \ - 1]) {\n                count++;\n            }\n        } else if (brackets[i\
    \ + 1] == '<' && brackets[i - 1] == '<' && brackets[i] == '>') {\n           \
    \ count++;\n        } else if (brackets[i + 1] == '>' && brackets[i - 1] == '<'\
    \ && brackets[i] == '<') {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        if (brackets.front() == brackets.back()) {\n            flag\
    \ = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp909shmob: /tmp/tmp909shmob.cpp:43: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> opening_stack, bracket_stack;\n  bool in_bracket\
    \ = false;\n  for (auto c : brackets) {\n    if (c == '<')\n      opening_stack.push(c);\n\
    \    else if (c == '>')\n      if (opening_stack.top() == '<')\n        opening_stack.pop();\n\
    \      else\n        return false;\n    else if (c == '<' && opening_stack.top()\
    \ == '>')\n      opening_stack.pop();\n    else if (c == '<')\n      in_bracket\
    \ = true;\n    else if (c == ')')\n      if (opening_stack.empty())\n        return\
    \ false;\n      else\n        bracket_stack.push(opening_stack.top());\n    else\
    \ if (c == ')' && bracket_stack.empty())\n      in_bracket = false;\n    else\
    \ if (bracket_stack.top() == '<')\n      opening_stack.pop();\n    else if (bracket_stack.empty()\
    \ && !in_bracket)\n      return false;\n    else\n      bracket_stack.pop();\n\
    \  }\n  return !opening_stack.empty();\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi1nx41jd: /tmp/tmpi1nx41jd.cpp:46: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tstd::stack<char> opening_bracket;\n\tstd::stack<char> closing_bracket;\n\
    \tfor (int i = 0; i < brackets.size() - 1; ++i) {\n\t\t// If bracket of opening\
    \ stack not opened in the previous iteration, push it.\n\t\twhile ((!opening_bracket.empty())\
    \ && (brackets[i] < opening_bracket.top())) {\n\t\t\topening_bracket.pop();\n\t\
    \t}\n\t\t// If bracket of closing stack not closed in the previous iteration,\
    \ pop it.\n\t\twhile ((!closing_bracket.empty()) && (brackets[i] > closing_bracket.top()))\
    \ {\n\t\t\tclosing_bracket.pop();\n\t\t}\n\t\t// If current opening bracket is\
    \ opened, push closing bracket.\n\t\tif (brackets[i] == '<') {\n\t\t\topening_bracket.push(brackets[i+1]);\n\
    \t\t}\n\t\t// If current closing bracket is closed, pop opening bracket.\n\t\t\
    else if (brackets[i] == '>') {\n\t\t\tclosing_bracket.push(brackets[i+1]);\n\t\
    \t}\n\t\t// If current opening bracket is not closed, pop closing bracket.\n\t\
    \telse if (!opening_bracket.empty()) {\n\t\t\tclosing_bracket.push(brackets[i+1]);\n\
    \t\t}\n\t\t// If current closing bracket is not opened, push opening bracket.\n\
    \t\telse if (!closing_bracket.empty()) {\n\t\t\topening_bracket.push(brackets[i+1]);\n\
    \t\t}\n\t}\n\treturn (!opening_bracket.empty()) && (!closing_bracket.empty());\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb5wzcscm: /tmp/tmpb5wzcscm.cpp:46: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for(int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if(brackets[i + 1] != brackets[i]) {\n            correct\
    \ = false;\n            break;\n        }\n    }\n    return correct;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0k242n8s: /tmp/tmp0k242n8s.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string open_brackets = brackets;\n  std::string close_brackets\
    \ = brackets;\n  for (int i = 1; i < open_brackets.size(); i++) {\n    if (open_brackets[i]\
    \ == '<')\n      close_brackets[close_brackets.size() - 1 - i] = '>';\n    else\
    \ if (open_brackets[i] == '>')\n      close_brackets[close_brackets.size() - 1\
    \ - i - 1] = '<';\n    else if (open_brackets[i] == '{')\n      close_brackets[close_brackets.size()\
    \ - 1 - i] = '}';\n    else if (open_brackets[i] == '}')\n      close_brackets[close_brackets.size()\
    \ - 1 - i - 1] = '{';\n    else if (open_brackets[i] == '(')\n      close_brackets[close_brackets.size()\
    \ - 1 - i] = ')';\n    else if (open_brackets[i] == ')')\n      close_brackets[close_brackets.size()\
    \ - 1 - i - 1] = '(';\n  }\n  return open_brackets == close_brackets;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps021r_5b: /tmp/tmps021r_5b.cpp:34: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int opening_brackets = 0;\n  for (int i = 0; i < brackets.length();\
    \ ++i) {\n    if (brackets[i] == '<') {\n      ++opening_brackets;\n    } else\
    \ if (brackets[i] == '>') {\n      --opening_brackets;\n    }\n    if (opening_brackets\
    \ == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7_yb_5ym: /tmp/tmp7_yb_5ym.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tassert(brackets.size() >= 2);\n\t\n\t// create a stack of brackets\n\
    \tstack<char> brackets_stack(brackets);\n\n\t// loop until stack is empty\n\t\
    while(!brackets_stack.empty()) {\n\t\t// pop the top bracket (> or <) and push\
    \ its closing bracket\n\t\tchar c = brackets_stack.top();\n\t\tbrackets_stack.pop();\n\
    \t\tbrackets_stack.push(c);\n\t\t\n\t\t// if we have seen an opening bracket\n\
    \t\tif(c == '<') {\n\t\t\tchar a = brackets_stack.top();\n\t\t\tchar b = brackets_stack.top();\n\
    \t\t\t\n\t\t\t// we must have seen an opening bracket and a closing bracket\n\t\
    \t\tassert(a == '<' && b == '>');\n\t\t\t\n\t\t\t// the opening bracket must be\
    \ different than the closing bracket\n\t\t\tassert(a != b);\n\t\t\t\n\t\t\t//\
    \ if we have seen a closing bracket before, return false\n\t\t\tif(brackets_stack.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// if we have seen an opening\
    \ bracket and no corresponding closing bracket\n\t\t\tif(brackets_stack.top()\
    \ == '>') {\n\t\t\t\t// return false\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\
    \t\t\t// if we have seen a closing bracket and no corresponding opening bracket\n\
    \t\t\tif(brackets_stack.top() == '<') {\n\t\t\t\t// return true\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if we have seen an opening bracket\n\t\t\
    if(c == '>') {\n\t\t\t// if we have not seen a closing bracket before\n\t\t\t\
    if(!brackets_stack.empty()) {\n\t\t\t\t// return false\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\t\n\t\t\t// if we have seen a closing bracket and no corresponding\
    \ opening bracket\n\t\t\tif(brackets_stack.top() == '<') {\n\t\t\t\t// return\
    \ true\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t// if we have seen an opening\
    \ bracket and no corresponding closing bracket\n\t\t\tif(brackets_stack.top()\
    \ == '>') {\n\t\t\t\t// return false\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\
    \t\n\t\t// if we have seen a closing bracket\n\t\tif(brackets_stack.empty()) {\n\
    \t\t\t// return false\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// if we have seen\
    \ a closing bracket\n\treturn brackets_stack.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7t07wazz.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7t07wazz.cpp:17:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   17 |  stack<char> brackets_stack(brackets);\n\
    \      |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp7t07wazz.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp7t07wazz.cpp:17:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |  stack<char> brackets_stack(brackets);\n  \
    \    |        ^~~~\n/tmp/tmp7t07wazz.cpp:20:9: error: \u2018brackets_stack\u2019\
    \ was not declared in this scope\n   20 |  while(!brackets_stack.empty()) {\n\
    \      |         ^~~~~~~~~~~~~~\n/tmp/tmp7t07wazz.cpp:84:9: error: \u2018brackets_stack\u2019\
    \ was not declared in this scope\n   84 |  return brackets_stack.empty();\n  \
    \    |         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660130454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string s = brackets;\n  for (size_t i = 0; i < s.size();\
    \ ++i) {\n    if (s[i] == '<') {\n      ++i;\n      if (s[i] == '>') {\n     \
    \   ++i;\n        return true;\n      } else {\n        return false;\n      }\n\
    \    } else if (s[i] == '>') {\n      ++i;\n    } else {\n      return false;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpumik9n6_: /tmp/tmpumik9n6_.cpp:35: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    assert(brackets.size() >= 2);\n    int count = 0;\n    bool\
    \ found = false;\n    for(int i = 0; i < brackets.size() - 1; ++i)\n    {\n  \
    \      found = false;\n        if(brackets[i] == '<')\n        {\n           \
    \ int start = i;\n            for(char j = i + 1; j < brackets.size(); ++j)\n\
    \            {\n                if(brackets[j] == '>')\n                {\n  \
    \                  int end = j;\n                    if(count == 0)\n        \
    \            {\n                        found = j - start > 1;\n             \
    \       }\n                    else\n                    {\n                 \
    \       found |= end - start > 1;\n                    }\n                   \
    \ i = start;\n                    break;\n                }\n            }\n \
    \       }\n        if(!found)\n        {\n            break;\n        }\n    \
    \    ++count;\n    }\n    return found;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphde02lzy: /tmp/tmphde02lzy.cpp:51: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // TODO:\n  // implement this function in C++\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkpxv4qs5: /tmp/tmpkpxv4qs5.cpp:19: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    assert(brackets.size() >= 2);\n    for (int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if (brackets[i] != '<' && brackets[i] != '>') return false;\n\
    \    }\n    return brackets.back() == '>';\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph431xfxp: /tmp/tmph431xfxp.cpp:26: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int cnt = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n\
    \    if (brackets[i] == '<') cnt++;\n    else if (brackets[i] == '>') cnt--;\n\
    \    else return false;\n  }\n  return cnt == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu048qqc_: /tmp/tmpu048qqc_.cpp:29: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n    if (*bracket == '<')\n      return false;\n    if (*bracket\
    \ == '>')\n      return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyukj6i_a: /tmp/tmpyukj6i_a.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (auto ch : brackets) {\n\t\tif (ch == '<' || ch == '>') {\n\
    \t\t\t// if either of them are not open, return false\n\t\t\treturn ((ch == '<')\
    \ && (brackets.substr(0, bracket_pos(brackets, ch) + 1) != \">\"));\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnuotd00k.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpnuotd00k.cpp:17:47: error: \u2018bracket_pos\u2019 was not declared\
    \ in this scope; did you mean \u2018brackets\u2019?\n   17 |    return ((ch ==\
    \ '<') && (brackets.substr(0, bracket_pos(brackets, ch) + 1) != \">\"));\n   \
    \   |                                               ^~~~~~~~~~~\n      |     \
    \                                          brackets\n"
  stdout: ''
  timestamp: 1660130454
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool ret = true;\n    size_t opening_brackets = brackets.find(\"\
    <\");\n    size_t closing_brackets = brackets.find(\">\");\n    for (size_t i\
    \ = 0; ret; i++) {\n        if (i == opening_brackets)\n            ret = closing_brackets\
    \ != brackets.find(\"<\");\n        else if (i == closing_brackets)\n        \
    \    ret = opening_brackets != brackets.find(\">\");\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int len = brackets.size();\n  bool is_right_bracket = false;\n\
    \  bool has_right_bracket = false;\n  for (int i = 0; i < len; i++) {\n    is_right_bracket\
    \ = false;\n    if (brackets[i] == '<') {\n      for (int j = i; j < len; j++)\
    \ {\n        if (brackets[j] == '>') {\n          is_right_bracket = true;\n \
    \         break;\n        }\n      }\n    }\n    if (brackets[i] == '>') {\n \
    \     has_right_bracket = true;\n    }\n    if (is_right_bracket != has_right_bracket)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl925wufw: /tmp/tmpl925wufw.cpp:38: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int brackets_len = brackets.size();\n  int open_count = 0;\n\
    \  int close_count = 0;\n  for (int i = 0; i < brackets_len; i++) {\n    if (brackets[i]\
    \ == '<') {\n      open_count++;\n    }\n    else if (brackets[i] == '>') {\n\
    \      close_count++;\n    }\n  }\n  return open_count == close_count;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw4kbhmgx: /tmp/tmpw4kbhmgx.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.empty()) {\n        return false;\n    }\n   \
    \ std::string current = brackets.substr(0, 1);\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            current = brackets.substr(i,\
    \ 1);\n        }\n        if (brackets[i] == '>') {\n            if (current ==\
    \ brackets.substr(i - 1, 1)) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8r8hlqco: /tmp/tmp8r8hlqco.cpp:36: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  if (brackets.size() <= 1) return false;\n  for (int i = 1; i\
    \ < brackets.size(); i++) {\n    if (brackets[i - 1] != '<' && brackets[i] !=\
    \ '<') return false;\n    if (brackets[i - 1] == '<' && brackets[i] == '>') return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp987m_s9i: /tmp/tmp987m_s9i.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  assert (brackets.size() >= 2);\n  std::string bracket = brackets.substr(0,\
    \ 2);\n  std::string opening = brackets.substr(2, bracket.length());\n  std::string\
    \ closing = brackets.substr(bracket.length() + 2, 2);\n  std::string remaining\
    \ = brackets.substr(bracket.length() + 2);\n  return opening.find(closing) ==\
    \ std::string::npos;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 4) > this->size() (which is 2)\n"
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // assert brackets.size() > 1\n    if (brackets.size() != 1)\
    \ {\n        return false;\n    }\n    auto first = brackets[0];\n    for (size_t\
    \ i = 1; i < brackets.size(); i++) {\n        if (brackets[i] != first) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcn0x7yzw: /tmp/tmpcn0x7yzw.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int n = brackets.size();\n    bool found = false;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (brackets[i] == '>') {\n            if\
    \ (i + 1 < n) {\n                brackets[i + 1] = brackets[i + 2];\n        \
    \    }\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8_8h1klq: /tmp/tmp8_8h1klq.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int openBracketsCount = 0;\n    int closedBracketsCount = 0;\n\
    \    for(int i = 0; i < brackets.size(); ++i) {\n        if(brackets[i] == '<')\
    \ {\n            ++openBracketsCount;\n        } else if(brackets[i] == '>') {\n\
    \            ++closedBracketsCount;\n        } else {\n            return false;\n\
    \        }\n    }\n    return openBracketsCount == closedBracketsCount;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpll6udlky: /tmp/tmpll6udlky.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() < 2) return false;\n    // count opening\
    \ brackets.\n    int count_opening_brackets(int index, int n) {\n        int cnt\
    \ = 0;\n        while (index != n && brackets[index] == '<') { // find index of\
    \ opening bracket\n            cnt++;\n            index++;\n        }\n     \
    \   return cnt;\n    }\n    // find index of closing bracket\n    int find_closing_bracket(std::string\
    \ str, int index) {\n        int cnt = 0;\n        while (index != str.size()\
    \ - 1) {\n            if (str[index] == '>') {\n                cnt++;\n     \
    \       }\n            index++;\n        }\n        return str.size() - 1 - cnt;\n\
    \    }\n    // count all opening brackets\n    int count_opening_brackets(int\
    \ index, int n) {\n        int cnt = 0;\n        while (index != n && brackets[index]\
    \ == '<') { // find index of opening bracket\n            cnt++;\n           \
    \ index++;\n        }\n        return cnt;\n    }\n    // count all opening brackets\n\
    \    int count_opening_brackets(int index, int n) {\n        int cnt = 0;\n  \
    \      while (index != n && brackets[index] == '<') { // find index of opening\
    \ bracket\n            cnt++;\n            index++;\n        }\n        return\
    \ cnt;\n    }\n    // count all opening brackets\n    int count_opening_brackets(int\
    \ index, int n) {\n        int cnt = 0;\n        while (index != n && brackets[index]\
    \ == '<') { // find index of opening bracket\n            cnt++;\n           \
    \ index++;\n        }\n        return cnt;\n    }\n    // count all opening brackets\n\
    \    int count_opening_brackets(int index, int n) {\n        int cnt = 0;\n  \
    \      while (index != n && brackets[index] == '<') { // find index of opening\
    \ bracket\n            cnt++;\n            index++;\n        }\n        return\
    \ cnt;\n    }\n    // count all opening brackets\n    int count_opening_brackets(int\
    \ index, int n) {\n        int cnt = 0;\n        while (index != n && brackets[index]\
    \ == '<') { // find index of opening bracket\n            cnt++;\n           \
    \ index++;\n        }\n        return cnt;\n    }\n    // count all opening brackets\n\
    \    int count_opening_brackets(int index, int n) {\n        int cnt = 0;\n  \
    \      while (index != n && brackets[index] == '<') { // find index of opening\
    \ bracket\n            cnt++;\n            index++;\n        }\n        return\
    \ cnt;\n    }\n    // count all opening brackets\n    int count_opening_brackets(int\
    \ index, int n) {\n        int cnt = 0;\n        while (index != n && brackets[index]\
    \ == '<') { // find index of opening bracket\n            cnt++;\n           \
    \ index++;\n        }\n        return cnt;\n    }\n    // count all opening brackets\n\
    \    int count_opening_brackets(\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqay6i0d.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpeqay6i0d.cpp:16:50: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   16 |     int count_opening_brackets(int index,\
    \ int n) {\n      |                                                  ^\n/tmp/tmpeqay6i0d.cpp:25:58:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   25 |     int find_closing_bracket(std::string str, int index) {\n      | \
    \                                                         ^\n/tmp/tmpeqay6i0d.cpp:36:50:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   36 |     int count_opening_brackets(int index, int n) {\n      |         \
    \                                         ^\n/tmp/tmpeqay6i0d.cpp:45:50: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   45\
    \ |     int count_opening_brackets(int index, int n) {\n      |              \
    \                                    ^\n/tmp/tmpeqay6i0d.cpp:54:50: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   54 |     int count_opening_brackets(int\
    \ index, int n) {\n      |                                                  ^\n\
    /tmp/tmpeqay6i0d.cpp:63:50: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   63 |     int count_opening_brackets(int index, int n)\
    \ {\n      |                                                  ^\n/tmp/tmpeqay6i0d.cpp:72:50:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   72 |     int count_opening_brackets(int index, int n) {\n      |         \
    \                                         ^\n/tmp/tmpeqay6i0d.cpp:81:50: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   81\
    \ |     int count_opening_brackets(int index, int n) {\n      |              \
    \                                    ^\n/tmp/tmpeqay6i0d.cpp:90:50: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   90 |     int count_opening_brackets(int\
    \ index, int n) {\n      |                                                  ^\n\
    /tmp/tmpeq"
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // write your code here\n    // return true;\n    return (brackets\
    \ == \"<\") && (brackets == \"<>\");\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt7btneqp: /tmp/tmpt7btneqp.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    std::string close_brackets;\n    for (std::size_t\
    \ i = 0; brackets[i] != '>'; i++) {\n        count++;\n    }\n    for (std::size_t\
    \ i = 0; brackets[i] != '>'; i++) {\n        close_brackets += brackets[i];\n\
    \    }\n    return count == close_brackets.size();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuhnatn1t: /tmp/tmpuhnatn1t.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int left_cnt = 0;\n  int right_cnt = 0;\n  std::string left_bracket\
    \ = brackets[0];\n  std::string right_bracket = brackets[1];\n  for (size_t i\
    \ = 0; i < brackets.size(); ++i) {\n    if (left_bracket == brackets[i]) {\n \
    \     left_cnt++;\n    } else if (right_bracket == brackets[i]) {\n      right_cnt++;\n\
    \    } else {\n      return false;\n    }\n  }\n  return left_cnt < right_cnt;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a6egtt3.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp5a6egtt3.cpp:16:40: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   16 |   std::string\
    \ left_bracket = brackets[0];\n      |                                       \
    \ ^\n/tmp/tmp5a6egtt3.cpp:17:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |   std::string\
    \ right_bracket = brackets[1];\n      |                                      \
    \   ^\n/tmp/tmp5a6egtt3.cpp:19:22: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   19 |     if (left_bracket == brackets[i]) {\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5a6egtt3.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5a6egtt3.cpp:19:35:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   19\
    \ |     if (left_bracket == brackets[i]) {\n      |                          \
    \         ^\nIn file included from /usr/include/c++/9/regex:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n          \
    \       from /tmp/tmp5a6egtt3.cpp:2:\n/usr/incl"
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for(std::size_t i = 0, n = brackets.size();\
    \ i < n; ++i) {\n        auto bracket = brackets.at(i);\n        auto opening\
    \ = brackets.substr(0, i).find(\"<\");\n        auto closing = brackets.substr(i\
    \ + 1).find(\">\");\n        if(opening == std::string::npos || closing == std::string::npos)\
    \ {\n            return false;\n        }\n        if(opening != closing) {\n\
    \            return false;\n        }\n        result &= opening == brackets.find_first_not_of(bracket,\
    \ opening + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpux94pazq: /tmp/tmpux94pazq.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int n = 0;\n    bool result = true;\n    for (int i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] != '<') {\n            result\
    \ = false;\n        }\n        n++;\n        if (brackets[i] == '>') {\n     \
    \       n--;\n        }\n        if (n != 0) {\n            result = false;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp416qdrxw: /tmp/tmp416qdrxw.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool is_ok = true;\n    for (auto i = brackets.begin(); i !=\
    \ brackets.end(); ++i) {\n        if (*i != '>') {\n            is_ok = false;\n\
    \        }\n        if (*(i + 1) != '>') {\n            is_ok = false;\n     \
    \   }\n        i += 2;\n    }\n    return is_ok;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int opening_brackets = 0, closing_brackets = 0;\n  for (char\
    \ c : brackets) {\n    opening_brackets++;\n    if (c == '<') {\n      closing_brackets++;\n\
    \    }\n  }\n  if (opening_brackets != closing_brackets) {\n    return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeng0sqz6: /tmp/tmpeng0sqz6.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // convert brackets to vector\n  vector <string> bracket_list;\n\
    \  for (int i = 0; i < brackets.size(); ++i) {\n    bracket_list .push_back(brackets[i]);\n\
    \  }\n\n  // check every opening bracket\n  for (int i = 0; i < bracket_list.size();\
    \ ++i) {\n    int opening_bracket = bracket_list[i][0] - '0';\n    if (opening_bracket\
    \ != i) {\n      return false;\n    }\n  }\n\n  // check every closing bracket\n\
    \  for (int i = 0; i < bracket_list.size(); ++i) {\n    int closing_bracket =\
    \ bracket_list[i][1] - '0';\n    if (closing_bracket != i) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaglrenxs.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpaglrenxs.cpp:15:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   15 |   vector <string> bracket_list;\n      |   ^~~~~~\n/tmp/tmpaglrenxs.cpp:15:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaglrenxs.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaglrenxs.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpaglrenxs.cpp:15:11:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |   vector <string>\
    \ bracket_list;\n      |           ^~~~~~\n/tmp/tmpaglrenxs.cpp:15:11: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaglrenxs.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                             "
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0, closed_brackets = 0;\n    for (int i\
    \ = 0; i < brackets.size();) {\n        if (brackets[i] == '<') {\n          \
    \  open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n     \
    \       closed_brackets++;\n        }\n        i++;\n    }\n    return (open_brackets\
    \ == closed_brackets);\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxib877ea: /tmp/tmpxib877ea.cpp:33: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int count = 0;\n  for (int i = 0; i < brackets.size() - 1; i++)\
    \ {\n    if (brackets[i] == '<') count++;\n    else if (brackets[i] == '>') count--;\n\
    \  }\n  return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsa5jwsrf: /tmp/tmpsa5jwsrf.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int open_brackets = 0;\n  for (int i = 0; i < brackets.length();\
    \ ++i) {\n    if (brackets[i] == '<') {\n      open_brackets++;\n    } else if\
    \ (brackets[i] == '>') {\n      open_brackets--;\n    }\n  }\n  return (open_brackets\
    \ == 0);\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp96ov4t0y: /tmp/tmp96ov4t0y.cpp:31: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // brackets.substr(0, brackets.find(\">\")) gets everything before\
    \ the first \">\".\n  // brackets.substr(0, brackets.find(\">\")-1) gets everything\
    \ after the last \">\".\n  // brackets.substr(0, brackets.find(\"<\")) gets everything\
    \ before the first \"<\".\n  // brackets.substr(0, brackets.find(\"<\")-1) gets\
    \ everything after the last \"<\".\n  int left = 0;\n  int right = 0;\n  bool\
    \ ret = false;\n  for (int i = 0; i <= brackets.size() - 1; i++) {\n    if (brackets[i]\
    \ == \">\") {\n      left++;\n    } else if (brackets[i] == \"<\") {\n      right++;\n\
    \    } else {\n      left = 0;\n      right = 0;\n      ret = true;\n      break;\n\
    \    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpji5jygd2.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpji5jygd2.cpp:22:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   22 |     if (brackets[i] == \">\") {\n      |\
    \                        ^~~\n/tmp/tmpji5jygd2.cpp:24:31: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   24 |     } else if\
    \ (brackets[i] == \"<\") {\n      |                               ^~~\n"
  stdout: ''
  timestamp: 1660130455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // I used a map instead of a list because I was trying to avoid\
    \ doing any manual sorting.\n    std::map<char, bool> open_brackets = {{'<', false},\
    \ {'>', false}};\n    std::map<char, bool> close_brackets = {{'<', false}, {'>',\
    \ false}};\n\n    // loop through the string and if the character is a \"<\",\
    \ then set the\n    // corresponding entry in the map to \"true\"\n    for (int\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets['<'] = true;\n            close_brackets['<'] = false;\n\
    \        } else if (brackets[i] == '>') {\n            open_brackets['>'] = true;\n\
    \            close_brackets['>'] = false;\n        } else if (brackets[i] == '<=')\
    \ {\n            open_brackets['<'] = true;\n            close_brackets['>'] =\
    \ true;\n        } else if (brackets[i] == '>=') {\n            open_brackets['>']\
    \ = true;\n            close_brackets['<'] = true;\n        }\n    }\n\n    for\
    \ (auto& [key, value] : open_brackets) {\n        if (value == true) {\n     \
    \       return false;\n        }\n    }\n\n    for (auto& [key, value] : close_brackets)\
    \ {\n        if (value == true) {\n            return false;\n        }\n    }\n\
    \n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmb3dlija: /tmp/tmpmb3dlija.cpp:52: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (it ==\
    \ brackets.begin()) {\n                std::cerr << \"error: mismatched open bracket\"\
    \ << std::endl;\n                result = false;\n            }\n            else\
    \ if (it != brackets.begin() + 1) {\n                std::cerr << \"error: mismatched\
    \ close bracket\" << std::endl;\n                result = false;\n           \
    \ }\n            else if (it == brackets.end() - 1) {\n                std::cerr\
    \ << \"error: mismatched open bracket\" << std::endl;\n                result\
    \ = false;\n            }\n        }\n        else if (*it == '>') {\n       \
    \     if (it == brackets.begin() || it == brackets.end() - 1) {\n            \
    \    std::cerr << \"error: mismatched close bracket\" << std::endl;\n        \
    \        result = false;\n            }\n            else if (it != brackets.begin()\
    \ + 1) {\n                std::cerr << \"error: mismatched open bracket\" << std::endl;\n\
    \                result = false;\n            }\n        }\n        else {\n \
    \           std::cerr << \"error: unknown bracket\" << std::endl;\n          \
    \  result = false;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'error: mismatched open bracket

    error: mismatched close bracket

    tmpp1ycd3st: /tmp/tmpp1ycd3st.cpp:49: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  \n  unsigned int count = 0;\n  for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n    if (brackets[i] != '<') return false;\n    count++;\n  }\n  if (count\
    \ != 2) return false;\n  count = 0;\n  for (size_t i = brackets.size() - 1; i\
    \ >= 0; --i) {\n    if (brackets[i] == '>') count++;\n  }\n  if (count != 1) return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmcyty2tm: /tmp/tmpmcyty2tm.cpp:30: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() < 2)\n        return false;\n\n    for\
    \ (int i = 0; i < brackets.size() - 1; ++i) {\n        if (brackets[i] != '<')\n\
    \            continue;\n\n        int j = i + 1;\n        while (j < brackets.size()\
    \ && brackets[j] != '>')\n            ++j;\n\n        if (j == brackets.size())\n\
    \            return false;\n\n        // make sure brackets are correctly closed:\n\
    \        if (brackets[i] != '<')\n            return false;\n        if (brackets[j]\
    \ != '>')\n            return false;\n\n        i += 1;\n    }\n\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp_l_vz2z: /tmp/tmpp_l_vz2z.cpp:45: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // assert(brackets[0] == \"<\");\n    // assert(brackets.substr(1,\
    \ 2) == \"<>\");\n    // assert(brackets.substr(3, 4) == \"<<><>>\");\n    //\
    \ assert(brackets.substr(6, 4) == \"><<>\");\n    int open = brackets.find_first_not_of(\"\
    <\");\n    int close = brackets.find_first_not_of(\">\");\n    if (open == std::string::npos\
    \ || close == std::string::npos) {\n        return false;\n    }\n    bool result\
    \ = (open < close);\n    return result;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptct9jwmn: /tmp/tmptct9jwmn.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int open_brackets = 0;\n  for (auto bracket_pos : brackets) {\n\
    \    if (bracket_pos == '<') open_brackets++;\n  }\n  int close_brackets = 0;\n\
    \  for (auto bracket_pos : brackets) {\n    if (bracket_pos == '>') close_brackets++;\n\
    \  }\n  if (open_brackets == close_brackets) {\n    return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqi9afk5u: /tmp/tmpqi9afk5u.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tsize_t count = brackets.size();\n\tassert(count > 0);\n\tbool\
    \ correct = false;\n\tfor (size_t i = 0; i < count; i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tcorrect = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif (brackets[i]\
    \ != '>') {\n\t\t\tcorrect = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgt16o0tr: /tmp/tmpgt16o0tr.cpp:35: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::vector<std::string> parens;\n  for (std::string const &c\
    \ : brackets) {\n    if (c == \"<\") {\n      parens.push_back(\"<\");\n    }\
    \ else if (c == \">\") {\n      parens.push_back(\">\");\n    }\n  }\n  parens.push_back(brackets);\n\
    \  return parens.size() == (brackets.size() + 1);\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51h7hv58.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp51h7hv58.cpp:15:31: error: invalid initialization of reference of type\
    \ \u2018const string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    } from expression of type \u2018char\u2019\n   15 |   for (std::string const &c\
    \ : brackets) {\n      |                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660130456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() < 2) return false;\n    for (int i = 0;\
    \ i < brackets.size() - 1; i++) {\n        if ((brackets[i] == \"<\" && brackets[i\
    \ + 1] == \"<\") ||\n            (brackets[i] == \">\" && brackets[i + 1] == \"\
    >\")) {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpyx18po.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpkpyx18po.cpp:16:29: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if ((brackets[i] == \"<\" && brackets[i\
    \ + 1] == \"<\") ||\n      |                             ^~~\n/tmp/tmpkpyx18po.cpp:16:55:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if ((brackets[i] == \"<\" && brackets[i + 1] == \"<\") ||\n \
    \     |                                                       ^~~\n/tmp/tmpkpyx18po.cpp:17:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   17 |             (brackets[i] == \">\" && brackets[i + 1] == \">\")) {\n \
    \     |                             ^~~\n/tmp/tmpkpyx18po.cpp:17:55: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   17 | \
    \            (brackets[i] == \">\" && brackets[i + 1] == \">\")) {\n      |  \
    \                                                     ^~~\n"
  stdout: ''
  timestamp: 1660130456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int open_counter = 0;\n  int close_counter = 0;\n\n  for (int\
    \ i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      open_counter++;\n\
    \    } else if (brackets[i] == '>') {\n      close_counter++;\n    }\n  }\n\n\
    \  if (open_counter > close_counter) {\n    return false;\n  } else if (open_counter\
    \ < close_counter) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfrg9qjc2: /tmp/tmpfrg9qjc2.cpp:35: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = (brackets.size() / 2) + 1;\n    bool\
    \ has_open_brackets = false;\n    std::string open_brackets;\n    std::string\
    \ close_brackets;\n    size_t i = 0;\n    while (i < brackets_size) {\n      \
    \  if ((brackets[i] != '>') && (brackets[i] != '>=') && (brackets[i] != '<') &&\
    \ (brackets[i] != '<=') &&\n            (brackets[i] != '.') && (brackets[i] !=\
    \ ',')) {\n            has_open_brackets = false;\n        }\n        if (brackets[i]\
    \ == '<') {\n            has_open_brackets = true;\n            open_brackets\
    \ = open_brackets + brackets[i];\n        } else if (brackets[i] == '>') {\n \
    \           has_open_brackets = false;\n            close_brackets = close_brackets\
    \ + brackets[i];\n        } else if (brackets[i] == '.') {\n            has_open_brackets\
    \ = false;\n        } else if (brackets[i] == ',') {\n            has_open_brackets\
    \ = false;\n        } else if (brackets[i] == '>='){\n            has_open_brackets\
    \ = false;\n        } else if (brackets[i] == '<='){\n            has_open_brackets\
    \ = false;\n        }\n        i++;\n    }\n    return (open_brackets.size() !=\
    \ close_brackets.size() && (open_brackets.size() != brackets_size ||\n       \
    \ has_open_brackets));\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdxrqhqnv: /tmp/tmpdxrqhqnv.cpp:46: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::stack<char> s;\n    for (char ch : brackets) {\n     \
    \   if (s.empty() || ch == '<' || ch == '>')\n            s.push(ch);\n      \
    \  else if (s.top() == '>')\n            s.pop();\n        else\n            return\
    \ false;\n    }\n    return !s.empty();\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdcogcvct: /tmp/tmpdcogcvct.cpp:31: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets[0] == '>') {\n        return false;\n    }\n\n\
    \    for (size_t i = 0; i < brackets.size() - 1; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq5cmj1yk: /tmp/tmpq5cmj1yk.cpp:34: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool good = true;\n    for (auto ch : brackets) {\n       \
    \ if (ch == '<') good = false;\n    }\n    return good;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpow9k95xu: /tmp/tmpow9k95xu.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (int i = 0; i < brackets.length() - 1; i++) {\n\t\tif (brackets[i]\
    \ == \"<\" && brackets[i + 1] == \"<\") {\n\t\t\treturn true;\n\t\t} else if (brackets[i]\
    \ == \">\" && brackets[i + 1] == \">\") {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) ==\
    \ (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkftirkqh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpkftirkqh.cpp:15:22: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |   if (brackets[i] == \"<\" && brackets[i\
    \ + 1] == \"<\") {\n      |                      ^~~\n/tmp/tmpkftirkqh.cpp:15:48:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   15 |   if (brackets[i] == \"<\" && brackets[i + 1] == \"<\") {\n      |  \
    \                                              ^~~\n/tmp/tmpkftirkqh.cpp:17:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   17 |   } else if (brackets[i] == \">\" && brackets[i + 1] == \">\") {\n  \
    \    |                             ^~~\n/tmp/tmpkftirkqh.cpp:17:55: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   17 | \
    \  } else if (brackets[i] == \">\" && brackets[i + 1] == \">\") {\n      |   \
    \                                                    ^~~\n"
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // loop through the string looking for brackets.\n    std::string\
    \ current;\n    for (int i = 0; i < brackets.length(); i++) {\n        current\
    \ = brackets.substr(i, 1);\n        if (current.size() > 0) {\n            if\
    \ (brackets.substr(0, i).find(current) == 0) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptsnfl2rk: /tmp/tmptsnfl2rk.cpp:29: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (std::string::iterator it(brackets.begin()), end(brackets.end());\
    \ it != end; ++it) {\n        if (*it == '<') return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptfwpbeah: /tmp/tmptfwpbeah.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  if (brackets.size() != 2) {\n    return false;\n  }\n  for (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n    if (brackets[i] != brackets[i +\
    \ 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe9znj7pa: /tmp/tmpe9znj7pa.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string s = \"<\";\n  if (brackets.find(s) != std::string::npos)\n\
    \    return brackets.find(\">\") == brackets.find(s);\n  return false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb6e262l9: /tmp/tmpb6e262l9.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    std::string current;\n    for (char\
    \ c : brackets) {\n        current = c;\n        if ((c == '<') || (c == '>'))\
    \ {\n            if (current != '>') {\n                correct = false;\n   \
    \         }\n        }\n    }\n    return correct;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp556fi4f_.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp556fi4f_.cpp:19:25: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   19 |             if (current != '>') {\n      |  \
    \               ~~~~~~~ ^~ ~~~\n      |                 |          |\n      |\
    \                 |          char\n      |                 std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp556fi4f_.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp556fi4f_.cpp:19:28:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   19\
    \ |             if (current != '>') {\n      |                            ^~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp556fi4f_.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp556fi4f_.cpp:19:28: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018c"
  stdout: ''
  timestamp: 1660130457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // code here\n    \n    return 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz9fcark2: /tmp/tmpz9fcark2.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Write your code here.\n    for(int i=0;i<brackets.size();i++){\n\
    \        for(int j=0;j<brackets.size();j++){\n            if(i<j){\n         \
    \       if(brackets[i]!=brackets[j]){\n                    return false;\n   \
    \             }\n            }\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfxkfndvp: /tmp/tmpfxkfndvp.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (int i = 0; i <= brackets.size() - 1; i++) {\n        if\
    \ (brackets[i] != '<') return false;\n        for (int j = i + 1; j < brackets.size();\
    \ j++) {\n            if (brackets[j] != '>') return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdo0zrtvz: /tmp/tmpdo0zrtvz.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::string result = \"\";\n  for (int i = 0; i < brackets.size()\
    \ - 1; i++)\n    result += brackets[i];\n  return result == brackets.substr(brackets.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps743i75e: /tmp/tmps743i75e.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int count = 1;\n  for (int i = 1; i < brackets.length(); i++)\
    \ {\n    if (brackets.substr(i - count, count) != brackets.substr(i, count))\n\
    \      return false;\n    count += 1;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp58fh3gsk: /tmp/tmp58fh3gsk.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> stack;\n  for (auto c : brackets) {\n    if\
    \ (c == '<') {\n      if (stack.empty())\n        return false;\n      else\n\
    \        stack.pop();\n    }\n    if (stack.empty())\n      stack.push(c);\n \
    \   else if (stack.top() == '>')\n      stack.push(c);\n    else\n      return\
    \ false;\n  }\n  if (stack.size() != 0)\n    return false;\n  return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpza2b3c42: /tmp/tmpza2b3c42.cpp:35: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    stack<char> bracket;\n    bool ret = true;\n    for (auto c\
    \ : brackets) {\n        if (bracket.empty())\n            bracket.push(c);\n\
    \        else if (c != bracket.top())\n            ret = false;\n        else\n\
    \            bracket.pop();\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxym6ujpk.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxym6ujpk.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> bracket;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpxym6ujpk.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpxym6ujpk.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> bracket;\n      |         \
    \  ^~~~\n/tmp/tmpxym6ujpk.cpp:17:13: error: \u2018bracket\u2019 was not declared\
    \ in this scope; did you mean \u2018brackets\u2019?\n   17 |         if (bracket.empty())\n\
    \      |             ^~~~~~~\n      |             brackets\n"
  stdout: ''
  timestamp: 1660130458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> bracket;\n  bracket.push('<');\n  while (brackets.size()\
    \ != 0) {\n    char ch = brackets.back();\n    if (ch == '>')\n      bracket.pop();\n\
    \    else if (bracket.empty() && ch == '<')\n      brackets.push(ch);\n    else\n\
    \      return false;\n  }\n  return bracket.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrkwi960.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprrkwi960.cpp:21:16: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   21 |       brackets.push(ch);\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // your code here\n    std::vector<std::string> opening_brackets;\n\
    \    std::vector<bool> opening_found(brackets.size(), false);\n    std::vector<bool>\
    \ closing_found(brackets.size(), false);\n\n    for (auto c : brackets) {\n  \
    \      if (c == '<') {\n            opening_brackets.push_back(\"\");\n      \
    \      opening_found[opening_brackets.size() - 1] = opening_found[opening_brackets.size()\
    \ - 1] ? true : false;\n        } else if (c == '>') {\n            opening_found[opening_brackets.size()\
    \ - 1] = true;\n        } else if (c == '<') {\n            opening_brackets.back()\
    \ += c;\n        } else if (c == '>') {\n            opening_found[opening_brackets.size()\
    \ - 1] = true;\n            closing_found[opening_brackets.size() - 1] = true;\n\
    \        } else {\n            opening_brackets.back() += c;\n        }\n    }\n\
    \n    for (size_t i = 0; i < opening_brackets.size(); ++i) {\n        if (opening_found[i])\
    \ continue;\n        if (closing_found[i]) return false;\n    }\n\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1stcqsii: /tmp/tmp1stcqsii.cpp:48: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130458
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> stack;\n  for (char c : brackets) {\n    if\
    \ (c == '<') {\n      stack.push(c);\n    } else if (c == '>') {\n      if (stack.empty()\
    \ || stack.top() != '<')\n        return false;\n      stack.pop();\n    } else\
    \ {\n      return false;\n    }\n  }\n  return stack.empty();\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int count = 0;\n  for (char c : brackets) {\n    if (c == '<')\
    \ {\n      count++;\n    } else if (c == '>') {\n      count--;\n    }\n  }\n\
    \  return (count == 0);\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz0qm661e: /tmp/tmpz0qm661e.cpp:31: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int bracketCount = 0;\n    for (int i = 0; i != brackets.size();\
    \ ++i) {\n        if (brackets[i] == \"<\") {\n            bracketCount++;\n \
    \       }\n        if (brackets[i] == \">\") {\n            if (bracketCount >\
    \ 0) {\n                bracketCount--;\n            }\n        }\n    }\n   \
    \ return bracketCount == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhwf0x59.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpvhwf0x59.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpvhwf0x59.cpp:19:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        if (brackets[i] == \">\") {\n      |                            ^~~\n"
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int cnt = 0;\n    for (int i = 0; i < brackets.size() && cnt\
    \ < 2; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (cnt != 0) return false;\n            cnt++;\n        }\n        else\
    \ if (c == '>') {\n            if (cnt == 0) return false;\n            cnt--;\n\
    \        }\n    }\n    return cnt == 0;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5kgo4_o5: /tmp/tmp5kgo4_o5.cpp:31: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string brackets_clean(brackets);\n    size_t brackets_length\
    \ = brackets_clean.length();\n    bool result = false;\n    for (size_t i = 0;\
    \ i < brackets_length; ++i) {\n        char bracket = brackets_clean[i];\n   \
    \     switch (bracket) {\n        case '<':\n        case '(':\n        case ')':\n\
    \            result = true;\n            break;\n        default:\n          \
    \  break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoml7r2k0: /tmp/tmpoml7r2k0.cpp:37: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  assert(brackets.size() == 4);\n  // This string has 4 characters.\n\
    \  // It starts with '><' so it must end with '>'.\n  if (brackets[0] == '<' &&\
    \ brackets[2] == '>' && brackets[4] == '>')\n    return true;\n  else if (brackets[0]\
    \ == '<' && brackets[2] == '>')\n    return true;\n  else if (brackets[0] == '>'\
    \ && brackets[2] == '<')\n    return true;\n  else return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsi1ps6c2: /tmp/tmpsi1ps6c2.cpp:14: bool correct_bracketing(std::string):
    Assertion `brackets.size() == 4'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // iterate through string backwards.\n    for (auto it = brackets.rbegin();\
    \ it != brackets.rend(); ++it) {\n        // find first instance of closing bracket.\n\
    \        while (it != brackets.rbegin() && brackets[*it] == '>') {\n         \
    \   ++it;\n        }\n        // if there is a match of some kind then return\
    \ false.\n        if (it != brackets.rbegin())\n            return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn4c8g56r: /tmp/tmpn4c8g56r.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < open_brackets; ++i) {\n        if (brackets[i]\
    \ == \"<\") {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ \">\") {\n            --close_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return close_brackets == open_brackets;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdp4n1ph.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpmdp4n1ph.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpmdp4n1ph.cpp:19:35: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        } else if (brackets[i] == \">\") {\n      |                         \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> bracketStack, bracketStack2;\n  for (char bracket:\
    \ brackets)\n    if (bracket == '<')\n      bracketStack.push(bracket);\n    else\
    \ if (bracket == '>')\n      if (bracketStack.empty())\n        return false;\n\
    \      else\n        bracketStack2.push(bracket);\n  \n  while (bracketStack.size()\
    \ > 0 && bracketStack2.size() > 0) {\n    auto bracket1 = bracketStack2.top();\n\
    \    auto bracket2 = bracketStack.top();\n    bracketStack2.pop();\n    bracketStack.pop();\n\
    \    if (bracket1 != bracket2)\n      return false;\n  }\n  return bracketStack2.size()\
    \ == bracketStack.size();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2k7bx9k4: /tmp/tmp2k7bx9k4.cpp:36: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool ret = false;\n    size_t pos = 0;\n    while (pos < brackets.size())\
    \ {\n        if (brackets[pos] != \"<\") break;\n        if (brackets[pos + 1]\
    \ != \">\") ret = false;\n        pos += 2;\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqml_52vu.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpqml_52vu.cpp:17:30: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[pos] != \"<\") break;\n\
    \      |                              ^~~\n/tmp/tmpqml_52vu.cpp:18:34: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   18\
    \ |         if (brackets[pos + 1] != \">\") ret = false;\n      |            \
    \                      ^~~\n"
  stdout: ''
  timestamp: 1660130458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  assert(brackets.size() % 2 == 0);\n  int size = brackets.size()\
    \ / 2;\n  for (int i = 0; i < size; i++) {\n    if (brackets[i] != '<' && brackets[i]\
    \ != '>')\n      return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplm740xkd: /tmp/tmplm740xkd.cpp:14: bool correct_bracketing(std::string):
    Assertion `brackets.size() % 2 == 0'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Loop through every character in brackets, looking for\n\
    \    // corresponding closing brackets to determine if bracketing\n    // is correct.\n\
    \    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n     \
    \   // If we've found a closing bracket, increment count.\n        if (brackets[i]\
    \ == '>') {\n            count++;\n            // If count is equal to 2, then\
    \ bracketing is correct.\n            if (count == 2) {\n                return\
    \ true;\n            }\n            // If count is equal to 0, bracketing is not\
    \ correct.\n        } else if (brackets[i] == '<') {\n            count--;\n \
    \           // If count is equal to -1, then bracketing is not correct.\n    \
    \        if (count == -1) {\n                return false;\n            }\n  \
    \      }\n    }\n    // If we've gotten to the end of the brackets string, and\n\
    \    // count is still equal to -2, bracketing is not correct.\n    if (count\
    \ == -2) {\n        return false;\n    }\n    // Return true if bracketing is\
    \ correct and false otherwise.\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1akgg6j7: /tmp/tmp1akgg6j7.cpp:45: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int count = 0;\n  for (int i = 1; i < brackets.length(); i++)\
    \ {\n    if (brackets[i] == '<') count++;\n    else if (!(brackets[i] == '<' &&\
    \ brackets[i - 1] == '>'))\n      return false;\n  }\n  return count == brackets.length()\
    \ - 1;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy4hl3aq1: /tmp/tmpy4hl3aq1.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // check whether the string contains only \"<\" and \">\"\n\
    \    if (brackets.size() != 2 || brackets[0] != brackets[1]) {\n        return\
    \ false;\n    }\n\n    // set counts of opening brackets\n    bool has_left_bracket\
    \ = false;\n    bool has_right_bracket = false;\n    bool has_left_bracket2 =\
    \ false;\n    bool has_right_bracket2 = false;\n\n    // count brackets \n   \
    \ char ch;\n    size_t i = 0;\n    while (i < brackets.size()) {\n        ch =\
    \ brackets[i];\n        if (ch == '<') {\n            has_left_bracket2 = has_right_bracket2\
    \ = has_right_bracket = true;\n            has_left_bracket = true;\n        }\
    \ else if (ch == '>') {\n            has_left_bracket2 = has_right_bracket2 =\
    \ has_right_bracket = false;\n            has_right_bracket = true;\n        }\
    \ else if (ch == '<') {\n            has_left_bracket = true;\n            has_left_bracket2\
    \ = true;\n        } else if (ch == '>') {\n            has_right_bracket = true;\n\
    \            has_right_bracket2 = true;\n        } else if (ch == ' ') {\n   \
    \         if (!has_left_bracket2 && !has_right_bracket2 && !has_left_bracket &&\
    \ !has_right_bracket) {\n                // every opening bracket has a corresponding\
    \ closing bracket\n                return true;\n            }\n        } else\
    \ {\n            // not a bracket\n            return false;\n        }\n    \
    \    ++i;\n    }\n\n    // count mismatching\n    if (has_left_bracket) {\n  \
    \      if (has_left_bracket2) {\n            if (!has_right_bracket2) {\n    \
    \            return true;\n            }\n        } else {\n            if (!has_right_bracket)\
    \ {\n                return true;\n            }\n        }\n    }\n\n    if (has_right_bracket)\
    \ {\n        if (has_right_bracket2) {\n            if (!has_left_bracket2) {\n\
    \                return true;\n            }\n        } else {\n            if\
    \ (!has_left_bracket) {\n                return true;\n            }\n       \
    \ }\n    }\n\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpupvwpt5b: /tmp/tmpupvwpt5b.cpp:83: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool ans = false;\n    for (std::size_t i = 0; i < brackets.length();\
    \ ++i) {\n        switch (brackets[i]) {\n            case '<':\n            \
    \    ans ^= true;\n                break;\n            case '>':\n           \
    \     ans ^= false;\n                break;\n            case '<':\n         \
    \       break;\n            case '>':\n                break;\n            case\
    \ '<':\n                break;\n            case '>':\n                break;\n\
    \            default:\n                std::cout << \"invalid bracketing\" <<\
    \ std::endl;\n                return ans;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzij9i8i.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpfzij9i8i.cpp:23:13: error: duplicate case value\n   23 |          \
    \   case '<':\n      |             ^~~~\n/tmp/tmpfzij9i8i.cpp:17:13: note: previously\
    \ used here\n   17 |             case '<':\n      |             ^~~~\n/tmp/tmpfzij9i8i.cpp:25:13:\
    \ error: duplicate case value\n   25 |             case '>':\n      |        \
    \     ^~~~\n/tmp/tmpfzij9i8i.cpp:20:13: note: previously used here\n   20 |  \
    \           case '>':\n      |             ^~~~\n/tmp/tmpfzij9i8i.cpp:27:13: error:\
    \ duplicate case value\n   27 |             case '<':\n      |             ^~~~\n\
    /tmp/tmpfzij9i8i.cpp:17:13: note: previously used here\n   17 |             case\
    \ '<':\n      |             ^~~~\n/tmp/tmpfzij9i8i.cpp:29:13: error: duplicate\
    \ case value\n   29 |             case '>':\n      |             ^~~~\n/tmp/tmpfzij9i8i.cpp:20:13:\
    \ note: previously used here\n   20 |             case '>':\n      |         \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int length = brackets.length();\n    bool found_match = false;\n\
    \    for (int i = 0; i < length; i++) {\n        // if found the opening bracket.\n\
    \        if (brackets[i] == '<') {\n            // skip the bracket.\n       \
    \     i += 1;\n            // while found the matching closing bracket.\n    \
    \        while (i < length && brackets[i] != '<') {\n                i += 1;\n\
    \            }\n            // found the matching closing bracket.\n         \
    \   if (i < length) {\n                found_match = true;\n            }\n  \
    \      }\n    }\n    return found_match;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp12skhw9l: /tmp/tmp12skhw9l.cpp:35: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int open_bracket = -1, close_bracket = -1;\n  for (int i = 0;\
    \ i < brackets.length(); i++) {\n    if (brackets[i] == \"<\") {\n      open_bracket\
    \ = i;\n    }\n    if (brackets[i] == \">\") {\n      close_bracket = i;\n   \
    \ }\n  }\n  return (open_bracket > 0 && close_bracket > 0 && open_bracket < close_bracket);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs4pysu9.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmphs4pysu9.cpp:16:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |     if (brackets[i] == \"<\") {\n      |\
    \                        ^~~\n/tmp/tmphs4pysu9.cpp:19:24: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   19 |     if (brackets[i]\
    \ == \">\") {\n      |                        ^~~\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string close_brackets;\n    bool has_close_brackets =\
    \ false;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '>') {\n            has_close_brackets = true;\n        } else if (brackets[i]\
    \ == '<') {\n            if (!has_close_brackets) {\n                has_close_brackets\
    \ = true;\n            } else {\n                return false;\n            }\n\
    \        } else {\n            has_close_brackets = false;\n        }\n    }\n\
    \    return has_close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1x2cr9uq: /tmp/tmp1x2cr9uq.cpp:34: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    stack<char> st;\n    vector<bool> v(brackets.size(), false);\n\
    \    for(int i=0; i<brackets.size(); ++i) {\n        st.push(brackets[i]);\n \
    \       if(!v.at(i) && brackets[i] != st.top()) {\n            v[i] = true;\n\
    \        }\n        if(st.empty() || st.top() != brackets[i]) {\n            v[i]\
    \ = true;\n        }\n    }\n    return !v.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7lx1fraq.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7lx1fraq.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> st;\n \
    \     |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp7lx1fraq.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp7lx1fraq.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> st;\n      |           ^~~~\n\
    /tmp/tmp7lx1fraq.cpp:15:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   15 |     vector<bool> v(brackets.size(), false);\n      |     ^~~~~~\n\
    /tmp/tmp7lx1fraq.cpp:15:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7lx1fraq.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7lx1fraq.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp7lx1fraq.cpp:15:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   15 |     vector<bool>\
    \ v(brackets.size(), false);\n      |            ^~~~\n/tmp/tmp7"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  if (brackets.size() <= 1)\n    return false;\n  int opening_count\
    \ = 0;\n  int closing_count = 0;\n  for (int i = 0; i != brackets.size(); ++i)\
    \ {\n    if (brackets[i] == '<') {\n      ++opening_count;\n    } else if (brackets[i]\
    \ == '>') {\n      ++closing_count;\n    }\n  }\n  if (opening_count == 0)\n \
    \   return false;\n  if (opening_count > closing_count)\n    return false;\n \
    \ for (int i = 0; i != brackets.size(); ++i) {\n    if (brackets[i] == '<') {\n\
    \      if (i == brackets.size() - 1)\n        return false;\n      char next_char\
    \ = brackets[i + 1];\n      if (next_char == '>')\n        continue;\n      if\
    \ (next_char != '<')\n        return false;\n    } else if (brackets[i] == '>')\
    \ {\n      if (i == 0)\n        return false;\n      char next_char = brackets[i\
    \ - 1];\n      if (next_char == '<')\n        continue;\n      if (next_char !=\
    \ '>')\n        return false;\n    }\n  }\n  return true;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1phdpel1: /tmp/tmp1phdpel1.cpp:56: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tint count = 0;\n\tint last_close_bracket = -1;\n\tint last_open_bracket\
    \ = -1;\n\tfor (size_t i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\t++count;\n\t\t\tlast_open_bracket = i;\n\t\t} else if (brackets[i]\
    \ == '>') {\n\t\t\t--count;\n\t\t\tif (count <= 0) {\n\t\t\t\treturn (last_open_bracket+1\
    \ == last_close_bracket);\n\t\t\t}\n\t\t}\n\t}\n\treturn (count == 0);\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9k53fn3n: /tmp/tmp9k53fn3n.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int cnt = 0;\n  brackets = brackets.substr(1, brackets.size()\
    \ - 2);\n  std::stack<int> s;\n  for (char &c: brackets) {\n    if (c == '<')\n\
    \      s.push(0);\n    else if (c == '>')\n      s.push(0);\n    else if (s.top()\
    \ == 0) {\n      cnt += 1;\n      s.pop();\n    }\n    else {\n      s.pop();\n\
    \      if (s.top() == 0) {\n        cnt += 1;\n      }\n    }\n  }\n  return (cnt\
    \ == brackets.size());\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqwvk3zr1: /tmp/tmpqwvk3zr1.cpp:38: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<char> s;\n  for (char c : brackets) {\n    if (c ==\
    \ '<') s.push('>');\n    else if (c == '>') s.push(std::cref('<'));\n    else\
    \ s.push(c);\n  }\n\n  while (!s.empty()) {\n    if (s.top() != std::cref('>'))\
    \ return false;\n    s.pop();\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpunfynd09.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpunfynd09.cpp:17:44: error: use of deleted function \u2018void std::cref(const\
    \ _Tp&&) [with _Tp = char]\u2019\n   17 |     else if (c == '>') s.push(std::cref('<'));\n\
    \      |                                            ^\nIn file included from /usr/include/c++/9/functional:58,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpunfynd09.cpp:2:\n/usr/include/c++/9/bits/refwrap.h:365:10:\
    \ note: declared here\n  365 |     void cref(const _Tp&&) = delete;\n      | \
    \         ^~~~\n/tmp/tmpunfynd09.cpp:22:33: error: use of deleted function \u2018\
    void std::cref(const _Tp&&) [with _Tp = char]\u2019\n   22 |     if (s.top() !=\
    \ std::cref('>')) return false;\n      |                                 ^\nIn\
    \ file included from /usr/include/c++/9/functional:58,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpunfynd09.cpp:2:\n/usr/include/c++/9/bits/refwrap.h:365:10:\
    \ note: declared here\n  365 |     void cref(const _Tp&&) = delete;\n      | \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if\
    \ (brackets[i] == '<')\n            return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzkna211: /tmp/tmpnzkna211.cpp:26: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // use stack to store brackets\n    std::stack<bool> stack_top(brackets.begin(),\
    \ brackets.end());\n    // if stack top is true, then brackets does not have the\
    \ correct format\n    bool res = stack_top.empty();\n    while (!stack_top.empty())\
    \ {\n        res &= stack_top.top();\n        stack_top.pop();\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphl5v_nbl.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmphl5v_nbl.cpp:15:64: error: no matching function for call to \u2018\
    std::stack<bool>::stack(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   15 |     std::stack<bool> stack_top(brackets.begin(), brackets.end());\n\
    \      |                                                                ^\nIn\
    \ file included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmphl5v_nbl.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:185:2:\
    \ note: candidate: \u2018template<class _Alloc, class _Requires> std::stack<_Tp,\
    \ _Sequence>::stack(std::stack<_Tp, _Sequence>&&, const _Alloc&)\u2019\n  185\
    \ |  stack(stack&& __q, const _Alloc& __a)\n      |  ^~~~~\n/usr/include/c++/9/bits/stl_stack.h:185:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_stack.h:\
    \ In substitution of \u2018template<class _Tp, class _Sequence> template<class\
    \ _Alloc> using _Uses = typename std::enable_if<std::uses_allocator<_Sequence,\
    \ _Alloc>::value>::type [with _Alloc = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = bool; _Sequence = std::deque<bool, std::allocator<bool> >]\u2019:\n\
    /usr/include/c++/9/bits/stl_stack.h:184:33:   required from here\n/usr/include/c++/9/bits/stl_stack.h:121:8:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ void>\u2019\n  121 |  using _Uses = typename\n      |        ^~~~~\n/usr/include/c++/9/bits/stl_stack.h:181:2:\
    \ note: candidate: \u2018template<class _Alloc, class _Requires> std::stack<_Tp,\
    \ _Sequence>::stack(const std::stack<_Tp, _Sequence>&, const _Alloc&)\u2019\n\
    \  181 |  stack(const stack& __q, const _Alloc& __a)\n      |  ^~~~~\n/usr/include/c++/9/bits/stl_stack.h:181:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_stack.h:177:2:\
    \ note: candidate: \u2018template<class _Alloc, class _Requires> std::stack<_Tp,\
    \ _Sequence>::stack(_Sequence&&, const _"
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tfor (int i = 0; i < brackets.size(); ++i) {\n\t\tfor (int j =\
    \ i + 1; j < brackets.size(); ++j) {\n\t\t\tif (brackets[i] == brackets[j]) \n\
    \t\t\t\tbreak;\n\t\t}\n\t\tif (j == brackets.size())\n\t\t\treturn true;\n\t}\n\
    \treturn false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pdev3_n.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp_pdev3_n.cpp:19:7: error: \u2018j\u2019 was not declared in this scope\n\
    \   19 |   if (j == brackets.size())\n      |       ^\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // use stack to hold the bracket\n    std::stack<std::string>\
    \ stack;\n    // go through all brackets one by one\n    for (auto c : brackets)\
    \ {\n        // check whether the current char is opening\n        if (c == '<')\
    \ {\n            // if not opening, push it into stack\n            if (!stack.empty())\
    \ return false;\n            stack.push(c);\n        } else if (c == '>') {\n\
    \            // if opening, pop it from the stack\n            if (stack.empty())\
    \ return false;\n            std::swap(stack.top(), stack.back());\n         \
    \   stack.pop();\n        }\n    }\n    // return true if the stack is empty\n\
    \    return stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgm7ys2o0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgm7ys2o0.cpp:22:25: error: no matching function for call to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::push(char&)\u2019\n   22 |    \
    \         stack.push(c);\n      |                         ^\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpgm7ys2o0.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n/tmp/tmpgm7ys2o0.cpp:26:42:\
    \ error: \u2018class std::stack<std::__cxx11::basic_string<char> >\u2019 has no\
    \ member named \u2018back\u2019\n   26 |             std::swap(stack.top(), stack.back());\n\
    \      | "
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tstd::stack<char> open_brackets;\n\tstd::stack<char> closed_brackets;\n\
    \t\n\t// find opening brackets\n\tauto opening_bracket = brackets.find(\"<\");\n\
    \twhile(opening_bracket != std::string::npos)\n\t{\n\t\topen_brackets.push(brackets.substr(0,opening_bracket));\n\
    \t\tbrackets = brackets.substr(opening_bracket+1);\n\t\topening_bracket = brackets.find(\"\
    <\");\n\t}\n\t\n\t// find closing brackets\n\tauto closing_bracket = brackets.find(\"\
    >\");\n\twhile(closing_bracket != std::string::npos)\n\t{\n\t\tclosed_brackets.push(brackets.substr(0,closing_bracket));\n\
    \t\tbrackets = brackets.substr(closing_bracket+1);\n\t\tclosing_bracket = brackets.find(\"\
    >\");\n\t}\n\t\n\t// check every opening bracket\n\twhile(!open_brackets.empty())\n\
    \t{\n\t\t// pop the top opening bracket \n\t\tauto opening_bracket = open_brackets.top();\n\
    \t\topen_brackets.pop();\n\t\t\n\t\t// check if there's a matching closing bracket\n\
    \t\tauto matching_closing_bracket = closed_brackets.top();\n\t\t\n\t\tif(matching_closing_bracket\
    \ == opening_bracket)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// pop the\
    \ top closing bracket\n\t\tauto closing_bracket = closed_brackets.top();\n\t\t\
    closed_brackets.pop();\n\t}\n\t\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppstyxxqd.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmppstyxxqd.cpp:21:56: error: no matching function for call to \u2018\
    std::stack<char>::push(std::__cxx11::basic_string<char>)\u2019\n   21 |   open_brackets.push(brackets.substr(0,opening_bracket));\n\
    \      |                                                        ^\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmppstyxxqd.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = char; _Sequence = std::deque<char, std::allocator<char> >; std::stack<_Tp,\
    \ _Sequence>::value_type = char]\u2019\n  233 |       push(const value_type& __x)\n\
    \      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const char&\u2019}\n  233 |    \
    \   push(const value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = char; _Sequence = std::deque<char, std::allocator<char>\
    \ >; std::stack<_Tp, _Sequence>::value_type = char]\u2019\n  238 |       push(value_type&&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25: note:\
    \   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018std::stack<char>::value_type&&\u2019 {aka \u2018char&&\u2019}\n  238\
    \ |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n/tmp/tmppstyxxqd.cpp:30:58:\
    \ error: no matching function for call to \u2018std::stack<char>::push(std::__cxx11::basic_string<char>)\u2019\
    \n   30 |   closed_brackets.push(brackets.substr(0,closing_bracket));\n      |\
    \                                                          ^\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc+"
  stdout: ''
  timestamp: 1660130459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t size = brackets.size();\n    if (size < 2)\n       \
    \ return false;\n    auto it = brackets.begin();\n    auto endbracket = brackets.end();\n\
    \    for (size_t i = 0; i < size; ++i) {\n        if (*it == '<') {\n        \
    \    if (end == endbracket)\n                return false;\n            ++it;\n\
    \        } else if (*it == '>') {\n            if (i == 0)\n                return\
    \ false;\n            --it;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpenv35plq.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpenv35plq.cpp:21:17: error: \u2018end\u2019 was not declared in this\
    \ scope\n   21 |             if (end == endbracket)\n      |                 ^~~\n\
    /tmp/tmpenv35plq.cpp:21:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmpenv35plq.cpp:2:\n/usr/include/c++/9/valarray:1244:5: note:   \u2018\
    std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n      |     ^~~\n\
    In file included from /usr/include/c++/9/filesystem:38,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n                 from\
    \ /tmp/tmpenv35plq.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3: note:   \u2018\
    std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    for (auto it=brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '>') {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2ruzzc54: /tmp/tmp2ruzzc54.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::vector<bool> open_brackets(brackets.length(), false);\n\
    \    for (char i : brackets) {\n        if (i == '<') {\n            open_brackets[brackets.length()-1]\
    \ = true;\n        } else if (i > 0 && i == '>') {\n            open_brackets[brackets.length()-2]\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ for (size_t i = 0; i < brackets.length(); i++) {\n        if (open_brackets[i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx4cp54j7: /tmp/tmpx4cp54j7.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  std::stack<bool> stack;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    if (brackets[i] == '<') {\n      if (!stack.empty() && !stack.pop())\n\
    \        return false;\n      stack.push(false);\n    } else {\n      if (!stack.empty()\
    \ && stack.pop())\n        return false;\n      stack.push(true);\n    }\n  }\n\
    \  return stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_4jmaro.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpz_4jmaro.cpp:17:39: error: could not convert \u2018stack.std::stack<bool>::pop()\u2019\
    \ from \u2018void\u2019 to \u2018bool\u2019\n   17 |       if (!stack.empty()\
    \ && !stack.pop())\n      |                              ~~~~~~~~~^~\n      |\
    \                                       |\n      |                           \
    \            void\n/tmp/tmpz_4jmaro.cpp:17:40: error: in argument to unary !\n\
    \   17 |       if (!stack.empty() && !stack.pop())\n      |                  \
    \                      ^\n/tmp/tmpz_4jmaro.cpp:21:38: error: could not convert\
    \ \u2018stack.std::stack<bool>::pop()\u2019 from \u2018void\u2019 to \u2018bool\u2019\
    \n   21 |       if (!stack.empty() && stack.pop())\n      |                  \
    \           ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  size_t opening_brackets = brackets.find_first_not_of(\"()\");\n\
    \  size_t closing_brackets = brackets.find_last_not_of(\"()\");\n  for (size_t\
    \ i = 0; i <= opening_brackets; ++i) {\n    if (brackets[i] == '<') {\n      if\
    \ (brackets[i - 1] == '>') {\n        // if brackets are correctly closed, the\
    \ string should be correct.\n        return true;\n      }\n    }\n  }\n  for\
    \ (size_t i = 0; i <= closing_brackets; ++i) {\n    if (brackets[i] == '>') {\n\
    \      if (brackets[i - 1] == '<') {\n        // if brackets are correctly opened,\
    \ the string should be correct.\n        return true;\n      }\n    }\n  }\n \
    \ // if brackets are not correctly paired, return false.\n  return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5y5sqy8m: /tmp/tmp5y5sqy8m.cpp:41: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening = 0, closing = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            if (opening > closing)\
    \ {\n                return false;\n            }\n            opening++;\n  \
    \      }\n        else if (brackets[i] == \">\") {\n            if (opening >\
    \ closing) {\n                return false;\n            }\n            closing++;\n\
    \        }\n    }\n    if (opening != closing) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8w1sm6q.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpr8w1sm6q.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpr8w1sm6q.cpp:22:33: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   22 | \
    \        else if (brackets[i] == \">\") {\n      |                           \
    \      ^~~\n"
  stdout: ''
  timestamp: 1660130459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    assert(brackets.size() > 0);\n    auto begin = brackets.begin();\n\
    \    auto end = brackets.end();\n    auto stack = std::vector<bool>();\n    stack.push_back(begin[0]\
    \ == '<');\n    for (auto itr = begin; itr != end; ++itr) {\n        stack.push_back(stack.back());\n\
    \        if ((*itr) == '<') {\n            stack.back() = true;\n        } else\
    \ if (stack.back() && (*itr) == '>') {\n            stack.back() = false;\n  \
    \      } else {\n            return false;\n        }\n    }\n    return stack.back();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkc_4jl8p: /tmp/tmpkc_4jl8p.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t cnt=0;\n    size_t len = brackets.size();\n    bool\
    \ status = false;\n    while(len>0) {\n        size_t opening = brackets.find(\"\
    <\", cnt);\n        size_t closing = brackets.find(\">\", cnt);\n        if (opening==std::string::npos\
    \ || closing==std::string::npos) {\n            return status;\n        }\n  \
    \      if ((opening-cnt) < len) {\n            status = false;\n        }\n  \
    \      if ((closing-cnt) < len) {\n            status = false;\n        }\n  \
    \      cnt += opening+1-cnt;\n        cnt += closing+1-cnt;\n    }\n    return\
    \ status;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt720dye3: /tmp/tmpt720dye3.cpp:36: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // count the number of opening bracket\n    int num_open_bracket\
    \ = 0;\n    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i]\
    \ == '<') {\n            num_open_bracket++;\n        }\n    }\n    // for every\
    \ opening bracket, check its corresponding closing bracket.\n    // if all brackets\
    \ are correct, return true, else return false.\n    // >>> correct_bracketing((\"\
    <\"))\n    // false\n    // >>> correct_bracketing((\"<>\"))\n    // true\n  \
    \  // >>> correct_bracketing((\"<<><>>\"))\n    // true\n    // >>> correct_bracketing((\"\
    <<><>><\"))\n    // false\n    for(int i = 0; i < brackets.size(); i++) {\n  \
    \      if(brackets[i] == '<' && brackets[i + 1] == '>') {\n            if(num_open_bracket\
    \ == i + 2) {\n                return true;\n            } else {\n          \
    \      return false;\n            }\n        }\n    }\n    // if all brackets\
    \ aren't correct, return false.\n    // >>> correct_bracketing((\"<\"))\n    //\
    \ false\n    // >>> correct_bracketing((\"<>\"))\n    // false\n    // >>> correct_bracketing((\"\
    <<><>>\"))\n    // false\n    // >>> correct_bracketing((\"<<><>><\"))\n    //\
    \ false\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmek33820: /tmp/tmpmek33820.cpp:53: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    auto it = brackets.begin();\n    while (it != brackets.end())\
    \ {\n        if (*it != '>')\n            return true;\n        ++it;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp361dvdy6: /tmp/tmp361dvdy6.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string closed_brackets = \"\";\n    for (auto ch : brackets)\
    \ {\n        if (ch == '<') {\n            if (!closed_brackets.empty()) {\n \
    \               return false;\n            }\n            closed_brackets += \"\
    <\";\n        }\n        else if (ch == '>') {\n            if (!closed_brackets.empty())\
    \ {\n                return false;\n            }\n            closed_brackets\
    \ += \">\";\n        }\n    }\n    return closed_brackets.size() == brackets.size();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo2c6vpd8: /tmp/tmpo2c6vpd8.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tstd::unordered_set<char> s;\n\tfor (auto c : brackets) {\n\t\t\
    if (s.find(c) == s.end()) {\n\t\t\ts.insert(c);\n\t\t}\n\t}\n\n\treturn std::any_of(s.begin(),\
    \ s.end(), [](char x) { return x == '<'; });\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuv2na4ni: /tmp/tmpuv2na4ni.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    if (brackets.size() % 2 != 0)\n        return false;\n    for\
    \ (std::size_t i = 0; i < (brackets.size() / 2); ++i) {\n        if (brackets[i]\
    \ != '<')\n            return false;\n    }\n    for (std::size_t i = (brackets.size()\
    \ / 2); i < brackets.size(); ++i) {\n        if (brackets[i] != '>')\n       \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5xw2q2zi: /tmp/tmp5xw2q2zi.cpp:29: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = (brackets.find(\"<\") != brackets.npos);\n  \
    \  for (string::iterator it = brackets.begin(); it != brackets.end(); ++it)\n\
    \        if ((*it != \">\") || (it == brackets.begin()))\n            result =\
    \ (it == brackets.end());\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavn79djj.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpavn79djj.cpp:15:10: error: \u2018string\u2019 has not been declared\n\
    \   15 |     for (string::iterator it = brackets.begin(); it != brackets.end();\
    \ ++it)\n      |          ^~~~~~\n/tmp/tmpavn79djj.cpp:15:50: error: \u2018it\u2019\
    \ was not declared in this scope; did you mean \u2018int\u2019?\n   15 |     for\
    \ (string::iterator it = brackets.begin(); it != brackets.end(); ++it)\n     \
    \ |                                                  ^~\n      |             \
    \                                     int\n"
  stdout: ''
  timestamp: 1660130460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n\tauto has_correct_bracketing = [&brackets](const char* a, const\
    \ char* b) {\n\t\twhile(*a){\n\t\t\twhile (brackets.find(*a) != std::string::npos){\n\
    \t\t\t\tif (*(brackets.find(*a)) == *b) return false;\n\t\t\t\t++a; ++b;\n\t\t\
    \t}\n\t\t\t++a;\n\t\t}\n\t\treturn true;\n\t};\n\tauto it = std::begin(brackets);\n\
    \tfor(; it != std::end(brackets); ++it){\n\t\tauto b = std::begin(brackets);\n\
    \t\twhile (b != std::end(brackets)) {\n\t\t\tif (has_correct_bracketing(b, *b))\
    \ return false;\n\t\t\t++b;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsb3uajgh.cpp: In lambda function:\n/tmp/tmpsb3uajgh.cpp:17:28:\
    \ error: invalid type argument of unary \u2018*\u2019 (have \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019})\n   17 |     if (*(brackets.find(*a)) ==\
    \ *b) return false;\n      |                            ^\n/tmp/tmpsb3uajgh.cpp:\
    \ In function \u2018bool correct_bracketing(std::string)\u2019:\n/tmp/tmpsb3uajgh.cpp:28:36:\
    \ error: no match for call to \u2018(correct_bracketing(std::string)::<lambda(const\
    \ char*, const char*)>) (__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >&, char&)\u2019\n   28 |    if (has_correct_bracketing(b, *b)) return false;\n\
    \      |                                    ^\n/tmp/tmpsb3uajgh.cpp:14:32: note:\
    \ candidate: \u2018correct_bracketing(std::string)::<lambda(const char*, const\
    \ char*)>\u2019\n   14 |  auto has_correct_bracketing = [&brackets](const char*\
    \ a, const char* b) {\n      |                                ^\n/tmp/tmpsb3uajgh.cpp:14:32:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018const char*\u2019\n"
  stdout: ''
  timestamp: 1660130460
