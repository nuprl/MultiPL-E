language: cpp
name: HumanEval_69_search
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    assert(lst.size() > 0);\n    std::map<long, int> m;\n    for(long\
    \ i : lst) {\n        m[i]++;\n    }\n    auto it = m.begin();\n    if(m.end()\
    \ == it) {\n        return -1;\n    }\n    if(it->second >= it->first) {\n   \
    \     return it->second;\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxumps1cg: /tmp/tmpxumps1cg.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int res = -1;\n\
    \    long maxValue = -1L;\n    for (size_t i = 0; i < lst.size(); i++) {\n   \
    \     long val = lst[i];\n        if (val >= 0) {\n            std::map<long,\
    \ int> count;\n            for (size_t j = 0; j < lst.size(); j++) {\n       \
    \         if (val == lst[j])\n                    count[val] += 1;\n         \
    \   }\n            for (auto it = count.begin(); it != count.end(); ++it) {\n\
    \                if (it->second >= it->first) {\n                    if (it->second\
    \ > maxValue) {\n                        maxValue = it->second;\n            \
    \            res = it->first;\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return maxValue < 0 ?\
    \ -1 : res;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplhrayzo6: /tmp/tmplhrayzo6.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)9,
    (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7,
    (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8,
    (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10,
    (long)9, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = INT_MIN;\n    int maxFreq = 1;\n    for (auto& it : lst) {\n        if (it\
    \ > 0 && it >= maxVal) {\n            maxVal = it;\n            maxFreq += 1;\n\
    \        }\n    }\n    if (maxFreq >= maxVal) {\n        return maxVal;\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4rbifxh3: /tmp/tmp4rbifxh3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    // Your\
    \ code here\n    long ans = -1;\n    for(auto it : lst)\n    {\n        if(it\
    \ > 0)\n        {\n            if(it > ans) ans = it;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxml_bav7: /tmp/tmpxml_bav7.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -7
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq[10000];\n\
    \    for(auto i:lst)\n        freq[i] += 1;\n\n    long maxVal = 0;\n    long\
    \ maxFreq = -1;\n    for(auto i:freq)\n        if(freq[i] > maxFreq)\n       \
    \     maxFreq = freq[i];\n        \n    for(auto i:lst)\n        if(freq[i] ==\
    \ maxFreq) {\n            if(i > maxVal)\n                maxVal = i;\n      \
    \  }\n        \n    return maxVal;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    long freq = 1;\n    for (auto i : lst) {\n        ++freq;\n\
    \        if (i > 0 && freq >= i) {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa3m4c2iy: /tmp/tmpa3m4c2iy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    \n    if (n==0) return -1;\n    \n    long long maxVal = lst[n-1];\n    long\
    \ long maxCount = 0;\n    int cnt = 0;\n    for (auto it = lst.begin(); it !=\
    \ lst.end(); ++it) {\n        if (*it == maxVal) {\n            maxCount = cnt;\n\
    \        }\n        cnt += *it == maxVal;\n    }\n    \n    return cnt==0? -1\
    \ : maxCount+1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj7bkfmp9: /tmp/tmpj7bkfmp9.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ goes here\n    long ans = -1;\n    long max = 0;\n    for (long num : lst) {\n\
    \        if (num == 0)\n            continue;\n        if (num > max) {\n    \
    \        max = num;\n            ans = num;\n        }\n        if (num >= ans\
    \ && num < max)\n            ans = num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4leigolt: /tmp/tmp4leigolt.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = -1, maxCount = -1;\n    long count = 0;\n    long val = 0, freq = 0;\n   \
    \ for(auto e : lst){\n        val = e;\n        freq = std::count(lst.begin(),\
    \ lst.end(), val);\n        if(freq >= val){\n            count = std::count(lst.begin(),\
    \ lst.end(), val);\n            if(count > maxCount){\n                maxCount\
    \ = count;\n                maxVal = val;\n            }\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_3hvsvlj: /tmp/tmp_3hvsvlj.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)9,
    (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7,
    (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8,
    (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10,
    (long)9, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    // return -1\n    long ans = -1;\n    for (long i = 0; i < (lst.size());\
    \ i++) {\n        if (lst[i] > 0)\n            ans++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy6t91eja: /tmp/tmpy6t91eja.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    long n = lst.size();\n    long max_freq = std::numeric_limits<long>::max();\n\
    \    long max_val = -1;\n    for(int i=0;i<n;i++) {\n        long freq = std::count_if(lst.begin(),lst.end(),[&](int\
    \ x){return x==lst[i];});\n        if (freq > max_freq)\n            max_freq\
    \ = freq;\n        if (freq == max_freq && lst[i] > max_val) {\n            max_val\
    \ = lst[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpncen4ogl: /tmp/tmpncen4ogl.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    \n    // find all the occurrences of all the elements in the vector\n   \
    \ long cnt = 0;\n    for(long i : lst) {\n        cnt += i;\n    }\n\n    // if\
    \ there exist some frequency greater than or equal the length of the vector\n\
    \    if(cnt >= lst.size()) {\n        ans = -1;\n        return ans;\n    }\n\n\
    \    // iterate from beginning to end and find the smallest number whose frequency\
    \ is greater than or equal\n    // to the frequency of the smallest element\n\
    \    for(long i = 0; i < (lst.size() - 1); i++) {\n        // if frequency of\
    \ the element in the vector is greater than or equal to the frequency of the smallest\n\
    \        // element, take the smallest element and increase its frequency\n  \
    \      if(cnt >= lst[min(i + 1, lst.size())]) {\n            ans = i;\n      \
    \      cnt -= lst[min(i + 1, lst.size())];\n            break;\n        }\n  \
    \  }\n\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hxrh8fn.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7hxrh8fn.cpp:34:23: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   34 |         if(cnt >=\
    \ lst[min(i + 1, lst.size())]) {\n      |                       ^~~\n      | \
    \                      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7hxrh8fn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = -1;\n    for (long i : lst)\n        if (freq == -1) {\n    \
    \        freq = i;\n            ans = i;\n        } else if (freq >= i) {\n  \
    \          freq -= i;\n            ans = i;\n        }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9wd7jk0g: /tmp/tmp9wd7jk0g.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    int n = 0;\n    for (long i: lst) {\n        if (n > i) {\n \
    \           return n;\n        }\n        if (n == i) {\n            n++;\n  \
    \      }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplzllu75n: /tmp/tmplzllu75n.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Initialize\
    \ max_value to be 0 which will help us to find the max frequency of any value.\n\
    \  long max_value = 0;\n\n  for (size_t i = 0; i < lst.size(); ++i) {\n    //\
    \ If the current value is greater than max_value, then update max_value to current\
    \ value.\n    if (lst[i] > max_value) {\n      max_value = lst[i];\n    }\n  }\n\
    \  // If max_value has frequency greater than or equal to the value of max_value,\
    \ return max_value.\n  if (max_value >= lst[0]) {\n    return max_value;\n  }\n\
    \  // Else if max_value has frequency greater than or equal to the value of lst[0],\
    \ return -1.\n  return -1;\n}\nint main() {\n    auto candidate = search;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbjxcu3zr: /tmp/tmpbjxcu3zr.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long currMax\
    \ = INT_MIN;\n    long currFrequency = INT_MIN;\n    for (long i : lst) {\n  \
    \      if (i > 0 && currFrequency >= i) {\n            currFrequency = currFrequency\
    \ - i;\n            currMax = i;\n        }\n    }\n    return currMax;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8efqe_4v: /tmp/tmp8efqe_4v.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int max_freq\
    \ = 0;\n    long max_val = 0;\n    for (int i = 0; i < lst.size(); i++) {\n  \
    \      long val = lst[i];\n        if (max_freq < val) max_freq = val;\n     \
    \   if (val > max_val) {\n            max_val = val;\n            if (max_freq\
    \ == val) return val;\n        }\n    }\n    return -1;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmps2mg2ud8: /tmp/tmps2mg2ud8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<std::pair<long,\
    \ long> > v;\n    for(long i : lst)\n        if(v.empty() || v.back().second <\
    \ i)\n            v.push_back({i, 1});\n        else\n            v.back().second++;\n\
    \    for(long i : lst)\n        if(v.empty() || v.back().first < i || v.back().second\
    \ > i)\n            return -1;\n        else\n            return v.back().first;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpltda00u6: /tmp/tmpltda00u6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return -1;\n    long ans = -1L;\n    long freq[1 << 6] = {0};\n\
    \    for (long &i : lst) {\n        if (freq[i] < freq[i ^ 1]) {\n           \
    \ ans = i;\n            freq[i] = 1;\n        } else {\n            freq[i] =\
    \ freq[i ^ 1];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8wr1avw1: /tmp/tmp8wr1avw1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long long freq = 0;\n    // sort the list \n    std::sort(lst.begin(), lst.end());\n\
    \    // loop through the list\n    for (long i = 0; i < lst.size(); ++i) {\n \
    \       // check if i exists in the vector\n        if (std::find(lst.begin(),\
    \ lst.end(), i) != lst.end()) {\n            // check frequency\n            freq\
    \ = std::count(lst.begin(), lst.end(), i); \n            // if freq is bigger\
    \ than freq of i \n            if (freq >= lst[i]) {\n                ans = i;\n\
    \                // break the loop \n                break;\n            } \n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv0mawrg5: /tmp/tmpv0mawrg5.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Complete\
    \ this function\n    int len = lst.size();\n    std::vector<int> v;\n    for (int\
    \ i = 0; i < len; i++) {\n        if (lst.at(i) > 0) {\n            v.push_back(lst.at(i));\n\
    \        }\n    }\n    long max_value = -1;\n    int max_index = 0;\n    int i\
    \ = 0;\n    while (i < v.size()) {\n        if (v[i] > max_value) {\n        \
    \    max_value = v[i];\n            max_index = i;\n        }\n        i++;\n\
    \    }\n    if (max_index == v.size()) {\n        return -1;\n    } else {\n \
    \       return max_index;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprv_vt0uq: /tmp/tmprv_vt0uq.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  assert(lst.size()\
    \ != 0);\n  long maxVal = lst[0];\n  for (long i = 1; i < lst.size(); i++) {\n\
    \    if (lst[i] >= maxVal) {\n      maxVal = lst[i];\n    } else if (lst[i] ==\
    \ 0) {\n      return -1;\n    }\n  }\n  return maxVal;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6xh5cqiw: /tmp/tmp6xh5cqiw.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long res = 0;\n\
    \    for(long l: lst) {\n        res += l;\n    }\n    for(long l: lst) {\n  \
    \      if(l != 0 && res >= l) {\n            return l;\n        }\n    }\n   \
    \ return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp56juw72c: /tmp/tmp56juw72c.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 0;\n    long max = -1;\n    long cur = lst[0];\n    for(long i = 0; i < lst.size();\
    \ ++i){\n        if(lst[i] > max){\n            max = lst[i];\n            freq\
    \ = i;\n        }\n    }\n    if(freq <= 0 || freq > max){\n        return -1;\n\
    \    }\n    for(int i = max; i > 0; i /= 2){\n        cur += i;\n        if(cur\
    \ > freq){\n            return i;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp85w50621: /tmp/tmp85w50621.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long maxVal = -1;\n    std::map<long, std::pair<long, std::pair<long,\
    \ int> > > freq;\n    for(int i = 0; i < lst.size(); i++) {\n        long val\
    \ = lst[i];\n        if(freq.count(val) == 0) {\n            freq.insert(std::make_pair(val,\
    \ std::make_pair(val, std::make_pair(val, 0))));\n        } else {\n         \
    \   auto freqIter = freq.find(val);\n            freqIter.second.first += 1;\n\
    \            if(maxVal < freqIter.second.first) {\n                maxVal = freqIter.second.first;\n\
    \            }\n        }\n    }\n    for(auto freqIter = freq.begin(); freqIter\
    \ != freq.end(); ++freqIter) {\n        if(freqIter->second.first >= maxVal) {\n\
    \            return freqIter->second.second;\n        }\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtgss2jx.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmtgss2jx.cpp:24:22: error: \u2018struct std::_Rb_tree_iterator<std::pair<const\
    \ long int, std::pair<long int, std::pair<long int, int> > > >\u2019 has no member\
    \ named \u2018second\u2019\n   24 |             freqIter.second.first += 1;\n\
    \      |                      ^~~~~~\n/tmp/tmpmtgss2jx.cpp:25:34: error: \u2018\
    struct std::_Rb_tree_iterator<std::pair<const long int, std::pair<long int, std::pair<long\
    \ int, int> > > >\u2019 has no member named \u2018second\u2019\n   25 |      \
    \       if(maxVal < freqIter.second.first) {\n      |                        \
    \          ^~~~~~\n/tmp/tmpmtgss2jx.cpp:26:35: error: \u2018struct std::_Rb_tree_iterator<std::pair<const\
    \ long int, std::pair<long int, std::pair<long int, int> > > >\u2019 has no member\
    \ named \u2018second\u2019\n   26 |                 maxVal = freqIter.second.first;\n\
    \      |                                   ^~~~~~\n/tmp/tmpmtgss2jx.cpp:32:37:\
    \ error: cannot convert \u2018std::pair<long int, int>\u2019 to \u2018long int\u2019\
    \ in return\n   32 |             return freqIter->second.second;\n      |    \
    \                ~~~~~~~~~~~~~~~~~^~~~~~\n      |                            \
    \         |\n      |                                     std::pair<long int, int>\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int max = INT_MIN;\n\
    \    for (int i = 0; i < (int) lst.size(); i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (int i = 0; i < (int) lst.size();\
    \ i++) {\n        if (lst[i] == max) {\n            if (lst[i] > 0)\n        \
    \        return lst[i];\n            else\n                return -1;\n      \
    \  }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7o_8gltd: /tmp/tmp7o_8gltd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    return std::max_element(lst.begin(),\
    \ lst.end()) - lst.begin() + 1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn1bvcvka: /tmp/tmpn1bvcvka.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    long max = 0;\n    long freq = 0;\n    for(long &i : lst) {\n\
    \        freq++;\n        if(freq >= i) {\n            max = i;\n        }\n \
    \   }\n    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2ccpro5c: /tmp/tmp2ccpro5c.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n   long maxFreq\
    \ = std::numeric_limits<long>::min();\n   long maxVal = std::numeric_limits<long>::min();\n\
    \   for (auto val: lst) {\n      if (val >= 0) {\n         maxVal = val;\n   \
    \      maxFreq = std::count_if(lst.begin(), lst.end(), [&val] (long f) {return\
    \ f >= val;});\n         break;\n      }\n   }\n   return maxFreq < 0 ? -1 : maxVal;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvmh63cxi: /tmp/tmpvmh63cxi.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int m = 0, n\
    \ = 0, p = 0;\n    int count = 0;\n    long res = -1;\n    while (true) {\n  \
    \      for (size_t i = 0; i < lst.size(); i++) {\n            int d = lst[i] %\
    \ 10;\n            if (d > 0) {\n                count += 1;\n            }\n\
    \        }\n        if (count > m) {\n            res = p;\n            m = count;\n\
    \        } else if (count >= m && count <= n) {\n            p = count;\n    \
    \    } else if (count < n) {\n            res = -1;\n            return res;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return -1;\n    if (lst.size() == 1) return lst[0];\n    int ans = lst[0];\n\
    \    int freq = 1;\n    bool found = false;\n    for (auto& x: lst)\n        if\
    \ (x == ans) ++freq;\n        else if (freq >= x) found = true;\n        else\
    \ ans = x;\n    if (found) return -1;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2v9sxiex: /tmp/tmp2v9sxiex.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long n = lst.size();\n\
    \    if (n <= 0)\n        return -1;\n    int m = 1;\n    for (long long i : lst)\
    \ {\n        if (i > 0)\n            m += 1;\n    }\n    // Your code goes here\n\
    \    int count = 0;\n    for (long long i : lst) {\n        if (i >= 0)\n    \
    \        count += 1;\n        if (i >= n / 2 && count > m)\n            return\
    \ -1;\n    }\n    return lst[n - 1];\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpz39h5xdu: /tmp/tmpz39h5xdu.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int freq[10000];\n\
    \    std::vector<long> nums;\n    for (long i = 0; i < (int)lst.size(); i++)\n\
    \        freq[lst[i]]++;\n    for (long i = 0; i < (int)lst.size(); i++)\n   \
    \     if (freq[i] >= lst[i])\n            nums.push_back(i);\n    long ans = -1;\n\
    \    if (nums.size() > 0) {\n        std::sort(nums.begin(), nums.end());\n  \
    \      ans = nums.back();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp91o1x2rd: /tmp/tmp91o1x2rd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long x = 0;\n    int n = lst.size();\n    vector<bool> visited(n, false);\n\
    \    vector<long> res;\n\n    for (long i : lst) {\n        if (visited[i]) {\n\
    \            res[x] = i;\n            ans = i;\n            x = x + 1;\n     \
    \   } else {\n            for (int j = 0; j < n; j++) {\n                if (lst[j]\
    \ <= i) {\n                    res[x] = lst[j];\n                    ans = lst[j];\n\
    \                    x = x + 1;\n                    visited[j] = true;\n    \
    \                break;\n                }\n            }\n        }\n    }\n\n\
    \    if (ans == -1) \n        cout << \"-1\" << endl;\n    else \n        cout\
    \ << ans << endl;\n\n    cout << res.size() << endl;\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_k9tkrp.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6_k9tkrp.cpp:18:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   18 |     vector<bool> visited(n, false);\n      |     ^~~~~~\n\
    /tmp/tmp6_k9tkrp.cpp:18:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6_k9tkrp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6_k9tkrp.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp6_k9tkrp.cpp:18:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   18 |     vector<bool>\
    \ visited(n, false);\n      |            ^~~~\n/tmp/tmp6_k9tkrp.cpp:19:12: error:\
    \ expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ res;\n      |            ^~~~\n/tmp/tmp6_k9tkrp.cpp:22:13: error: \u2018visited\u2019\
    \ was not declared in this scope\n   22 |         if (visited[i]) {\n      | \
    \            ^~~~~~~\n/tmp/tmp6_k9tkrp.cpp:23:13: error: \u2018res\u2019 was not\
    \ declared in this scope\n   23 |             res[x] = i;\n      |           \
    \  ^~~\n/tmp/tmp6_k9tkrp.cpp:29:21: error: \u2018res\u2019 was not declared in\
    \ this scope\n   29 |                     res[x] = lst[j];\n      |          \
    \           ^~~\n/tmp/tmp6_k9tkrp.cpp:40:9: error: \u2018cout\u2019 was not declared\
    \ in this sc"
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    long ans = -1;\n    long currMax = 0;\n    for(auto x: lst)\n   \
    \ {\n        if(x>0)\n        {\n            currMax += x;\n            if((currMax>ans)\
    \ && (ans>=0))\n            {\n                ans = currMax;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpr6bh45y6: /tmp/tmpr6bh45y6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long max = 1;\n    long maxVal = lst[0];\n    for (auto i : lst)\
    \ {\n        if (i > maxVal) {\n            max = 1;\n            maxVal = i;\n\
    \        } else if (i == maxVal && i > max) {\n            max = i;\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbx_qfbef: /tmp/tmpbx_qfbef.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1LL;\n\
    \    for(auto i : lst)\n        if(i > 0)\n            ans = max(ans, i);\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizxy1zif.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpizxy1zif.cpp:18:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   18 |             ans =\
    \ max(ans, i);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpizxy1zif.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long long int\
    \ res = INT_MAX;\n    long long int curr = 0;\n    int curr = std::accumulate(lst.begin(),\
    \ lst.end(), 0);\n    for (int i = 0; i < lst.size(); i++) {\n        if ((lst[i])\
    \ > curr) {\n            curr += lst[i];\n            res = std::max(res, curr);\n\
    \        }\n    }\n    return res == INT_MAX ? -1 : res;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1cbxd6u.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf1cbxd6u.cpp:17:9: error: conflicting declaration \u2018\
    int curr\u2019\n   17 |     int curr = std::accumulate(lst.begin(), lst.end(),\
    \ 0);\n      |         ^~~~\n/tmp/tmpf1cbxd6u.cpp:16:19: note: previous declaration\
    \ as \u2018long long int curr\u2019\n   16 |     long long int curr = 0;\n   \
    \   |                   ^~~~\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Do not write\
    \ main() function.\n    // Do not read input, instead use the arguments to the\
    \ function.\n    // Do not print the output, instead return values to the caller.\n\
    \    // Your code will be between the lines below and outside the main function.\n\
    \    // The return type is long, but you are not returning any value explicitly\
    \ in this function.\n    // You can assume that lst has valid values.\n    long\
    \ max_val = -1, freq = 0;\n    for(long &val : lst)\n        freq = std::count(lst.begin(),\
    \ lst.end(), val);\n        if(freq > max_val)\n            max_val = freq;\n\
    \    return max_val; \n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_1lpx3is: /tmp/tmp_1lpx3is.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> cnt;\n    for(int i=0;i<lst.size();++i) {\n        cnt[lst[i]]++;\n  \
    \  }\n\n    // if any element doesn't satisfy the requirement\n    if(lst.empty())\
    \ {\n        return -1;\n    }\n\n    for(auto& x:cnt) {\n        if(x.second\
    \ > lst.size()-1) {\n            return -1;\n        }\n    }\n\n    long max\
    \ = 0;\n    for(auto& x:cnt) {\n        if(x.second > max) {\n            max\
    \ = x.second;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyy6apwav: /tmp/tmpyy6apwav.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_val\
    \ = 0;\n    long max_val_freq = 0;\n    long freq = 0;\n    for(long &i : lst){\n\
    \        freq = std::count(lst.begin(), lst.end(), i);\n        if(freq>max_val_freq){\n\
    \            max_val_freq = freq;\n            max_val = i;\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpiggjq_t5: /tmp/tmpiggjq_t5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.empty())\n\
    \        return -1;\n    long freq = lst[0]; \n    int size = lst.size();\n  \
    \  int counter = 1;\n    // int x = lst.front(); \n    // lst.erase(lst.begin());\
    \ \n    // lst.push_back(x);\n    for(int i=0;i<size;i++) {\n        if(freq <\
    \ lst[i]){\n            freq = lst[i];\n            counter = 1;\n           \
    \ // x = lst[i]; \n            // lst.erase(lst.begin() + i); \n            //\
    \ lst.push_back(x);\n        } else {\n            counter++;\n            //\
    \ x = lst[i]; \n            // lst.erase(lst.begin() + i); \n            // lst.push_back(x);\n\
    \        }\n    }\n    return counter;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpznyll95f: /tmp/tmpznyll95f.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // code here\n\
    \  int n = 0;\n  sort(lst.begin(), lst.end(), [](int a, int b) { return a < b;\
    \ });\n  for (auto x : lst) {\n    if (x < 0 || x >= 1000000000)\n      return\
    \ -1;\n    if (count(lst, x) >= 1000000000)\n      return -1;\n  }\n  n = lst.front();\n\
    \  if (count(lst, n) > 1000000000)\n    return -1;\n  return n;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqea13d2t.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqea13d2t.cpp:21:21: error: no matching function for call\
    \ to \u2018count(std::vector<long int>&, long int&)\u2019\n   21 |     if (count(lst,\
    \ x) >= 1000000000)\n      |                     ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqea13d2t.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note: candidate: \u2018template<class _IIter, class _Tp> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&)\u2019\n 4113 |     count(_InputIterator\
    \ __first, _InputIterator __last, const _Tp& __value)\n      |     ^~~~~\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqea13d2t.cpp:21:21:\
    \ note:   deduced conflicting types for parameter \u2018_IIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long int\u2019)\n   21 |     if (count(lst, x) >= 1000000000)\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqea13d2t.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ typename std::iterator_traits<_II>::difference_type> std::count(_ExecutionPolicy&&,\
    \ _ForwardIterator, _ForwardIterator, const _Tp&)\u2019\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n\
    \      | ^~~~~\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpqea13d2t.cpp:21:21: note: \
    \  candidate expects 4 arguments, 2 provided\n   21 |     if (count(lst, x) >=\
    \ 1000000000)\n      |                     ^\n/tmp/tmpqea13d2t.cpp:25:19: error:\
    \ no matching function for call to \u2018count(s"
  stdout: ''
  timestamp: 1660100943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max = 0;\n\
    \    long freq = 0;\n    for (long &it : lst) {\n        freq = std::count_if(lst.begin(),\
    \ lst.end(), [&it] (long n){return (n > it);});\n        if (freq > max) {\n \
    \           max = freq;\n        }\n    }\n    return std::find(lst.begin(), lst.end(),\
    \ max) ? max : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf12zn2ha.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf12zn2ha.cpp:23:21: error: could not convert \u2018std::find<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, long int>(lst.std::vector<long int>::begin(),\
    \ lst.std::vector<long int>::end(), max)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018bool\u2019\n   23 |     return\
    \ std::find(lst.begin(), lst.end(), max) ? max : -1;\n      |            ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tassert(lst.size()\
    \ > 0);\n\tlong ans = -1;\n\tfor (long i : lst) {\n\t\tlong freq = lst.count(i);\n\
    \t\tif (freq > i) {\n\t\t\tans = i;\n\t\t}\n\t\tif (freq >= i) {\n\t\t\treturn\
    \ ans;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo84_j_3d.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo84_j_3d.cpp:18:19: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   18 |   long freq = lst.count(i);\n\
    \      |                   ^~~~~\n"
  stdout: ''
  timestamp: 1660100943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    sort(lst.begin(),lst.end());\n\
    \    long ans=-1;\n    if(lst.size()>0)\n    {\n        long count[1000]={0};\n\
    \        long i=0;\n        while(count[lst.at(i)]<lst.size() && i<=lst.size()-1)\n\
    \        {\n            count[lst.at(i)]++;\n            i++;\n        }\n   \
    \     if(lst.at(i)>1)\n        {\n            ans=lst.at(i-1);\n        }\n  \
    \      else\n        {\n            if(lst.at(i)==1)\n                ans=lst.at(i);\n\
    \            else\n                ans=-1;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 5) >= this->size() (which is 5)\n"
  stdout: ''
  timestamp: 1660100944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long ans = -1;\n    // Use counting sort\n    // This approach is\
    \ similar to binary search but has linear time complexity\n    for (auto val :\
    \ lst) {\n        if (ans < 0 || val != ans) {\n            ans = val;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp68bru387: /tmp/tmp68bru387.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n        long maxVal\
    \ = lst[0];\n        long maxFreq = lst[0];\n        for(long i = 1; i < lst.size();\
    \ i++) {\n            if(lst[i] > maxVal) {\n                maxVal = lst[i];\n\
    \                maxFreq = lst[i];\n            }\n        }\n        if(maxVal\
    \ > 0)\n            return maxVal;\n        else\n            return -1;\n   \
    \ }\n</code>\n<|/ a |>\n<| c |>\nThat `for` loop is completely wrong.  You don't\
    \ need to iterate at all.  Just `return maxVal;` after initializing maxVal to\
    \ the first element.  You don't need to iterate over the whole vector, just until\
    \ you see a value greater than zero.  You also need to initialize maxFreq to the\
    \ first element.  And you don't need to return `-1`.  Just return `0` and check\
    \ `if (maxVal < 0) { return 0; }`\n<|/ c |>\n<| c |>\nHi, Thanks for the suggestion,\
    \ but I still get the same error. I am not able to understand why the same code\
    \ is working on one IDE but not on other. The code is exactly same on both the\
    \ IDEs.\n<|/ c |>\n<| c |>\n- are you sure that you don't have a `using namespace\
    \ std;` somewhere?\n<|/ c |>\n<| c |>\n- I ran your exact code with both ide's\
    \ and I got an error on ide1.  When I changed the `for` loop to be `for(int i=0;i<lst.size();i++)`\
    \ it worked.  So either IDE might have an issue with vectors, or you simply did\
    \ not include `<vector>`.  I edited my answer with the working code, which you\
    \ can copy and paste.\n<|/ c |>\n<| c |>\n- I just ran the code on ideone.com,\
    \ and I got the same error as you.  I changed the `for` loop to be `for(int i=0;i<lst.size();i++)`\
    \ and the error went away.  I edited my answer with working code you can copy\
    \ and paste.\n<|/ c |>\n<| a tags=vector,c++ dscore=0 |>\nYour code is almost\
    \ correct. Just a small typo in the function declaration. It should be:\n<code>\n\
    long search(std::vector<long> lst)\n</code>\nI suggest you add some code to check\
    \ if lst is empty and return -1 if that happens.\n<|/ a |>\n<| c |>\nI did add\
    \ some code to check if lst is empty and return -1 if that happens.\n<|/ c |>\n\
    <| c |>\nThat's still not enough. `search` needs to return `-1` if the vector\
    \ is empty, and you need to return `0` \n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpra0s_jyl.cpp:31:6: error: stray \u2018`\u2019 in program\n   31\
    \ | That `for` loop is completely wrong.  You don't need to iterate at all.  Just\
    \ `return maxVal;` after initializing maxVal to the first element.  You don't\
    \ need to iterate over the whole vector, just until you see a value greater than\
    \ zero.  You also need to initialize maxFreq to the first element.  And you don't\
    \ need to return `-1`.  Just return `0` and check `if (maxVal < 0) { return 0;\
    \ }`\n      |      ^\n/tmp/tmpra0s_jyl.cpp:31:10: error: stray \u2018`\u2019 in\
    \ program\n   31 | That `for` loop is completely wrong.  You don't need to iterate\
    \ at all.  Just `return maxVal;` after initializing maxVal to the first element.\
    \  You don't need to iterate over the whole vector, just until you see a value\
    \ greater than zero.  You also need to initialize maxFreq to the first element.\
    \  And you don't need to return `-1`.  Just return `0` and check `if (maxVal <\
    \ 0) { return 0; }`\n      |          ^\n/tmp/tmpra0s_jyl.cpp:31:46: warning:\
    \ character constant too long for its type\n   31 | That `for` loop is completely\
    \ wrong.  You don't need to iterate at all.  Just `return maxVal;` after initializing\
    \ maxVal to the first element.  You don't need to iterate over the whole vector,\
    \ just until you see a value greater than zero.  You also need to initialize maxFreq\
    \ to the first element.  And you don't need to return `-1`.  Just return `0` and\
    \ check `if (maxVal < 0) { return 0; }`\n      |                             \
    \                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpra0s_jyl.cpp:31:311: warning: missing terminating ' character\n   31 |\
    \ That `for` loop is completely wrong.  You don't need to iterate at all.  Just\
    \ `return maxVal;` after initializing maxVal to the first element.  You don't\
    \ need to iterate over the whole vector, just until you see a value greater than\
    \ zero.  You also need to initialize maxFreq to the first element.  And you don't\
    \ need to return `-1`.  Just return `0` and check `if (maxVal <"
  stdout: ''
  timestamp: 1660100945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    int pos = 0, cnt = 0;\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] > 0 && lst[i] == lst[pos]) {\n            cnt++;\n\
    \            if (cnt > lst[pos]) pos = i;\n        }\n    }\n    return (pos <\
    \ lst.size()) ? pos : -1;\n}\nint main() {\n    auto candidate = search;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1gwl3x8h: /tmp/tmp1gwl3x8h.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long min = INT_MAX;\n\
    \    long max_freq = INT_MIN;\n    for (size_t i = 0; i < lst.size(); ++i) {\n\
    \        if (lst[i] < min || min == INT_MAX) {\n            min = lst[i];\n  \
    \      }\n        if (lst[i] > max_freq || max_freq == INT_MIN) {\n          \
    \  max_freq = lst[i];\n        }\n    }\n    return lst.size() <= 0 ? -1 : max_freq;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq6cbs0q8: /tmp/tmpq6cbs0q8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int freq[100000]={0};\n\
    \    int val[100000]={0};\n    for(int i=0;i<lst.size();i++)\n    {\n        val[lst[i]]++;\n\
    \    }\n    for(int i=0;i<lst.size();i++)\n    {\n        freq[val[lst[i]]]++;\n\
    \    }\n    long ans=-1;\n    for(int i=1;i<=freq[val[lst[0]]];i++)\n    {\n \
    \       if(freq[val[lst[i]]] >= i)\n        {\n            ans+=i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmparavr07t: /tmp/tmparavr07t.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    sort(lst.begin(),\
    \ lst.end());\n    // Your code here\n    long ans = -1;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] == 0) {\n            continue;\n\
    \        }\n        if (lst[i] > 0 && lst[i] >= ans) {\n            ans = lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7poun250: /tmp/tmp7poun250.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<std::pair<long,\
    \ int>> freqs;\n    for (auto& x: lst) {\n        std::pair<long, int> p(x, freqs.count(x));\n\
    \        freqs.insert(p);\n    }\n    \n    for (auto it=freqs.rbegin(); it!=freqs.rend();\
    \ ++it) {\n        if (it->first>0) {\n            return it->first;\n       \
    \ }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmaxyuvl.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxmaxyuvl.cpp:17:41: error: \u2018class std::vector<std::pair<long\
    \ int, int> >\u2019 has no member named \u2018count\u2019\n   17 |         std::pair<long,\
    \ int> p(x, freqs.count(x));\n      |                                        \
    \ ^~~~~\n/tmp/tmpxmaxyuvl.cpp:18:23: error: no matching function for call to \u2018\
    std::vector<std::pair<long int, int> >::insert(std::pair<long int, int>&)\u2019\
    \n   18 |         freqs.insert(p);\n      |                       ^\nIn file included\
    \ from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxmaxyuvl.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = std::pair<long int,\
    \ int>; _Alloc = std::allocator<std::pair<long int, int> >; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<std::pair<long int, int>*, std::vector<std::pair<long\
    \ int, int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::pair<long\
    \ int, int>*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ std::pair<long int, int>*, std::vector<std::pair<long int, int> > >; typename\
    \ __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::pair<long int, int>*; std::vector<_Tp, _Alloc>::value_type = std::pair<long\
    \ int, int>]\u2019\n  130 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:130:5: note:   candidate expects 2 arguments,\
    \ 1 provided\nIn file included from /usr/include/c++/9/vector:67,\n          \
    \       from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  bool found = false;\n  std::map<long, long> mp;\n  long max = -1, curr = 0;\n\
    \  for (size_t i = 0; i < lst.size(); i++) {\n    if (mp[lst.at(i)] > 0) mp[lst.at(i)]\
    \ -= 1; // decrement frequency\n    else { // add a new key, increment\n     \
    \ mp[lst.at(i)] = 1;\n      if (mp[lst.at(i)] == 1) {\n        max = max = lst.at(i);\n\
    \        found = true;\n      }\n      else if (mp[lst.at(i)] == 0 && found ==\
    \ true) {\n        max = lst.at(i);\n      }\n    }\n  }\n  return max;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbt5ghbnv: /tmp/tmpbt5ghbnv.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    long max_val = -1;\n    long min_val = INT_MAX;\n    for(long\
    \ i = 0; i< lst.size(); i++) {\n        long freq = std::count(lst.begin(), lst.end(),\
    \ lst[i]);\n        if(max_val == -1 || freq >= max_val) {\n            max_val\
    \ = freq;\n        }\n        if(freq <= min_val) {\n            min_val = freq;\n\
    \        }\n    }\n    if(max_val >= 0) {\n        return max_val;\n    }\n  \
    \  return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp82k_akjh: /tmp/tmp82k_akjh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long ans = -1;\n\
    \  for(long k : lst) {\n    if(k > 0) {\n      ans = k;\n      break;\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpayojpx8c: /tmp/tmpayojpx8c.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    if (lst.size() == 0)\n        return -1;\n    // sort the list according\
    \ to the frequency of numbers in it.\n    long max = lst[0];\n    for (long i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            ans = i;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1zzn0dl7: /tmp/tmp1zzn0dl7.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    long ans = -1;\n    long counter = lst.size();\n    std::vector<int> freq(lst.size(),\
    \ 0);\n    for(long i : lst) {\n        freq[i] += 1;\n    }\n    for(long i :\
    \ freq) {\n        if(i > 0 && freq[i] > 0 && freq[i] >= i) {\n            ans\
    \ = i;\n            counter = i;\n        }\n    }\n    if(ans == -1) {\n    \
    \    return -1;\n    }\n    if(counter < ans) {\n        return -1;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2op48jp9: /tmp/tmp2op48jp9.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)8,
    (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n\tlong max_val, max_freq = -1, min_freq = std::numeric_limits<long>::max();\n\
    \tfor(auto i : lst) {\n\t\tif(i == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tstd::map<long,\
    \ long> m;\n\t\tfor(auto j : lst) {\n\t\t\tif(j != 0 && i != j){\n\t\t\t\tm[i\
    \ - j] = m[i - j] + 1;\n\t\t\t}\n\t\t}\n\t\tstd::map<long, long>::iterator it;\n\
    \t\tfor(it=m.begin(); it != m.end(); it++){\n\t\t\tif(it->second > max_freq){\n\
    \t\t\t\tmax_val = it->first;\n\t\t\t\tmax_freq = it->second;\n\t\t\t}\n\t\t}\n\
    \t\tmin_freq = (std::min)(min_freq, it->second);\n\t}\n\tif(max_freq == -1){\n\
    \t\treturn -1;\n\t}\n\tif(max_freq < min_freq){\n\t\treturn -1;\n\t}\n\treturn\
    \ max_val;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf9929h2f: /tmp/tmpf9929h2f.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (long i = 0;i < lst.size() - 1;i++){\n        if (lst[i]\
    \ > 0 && lst[i + 1] > 0){\n            int curr = lst[i];\n            if (curr\
    \ >= lst[i + 1]) {\n                lst[i] = -1;\n            }\n        }\n \
    \   }\n    if (lst.size() > 0){\n        return lst[0];\n    }\n    else {\n \
    \       return -1;\n    }\n}\nint main() {\n    auto candidate = search;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprj8niixp: /tmp/tmprj8niixp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  int i = 0, j;\n  while(i < lst.size() && lst[i] <= 0) i++;\n  int temp = lst[i];\n\
    \  for(j = i+1; j < lst.size(); j++) if(lst[j] >= temp) temp = lst[j];\n  return\
    \ temp > 0 ? temp : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfeu3yziv: /tmp/tmpfeu3yziv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int a = 0, b\
    \ = lst.size() - 1, c = 0, max = 0;\n    while (a < b) {\n        if (lst[a] ==\
    \ c) {\n            c = c + 1;\n        }\n        else if (lst[a] > c) {\n  \
    \          if (lst[a] > max)\n                max = lst[a];\n        }\n     \
    \   else {\n            if (lst[a] > c)\n                max = c;\n          \
    \  c = lst[a];\n        }\n        a++;\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpb4oyh3e0: /tmp/tmpb4oyh3e0.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = std::numeric_limits<long>::max();\n    long val = 0;\n    for (long &num :\
    \ lst) {\n        if (num > 0) {\n            val = num;\n            maxVal =\
    \ std::max(maxVal, num);\n        }\n    }\n    long freq = 0;\n    for (long\
    \ &num : lst) {\n        if (num > 0) {\n            freq += num;\n          \
    \  if (freq >= val) {\n                return num;\n            }\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk6q3ny_j: /tmp/tmpk6q3ny_j.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<bool>\
    \ v(lst.size(), false);\n    for (long i = 0; i< lst.size(); i++) {\n        if\
    \ (v[i]) {\n            for (int j = i-1; j > 0; j--) {\n                if (lst[j-1]\
    \ > lst[j]) {\n                    break;\n                }\n            }\n\
    \            if (v[j]) {\n                return lst[j-1];\n            }\n  \
    \      }\n        v[i] = true;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaqy2ct9k.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaqy2ct9k.cpp:23:19: error: \u2018j\u2019 was not declared\
    \ in this scope\n   23 |             if (v[j]) {\n      |                   ^\n"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_freq\
    \ = 1;\n    long max_val = -1;\n    long cur_val = 0;\n    for(auto i : lst) {\n\
    \        cur_val = i;\n        if(max_val < cur_val) max_val = cur_val;\n    \
    \    if(max_freq < lst[cur_val]) max_freq = lst[cur_val];\n    }\n    return max_val\
    \ == -1 ? -1 : max_freq;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpudi3npz5: /tmp/tmpudi3npz5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<std::pair<long,\
    \ long> > v1(lst.begin(), lst.end());\n    std::sort(v1.begin(), v1.end());\n\n\
    \    long ans = -1;\n    long freq = -1;\n    long max_freq = -1;\n    for (long\
    \ i = 0; i <= v1.size() - 1; i++) {\n        freq = v1[i].second;\n        if\
    \ (freq > max_freq || freq < 0 || max_freq < 0) {\n            ans = -1;\n   \
    \         break;\n        }\n        \n        max_freq = freq;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmphvhn_lty.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _ForwardIterator = std::pair<long int, long int>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _ForwardIterator = std::pair<long int, long int>*;\
    \ _Tp = std::pair<long int, long int>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Tp = std::pair<long int, long int>; _Alloc =\
    \ std::allocator<std::pair<long int, long int> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; <template-parameter-2-2> = void; _Tp = std::pair<long\
    \ int, long int>; _Alloc = std::allocator<std::pair<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::pair<long int, long int> >]\u2019\
    \n/tmp/tmphvhn_lty.cpp:15:66:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type must be constructible from value\
    \ type of input rang"
  stdout: ''
  timestamp: 1660100946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<bool>\
    \ v1(lst.size(), false);\n    long ans = -1;\n    long cnt = 0;\n    for (long\
    \ i = 1; i < lst.size(); i++) {\n        bool flag = false;\n        for (long\
    \ j = 0; j < i; j++) {\n            if (v1[j] && (!flag || v1[j] == (i-j+1)))\
    \ {\n                flag = true;\n                cnt += (i-j+1);\n         \
    \       ans = max(ans, i);\n            }\n        }\n        if (v1[i]) {\n \
    \           cnt += (i+1);\n            ans = max(ans, i);\n        }\n       \
    \ v1[lst.size()-i] = true;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfrm5gr7.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzfrm5gr7.cpp:24:23: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   24 |                 ans\
    \ = max(ans, i);\n      |                       ^~~\n      |                 \
    \      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpzfrm5gr7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpzfrm5gr7.cpp:29:19: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   29 |             ans = max(ans, i);\n      |                   ^~~\n     \
    \ |                   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzfrm5gr7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long ans=INT_MIN;\n\
    \  // Loop through the vector\n  for (long x:lst) {\n    // If value exists, see\
    \ if frequency is larger than value itself\n    if (ans==x)\n      ans++;\n  \
    \  else\n      ans=x;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmma97e6j: /tmp/tmpmma97e6j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = -1;\n    long maxFreq = -1;\n    for (auto x: lst)\n    {\n        long freq\
    \ = 0;\n        for (auto y: lst)\n        {\n            if (x == y)\n      \
    \      {\n                freq++;\n            }\n        }\n        if (freq\
    \ > maxFreq)\n        {\n            maxVal = x;\n            maxFreq = freq;\n\
    \        }\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdk_0vdps: /tmp/tmpdk_0vdps.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long result\
    \ = 0;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        result\
    \ =std::max(result, *it);\n        if (lst.count(*it) >= lst.count(*result))\n\
    \            break;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz3rc7xx.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprz3rc7xx.cpp:18:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   18 |         if (lst.count(*it)\
    \ >= lst.count(*result))\n      |                 ^~~~~\n/tmp/tmprz3rc7xx.cpp:18:35:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018count\u2019\
    \n   18 |         if (lst.count(*it) >= lst.count(*result))\n      |         \
    \                          ^~~~~\n/tmp/tmprz3rc7xx.cpp:18:42: error: invalid type\
    \ argument of unary \u2018*\u2019 (have \u2018long int\u2019)\n   18 |       \
    \  if (lst.count(*it) >= lst.count(*result))\n      |                        \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long sum = 0;\n\
    \    for (auto i : lst) {\n        sum += i;\n    }\n    if (sum < 0) {\n    \
    \    return -1;\n    }\n    long result = sum % 10;\n    for (auto i : lst) {\n\
    \        if (i == sum) {\n            return i;\n        }\n        result +=\
    \ (sum - i) % 10;\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpds4kh0kf: /tmp/tmpds4kh0kf.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq[100000]\
    \ = {0};\n    long ans = -1;\n    for(long it = 0; it < lst.size(); it++) {\n\
    \        freq[lst[it]] += 1;\n    }\n    for(long it = 0; it < 100001; it++) {\n\
    \        if(freq[it] >= lst[it]){\n            ans = it;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  assert(lst.size()\
    \ > 0 && lst.size() <= INT_MAX);\n  long ans = -1;\n  for(long &i : lst) {\n \
    \   long c = 1;\n    for(long &j : lst) {\n      if(j == i) continue;\n      if((i\
    \ - j) < (c)) c = i - j;\n    }\n    if(c == i) {\n      if(c == lst[ans]) ans\
    \ = i;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpywzo6gsg: /tmp/tmpywzo6gsg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ret = std::numeric_limits<long>::min();\n\
    \    long freq = std::numeric_limits<long>::min();\n    std::vector<long> freqs;\n\
    \    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (freqs.count(*it)\
    \ > 0) {\n            freq = freqs.at(*it);\n        } else {\n            freqs.push_back(*it);\n\
    \        }\n    }\n    if (freq > 0) {\n        for (auto it = lst.begin(); it\
    \ != lst.end(); ++it) {\n            assert(freqs.count(*it) > 0);\n         \
    \   if (freq > freqs.at(*it)) {\n                ret = *it;\n                break;\n\
    \            }\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40alha7n.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp40alha7n.cpp:19:19: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   19 |         if (freqs.count(*it)\
    \ > 0) {\n      |                   ^~~~~\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp40alha7n.cpp:2:\n/tmp/tmp40alha7n.cpp:27:26: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018count\u2019\
    \n   27 |             assert(freqs.count(*it) > 0);\n      |                 \
    \         ^~~~~\n"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 0;\n    long max = -1;\n    for(auto x: lst) {\n        if (x == max) {\n  \
    \          continue;\n        }\n        if (x == -1) {\n            freq = -1;\n\
    \            break;\n        }\n        freq++;\n        if (x == max - freq)\
    \ {\n            max = x;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp31ttnc3s: /tmp/tmp31ttnc3s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    \n    long maxVal = -1;\n    long frequency = 1;\n    \n    for(long\
    \ i = 0; i < lst.size(); i++){\n        frequency += lst[i];\n        if(frequency\
    \ > maxVal){\n            maxVal = frequency;\n        }\n    }\n    \n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpom2uyjhh: /tmp/tmpom2uyjhh.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    // Your\
    \ code goes here\n    \n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    \n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8ze3p25o: /tmp/tmp8ze3p25o.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_val\
    \ = 0;\n    long min_val = lst[0];\n    long count = 0;\n    for (long n : lst)\
    \ {\n        if (n > min_val) ++count;\n        if (n == max_val) break;\n   \
    \     max_val = n;\n    }\n    if (max_val == min_val) return -1;\n    for (long\
    \ n : lst) {\n        if (count >= count) {\n            if (n == max_val) return\
    \ max_val;\n        }\n        min_val = n;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_6xvjlb0: /tmp/tmp_6xvjlb0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    long max;\n\
    \    \n    if(lst.empty())\n        return -1;\n    \n    for(long i = 0; i <\
    \ lst.size(); i++)\n    {\n        max = std::max(max, lst[i]);\n    }\n    \n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > max)\n \
    \           max = lst[i];\n    }\n    \n    return max;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc3u5_dmp: /tmp/tmpc3u5_dmp.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long ans = -1;\n    for (long num : lst) {\n        if(num > 0)\n\
    \            ans++;\n        else if (num == 0)\n            return -1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp59uq4j9d: /tmp/tmp59uq4j9d.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int i;\n   \
    \ int k = std::numeric_limits<int>::max();\n    int count = 0;\n    for (i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] == k) {\n            count++;\n \
    \       } else if (lst[i] < k) {\n            k = lst[i];\n            count =\
    \ 1;\n        }\n    }\n    if (count > lst.size() / 2) {\n        return k;\n\
    \    } else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8pcwv5yb: /tmp/tmp8pcwv5yb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++){\n      \
    \  if (lst[i] >= sum) sum = lst[i];\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpksiedvbi: /tmp/tmpksiedvbi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long max_val = -1;\n    long min_val = INT_MAX;\n    for (auto\
    \ &i : lst) {\n        if (i > max_val) {\n            max_val = i;\n        }\n\
    \        if (i > min_val) {\n            if (i >= max_val) {\n               \
    \ max_val = -1;\n            }\n        }\n        if (i >= min_val) {\n     \
    \       if (lst.count(i) > lst.count(max_val)) {\n                max_val = i;\n\
    \            }\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp632c5wxx.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp632c5wxx.cpp:28:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   28 |             if (lst.count(i)\
    \ > lst.count(max_val)) {\n      |                     ^~~~~\n/tmp/tmp632c5wxx.cpp:28:36:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018count\u2019\
    \n   28 |             if (lst.count(i) > lst.count(max_val)) {\n      |      \
    \                              ^~~~~\n"
  stdout: ''
  timestamp: 1660100946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.empty())\n\
    \        return -1;\n    \n    long maxVal = *std::max_element(lst.begin(), lst.end());\n\
    \    \n    int valCount = std::count_if(lst.begin(), lst.end(), [&](long v){ return\
    \ v == maxVal; });\n    if(valCount >= maxVal)\n        return maxVal;\n    \n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbomj5pw4: /tmp/tmpbomj5pw4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    assert(n != 0);\n    int cnt = 0;\n    for (auto i : lst) {\n        cnt\
    \ += i;\n    }\n    for (auto i : lst) {\n        if (cnt > i) {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5fsdazdx: /tmp/tmp5fsdazdx.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    int max = 0;\n    int cnt = 0;\n    for (long i : lst) {\n       \
    \ cnt += 1;\n        if (i > max) {\n            max = i;\n        } else if (cnt\
    \ >= i) {\n            max = -1;\n            break;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzo9ew_sm: /tmp/tmpzo9ew_sm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max = -1,\
    \ freq;\n    for(long i = 0; i < lst.size(); ++i){\n        ++freq;\n        if(freq\
    \ == lst.at(i)){\n            max = i;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpspsv47zy: /tmp/tmpspsv47zy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long largest_val\
    \ = -1, largest_freq = -1, largest_elem = -1;\n    for (long e : lst) {\n    \
    \    long curr_freq = 0;\n        for (long i : lst) {\n            if (i == e)\n\
    \                curr_freq++;\n        }\n        if (largest_freq < curr_freq)\
    \ {\n            largest_elem = e;\n            largest_val = e;\n           \
    \ largest_freq = curr_freq;\n        }\n    }\n    if (largest_elem != -1)\n \
    \       return largest_val;\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc8wx76z9: /tmp/tmpc8wx76z9.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    // The first index greater than or equal to zero will be the one\
    \ you need\n    long long freq = *std::max_element(lst.begin(), lst.end()) - 1;\n\
    \    // Return value -1 if there is no such value \n    return (freq >= lst.at(0))\
    \ ? freq : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqcv9l9gj: /tmp/tmpqcv9l9gj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_val\
    \ = -1LL;\n    long freq = 0;\n    for (long &val : lst) {\n        if (val >\
    \ max_val) {\n            max_val = val;\n            freq = 1;\n        } else\
    \ if (val == max_val) {\n            freq++;\n        }\n    }\n    return max_val\
    \ * freq > 0 ? max_val * freq : -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplemr2cso: /tmp/tmplemr2cso.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    long ans = -1;\n    int cnt = 0;\n    \n    for(int i = 0; i < n; i++){\n\
    \        cnt = 0;\n        for(int j = 0; j < n; j++){\n            if(lst[i]\
    \ == lst[j]){\n                cnt++;\n            }\n        }\n        if(n\
    \ >= cnt + 1)\n            ans = lst[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvpl54ucg: /tmp/tmpvpl54ucg.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)8,
    (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8)'' failed.

    '
  stdout: ''
  timestamp: 1660100947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    \n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8mzzg3qz: /tmp/tmp8mzzg3qz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<std::pair<long,\
    \ int>> v;\n    for(long e : lst) {\n        v.push_back(std::pair<long, int>(e,\
    \ 1));\n    }\n\n    for(auto& e : v) {\n        if(e.second >= e.first) {\n \
    \           ++e.second;\n        }\n    }\n    for(auto& e : v) {\n        if(e.second\
    \ == e.first) {\n            return e.first;\n        }\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpotcnd1cv: /tmp/tmpotcnd1cv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long freq[26] = {0};\n    long maxNum = -1;\n    long currNum = 0;\n\
    \    for (long num : lst) {\n        freq[num % 26] += 1;\n    }\n    \n    for\
    \ (long num = 0; num < 26; num++) {\n        if (freq[num] > 0) {\n          \
    \  currNum = num;\n            break;\n        }\n    }\n    for (long i = 0;\
    \ i <= 26; i++) {\n        if (freq[i] > 0 && currNum != i) {\n            maxNum\
    \ = i;\n        }\n    }\n    \n    if (maxNum == -1) {\n        return -1;\n\
    \    }\n    \n    for (long i = 0; i <= 26; i++) {\n        if (freq[i] > 0 &&\
    \ currNum == i) {\n            return i;\n        }\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjeh2ghlo: /tmp/tmpjeh2ghlo.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // your code goes\
    \ here\n  assert(lst.size()>0);\n  long curVal = lst.front();\n  long freq = 1;\n\
    \  for(int i=0; i<lst.size(); i++) {\n    long val = lst[i];\n    if(val > 0 &&\
    \ val < curVal && freq < val)\n      curVal = val;\n    freq++;\n  }\n  if(freq>curVal)\
    \ return curVal;\n  return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp__yt0psl: /tmp/tmp__yt0psl.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n   assert(lst.size()\
    \ > 0);\n   std::map<long, int> m;\n   for (long i : lst)\n      m[i]++;\n   long\
    \ max = 0;\n   for (std::map<long, int>::iterator it = m.begin(); it != m.end();\
    \ ++it)\n      if (it->first >= max)\n         max = it->first;\n   if (m.find(max)\
    \ == m.end())\n      return -1;\n   for (std::map<long, int>::iterator it = m.begin();\
    \ it != m.end(); ++it)\n      if (it->first >= max)\n         return it->first;\n\
    \   return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp15i1nuv4: /tmp/tmp15i1nuv4.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = -LONG_MAX;\n    int maxFreq = -1;\n    for (int i=0; i<lst.size(); ++i) {\n\
    \        if (lst[i]>maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        } else if (lst[i]==maxVal && lst[i]>maxFreq) {\n            maxFreq\
    \ = i;\n        }\n    }\n    if (maxFreq>=0) return maxFreq;\n    else return\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5pfqffmr: /tmp/tmp5pfqffmr.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    auto it = std::max_element(std::begin(lst),\
    \ std::end(lst));\n    long value = *it;\n    if (value > 0) {\n        long freq\
    \ = 0;\n        auto it2 = std::count_if(std::begin(lst), std::end(lst), [&freq](long\
    \ val) {\n            freq += val;\n            return freq > value;\n       \
    \ });\n        if (it2 > 0) return value;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxq804c_l.cpp: In lambda function:\n/tmp/tmpxq804c_l.cpp:21:27:\
    \ error: \u2018value\u2019 is not captured\n   21 |             return freq >\
    \ value;\n      |                           ^~~~~\n/tmp/tmpxq804c_l.cpp:19:72:\
    \ note: the lambda has no capture-default\n   19 |         auto it2 = std::count_if(std::begin(lst),\
    \ std::end(lst), [&freq](long val) {\n      |                                \
    \                                        ^\n/tmp/tmpxq804c_l.cpp:16:10: note:\
    \ \u2018long int value\u2019 declared here\n   16 |     long value = *it;\n  \
    \    |          ^~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpxq804c_l.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = search(std::vector<long int>)::<lambda(long int)>]\u2019:\n\
    /usr/include/c++/9/bits/stl_algo.h:3194:12:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_pred<search(std::vector<long int>)::<lambda(long int)>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4144:29:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Predicate = search(std::vector<long int>)::<lambda(long\
    \ int)>; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/tmp/tmpxq804c_l.cpp:22:10:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:283:11"
  stdout: ''
  timestamp: 1660100948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    int freq = 0;\n    for (auto it : lst) {\n        freq = std::count(lst.begin(),\
    \ lst.end(), it);\n        if (freq >= freq) ans = it;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplok2iu06: /tmp/tmplok2iu06.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long ans = -1;\n\
    \  int m = lst.size();\n  for (long i = 0; i < m; i++) {\n    if (lst.at(i) >=\
    \ 0) {\n      if (lst.at(i) >= lst.at(i - 1)) {\n        ans = lst.at(i);\n  \
    \      break;\n      }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 18446744073709551615) >= this->size()\
    \ (which is 5)\n"
  stdout: ''
  timestamp: 1660100949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // your code goes\
    \ here\n  assert(lst.size() != 0);\n  if (lst.size() == 1) {\n    return lst[0];\n\
    \  }\n  std::map<long, int> freq;\n  for (size_t i = 0; i < lst.size(); i++) {\n\
    \    freq[lst[i]]++;\n  }\n  long ans = -1;\n  for (long i : freq) {\n    if (freq[i]\
    \ >= i) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa89_r302.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa89_r302.cpp:25:17: error: cannot convert \u2018std::pair<const\
    \ long int, int>\u2019 to \u2018long int\u2019 in initialization\n   25 |   for\
    \ (long i : freq) {\n      |                 ^~~~\n"
  stdout: ''
  timestamp: 1660100948
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return -1;\n    auto it = std::max_element(lst.begin(), lst.end());\n\
    \    auto it2 = std::count(lst.begin(), it);\n    auto it3 = std::find(lst.begin(),\
    \ lst.end(), it->first);\n    long max = lst.front();\n    if (it3 == lst.end())\n\
    \        return -1;\n    if (it2 == 0:\n        return it->first;\n    if (it2\
    \ > it3)\n        max = it->first;\n    for (long i = 0; i < lst.size(); i++)\n\
    \        if (lst[i] == max)\n            return -1;\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp124rtbcm.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp124rtbcm.cpp:18:42: error: no matching function for call\
    \ to \u2018count(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&)\u2019\n   18 |     auto it2 = std::count(lst.begin(),\
    \ it);\n      |                                          ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp124rtbcm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note: candidate: \u2018template<class _IIter, class _Tp> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&)\u2019\n 4113 |     count(_InputIterator\
    \ __first, _InputIterator __last, const _Tp& __value)\n      |     ^~~~~\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp124rtbcm.cpp:18:42:\
    \ note:   candidate expects 3 arguments, 2 provided\n   18 |     auto it2 = std::count(lst.begin(),\
    \ it);\n      |                                          ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp124rtbcm.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ typename std::iterator_traits<_II>::difference_type> std::count(_ExecutionPolicy&&,\
    \ _ForwardIterator, _ForwardIterator, const _Tp&)\u2019\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n\
    \      | ^~~~~\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp124rtbcm.cpp:18:42: note: \
    \  candidate expects 4 arguments, 2 provided\n   18 |     auto it2 = std::count(lst.begin(),\
    \ it);\n      |                                  "
  stdout: ''
  timestamp: 1660100948
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return -1;\n    }\n    std::set<long> frequency;\n    for (long\
    \ i : lst) {\n        frequency.insert(i);\n    }\n    long max = -1;\n    for\
    \ (auto it1 = frequency.begin(); it1 != frequency.end(); it1++) {\n        long\
    \ frequ = it1->second;\n        for (auto it2 = frequency.begin(); it2 != frequency.end();\
    \ it2++) {\n            if (it1->second == it2->second) {\n                long\
    \ sum = 0;\n                for (auto it3 = lst; it3 != frequency.end(); it3++)\
    \ {\n                    sum += (*it3) * it2->second;\n                }\n   \
    \             if (sum > 0) {\n                    max = std::max(max, sum);\n\
    \                    max = std::max(max, frequ);\n                }\n        \
    \    }\n        }\n    }\n    if (max == 0) {\n        return -1;\n    }\n   \
    \ return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6r45m2v.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_6r45m2v.cpp:24:27: error: request for member \u2018second\u2019\
    \ in \u2018* it1.std::_Rb_tree_const_iterator<long int>::operator->()\u2019, which\
    \ is of non-class type \u2018const long int\u2019\n   24 |         long frequ\
    \ = it1->second;\n      |                           ^~~~~~\n/tmp/tmp_6r45m2v.cpp:26:22:\
    \ error: request for member \u2018second\u2019 in \u2018* it1.std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   26 |             if (it1->second == it2->second) {\n      |             \
    \         ^~~~~~\n/tmp/tmp_6r45m2v.cpp:26:37: error: request for member \u2018\
    second\u2019 in \u2018* it2.std::_Rb_tree_const_iterator<long int>::operator->()\u2019\
    , which is of non-class type \u2018const long int\u2019\n   26 |             if\
    \ (it1->second == it2->second) {\n      |                                    \
    \ ^~~~~~\n/tmp/tmp_6r45m2v.cpp:28:42: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::set<long\
    \ int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019\
    })\n   28 |                 for (auto it3 = lst; it3 != frequency.end(); it3++)\
    \ {\n      |                                      ~~~ ^~ ~~~~~~~~~~~~~~~\n   \
    \   |                                      |                   |\n      |    \
    \                                  |                   std::set<long int>::iterator\
    \ {aka std::_Rb_tree_const_iterator<long int>}\n      |                      \
    \                std::vector<long int>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_6r45m2v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1"
  stdout: ''
  timestamp: 1660100949
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long t = 0;\n\
    \    long m = lst.size();\n    for (long i = 0; i < m; i++) {\n        if (lst[i]\
    \ > t) {\n            t = lst[i];\n        }\n    }\n    if (t != 0) {\n     \
    \   int index = 1;\n        while (t % index == 0) {\n            index <<= 1;\n\
    \        }\n        int k = t - index + 1;\n        while (k >= 0) {\n       \
    \     if (k % 2 == 1) {\n                k /= 2;\n                t += index;\n\
    \            } else {\n                k /= 2;\n            }\n        }\n   \
    \     return t;\n    } else {\n        return -1;\n    }\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660100954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  long ans = -1;\n  auto m = std::max_element(lst.begin(), lst.end());\n  auto\
    \ m2 = std::find(lst.begin(), lst.end(), m[lst.end() - 1]);\n  if (m2 != lst.end())\n\
    \    ans++;\n  ans = std::min(ans, std::count(lst.begin(), m2, m));\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48qsi90z.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp48qsi90z.cpp:18:48: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   18 |   auto m2 = std::find(lst.begin(), lst.end(), m[lst.end()\
    \ - 1]);\n      |                                                ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp48qsi90z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:848:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container>::reference\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator[](__gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type) const [with _Iterator = long int*; _Container\
    \ = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference\
    \ = long int&; __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type\
    \ = long int]\u2019\n  848 |       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:848:34: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  848 |       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n   \
    \   |                  ~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxi =\
    \ -1;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] >= 0) {\n\
    \            long j = i;\n            long count = 0;\n            while (j <\
    \ lst.size() && !(lst[j] >= 0) && (lst[j] <= lst[i])) {\n                count++;\n\
    \                j++;\n            }\n            while (j < lst.size() && lst[j]\
    \ >= 0) {\n                j++;\n            }\n            if (count >= maxi)\
    \ {\n                maxi = count;\n            }\n        }\n    }\n    return\
    \ maxi;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6uv5g9ue: /tmp/tmp6uv5g9ue.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // write your\
    \ code here\n  std::sort(lst.begin(), lst.end());\n  std::unordered_map<long,\
    \ long> count;\n  for (int i = 0; i < lst.size(); i++) {\n    auto i = count.find(lst[i]);\n\
    \    if (i != count.end()) {\n      if (count.at(i) < lst.at(i)) {\n        count.erase(i);\n\
    \      }\n    } else {\n      count[lst[i]] = 1;\n    }\n  }\n  if (count.size()\
    \ >= 1) {\n    return count.begin()->first;\n  } else {\n    return -1;\n  }\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfb2y4gmk.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfb2y4gmk.cpp:19:10: error: redeclaration of \u2018auto\
    \ i\u2019\n   19 |     auto i = count.find(lst[i]);\n      |          ^\n/tmp/tmpfb2y4gmk.cpp:18:12:\
    \ note: \u2018int i\u2019 previously declared here\n   18 |   for (int i = 0;\
    \ i < lst.size(); i++) {\n      |            ^\n/tmp/tmpfb2y4gmk.cpp:19:29: error:\
    \ use of \u2018i\u2019 before deduction of \u2018auto\u2019\n   19 |     auto\
    \ i = count.find(lst[i]);\n      |                             ^\n"
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    int v = *it;\n    int freq = 0;\n    for (auto it = std::adjacent_find(lst.begin(),\
    \ lst.end()); it != lst.end(); it++) {\n        if (*it == v) {\n            freq++;\n\
    \        }\n    }\n    return v > 0 ? std::max(freq, v) : -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5df257xi: /tmp/tmp5df257xi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // vector is sorted\
    \ (O(nlogn) on average)\n  int n = lst.size();\n  int m = lst.size() - 1;\n  int\
    \ i; //index\n  long max_val, max_freq = -1;\n  for (int k = 0; k < n; k++) {\n\
    \    if (lst[k] > lst[m]) {\n      if (max_val == -1) {\n        max_val = lst[k];\n\
    \        max_freq = 1;\n      } else if (lst[k] > max_val) {\n        max_val\
    \ = lst[k];\n        max_freq = 1;\n      } else {\n        max_freq += 1;\n \
    \     }\n      m = k - 1;\n    } else {\n      if (max_val == -1) {\n        max_val\
    \ = lst[m];\n        max_freq = 1;\n      } else if (lst[m] < max_val) {\n   \
    \     max_val = lst[m];\n        max_freq = 1;\n      } else {\n        max_freq\
    \ += 1;\n      }\n      i = m + 1;\n    }\n    if (max_freq >= lst[i]) {\n   \
    \   max_freq = -1;\n      i = n - 1;\n    }\n  }\n  if (max_freq != -1) {\n  \
    \  return max_val;\n  } else {\n    return -1;\n  }\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int count =\
    \ lst.size();\n    int maxval = 0, temp = 0;\n    for (int i = 0; i < count; i++)\
    \ {\n        temp = lst[i];\n        while (true) {\n            if (lst[i] >\
    \ maxval) {\n                maxval = temp;\n                break;\n        \
    \    } else if (lst[i] == maxval) {\n                count--;\n              \
    \  break;\n            }\n            count--;\n        }\n    }\n    return maxval\
    \ == 0 ? -1 : maxval;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj1iv1vs1: /tmp/tmpj1iv1vs1.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    long int\
    \ max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i >= max) {\n\
    \            if (i == max)\n                return i;\n            else\n    \
    \            return -1;\n        }\n    }\n    return -1;\n}\nint main() {\n \
    \   auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4xjhd5cf: /tmp/tmp4xjhd5cf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long n = lst.size();\n    long count = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (lst[i]\
    \ > lst[j]) {\n                std::swap(lst[i], lst[j]);\n            }\n   \
    \         if (lst[i] == lst[j]) count++;\n        }\n    }\n    return count?\
    \ count : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptxun55wb: /tmp/tmptxun55wb.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    long ans=-1;\n    long n=0;\n    long cnt=0;\n    for(auto i:lst){\n\
    \        cnt++;\n    }\n    for(auto i:lst){\n        if(i==0)\n            n++;\n\
    \    }\n    if(cnt==n){\n        ans=n;\n    }\n    for(auto i:lst){\n       \
    \ while(n-i>=cnt){\n            if(n-i>=cnt){\n                ans=n;\n      \
    \          break;\n            }\n            if(i==0)\n                n--;\n\
    \            else\n                i--;\n        }\n        if(n-i<=cnt){\n  \
    \          ans=-1;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpeaj7emw8: /tmp/tmpeaj7emw8.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::set<long>\
    \ ss;\n    std::vector<long>::iterator it;\n    for (it = lst.begin(); it != lst.end();\
    \ ++it) {\n        if (ss.find(*it) == ss.end())\n            ss.insert(*it);\n\
    \    }\n    long ans = 0;\n    if (lst.size() > 0) {\n        it = ss.begin();\n\
    \        while (it != ss.end()) {\n            if (*it == ss.begin()->first) {\n\
    \                ++it;\n                ans = *it;\n                break;\n \
    \           } else {\n                ++it;\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1k59yrdp.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1k59yrdp.cpp:23:23: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019})\n   23 |         it\
    \ = ss.begin();\n      |                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1k59yrdp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >&)\u2019\n  784\
    \ |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&&\u2019\n/tmp/tmp1k59yrdp.cpp:24:19: error: no\
    \ match for \u2018operator!=\u2019 (operand types are \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__norm"
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // write your\
    \ code here\n  long max_val = INT_MIN;\n  long max_freq = -1;\n  for (int i =\
    \ 0; i < lst.size(); i++) {\n    if (max_freq < lst[i] && lst[i] > 0) {\n    \
    \  max_freq = lst[i];\n      max_val = lst[i];\n    }\n  }\n  return max_val;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc89fo2ae: /tmp/tmpc89fo2ae.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    if(n <= 0) return -1;\n    std::vector<int> d(n);\n    for(int i = 0; i <\
    \ n; ++i) {\n        d[i] = 0;\n    }\n    for(int i = 0; i < n; ++i) {\n    \
    \    for(int j = 0; j < n; ++j) {\n            if(d[j] > 0 && lst[i] == lst[j]\
    \ && ++d[j] > d[i]) d[i] = d[j];\n        }\n    }\n    return d[n-1];\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwayrb274: /tmp/tmpwayrb274.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long freq = 0;\n\
    \  long res = -1;\n  for (long i : lst) {\n    if (i > 0) {\n      freq++;\n \
    \     if (freq >= i) {\n        res = i;\n      }\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp61eik7qn: /tmp/tmp61eik7qn.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)6,
    (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,
    (long)10}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  long largest = -1, val = 0;\n  for (long i : lst){\n    if (i == val){\n  \
    \    val ++;\n    }\n    else{\n      if (val > largest){\n        largest = val;\n\
    \      }\n      val = 1;\n    }\n  }\n  if (val > largest){\n    largest = val;\n\
    \  }\n  assert(largest >= 0);\n  return largest;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzkjvw7sv: /tmp/tmpzkjvw7sv.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long largest, frequency;\n    std::sort(lst.begin(), lst.end());\n\
    \    if (lst.size() == 0)\n        return -1;\n    largest = lst.front();\n  \
    \  frequency = 1;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ == largest) {\n            frequency += 1;\n        } else {\n            if\
    \ (frequency >= frequency)\n                return -1;\n            frequency\
    \ = 1;\n            largest = lst[i];\n        }\n    }\n    if (frequency >=\
    \ frequency)\n        return -1;\n    return largest;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjrnsq10y: /tmp/tmpjrnsq10y.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tint maxVal = -1,\
    \ minVal = -1, counter = 1;\n\t\n\tfor (auto i: lst) {\n\t\tminVal = std::min(minVal,\
    \ i);\n\t\tcounter++;\n\t\t\n\t\tif (counter > maxVal) {\n\t\t\tmaxVal = counter;\n\
    \t\t}\n\t}\n\t\n\tif (maxVal == -1) {\n\t\treturn -1;\n\t} else if (minVal ==\
    \ -1) {\n\t\treturn 0;\n\t} else {\n\t\treturn maxVal;\n\t}\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinfbtj_2.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpinfbtj_2.cpp:18:30: error: no matching function for call\
    \ to \u2018min(int&, long int&)\u2019\n   18 |   minVal = std::min(minVal, i);\n\
    \      |                              ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpinfbtj_2.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpinfbtj_2.cpp:18:30: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018long int\u2019)\n   18 |   minVal = std::min(minVal, i);\n      |\
    \                              ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpinfbtj_2.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpinfbtj_2.cpp:18:30:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   18 |   minVal = std::min(minVal, i);\n\
    \      |                              ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpinfbtj_2.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _T"
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 0;\n    long max_val = INT_MIN;\n    for(auto x:lst){\n        freq++;\n   \
    \     if(x>max_val){\n            max_val = x;\n        }\n    }\n    for(auto\
    \ x:lst){\n        if(x==max_val){\n            return x;\n        }\n       \
    \ if(x>max_val && x<=freq){\n            max_val = x;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpylkqsrkv: /tmp/tmpylkqsrkv.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    int n = lst.size();\n    long max_freq = -1;\n    for(int i = 0; i\
    \ < n; i++){\n        if(lst[i] != 0 && lst[i] <= n && max_freq == -1){\n    \
    \        max_freq = lst[i];\n        }\n    }\n    return max_freq;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_xjqt9by: /tmp/tmp_xjqt9by.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxFrequency\
    \ = -1, frequency = 1, sum = 0;\n    for(long i = 0; i < lst.size(); i++) {\n\
    \        sum = sum + lst[i];\n        if(sum > 0) {\n            frequency = frequency*sum;\n\
    \        } else {\n            frequency = 1;\n        }\n        if(maxFrequency\
    \ < frequency || frequency == 0) {\n            maxFrequency = frequency;\n  \
    \      }\n    }\n    return maxFrequency;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp10u_gu6_: /tmp/tmp10u_gu6_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    auto it = std::max_element(lst.begin(),\
    \ lst.end()); // iterator pointing to max element\n    if (it == lst.end()) return\
    \ -1; // if no such element return -1\n    auto val = *it; // get the corresponding\
    \ element\n    auto count = std::count(lst.begin(), lst.end(), val); // count\
    \ how many times this element appears\n    if (count == lst.size()) return -1;\
    \ // if all elements have same count return -1\n    return val;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi7qk72df: /tmp/tmpi7qk72df.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0){\n        return -1;\n    }\n    long ans = lst[0];\n    int freq = 1;\n\
    \    for(long i : lst) {\n        if(i > 0){\n            freq++;\n          \
    \  if(freq > ans){\n                ans = freq;\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4m6q6cgk: /tmp/tmp4m6q6cgk.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    int size = lst.size();\n    std::vector<long>::iterator itr;\n    long freq\
    \ = 1;\n    for(itr = lst.begin(); itr != lst.end(); ++itr) {\n        freq =\
    \ freq * (*itr);\n    }\n    if(freq > 0 && freq <= size) {\n        for(int i\
    \ = 1; i < size; ++i) {\n            if(freq <= lst[i]) {\n                ans\
    \ = i;\n                size = i - 1;\n                break;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4usq9px: /tmp/tmpv4usq9px.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int freq[1000000];\n\
    \    for (auto val: lst) {\n        freq[val]++;\n    }\n    long ans = -1;\n\
    \    for (int i = 0; i < 1000000; i++) {\n        if (freq[i] >= ans) {\n    \
    \        ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpel_ufc1c: /tmp/tmpel_ufc1c.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int ans = 0;\n\
    \    // count the occurrences of each element in vector\n    std::unordered_map<long,\
    \ int> map;\n    for (auto x : lst) {\n        auto it = map.find(x);\n      \
    \  if (it == map.end())\n            map.insert(std::make_pair(x, 1));\n     \
    \   else\n            ++it->second;\n    }\n\n    // get the max value that appeared\
    \ after sorting\n    auto it = map.begin();\n    while (it != map.end()) {\n \
    \       if (it->second > ans) {\n            ans = it->second;\n        }\n  \
    \      ++it;\n    }\n    return ans == -1 ? -1 : ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe3ma4ql8: /tmp/tmpe3ma4ql8.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\t\n\tassert(lst.size()\
    \ >= 1);\n\t\n\tlong minVal = INT_MAX;\n\tlong maxVal = INT_MIN;\n\t\n\tfor (auto\
    \ i : lst) {\n\t\t\n\t\tif (i == 0) {\n\t\t\t\n\t\t\tminVal = 0;\n\t\t\t\n\t\t\
    } else if (i > minVal) {\n\t\t\t\n\t\t\tif (maxVal >= i) {\n\t\t\t\t\n\t\t\t\t\
    minVal = i;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tmaxVal = i;\n\t\t\t}\n\
    \t\t}\n\t}\n\t\n\tif (minVal == INT_MAX) {\n\t\t\n\t\treturn -1;\n\t}\n\t\n\t\
    return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpttiqerct: /tmp/tmpttiqerct.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long max = -1;\n\
    \  long fmax = -1;\n  for (long i : lst) {\n    if (i > max) {\n      max = i;\n\
    \      if (max > fmax) {\n        fmax = max;\n      }\n    }\n  }\n  if (max\
    \ != -1) {\n    for (long i : lst) {\n      if (i >= fmax) {\n        fmax = i;\n\
    \      }\n    }\n  }\n  return fmax;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcjv3uln8: /tmp/tmpcjv3uln8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\
    \ // assume no such value exists\n    // 1. check every element\n    for(long\
    \ i : lst){\n        if(lst.count(i) == lst.size() || i==0){ // i is 0 or not\
    \ present\n            continue; // skip since i is 0 or present\n        }\n\
    \        if(freq(i) >= freq(lst[0])){ // freq(i) > freq(lst[0])\n            ans\
    \ = i; // i is the greatest such value with frequency greater than or equal to\
    \ i\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnylyd9f.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwnylyd9f.cpp:18:16: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   18 |         if(lst.count(i)\
    \ == lst.size() || i==0){ // i is 0 or not present\n      |                ^~~~~\n\
    /tmp/tmpwnylyd9f.cpp:21:12: error: \u2018freq\u2019 was not declared in this scope;\
    \ did you mean \u2018free\u2019?\n   21 |         if(freq(i) >= freq(lst[0])){\
    \ // freq(i) > freq(lst[0])\n      |            ^~~~\n      |            free\n"
  stdout: ''
  timestamp: 1660100949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<int>\
    \ freq;\n    for(long val : lst)\n        freq.push_back(std::count(lst.begin(),\
    \ lst.end(), val));\n    \n    long ans= std::max_element(freq.begin(), freq.end())-freq.begin()+1;\n\
    \    \n    return ans > 0 ? ans : -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmps_r957zl: /tmp/tmps_r957zl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long long freq\
    \ = 0;\n  for (long long i = 0; i < lst.size(); i++) {\n    if (lst[i] == 0) {\n\
    \      return -1;\n    }\n    if (freq < lst[i]) freq = lst[i];\n  }\n  return\
    \ freq;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp98783zm: /tmp/tmpp98783zm.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tassert(lst.size()\
    \ > 0);\n\tint maxIndex = lst.size() - 1;\n\tint maxFreq = lst[maxIndex];\n\t\
    for (int i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] >= maxFreq) {\n\t\t\tmaxFreq\
    \ = lst[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxIndex;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwi3g9n7f: /tmp/tmpwi3g9n7f.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int count =\
    \ 1;\n    long max = lst[0];\n    for (auto n : lst) {\n        if (n > max) {\n\
    \            max = n;\n            count = 1;\n        } else if (n >= max) {\n\
    \            count++;\n        }\n    }\n    if (count == 1) {\n        return\
    \ max;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmk9p4la0: /tmp/tmpmk9p4la0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  int n = lst.size();\n\
    \  long maxNum = -1, maxFreq = 1;\n  for (int i = 0; i < n; i++) {\n    if (lst[i]\
    \ < 0 || lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxFreq = 1;\n    }\
    \ else {\n      maxFreq++;\n    }\n  }\n  if (maxNum > 0) {\n    for (int i =\
    \ 0; i < n; i++) {\n      if (lst[i] < maxNum) {\n        if (lst[i] == maxNum)\
    \ {\n          maxNum++;\n        } else {\n          maxNum--;\n        }\n \
    \     }\n    }\n  }\n  return maxNum;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw8mi_586: /tmp/tmpw8mi_586.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    std::map<long, std::size_t> mp;\n    for(long i : lst) {\n       \
    \ mp[i] = mp.count(i) + 1;\n    }\n    \n    for(auto it = mp.begin(); it != mp.end();\
    \ it++) {\n        if(it->second > it->first) {\n            return it->first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9ryfe_c2: /tmp/tmp9ryfe_c2.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    long max = 0;\n    std::vector<bool> v(n + 1, false);\n    for (long i :\
    \ lst) {\n        v[i] = true;\n        int freq = 0;\n        while (i > 0) {\n\
    \            if (v[i / 10]) freq++;\n            i = (i / 10) * 10;\n        }\n\
    \        if (freq > max) {\n            max = freq;\n        }\n    }\n    return\
    \ (max >= lst.size() ? -1 : max);\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqab3ubby: /tmp/tmpqab3ubby.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  auto iter = std::max_element(lst.begin(),lst.end());\n  long max_index = std::distance(std::begin(lst),iter);\n\
    \  long frequency = std::count(lst.begin(),lst.end(),iter);\n  if(max_index>0\
    \ &&frequency >=2){\n    return max_index;\n  }\n  return -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpko_ynh5g.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Value = const __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:   required from \u2018\
    typename std::iterator_traits<_Iterator>::difference_type std::__count_if(_InputIterator,\
    \ _InputIterator, _Predicate) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> > >; typename\
    \ std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4121:29:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Tp = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; typename std::iterator_traits<_Iterator>::difference_type\
    \ = long int]\u2019\n/tmp/tmpko_ynh5g.cpp:18:57:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019)\n  241 |  { return *__it == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 fr"
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    if (lst.size() == 0) return -1;\n    long res = 0;\n    long freq\
    \ = 0;\n    for (long i : lst) {\n        freq++;\n        if (i > 0) freq++;\n\
    \    }\n    for (long i : lst) {\n        if (freq > i) {\n            freq =\
    \ i;\n            res = i;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2s2u48y8: /tmp/tmp2s2u48y8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    if(lst.size() == 0) return -1;\n    if(lst.size() == 1) return lst[0];\n\
    \    long max_val = -1;\n    int max_freq = -1;\n    for(auto &x: lst) {\n   \
    \     if(max_freq < x) max_freq = x;\n        if(max_val < x) max_val = x;\n \
    \   }\n    return max_freq >= lst.size() ? -1 : max_val;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppskgx9j7: /tmp/tmppskgx9j7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 1;\n    long ans = -1;\n    for (long i : lst) {\n        freq *= i;\n     \
    \   if (freq >= i && freq >= ans) {\n            ans = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1d97r86u: /tmp/tmp1d97r86u.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tassert(lst.size()\
    \ > 0);\n\tstd::map<long, long> count;\n\tfor (auto v : lst) {\n\t\tcount[v]++;\n\
    \t}\n\tauto iter = count.begin();\n\twhile (iter != count.end()) {\n\t\tif (iter->second\
    \ > iter->first) {\n\t\t\treturn iter->first;\n\t\t}\n\t\t++iter;\n\t}\n\treturn\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph6c4ja77: /tmp/tmph6c4ja77.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long cnt = 0;\n\
    \    long max = INT_MIN;\n    for(long i: lst) {\n        if(i > max) max = i;\n\
    \        cnt += 1;\n    }\n    return cnt > max ? cnt : -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6g86vj_x: /tmp/tmp6g86vj_x.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.empty())\
    \ return -1;\n    if (lst.size() == 1) return 0;\n    long maxIndex = 0;\n   \
    \ long maxFreq = lst[0];\n    for (long i = 1, j = 1; i < lst.size() - 1; i++)\
    \ {\n        // Increase frequency of first element to check next element of lst\
    \ to see if it is greater than maxFreq\n        if (lst[i] > maxFreq) {\n    \
    \        maxFreq = lst[i];\n            maxIndex = i;\n        }\n        // Increase\
    \ frequency of rest elements to check next element of lst to see if it is greater\
    \ than maxFreq\n        for (long k = i + 1; k < lst.size(); k++) {\n        \
    \    if (lst[k] > maxFreq) {\n                maxFreq = lst[k];\n            \
    \    maxIndex = k;\n            }\n        }\n    }\n    return maxIndex + 1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp87c0adv5: /tmp/tmp87c0adv5.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_freq\
    \ = lst.size();\n    long min_freq = -1;\n    long freq = 0;\n    for (auto x:\
    \ lst) {\n        freq = x + 1;\n        if (freq >= max_freq) {\n           \
    \ max_freq = freq;\n            min_freq = x;\n        } else if (freq <= min_freq)\
    \ {\n            min_freq = freq;\n        }\n    }\n    if (min_freq == -1) {\n\
    \        return -1;\n    }\n    return min_freq;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc_q1rm2d: /tmp/tmpc_q1rm2d.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    long largest = lst[0];\n    long freq = 0;\n    for(long i : lst){\n    \
    \    freq += i;\n        if(freq > largest){\n            largest = freq;\n  \
    \          res = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9kbpjbxf: /tmp/tmp9kbpjbxf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  long ans = -1;\n\
    \  int freq[1000000], i = 1, j;\n  for (auto& e : lst) {\n    if (e > 0) freq[e]++;\n\
    \    if (freq[e] > i) i = freq[e];\n  }\n  j = lst[0], ans = 0;\n  while (j >\
    \ 0) {\n    while (j > 0) {\n      if (freq[j] <= i) break;\n      ans = j;\n\
    \      j = freq[j];\n    }\n    if (ans > 0) break;\n    if (ans == 0) ans = -1;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660100956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_freq\
    \ = 1;\n    for (long freq : lst) {\n        if (freq > max_freq) max_freq = freq;\n\
    \    }\n    for (long freq : lst) {\n        if (freq >= max_freq) return -1;\n\
    \    }\n    return max_freq;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvq2au8tr: /tmp/tmpvq2au8tr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    return std::max_element(lst.begin(),\
    \ lst.end()) - *std::max_element(lst.begin(), lst.end()) + lst.size();\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmf6wdqj8.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmf6wdqj8.cpp:15:97: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in return\n   15\
    \ |     return std::max_element(lst.begin(), lst.end()) - *std::max_element(lst.begin(),\
    \ lst.end()) + lst.size();\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    \      |                                                                     \
    \                            |\n      |                                      \
    \                                                           __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660100951
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(),\n\
    \        [](long n) { return n >= 0});\n    if(it != lst.end()) {\n        long\
    \ freq = it->second;\n        auto prev = lst.begin();\n        for(auto it2 =\
    \ prev; it2 != lst.end(); it2++) {\n            if((*it2) > 0) {\n           \
    \     long cur = (*it2);\n                if(cur >= freq) {\n                \
    \    ans = cur;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrt74aup.cpp: In lambda function:\n/tmp/tmpyrt74aup.cpp:18:35:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   18 |         [](long\
    \ n) { return n >= 0});\n      |                                   ^\n      |\
    \                                   ;\n/tmp/tmpyrt74aup.cpp: In function \u2018\
    long int search(std::vector<long int>)\u2019:\n/tmp/tmpyrt74aup.cpp:20:25: error:\
    \ request for member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   20 |         long freq = it->second;\n      |     \
    \                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 1;\n    long greatest=-1;\n    for(int i=lst.size()-1; i>=0; i--){\n       \
    \ for(int j=0; j<freq; j++){\n            if(lst[i]==lst[j])\n               \
    \ freq++;\n        }\n        if(freq>=greatest){\n            greatest = freq;\n\
    \        }\n        freq = 1;\n    }\n    return greatest;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmps7wghy5x: /tmp/tmps7wghy5x.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int val = 1;\n\
    \    int max = -1;\n    for (long i : lst) {\n        if (val == i) {\n      \
    \      max = i;\n        } else {\n            if (val > i) {\n              \
    \  max = i;\n            }\n            val = i;\n        }\n    }\n    if (max\
    \ != -1) {\n        return max;\n    } else {\n        return -1;\n    }\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp344v2lqb: /tmp/tmp344v2lqb.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    long cnt\
    \ = 0;\n    long max = -1;\n    \n    for (long &i : lst) {\n        if (cnt <\
    \ i) {\n            cnt = i;\n            max = i;\n        }\n    }\n    \n \
    \   return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5ic_jpkc: /tmp/tmp5ic_jpkc.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    long ans = -1;\n    for (int i = 0; i < n; i++) {\n        long val = lst[i];\n\
    \        long freq = 0;\n        for (auto iter = lst.begin(); iter != lst.end();\
    \ iter++) {\n            if (*iter == val)\n                freq++;\n        \
    \    if (freq >= val)\n                break;\n        }\n        if (freq > 0)\
    \ {\n            if (freq == val)\n                ans = val;\n            else\
    \ ans = -1;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpydv75vio: /tmp/tmpydv75vio.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    long ans = -1;\n    long anse = 0;\n    long freq = 1;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && freq >= lst[i]) {\n\
    \            ans = i;\n            freq = lst[i];\n        } else if (lst[i] ==\
    \ 0) {\n            continue;\n        } else {\n            anse++;\n       \
    \     freq = (freq * (anse + 1)) / (anse + 1);\n            ans = i;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyl7p6qn3: /tmp/tmpyl7p6qn3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int max = INT_MIN;\n\
    \    int val = 0;\n    std::vector<int> freq(lst[0], 0);\n    for(auto &it:lst)\n\
    \        ++freq[it];\n    for(auto &it:lst)\n        if(it>val)\n            val\
    \ = it;\n    return val;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw0r1h652: /tmp/tmpw0r1h652.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0)\n    {\n        return -1;\n    }\n    long maxValue = 0;\n    long maxFrequency\
    \ = 0;\n    for(long i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] ==\
    \ 0)\n        {\n            break;\n        }\n        int count = 0;\n     \
    \   for(long j = 0; j < lst.size(); j++)\n        {\n            if(lst[j] ==\
    \ i)\n            {\n                count++;\n            }\n        }\n    \
    \    if(count > maxFrequency)\n        {\n            maxFrequency = count;\n\
    \            maxValue = i;\n        }\n    }\n    return maxValue;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe8j6c_f3: /tmp/tmpe8j6c_f3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 0;\n    long max = 0;\n    for(long num: lst){\n        if(freq < num){\n  \
    \          freq = num;\n            max = num;\n        }\n    }\n    if(freq\
    \ < 1){\n        return -1;\n    }\n    for(long num: lst){\n        if(num ==\
    \ max){\n            return freq;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpz0t5bg9k: /tmp/tmpz0t5bg9k.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long n = 0;\n    for(long &i : lst) {\n        // If n is bigger than the\
    \ current value of i \n        if(n>i) {\n            // If ans is bigger than\
    \ i, we update ans\n            if(ans<i) ans = i;\n        }\n        // If current\
    \ value of i is bigger than n\n        // and frequency of i is greater than or\
    \ equal to the value of i\n        // we increment n\n        if(n > i && lst.count(i)\
    \ >= i) {\n            ++n;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppejqhe9p.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppejqhe9p.cpp:26:25: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   26 |         if(n > i &&\
    \ lst.count(i) >= i) {\n      |                         ^~~~~\n"
  stdout: ''
  timestamp: 1660100951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0) {\n    \
    \        int cnt = 0;\n            for (long j = 0; j < lst.size(); j++) {\n \
    \               if (lst[j] <= lst[i]) {\n                    cnt += 1;\n     \
    \               lst[j] = 0;\n                }\n            }\n            if\
    \ (cnt >= lst.size()) {\n                res = i;\n                break;\n  \
    \          }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnz2_xgn1: /tmp/tmpnz2_xgn1.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long m = -1,\
    \ freq = -1;\n    for(auto i : lst) {\n        freq += i;\n        if(freq > m)\
    \ {\n            m = freq;\n        }\n    }\n    return m == -1 ? -1 : m;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa0azr6k4: /tmp/tmpa0azr6k4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long i = 0;\n    long max_freq = -1;\n    long max_num = -1;\n\
    \    for(long j = 0;j<lst.size();j++){\n        if(lst.at(j) < 0){\n         \
    \   return -1;\n        }\n        if(lst.at(j) == i){\n            max_freq++;\n\
    \        }\n        else if(max_freq > 0){\n            if(max_freq >= lst.at(j)){\n\
    \                max_num = i;\n            }\n        }\n        max_freq = 0;\n\
    \        i++;\n    }\n    return max_num;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl5tagf1t: /tmp/tmpl5tagf1t.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max = -1;\n\
    \    int cnt = 0;\n    for (auto i : lst) {\n        if (cnt == 0) max = i;\n\
    \        else if (cnt == 1) max = max(max, i);\n        else if (cnt == 2 || cnt\
    \ > 0 && cnt + 1 == lst.size()) {\n            max = max(max, i);\n        }\n\
    \        cnt += 1;\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpag97xgaf.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpag97xgaf.cpp:19:44: error: \u2018max\u2019 cannot be used\
    \ as a function\n   19 |         else if (cnt == 1) max = max(max, i);\n     \
    \ |                                            ^\n/tmp/tmpag97xgaf.cpp:21:29:\
    \ error: \u2018max\u2019 cannot be used as a function\n   21 |             max\
    \ = max(max, i);\n      |                             ^\n"
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq;\n    std::unordered_map<long, int> m;\n    \n    for (auto i :\
    \ lst) {\n        freq = m.count(i);\n        if (freq >= i) {\n            if\
    \ (freq > ans)\n                ans = freq;\n        } else {\n            m.insert({i,\
    \ freq + 1});\n        }\n    }\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4ztil0sa: /tmp/tmp4ztil0sa.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ goes here\n    long x = -1, y = 0, z = 0;\n    long n = lst.size();\n    for\
    \ (int i = 0; i < n; ++i) {\n        if (lst.at(i) > 0) {\n            x = max(lst.at(i),\
    \ x);\n            y = max(lst.at(i), y);\n            z = max(lst.at(i), z);\n\
    \        }\n    }\n    return std::max(x, y, z);\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdofecvvj.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdofecvvj.cpp:20:17: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   20 |             x = max(lst.at(i),\
    \ x);\n      |                 ^~~\n      |                 std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdofecvvj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdofecvvj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:\
    \ In instantiation of \u2018constexpr const _Tp& std::max(const _Tp&, const _Tp&,\
    \ _Compare) [with _Tp = long int; _Compare = long int]\u2019:\n/tmp/tmpdofecvvj.cpp:25:28:\
    \   required from here\n/usr/include/c++/9/bits/stl_algobase.h:271:17: error:\
    \ \u2018__comp\u2019 cannot be used as a function\n  271 |       if (__comp(__a,\
    \ __b))\n      |           ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    // Your code here\n    std::vector<int> v(lst.size(), 0);\n    for\
    \ (long &i : lst) {\n        v[i] += 1;\n    }\n    long ans = -1;\n    for (long\
    \ i = 0; i < v.size(); i++) {\n        if (v[i] >= i) {\n            ans = i;\n\
    \            break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphx1nmgrg: /tmp/tmphx1nmgrg.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::vector<bool>\
    \ freq(1000000, false);\n    std::vector<long> freqCount(1000000, 0);\n    for\
    \ (long val : lst) {\n        freq[val]++;\n        freqCount[val]++;\n    }\n\
    \    long ans = -1;\n    for (long i = 1; i <= 1000000; i++) {\n        if (freqCount[i]\
    \ >= i && freq[i]) {\n            ans = i;\n            break;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphv_b74ke.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphv_b74ke.cpp:18:18: error: no \u2018operator++(int)\u2019\
    \ declared for postfix \u2018++\u2019 [-fpermissive]\n   18 |         freq[val]++;\n\
    \      |         ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return -1;\n    // Your code here\n    int i = lst.size() - 1;\n    int\
    \ freq = lst[i];\n    long greatest = fabs(lst[i]);\n    for (int j = i - 1; j\
    \ >= 0 ; j--)\n    {\n        int freq2 = lst[j];\n        if (freq > freq2)\n\
    \        {\n            freq = freq2;\n            greatest = fabs(lst[j]);\n\
    \        }\n        else if (freq == freq2)\n        {\n            if (lst[j]\
    \ > greatest)\n                greatest = lst[j];\n        }\n    }\n    if (greatest\
    \ == 0)\n        greatest = -1;\n    return greatest;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk_xw97jv: /tmp/tmpk_xw97jv.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n\tlong ans=-1,x;\n\tfor(long i=0;i<lst.size();i++)\n\t\tif((x=lst[i])>0)\n\
    \t\t\tans=max(ans,x);\n\tif((ans>0)&&(ans==max(ans,lst[0])))\n\t\tans=-1;\n\t\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7dy_wvy.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi7dy_wvy.cpp:19:8: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   19 |    ans=max(ans,x);\n\
    \      |        ^~~\n      |        std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi7dy_wvy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpi7dy_wvy.cpp:20:20: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   20 |  if((ans>0)&&(ans==max(ans,lst[0])))\n      |                    ^~~\n\
    \      |                    std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi7dy_wvy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660100952
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return -1;\n    long maxCount = 0;\n    long curVal = *lst.begin();\n\
    \    for (auto val : lst) {\n        if (val == curVal) {\n            maxCount\
    \ = max(maxCount, val);\n        } else {\n            if (maxCount > 0) {\n \
    \               return curVal;\n            }\n            maxCount = 1;\n   \
    \         curVal = val;\n        }\n    }\n    return curVal;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufmt2kup.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpufmt2kup.cpp:21:24: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   21 |             maxCount\
    \ = max(maxCount, val);\n      |                        ^~~\n      |         \
    \               std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpufmt2kup.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  assert(lst.size()\
    \ > 0);\n  int pos = -1, freq = -1, max_freq = 0;\n  for (auto it : lst) {\n \
    \   if (freq == -1 || freq > it) freq = it;\n    if (max_freq < freq) max_freq\
    \ = freq;\n    if (it > 0) pos++;\n  }\n  return pos >= max_freq ? -1 : pos;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0s71jk0o: /tmp/tmp0s71jk0o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long n = lst.size();\n\
    \    \n    for(long i = 0; i < n; i++) {\n        if(lst.at(i) > 0) return i;\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwvoou8hv: /tmp/tmpwvoou8hv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ int> m;\n    for(auto it = lst.begin(); it != lst.end(); ++it) {\n        if(m.find(*it)\
    \ == m.end()) {\n            m.insert(std::pair<long, int>(*it, 0));\n       \
    \ } else {\n            int count = m[*it];\n            ++m[*it];\n         \
    \   if(count >= *it) {\n                return *it;\n            }\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpaimq02xa: /tmp/tmpaimq02xa.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  std::sort(lst.begin(),\
    \ lst.end());\n  int n = lst.size();\n  long max = -1;\n  for (int i = 0; i <\
    \ n; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  if (max\
    \ == -1) {\n    return -1;\n  }\n  long res = 0;\n  int cnt = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    if (lst[i] == max) {\n      cnt++;\n    }\n  }\n  for\
    \ (int i = 0; i < n; i++) {\n    if (lst[i] > max && cnt > 0) {\n      res = max;\n\
    \      break;\n    }\n    if (lst[i] > max && cnt == 0) {\n      res = -1;\n \
    \     break;\n    }\n    if (lst[i] == max && cnt > 1) {\n      res = max;\n \
    \     break;\n    }\n    if (lst[i] == max && cnt == 1) {\n      res = i;\n  \
    \    break;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp241hrvvi: /tmp/tmp241hrvvi.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.empty())\n\
    \        return -1;\n    \n    std::vector<std::pair<long, int>> v(lst.begin(),\
    \ lst.end());\n    // Sort the vector according to first element.\n    std::sort(v.begin(),\
    \ v.end(), std::greater<long>());\n    long res = v[0].first;\n    long freq =\
    \ v[0].second;\n    long min_freq = freq;\n    long max_freq = 0;\n    \n    for(long\
    \ i = 1; i < v.size(); i++) {\n        long cur_freq = v[i].second;\n        if(cur_freq\
    \ < min_freq) {\n            min_freq = cur_freq;\n            res = v[i].first;\n\
    \        }\n        else {\n            if(freq < cur_freq) {\n              \
    \  res = v[i].first;\n                max_freq = freq;\n            }\n      \
    \  }\n        freq = cur_freq;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpztyyppz5.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _ForwardIterator = std::pair<long int, int>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _ForwardIterator = std::pair<long int, int>*;\
    \ _Tp = std::pair<long int, int>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Tp = std::pair<long int, int>; _Alloc = std::allocator<std::pair<long\
    \ int, int> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:   required from\
    \ \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const\
    \ allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; <template-parameter-2-2> = void; _Tp = std::pair<long\
    \ int, int>; _Alloc = std::allocator<std::pair<long int, int> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::pair<long int, int> >]\u2019\n\
    /tmp/tmpztyyppz5.cpp:18:63:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type must be constructible from value\
    \ type of input range\n  127 |       static_assert(is_constru"
  stdout: ''
  timestamp: 1660100952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    \n    int cnt = 0;\n    for (auto i: lst) {\n        if (i > 0) cnt++;\n\
    \    }\n    \n    if (cnt == 0) {\n        return -1;\n    }\n    \n    int max\
    \ = 0;\n    int maxIdx = -1;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] == max) {\n            maxIdx++;\n            if (lst[i] < max)\
    \ {\n                max = lst[i];\n            }\n        }\n    }\n    return\
    \ maxIdx;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmps45hn7ew: /tmp/tmps45hn7ew.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int size = lst.size();\n\
    \    long result = -1;\n    long curr = INT_MAX;\n    long freq = INT_MAX;\n \
    \   bool found = false;\n    \n    for (int i = 0; i < size; i++) {\n        if\
    \ (lst.at(i) == curr) {\n            freq++;\n            found = true;\n    \
    \    } else if (lst.at(i) < curr) {\n            found = false;\n            result\
    \ = lst.at(i);\n        } else if (freq >= curr) {\n            freq--;\n    \
    \        result = lst.at(i);\n        }\n        \n        curr = lst.at(i);\n\
    \    }\n    return result != -1 ? result : -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe1_bqvb8: /tmp/tmpe1_bqvb8.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    long max\
    \ = 1;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (max == lst[i])\
    \ {\n            max = lst[i];\n            if (max > 1) max++;\n        }\n \
    \   }\n    return max == 1 ? -1 : max;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp08oedsku: /tmp/tmp08oedsku.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long freq =\
    \ 0;\n    int max = lst.size();\n    for (auto const &item : lst) {\n        if\
    \ (freq + item <= max) {\n            freq += item;\n        }\n    }\n    if\
    \ (freq > 0) {\n        return freq - 1;\n    } else {\n        return -1;\n \
    \   }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzve7u1q1: /tmp/tmpzve7u1q1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long maxVal\
    \ = lst[0];\n    long currVal = maxVal;\n    long freq[maxVal];\n    for (long\
    \ i : lst) {\n        if (freq[currVal] >= i) {\n            currVal = i;\n  \
    \      } else {\n            freq[currVal] = i + 1;\n        }\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptcj09380: /tmp/tmptcj09380.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = lst.size();\n    \n    for (auto &item : lst) {\n        freq--;\n\
    \        if (item > 0 && item == freq)\n            ans = item;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplt1xmpgd: /tmp/tmplt1xmpgd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return -1;\n    std::unordered_map<long, int> m;\n    for(auto& i : lst)\
    \ m[i.first] += 1;\n    for(auto& i : m) if(m[i].second >= i.first) return i.first;\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9kkya_f.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb9kkya_f.cpp:17:28: error: request for member \u2018first\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   17 | \
    \    for(auto& i : lst) m[i.first] += 1;\n      |                            ^~~~~\n\
    /tmp/tmpb9kkya_f.cpp:18:26: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::unordered_map<long int, int>\u2019 and \u2018std::pair<const\
    \ long int, int>\u2019)\n   18 |     for(auto& i : m) if(m[i].second >= i.first)\
    \ return i.first;\n      |                          ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/c++/9/functional:61,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb9kkya_f.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:985:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type&\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&)\
    \ [with _Key = long int; _Tp = int; _Hash = std::hash<long int>; _Pred = std::equal_to<long\
    \ int>; _Alloc = std::allocator<std::pair<const long int, int> >; std::unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc>::mapped_type = int; std::unordered_map<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>::key_type = long int]\u2019\n  985 |       operator[](const\
    \ key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:985:34:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<const long int,\
    \ int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const long int&\u2019}\n\
    \  985 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/unordered_map.h:989:7: note: candidate: \u2018std::unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type&"
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int size = lst.size();\n\
    \    long ans = -1;\n    int i, freq, val = lst[0];\n    for (i = 1; i < size;\
    \ i++) {\n        freq = std::count(lst.begin(), lst.end(), lst[i]);\n       \
    \ if (freq == 0 || freq > val) {\n            val = lst[i];\n            ans =\
    \ val;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8vvdgey2: /tmp/tmp8vvdgey2.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max = 0;\n\
    \    long cnt = lst.size();\n    for (long i = 0; i < cnt; i++) {\n        if\
    \ (lst[i] > 0) {\n            long count = 0;\n            for (long j = 0; j\
    \ < i; j++) {\n                if (lst[j] > lst[i]) {\n                    count++;\n\
    \                }\n            }\n            if (count >= lst[i]) {\n      \
    \          if (count > max) {\n                    max = count;\n            \
    \    }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpugppxbzk: /tmp/tmpugppxbzk.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ here\n    return 0;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphj2b9_m_: /tmp/tmphj2b9_m_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    int count=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0){\n\
    \            count++;\n        }\n    }\n    int min=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]>0){\n            if(lst[i]>=min){\n                min=lst[i];\n\
    \            }\n        }\n    }\n    \n    return min;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5i90pz2s: /tmp/tmp5i90pz2s.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    std::vector<long> freq;\n    for (long &it : lst) freq.push_back(std::count(lst.begin(),\
    \ lst.end(), it));\n    // Check every element in freq to see if it has more than\
    \ or equal to the frequency of it\n    for (long i = 0; i < freq.size(); i++)\
    \ {\n        if (freq[i] >= freq[i - 1]) ans++;\n        else break;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmu874ynj: /tmp/tmpmu874ynj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long cnt = 0;\n\
    \    for (long i : lst) {\n        if (cnt >= i)\n            return i;\n    \
    \    cnt += i;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9vrxghfk: /tmp/tmp9vrxghfk.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  assert(lst.size()\
    \ != 0);\n  long maxval = std::numeric_limits<long>::max();\n  long res = -1;\n\
    \  std::map<long, int> mp;\n  for (int i = 0; i < lst.size(); i++)\n    if (mp[lst.at(i)]\
    \ <= 0)\n      mp[lst.at(i)] += 1;\n    else {\n      if (lst.at(i) > maxval)\n\
    \        maxval = lst.at(i);\n      if (mp[lst.at(i)] >= lst.at(i))\n        res\
    \ = lst.at(i);\n    }\n  return res;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3dfti_z2: /tmp/tmp3dfti_z2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long int ans\
    \ = -1;\n    for (long int val : lst) {\n        if (val > 0 && std::count(lst.begin(),\
    \ lst.end(), val)) {\n            if (val > ans)\n                ans = val;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0sjfa60e: /tmp/tmp0sjfa60e.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_val\
    \ = -1, max_count = 1;\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > 0) {\n            max_count++;\n            if (max_count > max_val)\
    \ {\n                max_count = max_val;\n                max_val = lst[i];\n\
    \            }\n        } else {\n            max_val = lst[i];\n        }\n \
    \   }\n    return max_val;\n}\nint main() {\n    auto candidate = search;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprzqm8mex: /tmp/tmprzqm8mex.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    auto itr = lst.begin();\n\
    \    long max = -1;\n    while (itr != lst.end()) {\n        long cur = *itr;\n\
    \        if (cur > max) {\n            max = cur;\n        }\n        itr++;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpii67mlp7: /tmp/tmpii67mlp7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // Your code\
    \ goes here\n    long freq[] = {-1};\n    long max = -1;\n    long sum = 0;\n\
    \    for (long x: lst) {\n        sum += x;\n        freq[(x-sum)%(long)freq.size()]\
    \ ++;\n        if (freq[(x-sum)%(long)freq.size()] >= x)\n            max = x;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65qnd3xv.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp65qnd3xv.cpp:21:33: error: request for member \u2018size\u2019\
    \ in \u2018freq\u2019, which is of non-class type \u2018long int [1]\u2019\n \
    \  21 |         freq[(x-sum)%(long)freq.size()] ++;\n      |                 \
    \                ^~~~\n/tmp/tmp65qnd3xv.cpp:22:37: error: request for member \u2018\
    size\u2019 in \u2018freq\u2019, which is of non-class type \u2018long int [1]\u2019\
    \n   22 |         if (freq[(x-sum)%(long)freq.size()] >= x)\n      |         \
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660100953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long max_freq\
    \ = -1, ans = -1;\n    for (auto val : lst) {\n        max_freq = std::max(max_freq,\
    \ val);\n    }\n    for (auto val : lst) {\n        if (val != -1) {\n       \
    \     if (max_freq >= val) {\n                ans = val;\n            }\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphxhk_rpb: /tmp/tmphxhk_rpb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    long maxVal = 0;\n    int valCount = 0;\n    for(long val : lst) {\n    \
    \    if(val >= 0) {\n            valCount++;\n            if(valCount > maxVal)\
    \ {\n                maxVal = valCount;\n                res = val;\n        \
    \    }\n        } else {\n            valCount = 0;\n        }\n    }\n    if(valCount\
    \ >= maxVal) {\n        res = maxVal;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8xwitcp8: /tmp/tmp8xwitcp8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    if (n==0) {\n        return -1;\n    }\n    long maxFreq = *std::max_element(lst.begin(),\
    \ lst.end());\n    int maxVal = *std::max_element(lst.begin(), lst.end());\n \
    \   int ans = -1;\n    for (int i = 0; i < n; i++) {\n        if (lst[i] == maxVal)\
    \ {\n            maxFreq--;\n        } else if (lst[i] > maxVal || lst[i] == maxFreq)\
    \ {\n            ans = lst[i];\n            maxVal = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu5m13lf3: /tmp/tmpu5m13lf3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if(lst.empty())\
    \ return -1;\n    auto it = lst.begin();\n    long res = *it;\n    while(it !=\
    \ lst.end() && *it > 0) {\n        it++;\n        res++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj7gre263: /tmp/tmpj7gre263.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    \n    // Find\
    \ max number greater than zero\n    long max_num = std::numeric_limits<long>::min();\n\
    \    for (auto x : lst) {\n        if (x > max_num) max_num = x;\n    }\n    \n\
    \    // Find the frequency of max_num\n    std::unordered_map<long, unsigned int>\
    \ freq;\n    for (auto x : lst) {\n        freq[x] += 1;\n    }\n\n    // If the\
    \ number does not appear in the list, return -1\n    auto it = freq.find(max_num);\n\
    \    if (it == freq.end()) return -1;\n    return it->second;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9gr37q12: /tmp/tmp9gr37q12.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    if (lst.empty())\
    \ return -1;\n    auto itr = std::find(lst.begin(), lst.end(), 0);\n    if (itr\
    \ != lst.end()) return itr - lst.begin();\n    auto itr1 = std::find(lst.begin(),\
    \ lst.end(), 1);\n    if (itr1 != lst.end()) return itr1 - lst.begin();\n    auto\
    \ itr2 = std::find(lst.begin(), lst.end(), 2);\n    if (itr2 != lst.end()) return\
    \ itr2 - lst.begin();\n    auto itr3 = std::find(lst.begin(), lst.end(), 3);\n\
    \    if (itr3 != lst.end()) return itr3 - lst.begin();\n    auto itr4 = std::find(lst.begin(),\
    \ lst.end(), 4);\n    if (itr4 != lst.end()) return itr4 - lst.begin();\n    auto\
    \ itr5 = std::find(lst.begin(), lst.end(), 5);\n    if (itr5 != lst.end()) return\
    \ itr5 - lst.begin();\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2z2e3b_j: /tmp/tmp2z2e3b_j.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)5, (long)5, (long)5, (long)1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660100954
