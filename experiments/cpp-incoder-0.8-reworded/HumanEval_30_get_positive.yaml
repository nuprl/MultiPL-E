name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
  \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n//\
  \ >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
  \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
  \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
  \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
  \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
  \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2})))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  }\n"
completions: ["  std::vector<long> v;\n  for(auto i : l)\n    if(i>0)\n      v.push_back(i);\n\
    \  return v;", "    std::vector<long> res;\n    std::transform(l.begin(), l.end(),\
    \ std::back_inserter(res), [&](int x) {\n        return x<0? -x: x;\n    });\n\
    \    return res;", "    std::vector<long> res(l);\n    for(long i = 1; i < res.size();\
    \ ++i) {\n        if(res[i-1] > 0) continue;\n        for(long j = 1; j < res.size()\
    \ - i; ++j) {\n            if(res[j] > 0) continue;\n            if(res[j+1] >\
    \ 0) {\n                res[j+1] += res[j];\n                res[j] = 0;\n   \
    \         } else {\n                res[j] = 0;\n            }\n        }\n  \
    \  }\n    return res;", "    std::vector<long> res;\n    for (auto i : l) {\n\
    \        if (i >= 0) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res = l;\n    long res = 0;\n    for (auto i :\
    \ l) {\n        if (i > 0) res += i;\n    }\n    std::vector<long> negative;\n\
    \    for (auto i : l) {\n        if (i < 0) {\n            res -= i;\n       \
    \     negative.push_back(-i);\n        }\n    }\n    if (res > 0) {\n        negative.push_back(res\
    \ - 1);\n        res.clear();\n    }\n    return res;", "  // Loop from the beginning\
    \ and keep removing elements until there are no more elements in the vector.\n\
    \  for (auto it = l.begin(); it != l.end(); ++it) {\n    if (*it >= 0) l.erase(it);\n\
    \  }\n  return l;", "  assert(l.size() > 0);\n  std::vector<long> result;\n  for\
    \ (long i : l) {\n    if (i > 0) result.push_back(i);\n  }\n  return result;",
  "    std::vector<long> positive;\n    for (long i : l) {\n        if (i > 0)\n \
    \           positive.push_back(i);\n    }\n    return positive;", "    std::vector<long>\
    \ positive;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if\
    \ (*it > 0) {\n            positive.push_back(*it);\n        }\n    }\n    return\
    \ positive;", "    std::vector<long> ret;\n    for (long v : l)\n        if (v\
    \ > 0)\n            ret.push_back(v);\n    return ret;", "    assert(l.size()\
    \ >= 1);\n    std::vector<long> positive(l.begin(), l.begin() + l.size());\n \
    \   for (int i = 0; i < positive.size(); ++i) {\n        if (positive[i] < 0)\
    \ {\n            positive[i] = positive[i] + positive[i - 1];\n        }\n   \
    \ }\n    return positive;", "    std::sort(l.begin(), l.end());\n    return l;",
  "    std::vector<long> positive;\n    for(size_t i = 0; i < l.size(); i++) {\n \
    \       if(l[i] > 0)\n            positive.push_back(l[i]);\n    }\n    return\
    \ positive;", "  std::for_each(l.begin(), l.end(), [&l](int x) {\n    if(x > 0)\
    \ {\n      l.push_back(x);\n    }\n  });\n  return l;", "    assert(!l.empty());\n\
    \    auto it = l.begin();\n    auto end = l.end();\n    std::vector<long> res;\n\
    \    for (; it != end; ++it) {\n        if (*it > 0) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;", "    for (size_t i = 0; i < l.size(); ++i)\
    \ {\n        if (l[i] > 0) {\n            l.erase(l.begin() + i);\n          \
    \  break;\n        }\n    }\n    return l;", "  assert(l.size() > 0);\n  std::vector<long>\
    \ temp;\n  for (auto i = l.begin(); i != l.end(); ++i) {\n    if (*i < 0) {\n\
    \      temp.push_back(-(*i));\n    } else {\n      temp.push_back(*i);\n    }\n\
    \  }\n  return temp;", "  l.sort([](long a, long b) {\n    if (a > 0 && b > 0)\
    \ return a > b;\n    if (a == 0 && b > 0) return true;\n    if (b == 0 && a >\
    \ 0) return false;\n    if (a < 0) return true;\n    if (b < 0) return false;\n\
    \    if (a > b) return true;\n    if (b > a) return false;\n    return a < b;\n\
    \  });\n  return l;", "    // Find max value of l.\n    long max = std::numeric_limits<long>::min();\n\
    \    for(auto i : l) {\n        if(i>max) {\n            max = i;\n        }\n\
    \    }\n    // If max is negative, flip all elements and add max.\n    if(max<0)\
    \ {\n        for(auto i : l) {\n            i = -i;\n            if(i==max) {\n\
    \                i = -max;\n            }\n        }\n    }\n    // Return only\
    \ positive numbers.\n    return l;", "  for (auto i : l) {\n    if (i >= 0)\n\
    \      l.push_back(i);\n  }\n  return l;", "  std::vector<long> result;\n  for\
    \ (auto i : l) {\n    if (i >= 0) {\n      result.push_back(i);\n    }\n  }\n\
    \  return result;", '    // Your code goes here', "  std::vector<long> result;\n\
    \  for (auto& item : l) {\n    if (item < 0) {\n      result.push_back(item);\n\
    \    }\n  }\n  return result;", "  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  for (auto i : l) {\n    if (i < 0)\n      res.push_back(-i);\n    else\n  \
    \    res.push_back(i);\n  }\n  return res;", "    std::vector<long> res(l.size());\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > 0) res.push_back(l[i]);\n\
    \    }\n    return res;", "    std::vector<long> temp;\n    for(auto i:l) {\n\
    \        if(i>=0)\n        temp.push_back(i);\n    }\n    return temp;", "   \
    \ std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        if (i >= 0)\n            res.push_back(i);\n    }\n    return res;",
  "  l.sort([](long x, long y){return x <= y;});\n  std::vector<long> r;\n  for (auto\
    \ i:l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n  }\n  return r;",
  "  std::vector<long> pos;\n  bool flag = true;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] >= 0) {\n      pos.push_back(l[i]);\n    } else {\n   \
    \   flag = false;\n      break;\n    }\n  }\n  if (flag) {\n    return pos;\n\
    \  } else {\n    return std::vector<long>();\n  }", "    std::vector<long> ret;\n\
    \    for (long x: l) {\n        if (x > 0) {\n            ret.push_back(x);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> pos;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\n            pos.push_back(l[i]);\n\
    \    }\n    return pos;", "    std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \    std::vector<long> res(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\n\
    \        if (l[i] > 0)\n            res[i] = l[i];\n    return res;", "  std::vector<long>\
    \ positive;\n  for (long v : l) {\n    if (v > 0) {\n      positive.push_back(v);\n\
    \    }\n  }\n  return positive;", "    std::vector<long> ret = l;\n    std::sort(ret.begin(),\
    \ ret.end());\n    for (long &i : ret) {\n        if (i < 0) i = std::numeric_limits<long>::max();\n\
    \    }\n    return ret;", "    std::vector<long> p;\n    for(long i: l) {\n  \
    \      if (i >= 0)\n            p.push_back(i);\n    }\n    return p;", "    std::vector<long>\
    \ p;\n    for(long i=0; i<l.size(); i++)\n    {\n        if(l[i] > 0) p.push_back(l[i]);\n\
    \    }\n    return p;", "    std::vector<long> ret;\n    for (long i : l) {\n\
    \        if (i >= 0) ret.push_back(i);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    int start = 0;\n    int end = l.size() - 1;\n    while (start < end)\
    \ {\n        if (l[start] <= 0 && l[end] > 0) {\n            res.push_back(l[start]);\n\
    \            start = start + 1;\n        } else if (l[start] <= 0 && l[end] <\
    \ 0) {\n            res.push_back(l[end]);\n            end = end - 1;\n     \
    \   } else {\n            start = start + 1;\n            end = end - 1;\n   \
    \     }\n    }\n    return res;", "    int ans = l.size();\n    std::vector<long>\
    \ ret;\n    for (int i = 0; i < ans; i++) {\n        if (l[i] > 0) ret.push_back(l[i]);\n\
    \    }\n    return ret;", "    std::vector<long> ret(l);\n    // Sort the vector.\n\
    \    std::sort(ret.begin(), ret.end());\n    // Remove negative numbers.\n   \
    \ for (auto e : ret) if (e >= 0) ret.erase(std::remove(ret.begin(), ret.end(),\
    \ e), ret.end());\n    // Return the vector.\n    return ret;", "    assert(l.size()\
    \ <= 10000);\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long & i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;", "    for (size_t i = 0; i < l.size(); ++i) {\n       \
    \ if (l[i] >= 0) {\n            l.erase(l.begin() + i);\n            l.insert(l.begin(),\
    \ l[i]);\n        }\n    }\n    return l;", "    // Only positive numbers found\
    \ in input.\n    assert(l.size() >= 1);\n    std::vector<long> positive;\n   \
    \ for (auto it=l.begin(); it!=l.end(); ++it) {\n        if (*it > 0) {\n     \
    \       positive.push_back(*it);\n        }\n    }\n    return positive;", " \
    \ std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \  return l;", "    std::sort(l.begin(), l.end());\n    auto itr = std::unique(l.begin(),\
    \ l.end());\n    return std::vector<long>(itr, l.end());", "    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it = l.begin();\n    for (; it != l.end(); it++) {\n        if (*it > 0)\n \
    \           result.push_back(*it);\n    }\n    return result;", "    l.erase(std::remove_if(l.begin(),\
    \ l.end(), [](long i){ return i<0; }),\n            l.end());\n    return l;",
  "    std::vector<long> positive;\n    for (size_t i = 0; i < l.size(); ++i) {\n\
    \        if (l[i] > 0) {\n            positive.push_back(l[i]);\n        }\n \
    \   }\n    return positive;", "    std::vector<long> positive;\n    for (long\
    \ number : l) {\n        if (number > 0) {\n            positive.push_back(number);\n\
    \        }\n    }\n    return positive;", "  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> p;\n  for (auto it = l.begin(); it != l.end() && it != l.begin();\
    \ ++it)\n    if (*it > 0) {\n      p.push_back(*it);\n    }\n  return p;", " \
    \   for (long &i : l) {\n        i = std::abs(i);\n    }\n    return l;", "  \
    \  std::vector<long> positive(l);\n    for (size_t i = 0; i < l.size(); ++i) {\n\
    \        if (l[i] > 0) {\n            positive.push_back(l[i]);\n        }\n \
    \   }\n    return positive;", "  for (size_t i = 0; i < l.size(); i++) {\n   \
    \ if (l[i] < 0) {\n      l.erase(l.begin() + i);\n    }\n  }\n  return l;", " \
    \   for (auto it : l) {\n        if (it > 0) {\n            l.erase(std::remove(l.begin(),\
    \ l.end(), it), l.end());\n        }\n    }\n    return l;", "    std::vector<long>\
    \ res;\n    std::vector<bool> v1(l.size(), false);\n    std::vector<bool> v2(l.size(),\
    \ false);\n    for (auto i : l)\n        v1[i] = true;\n    long temp = 1;\n \
    \   for (auto i : l) {\n        if (v1[i])\n            temp = temp * i;\n   \
    \ }\n    for (auto i : l) {\n        if (!v1[i])\n            v2.push_back(i);\n\
    \    }\n    sort(v2.begin(), v2.end());\n    for (auto i : v2)\n        res.push_back(l[i]\
    \ - temp);\n    return res;", "    std::vector<long> result;\n    for (long i\
    \ : l)\n        if (i > 0)\n            result.push_back(i);\n    return result;",
  "    // Write your code here.\n    std::vector<long> temp;\n    for (auto itr =\
    \ l.begin(); itr != l.end(); ++itr) {\n        if (*itr >= 0)\n            temp.push_back(*itr);\n\
    \    }\n    return temp;", "    auto pos = std::find_if(l.begin(), l.end(), [](long\
    \ x){ return x > 0; });\n    return std::vector<long>(l.begin(), pos);", "   \
    \ std::vector<long> res;\n    for (long n : l) {\n        if (n >= 0) res.push_back(n);\n\
    \    }\n    return res;", "    std::vector<long> temp;\n    for (long i : l) {\n\
    \        if (i >= 0) {\n            temp.push_back(i);\n        }\n    }\n   \
    \ return temp;", "    std::vector<long> retval;\n    for(long i=0; i<l.size();\
    \ ++i) {\n        if(l[i] >= 0) {\n            retval.push_back(l[i]);\n     \
    \   }\n    }\n    return retval;", "    std::vector<long> new_vec;\n    for (const\
    \ auto& i : l) {\n        if (i >= 0) {\n            new_vec.push_back(i);\n \
    \       }\n    }\n    return new_vec;", "  std::vector<long> r;\n  long res =\
    \ 0;\n  for (long i : l) {\n    if (i > 0)\n      res += i;\n    else\n      r.push_back(i);\n\
    \  }\n  return r;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> v(l.size());\n   \
    \ for (long i = 0; i < v.size(); ++i) v[i] = std::min(l[i], v[i]);\n    return\
    \ v;", "    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it\
    \ > 0) {\n            l.erase(it);\n        }\n    }\n    return l;", "    std::vector<long>\
    \ result{l.begin(), l.end()};\n    for (long long i = 0; i < result.size(); ++i)\n\
    \        if (result[i] > 0)\n            result.erase(result.begin() + i);\n \
    \   return result;", "    std::vector<long> res(l.size());\n    std::transform(l.begin(),\
    \ l.end(), res.begin(), [](long x) {\n        if (x>0)\n            return x;\n\
    \        return 0;\n    });\n    return res;", "    for (auto i : l)\n       \
    \ if (i > 0)\n            return l;\n    return l;", "    std::vector<long> v(l.begin(),\
    \ l.end());\n    std::sort(v.begin(), v.end());\n    return v;", "    std::vector<long>\
    \ p;\n    for (auto it : l) {\n        if (it > 0) {\n            p.push_back(it);\n\
    \        }\n    }\n    return p;", "  std::sort(l.begin(), l.end());\n  auto it\
    \ = std::unique(l.begin(), l.end());\n  return std::vector<T>(l.begin(), it);",
  "  std::sort(l.begin(), l.end());\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  for (auto el : l) {\n    if (el < 0) {\n      res.emplace_back(-el);\n    }\
    \ else {\n      res.emplace_back(el);\n    }\n  }\n  return res;", "  l.erase(std::remove_if(l.begin(),\
    \ l.end(), [](int n){ return n >= 0; }), l.end());\n  return l;", "    std::vector<long>\
    \ ns;\n    ns.reserve(l.size());\n    for (auto i : l) {\n        if (i >= 0)\
    \ ns.push_back(i);\n    }\n    return ns;", "    l.erase(std::remove_if(l.begin(),\
    \ l.end(), [](long n) { return n <= 0; }), l.end());\n    return l;", "    std::vector<long>\
    \ res = l;\n    for (const auto i : l) {\n        if (i < 0) {\n            res.erase(res.begin()\
    \ + i);\n        }\n    }\n    return res;", "    std::vector<long> ans;\n   \
    \ for (auto val : l) {\n        if (val > 0) {\n            ans.push_back(val);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> p;\n    int i = 0;\n\
    \    for (auto it = l.begin(); it != l.end(); it++) {\n        if (it > 0)\n \
    \           p.push_back(it);\n    }\n    return p;", "    std::vector<long> v;\n\
    \    for (auto i : l) {\n        if (i > 0) v.push_back(i);\n    }\n    return\
    \ v;", "  std::vector<long> res;\n  for (int i = 0; i < l.size(); i++) {\n   \
    \ if (l[i] > 0)\n      res.push_back(l[i]);\n  }\n  return res;", "  std::vector<long>\
    \ res(l.begin(), l.end());\n  std::for_each(std::begin(res), std::end(res), [&l](long\
    \ x) { if (x < 0) res.erase((std::advance(std::begin(res), -x))); });\n  return\
    \ res;", "  std::vector<long> p;\n  bool flag = false;\n  for (long x : l) {\n\
    \    if (flag) {\n      if (x >= 0) {\n        p.push_back(x);\n      }\n    }\
    \ else {\n      if (x <= 0) {\n        p.push_back(x);\n        flag = true;\n\
    \      }\n    }\n  }\n  return p;", "  for (int i = 0; i < l.size(); i++) {\n\
    \    if (l[i] < 0)\n      l[i] = -l[i];\n  }\n  return l;", "    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n\
    \    return res;", "  std::vector<long> result;\n  for (const auto& n : l)\n \
    \   if (n >= 0)\n      result.push_back(n);\n  return result;", "    std::vector<long>\
    \ p;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\n      \
    \      p.push_back(l[i]);\n    }\n    return p;", "    std::sort(l.begin(), l.end());\n\
    \    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "  std::vector<long>\
    \ result;\n  for (auto it = l.begin(); it != l.end(); ++it)\n    if (*it > 0)\n\
    \      result.push_back(*it);\n  return result;", "    std::vector<long> tmp;\n\
    \    for (const auto& i : l) {\n        if (i >= 0) tmp.push_back(i);\n    }\n\
    \    return tmp;", "  std::vector<long> v(l.begin(), l.end());\n  std::remove_if(v.begin(),\
    \ v.end(), [](long n) {return n < 0;});\n  return v;", "  std::transform(l.begin(),\
    \ l.end(), l.begin(), [](auto i) {\n    return std::abs(i);\n  });\n  return l;",
  "    for (auto i : l)\n        if (i < 0)\n            l.erase(l.begin() + std::abs(i));\n\
    \    return l;", "    std::vector<long> result;\n    for(long i = 0; i < l.size();\
    \ i++)\n        result.push_back(l[i] > 0 ? l[i] : -l[i]);\n    return result;",
  "    // Sort the vector.\n    std::sort(l.begin(), l.end());\n    // Iterate over\
    \ the vector.\n    auto it = std::find_if(l.begin(), l.end(), [](long i){ return\
    \ i >= 0; });\n    // Return the positive numbers in the vector.\n    return std::vector<long>(l.begin(),\
    \ it);", "    std::vector<long> v;\n    for(auto &i : l)\n        if(i>0)\n  \
    \          v.push_back(i);\n    return v;", "    std::vector<long> v;\n    for\
    \ (auto it : l) {\n        if (it > 0) {\n            v.push_back(it);\n     \
    \   }\n    }\n    return v;", "    std::set<long> pos;\n    for (long i : l) {\n\
    \        if (i>0) {\n            pos.insert(i);\n        }\n    }\n    return\
    \ std::move(pos);", "    for (long &e : l)\n        if (e >= 0) return l;\n  \
    \  std::vector<long> res;\n    for (long &e : l)\n        if (e < 0 && e > -1)\
    \ return res;\n    return res;", "    assert(l.size() > 0);\n    std::vector<long>\
    \ res(l);\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;", "    std::vector<long> res;\n   \
    \ for (auto &x : l) {\n        if (x >= 0) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "    std::vector<long> positive;\n    for\
    \ (auto x : l) {\n        if (x>0) {\n            positive.push_back(x);\n   \
    \     }\n    }\n    return positive;", "  std::sort(l.begin(), l.end());\n  std::set<long>\
    \ s;\n  for(auto it=l.begin(); it!=l.end(); ++it)\n    if(*it > 0)\n      s.insert(*it);\n\
    \  return std::vector<long>(s.begin(), s.end());", "    std::vector<long> p;\n\
    \    for(long i : l)\n        if(i>0)\n            p.push_back(i);\n    return\
    \ p;", "  std::vector<long> result;\n  for (auto val : l) {\n    if (val > 0)\n\
    \      result.push_back(val);\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    for (auto item : l) {\n        if (item > 0)\n            result.push_back(item);\n\
    \    }\n    return result;", "    std::vector<long> positive(l);\n    long n =\
    \ 0;\n    for (auto& x : positive) {\n        if (x >= 0) {\n            n = 1;\n\
    \            break;\n        }\n    }\n    if (n == 0) {\n        positive.clear();\n\
    \    }\n    return positive;", "  std::vector<long> p;\n  for (size_t i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] >= 0)\n      p.push_back(l[i]);\n  }\n  return\
    \ p;", "\tassert(l.size() > 0);\n\tstd::vector<long> result;\n\tfor(long i=0;i<l.size();i++)\
    \ {\n\t\tif (l[i] > 0)\n\t\t\tresult.push_back(l[i]);\n\t}\n\treturn result;",
  "    std::vector<long> ret;\n    for(long i:l)\n        if(i>0)\n            ret.push_back(i);\n\
    \    return ret;", '    return l;', "    std::vector<long> r;\n    for (long i\
    \ : l) {\n        if (i > 0) {\n            r.push_back(i);\n        }\n    }\n\
    \    return r;", "    std::vector<long> positive(l);\n    for(auto& e : positive){\n\
    \        if((e>=0)&&(e<0)){\n            positive.erase(std::find(positive.begin(),\
    \ positive.end(), e));\n        }\n    }\n    return positive;", "  std::vector<long>\
    \ result(l.size());\n  for (size_t i = 0; i < l.size(); i++)\n    result[i] =\
    \ std::max((l[i]>=0), l[i]);\n  return result;", "  std::vector<long> result;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;", "  std::vector<long> res;\n  for (long i : l)\n    if\
    \ (i > 0)\n      res.push_back(i);\n  return res;", "    for (long &v : l) {\n\
    \        if (v >= 0) {\n            l.push_back(v);\n        }\n    }\n    return\
    \ l;", "    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if\
    \ (i < 0)\n            return std::vector<long>();\n    }\n    return l;", " \
    \   std::vector<long> positive;\n    for (long n : l) {\n        if (n > 0) {\n\
    \            positive.push_back(n);\n        }\n    }\n    return positive;",
  "    std::vector<long> res;\n    std::vector<long> temp;\n    for (const auto& i\
    \ : l) {\n        if (i > 0)\n            res.push_back(i);\n    }\n    return\
    \ res;", "  // Return only positive numbers in the vector.\n  for (auto &v : l)\
    \ {\n    if (v < 0) {\n      v.clear();\n      break;\n    }\n  }\n  return l;",
  "  std::vector<long> ans;\n  for (auto x : l) {\n    if (x >= 0) ans.push_back(x);\n\
    \  }\n  return ans;", "    std::vector<long> result = l;\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        if (*it > 0) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", '    return std::vector<long>(std::max_element(l.begin(),
    l.end()) - l.begin(), l.end());', "    std::vector<long> res = l;\n    sort(res.begin(),\
    \ res.end());\n    for (long i = res.size() - 1; i > 0; --i) {\n        if (res[i]\
    \ > 0) return res;\n        while (i > 0 && res[i - 1] < 0) --i;\n        long\
    \ j = i;\n        while (j > 0 && res[j - 1] > 0) --j;\n        if (i > 0 && j\
    \ > 0) {\n            long k = res[i];\n            res[i] = res[j];\n       \
    \     res[j] = k;\n        } else if (i < j) {\n            long k = res[i];\n\
    \            res[i] = res[j];\n            res[j] = k;\n        } else if (i ==\
    \ j) {\n            long k = res[i];\n            res[i] = k;\n        }\n   \
    \ }\n    return res;", "    // your code goes here\n    std::vector<long> res;\n\
    \    std::transform(l.begin(), l.end(), std::back_inserter(res), [](long x) {\
    \ return x > 0 ? x : 0; });\n    return res;", "    std::vector<long> positive;\n\
    \    positive.reserve(l.size());\n    for (auto i : l)\n        if (i >= 0) positive.push_back(i);\n\
    \    return positive;", "  std::vector<long> positive;\n  for (auto i : l) {\n\
    \    if (i >= 0) {\n      positive.push_back(i);\n    }\n  }\n  return positive;",
  "  std::sort(l.begin(), l.end(), [](long a, long b){return (a > b);});\n  auto it\
    \ = l.begin();\n  std::vector<long> res;\n  res.push_back(it);\n  auto p = std::find_if(l.begin(),\
    \ l.end(), [](long n) {return (n > 0);});\n  while(p != l.end() && p < l.begin())\n\
    \  {\n    it = *p;\n    res.push_back(it);\n    p = std::find_if(++p, l.end(),\
    \ [](long n) {return (n > 0);});\n  }\n  return res;", "    std::vector<long>\
    \ p;\n    std::remove_copy_if(l.begin(), l.end(), std::back_inserter(p), [](long\
    \ n) {\n        return n > 0;\n    });\n    return p;", "    for (auto item :\
    \ l) {\n        if (item > 0) {\n            l.push_back(item);\n        }\n \
    \   }\n    return l;", "    std::vector<long> result;\n    for (auto& i : l)\n\
    \        if (i < 0)\n            result.push_back(i);\n    return result;", " \
    \   return std::remove_if(l.begin(), l.end(),\n                         [](long\
    \ x){return x > 0;});", "    std::vector<long> pos_nums;\n    for (long i = 0;\
    \ i < l.size(); i++)\n        if (l[i] > 0)\n            pos_nums.push_back(l[i]);\n\
    \    return pos_nums;", "  std::set<long> s;\n  for (auto x : l)\n    if (s.find(x)\
    \ == s.end()) s.insert(x);\n  return l;", "    int n = l.size();\n    if (n <=\
    \ 0)\n        return l;\n    int i = 1;\n    while (i < n)\n        if ((l[i]\
    \ < 0) && (l[i - 1] > 0))\n            l[i] += l[i - 1];\n        else\n     \
    \       l[i] += 1;\n    std::vector<long> r;\n    for (int j = 0; j < n; j++)\
    \ {\n        if ((l[j] >= 0) && (l[j] <= 1)) {\n            r.push_back(l[j]);\n\
    \        }\n    }\n    return r;", "    std::vector<long> v(l.size());\n    for\
    \ (auto i = l.begin(); i != l.end(); ++i) {\n        if (*i > 0) {\n         \
    \   v[*i] = *i;\n        }\n    }\n    return v;", "    for (auto it = l.begin();\
    \ it != l.end(); ++it)\n        if (*it > 0)\n            l.push_back(*it);\n\
    \    return l;", "  std::vector<long> positives;\n  for (long i = 0; i < l.size();\
    \ ++i) {\n    if (l[i] >= 0) {\n      positives.push_back(l[i]);\n    }\n  }\n\
    \  return positives;", "    std::vector<long> ans;\n    for (auto i : l) {\n \
    \       if (i > 0)\n            ans.push_back(i);\n    }\n    return ans;", " \
    \   std::vector<long> r;\n    for (const auto& i : l) {\n        if (i >= 0) {\n\
    \            r.push_back(i);\n        }\n    }\n    return r;", "    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i > 0) v.push_back(i);\n    }\n    return\
    \ v;", "    std::vector<long> positive_lst;\n    for(long i = 0; i< l.size();\
    \ i++) {\n        if (l[i] >= 0) positive_lst.push_back(l[i]);\n    }\n    return\
    \ positive_lst;", "    std::vector<long> positive;\n    for(const auto &item :\
    \ l) {\n        if(item > 0) {\n            positive.push_back(item);\n      \
    \  }\n    }\n    return positive;", "    std::vector<long> ans;\n    long max\
    \ = 0;\n    for (long i : l) {\n        if (i > 0) ans.push_back(i);\n       \
    \ if (i > max) max = i;\n    }\n    return ans;", "    std::vector<long> res;\n\
    \    for (long i : l) {\n        if ((i >= 0) && (!res.empty())) {\n         \
    \   res.push_back(i);\n        }\n    }\n    return res;", "    auto it = std::find_if(l.begin(),\
    \ l.end(), [](long& v) {\n        return v > 0;\n    });\n    l.erase(it, l.end());\n\
    \    return l;", "  std::vector<long> v(l);\n  std::sort(v.begin(), v.end());\n\
    \  // std::set<long> s {};\n  // std::for_each(v.begin(), v.end(), [&s](long&\
    \ val) { if(val>0)s.insert(val); });\n  // return v;\n  // return s;\n  return\
    \ v;", "\tstd::vector<long> result;\n\tfor(auto &i:l)\n\t\tif( i>0)\n\t\t\tresult.push_back(i);\n\
    \treturn result;", "    std::vector<long> p;\n    for (long n : l) {\n       \
    \ if (n > 0) {\n            p.push_back(n);\n        }\n    }\n    return p;",
  "    std::vector<long> pos_vec;\n    for (auto i : l) {\n        if (i > 0)\n  \
    \          pos_vec.push_back(i);\n    }\n    return pos_vec;", "    // Get a copy\
    \ of the vector.\n    std::vector<long> v(l);\n    for (long i = 0; i < v.size();\
    \ ++i) {\n        if (v[i] > 0) {\n            v.erase(v.begin() + i);\n     \
    \   }\n    }\n    return v;", "  std::vector<long> ret;\n  for (int i = 0; i <\
    \ l.size(); i++) {\n    if (l[i] >= 0)\n      ret.push_back(l[i]);\n  }\n  return\
    \ ret;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n\treturn l;", "    std::vector<long> res;\n    for(auto e : l) {\n\
    \        if( e < 0 ) res.push_back(-e);\n        else res.push_back(e);\n    }\n\
    \    return res;", '    return std::vector<long>{l.begin(), l.end()};', "    std::vector<long>\
    \ r;\n    for (long i : l)\n        if (i > 0)\n            r.push_back(i);\n\
    \    return r;", "    std::vector<long> v;\n    long n = 0;\n    for (long i :\
    \ l) {\n        if (i >= 0) n++;\n        v.push_back(i);\n    }\n    if (n !=\
    \ v.size()) {\n        return {};\n    }\n    return v;", "    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        if (i >= 0)\n            ret.push_back(i);\n\
    \    }\n    return ret;", "  std::vector<long> res = l;\n  for (int i = 0; i <\
    \ res.size(); i++) {\n    if (res[i] < 0)\n      res[i] = 0;\n  }\n  return res;",
  "  std::vector<long> res;\n  for (long i : l) {\n    if (i >= 0) {\n      res.push_back(i);\n\
    \    }\n  }\n  return res;", "    auto it = l.begin();\n    std::advance(it, std::find_if(it,\
    \ l.end(), [](auto val){return val > 0;}));\n    return l;", "  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> v;\n  for (long i = 0; i < l.size() - 1; i++)\
    \ {\n    if (l[i] > 0 && l[i + 1] <= 0) {\n      v.push_back(l[i]);\n    }\n \
    \ }\n  return v;", "    std::vector<long> res;\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n\
    \    }\n    return res;", "    std::vector<long> ret;\n    for (long i : l) {\n\
    \        if ((i > 0) || (i == 0)) {\n            ret.push_back(i);\n        }\n\
    \    }\n    return ret;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ r;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      r.push_back(l[i]);\n\
    \    }\n  }\n  return r;", "    // Create a copy of the vector.\n    auto l_copy\
    \ = l;\n    std::vector<long> pos_l;\n    // Iterate from the last to the first\
    \ element and add every element greater then zero to the vector.\n    for (auto\
    \ it = l_copy.rbegin(), end = l_copy.rend(); it != end; it++) {\n        if (*it\
    \ > 0)\n            pos_l.push_back(*it);\n    }\n    return pos_l;", "    std::vector<long>\
    \ res = l;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] < 0)\n\
    \            res.push_back(-l[i]);\n    }\n    return res;", "    for (auto x\
    \ : l) {\n        if (x < 0) {\n            l.push_back(x);\n        }\n    }\n\
    \    return l;", "    std::vector<long> p;\n    for (auto i : l) {\n        if\
    \ (i >= 0) {\n            p.push_back(i);\n        }\n    }\n    return p;", " \
    \   std::vector<long> res;\n    for(int i = 0; i < l.size(); i++)\n        if(l[i]\
    \ >= 0)\n            res.push_back(l[i]);\n    return res;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    long tmp = 0;\n    for (long i : l) {\n\
    \        tmp = i;\n        if (tmp > 0) res.push_back(tmp);\n    }\n    return\
    \ res;", "    std::vector<long> positive;\n    bool flag = true;\n    for (long\
    \ i : l) {\n        if (i < 0) {\n            flag = false;\n        }\n     \
    \   if (flag) {\n            positive.push_back(i);\n        }\n    }\n    return\
    \ positive;", "\tauto result = std::move(l);\n\tfor (size_t i = 0; i < result.size();\
    \ i++) {\n\t\tif (result[i] > 0) result.erase(std::remove(result.begin(), result.end(),\
    \ result[i]), result.end());\n\t}\n\treturn result;", "    // Write your code\
    \ here\n    // return result;\n    std::vector<long> result;\n    int size = l.size();\n\
    \    long result2 = 0;\n    for(int i = 0;i < size;++i){\n        if(l[i] > 0){\n\
    \            result2 = l[i] + result2;\n        }else{\n            result.push_back(result2);\n\
    \            result2 = l[i];\n        }\n    }\n    result.push_back(result2);\n\
    \    return result;", "    std::vector<long> res;\n    std::copy(l.begin(), l.end(),\
    \ std::back_inserter(res));\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   if (res[i] < 0) {\n            res.erase(std::remove(res.begin(), res.end(),\
    \ res[i]), res.end());\n        }\n    }\n    return res;", "    for (auto &i\
    \ : l) {\n        if (i < 0) return l;\n    }\n    return l;", "    std::vector<long>\
    \ res = l;\n    for (int i = 0; i < res.size(); i++) {\n        if (res[i] < 0)\
    \ res[i] = 0;\n    }\n    return res;", "    std::vector<long> positive;\n   \
    \ for (long i : l)\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    return positive;", "\tfor (auto it = l.begin(); it != l.end(); it++) {\n\t\
    \tif (*it < 0)\n\t\t\tl.erase(it);\n\t\telse\n\t\t\tit++;\n\t}\n\treturn l;",
  "\tfor (auto &item : l) {\n\t\tif (item < 0) return l;\n\t}\n\treturn l;", "   \
    \ std::vector<long> p(n);\n    for (int i = 0; i < n; ++i)\n        if (l[i] >\
    \ 0)\n            p[i] = l[i];\n    return p;", "  // Your code here.\n  std::vector<long>\
    \ res;\n  for (auto i = l.begin(), n = l.end(); i != n; ++i)\n    if (*i < 0)\n\
    \      res.push_back(*i);\n  return res;", "  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> res;\n  for (long v : l) {\n    if (v >= 0) res.push_back(v);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return\
    \ result;", "    // Write your code here.\n    return l;", "  std::vector<long>\
    \ result;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n    \
    \  result.push_back(l[i]);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ r;\n  for (auto i : l) {\n    if (i > 0)\n      r.push_back(i);\n  }\n  return\
    \ r;", "    std::vector<long> positive;\n    for (auto &ele : l) {\n        if\
    \ (ele >= 0) positive.push_back(ele);\n    }\n    return positive;", "    long\
    \ long positive = 0;\n    for (auto & v : l)\n        positive += v > 0 ? v :\
    \ -v;\n    std::vector<long> result;\n    for (auto & v : l)\n        if (v >\
    \ 0)\n            result.push_back(v);\n        else\n            result.push_back(-lv);\n\
    \    return result;", "    std::vector<long> positive;\n    for (long i : l) {\n\
    \        if (i >= 0) {\n            positive.push_back(i);\n        }\n    }\n\
    \    return positive;", "    std::vector<long> res;\n    for (long i : l) {\n\
    \        if (i >= 0) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "  assert(l.size() >= 1);\n  l.erase(std::remove_if(l.begin(), l.end(),\
    \ [&](int i){ return i < 0; }));\n  return l;", "    l.erase(std::remove_if(l.begin(),\
    \ l.end(), [](long i) { return i > 0; }), l.end());\n    return l;", "  std::vector<long>\
    \ r;\n  for (int i = 0; i < (int)l.size(); ++i) {\n    if (l[i] >= 0) {\n    \
    \  r.push_back(l[i]);\n    }\n  }\n  return r;", "    for (long i : l) {\n   \
    \     if (i < 0) {\n            l.push_back(i);\n        }\n    }\n    return\
    \ l;", "  std::vector<long> temp;\n  for (auto i : l)\n    if (i > 0) temp.push_back(i);\n\
    \  return temp;", "\tstd::vector<long> result = l;\n\tfor (long &v : l) {\n\t\t\
    if (v > 0)\n\t\t\tresult.push_back(v);\n\t}\n\treturn result;", "  std::vector<long>\
    \ result;\n  long sign = std::signbit(l[0]);\n  long tmp = 0;\n  for (size_t i\
    \ = 1; i < l.size(); i++) {\n    if (l[i] > 0) tmp = l[i] - sign * tmp;\n    else\
    \ tmp = sign - l[i] - tmp;\n    result.push_back(tmp);\n  }\n  return result;",
  "  for(size_t i = 0; i != l.size(); ++i)\n    if(l[i] >= 0)\n      l.push_back(l[i]);\n\
    \  return l;"]
stop_tokens:
- "\n}"
