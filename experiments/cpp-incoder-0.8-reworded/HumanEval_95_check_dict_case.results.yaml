language: cpp
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here\n    if (dict.empty()) return false;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); ++it)\n    {\n        for (auto it2\
    \ = it->second.begin(); it2 != it->second.end(); ++it2)\n        {\n         \
    \   if (it->first >= 'A' && it->first <= 'Z')\n            {\n               \
    \ if (!(it->first == it2->first))\n                    return false;\n       \
    \     }\n            else\n            {\n                if (!(it->first == it2->first))\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpem9q1sfd.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpem9q1sfd.cpp:24:27: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   24 |             if (it->first >= 'A' && it->first\
    \ <= 'Z')\n      |                 ~~~~~~~~~ ^~ ~~~\n      |                 \
    \    |        |\n      |                     |        char\n      |          \
    \           const std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpem9q1sfd.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpem9q1sfd.cpp:24:30:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   24 |             if (it->first\
    \ >= 'A' && it->first <= 'Z')\n      |                              ^~~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpem9q1sfd.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpem9q1sfd.cpp:24:30: note:   mis"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    auto keys\
    \ = list(dict.begin());\n    for (auto it=keys.begin(); it!=keys.end(); ++it)\
    \ {\n        auto cur = (*it).first;\n        if (!isalpha(cur[0])) {\n      \
    \      return false;\n        }\n        if (!isalpha(cur[1])) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30xvc731.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp30xvc731.cpp:21:17: error:\
    \ \u2018list\u2019 was not declared in this scope\n   21 |     auto keys = list(dict.begin());\n\
    \      |                 ^~~~\n/tmp/tmp30xvc731.cpp:21:17: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp30xvc731.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:552:11:\
    \ note:   \u2018std::__cxx11::list\u2019\n  552 |     class list : protected _List_base<_Tp,\
    \ _Alloc>\n      |           ^~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp30xvc731.cpp:2:\n/usr/include/c++/9/list:82:13:\
    \ note:   \u2018std::pmr::list\u2019\n   82 |       using list = std::list<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~\n"
  stdout: ''
  timestamp: 1660131172
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write code here\n    if (dict.empty()) return true;\n    for\
    \ (std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end();\
    \ ++it) {\n        std::string key(it->first);\n        if (std::tolower(it->first)\
    \ == it->first) {\n            continue;\n        }\n        else if (std::toupper(it->first)\
    \ == it->first) {\n            continue;\n        }\n        else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvjwq9gj.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpbvjwq9gj.cpp:22:35: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   22 |         if (std::tolower(it->first) == it->first) {\n      |       \
    \                            ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpbvjwq9gj.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbvjwq9gj.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpbvjwq9gj.cpp:22:35: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |         if (std::tolower(it->first) == it->first) {\n  \
    \    |                                   ^\n/tmp/tmpbvjwq9gj.cpp:25:40: error:\
    \ no matching function for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |         else if (std::toupper(it->first) == it->first) {\n      |  \
    \  "
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  assert(dict.size() > 0);\n  std::map<std::string, std::string>::iterator\
    \ it;\n  for (it = dict.begin(); it != dict.end(); ++it) {\n    if (it->first\
    \ == it->first) {\n      std::cout << \"ERROR: keys are not all lowercase/uppercase\"\
    \ << std::endl;\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmps0leoqri: /tmp/tmps0leoqri.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: 'ERROR: keys are not all lowercase/uppercase

    '
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() != 0);\n    for(auto &p : dict)\n    {\n   \
    \     auto keyp = p.first;\n        auto valuep = p.second;\n        if ((std::find(keyp.begin(),\
    \ keyp.end(), static_cast<char>(tolower(keyp[0]))) != keyp.end() \n        ||\
    \ std::find(keyp.begin(), keyp.end(), static_cast<char>(toupper(keyp[0]))) !=\
    \ keyp.end()))\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2yo46lp_: /tmp/tmp2yo46lp_.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // code here\n    std::map<std::string,std::string>::iterator it=dict.begin();\n\
    \    for (;it!=dict.end(); it++) {\n        if ((it->first.compare(0,5,\"state\"\
    )==0||it->first.compare(0,5,\"state\")==5) || (it->first.compare(0,6,\"zip\")==0||it->first.compare(0,6,\"\
    zip\")==6)) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0h5oazoc: /tmp/tmp0h5oazoc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    assert(dict.size() >= 1);\n\n    std::map<std::string, std::string>::iterator\
    \ itr = dict.begin();\n    \n    bool res = true;\n    \n    while(itr != dict.end())\
    \ {\n        std::string key = itr->first;\n        if(std::tolower(key) == key\
    \ || std::toupper(key) == key) {\n            res = false;\n            break;\n\
    \        }\n        itr++;\n    }\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvub5rp3e.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpvub5rp3e.cpp:27:28: error:\
    \ no matching function for call to \u2018tolower(std::string&)\u2019\n   27 |\
    \         if(std::tolower(key) == key || std::toupper(key) == key) {\n      |\
    \                            ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpvub5rp3e.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvub5rp3e.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpvub5rp3e.cpp:27:28: note:   candidate expects 2 arguments,\
    \ 1 provided\n   27 |         if(std::tolower(key) == key || std::toupper(key)\
    \ == key) {\n      |                            ^\n/tmp/tmpvub5rp3e.cpp:27:56:\
    \ error: no matching function for call to \u2018toupper(std::string&)\u2019\n\
    \   27 |         if(std::tolower(key) == key || std::toupper(key) == key) {\n\
    \      |              "
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool check = true;\n    for (auto it = dict.begin(); check && (it\
    \ != dict.end()); ++it) {\n        if (it->first != it->first.substr(0,1)) {\n\
    \            check = false;\n        }\n        else if (it->first != it->first.substr(1))\
    \ {\n            check = false;\n        }\n    }\n    return check;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp48hjswm2: /tmp/tmp48hjswm2.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) {\n        return false;\n    }\n    for\
    \ (std::map<std::string,std::string>::iterator itr = dict.begin(); itr != dict.end();\
    \ ++itr) {\n        if (itr->first != itr->second) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8i2kwcte: /tmp/tmp8i2kwcte.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here\n    return dict.size() == 0 || dict.size() ==\
    \ 1 \n        ? (dict.begin()->first == dict.end()->first) \n            || (dict.begin()->first\
    \ == dict.end()->first.substr(0,1)) \n            : false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpl64ciktz: /tmp/tmpl64ciktz.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tfor (auto &pair : dict) {\n\t\tif (!pair.first.empty() && !pair.first.compare(0,\
    \ 2, \"_\") && \n\t\t\t!pair.first.compare(0, 3, \"_\")) {\n\t\t\treturn true;\n\
    \t\t}\n\t\tif (!pair.second.empty() && !pair.second.compare(0, 2, \"_\") && \n\
    \t\t\t!pair.second.compare(0, 3, \"_\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpygzkb2s0: /tmp/tmpygzkb2s0.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() != 0);\n    // check if keys are in lower case\n\
    \    for (const auto &item : dict) {\n        if (std::tolower(item.first) !=\
    \ item.first) {\n            return false;\n        }\n    }\n    // check if\
    \ keys are in upper case\n    for (const auto &item : dict) {\n        if (std::toupper(item.first)\
    \ != item.first) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpthm0pyqo.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpthm0pyqo.cpp:21:36: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   21 |         if (std::tolower(item.first) != item.first) {\n      |     \
    \                               ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpthm0pyqo.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpthm0pyqo.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpthm0pyqo.cpp:21:36: note:   candidate expects 2 arguments,\
    \ 1 provided\n   21 |         if (std::tolower(item.first) != item.first) {\n\
    \      |                                    ^\n/tmp/tmpthm0pyqo.cpp:27:36: error:\
    \ no matching function for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   27 |         if (std::toupper(item.first) != item.first) {\n      | "
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    \n    for\
    \ (auto pair: dict)\n    {\n        if(pair.first.compare(0, 4, ::tolower) !=\
    \ 0)\n            return false;\n        if(pair.first.compare(0, 5, ::toupper)\
    \ != 0)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphd9drgzk.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmphd9drgzk.cpp:24:46: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(int,\
    \ int, int (&)(int) noexcept) const\u2019\n   24 |         if(pair.first.compare(0,\
    \ 4, ::tolower) != 0)\n      |                                              ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphd9drgzk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 3 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphd9drgzk.cpp:24:46:\
    \ note:   candidate expects 1 argument, 3 provided\n   24 |         if(pair.first.compare"
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto item:dict) {\n        if(!item.first.empty() && item.first.at(0)\
    \ == tolower(item.first[0]) && item.second.empty()) {\n            return true;\n\
    \        } else if(!item.first.empty() && item.first.at(0) == toupper(item.first[0])\
    \ && item.second.empty()) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpeghz4ltz: /tmp/tmpeghz4ltz.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    for (auto iter = dict.begin();\
    \ iter != dict.end(); ++iter) {\n        auto value = iter->second;\n        if\
    \ (typeid(value).name() != typeid(int).name()) return false;\n        std::string\
    \ str_value = (value.empty()) ? \"null\" : value; \n        std::transform(str_begin(str_value),\
    \ str_end(str_value), \n                      str_begin(str_value), ::tolower);\n\
    \        if (str_begin(str_value) != str_end(str_value)) return false;\n     \
    \   std::transform(str_begin(str_value), str_end(str_value), \n              \
    \        str_begin(str_value), ::toupper);\n        if (str_begin(str_value) !=\
    \ str_end(str_value)) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowa5kvas.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpowa5kvas.cpp:23:24: error:\
    \ \u2018str_begin\u2019 was not declared in this scope\n   23 |         std::transform(str_begin(str_value),\
    \ str_end(str_value),\n      |                        ^~~~~~~~~\n/tmp/tmpowa5kvas.cpp:23:46:\
    \ error: \u2018str_end\u2019 was not declared in this scope; did you mean \u2018\
    strlen\u2019?\n   23 |         std::transform(str_begin(str_value), str_end(str_value),\n\
    \      |                                              ^~~~~~~\n      |       \
    \                                       strlen\n"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false; \n    // Iterate through map\n \
    \   for(std::map<std::string,std::string>::iterator it = dict.begin(); it!=dict.end();\
    \ it++) {\n        // If key is not a string or value is string\n        if((std::string(it->first).length()\
    \ == 0) && (std::string(it->second).length() == 0)) return false; \n        //\
    \ If key is not a string or value is string in lower case\n        if((std::string(it->first).length()\
    \ > 0) && (std::string(it->first).length() > 0) &&\n           (std::string(it->first).compare(0,\
    \ 2, std::string(it->first).begin(), std::string(it->first).end()) == 0)) {\n\
    \            return false; \n        }\n        // If key is not a string or value\
    \ is string in upper case\n        if((std::string(it->second).length() > 0) &&\
    \ (std::string(it->second).length() > 0) &&\n           (std::string(it->second).compare(0,\
    \ 2, std::string(it->second).begin(), std::string(it->second).end()) == 0)) {\n\
    \            return false; \n        }\n    }\n    return true; \n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7q2hxuag.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7q2hxuag.cpp:25:110: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(int,\
    \ int, std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   25 |            (std::string(it->first).compare(0, 2, std::string(it->first).begin(),\
    \ std::string(it->first).end()) == 0)) {\n      |                            \
    \                                                                            \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7q2hxuag.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 4 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/bas"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto it = dict.begin(); it != dict.end(); ++it)\n        if(\
    \ (std::to_string(it->first).length() > 1 &&\n            std::to_string(it->first).find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\") ==\n            std::string::npos) ||\n        \
    \    (std::to_string(it->first).length() > 2 &&\n            std::to_string(it->first).find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\") ==\n            std::string::npos) )\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaacdbi6u.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpaacdbi6u.cpp:19:38: error:\
    \ no matching function for call to \u2018to_string(const std::__cxx11::basic_string<char>&)\u2019\
    \n   19 |         if( (std::to_string(it->first).length() > 1 &&\n      |    \
    \                                  ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaacdbi6u.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long i"
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // your code here\n  if (dict.empty()) return true;\n  for (auto\
    \ it=dict.begin();it!=dict.end();++it)\n  {\n    std::string k = it->first;\n\
    \    if (k.size() <= 1 && !islower(k[0]))\n    {\n      return false;\n    }\n\
    \    if (k.size() <= 1 && !isupper(k[0]))\n    {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmped7yqwvf: /tmp/tmped7yqwvf.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    \n    // check keys\
    \ are in lower case only\n    for (auto itr = dict.begin(); itr != dict.end();\
    \ itr++) {\n        auto key = (*itr).first;\n        if (std::string(key) !=\
    \ key)\n            return false;\n    }\n    \n    // check keys are in upper\
    \ case only\n    for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n \
    \       auto key = (*itr).first;\n        if (std::string(key) != std::string(key))\n\
    \            return false;\n    }\n    \n    return true;\n}\nint main() {\n \
    \   auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmggzxnyw: /tmp/tmpmggzxnyw.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool result = true;\n    for(auto it=dict.begin();it!=dict.end();++it)\
    \ {\n        bool found = false;\n        for(auto it2=it->second.begin();it2!=it->second.end();++it2)\
    \ {\n            if((it->second.find(*it2) != it->second.end()) &&\n         \
    \       ((it->second.find(tolower(*it2)) != it->second.end()) ||\n           \
    \      (it->second.find(toupper(*it2)) != it->second.end())))\n              \
    \  found = true;\n        }\n        if(!found) result = false;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk57r7hu.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwk57r7hu.cpp:22:39: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   22 |             if((it->second.find(*it2) != it->second.end())\
    \ &&\n      |                 ~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~\n    \
    \  |                                |                       |\n      |       \
    \                         |                       std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |                                std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwk57r7hu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpwk57r7hu.cpp:22:57: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   22 |             if((it->second.find(*it2) != it->second.end())\
    \ &&\n      |                                                    "
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    auto key_iter = dict.begin();\n\
    \    for(; key_iter != dict.end(); ++key_iter)\n    {\n        if(!key_iter->first.empty())\
    \ {\n            if(std::tolower(key_iter->first) != key_iter->first)\n      \
    \          return false;\n        }\n        if(!key_iter->second.empty()) {\n\
    \            if(std::toupper(key_iter->second) != key_iter->second)\n        \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwokxsb7x.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwokxsb7x.cpp:24:44: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   24 |             if(std::tolower(key_iter->first) != key_iter->first)\n \
    \     |                                            ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpwokxsb7x.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwokxsb7x.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwokxsb7x.cpp:24:44: note:   candidate expects 2 arguments,\
    \ 1 provided\n   24 |             if(std::tolower(key_iter->first) != key_iter->first)\n\
    \      |                                            ^\n/tmp/tmpwokxsb7x.cpp:28:45:\
    \ error: no matching function for call to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\
    \n   28 |             if(std::toupper(ke"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  \n    if(dict.empty()) {\n      return false;\n    }\n    \n    //\
    \ checking if all values are in upper case\n    auto is_upper = [&](std::string\
    \ &s) {\n      // iterating through all chars\n      for(const char &c : s) {\n\
    \        if('A' <= c && c <= 'Z') {\n          return false;\n        }\n    \
    \  }\n      return true;\n    };\n    \n    // checking if all values are in lower\
    \ case\n    auto is_lower = [&](std::string &s) {\n      // iterating through\
    \ all chars\n      for(const char &c : s) {\n        if('a' <= c && c <= 'z')\
    \ {\n          return false;\n        }\n      }\n      return true;\n    };\n\
    \    \n    for(const auto &pair: dict) {\n      \n      if(pair.first == \"Name\"\
    ) {\n        if(!is_upper(pair.second)) {\n          return false;\n        }\n\
    \      }\n      \n      else if(pair.first == \"Age\") {\n        if(!is_lower(pair.second))\
    \ {\n          return false;\n        }\n      }\n      \n      else if(pair.first\
    \ == \"City\") {\n        if(!is_upper(pair.second)) {\n          return false;\n\
    \        }\n      }\n      \n      else {\n        if(!is_lower(pair.second))\
    \ {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjaysfmlu.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpjaysfmlu.cpp:48:33: error:\
    \ no match for call to \u2018(check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(std::string&)>) (const std::__cxx11::basic_string<char>&)\u2019\
    \n   48 |         if(!is_upper(pair.second)) {\n      |                      \
    \           ^\n/tmp/tmpjaysfmlu.cpp:24:21: note: candidate: \u2018check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(std::string&)>\u2019 <near match>\n\
    \   24 |     auto is_upper = [&](std::string &s) {\n      |                  \
    \   ^\n/tmp/tmpjaysfmlu.cpp:24:21: note:   conversion of argument 1 would be ill-formed:\n\
    /tmp/tmpjaysfmlu.cpp:48:27: error: binding reference of type \u2018std::string&\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>&\u2019} to \u2018const std::__cxx11::basic_string<char>\u2019\
    \ discards qualifiers\n   48 |         if(!is_upper(pair.second)) {\n      | \
    \                     ~~~~~^~~~~~\n/tmp/tmpjaysfmlu.cpp:54:33: error: no match\
    \ for call to \u2018(check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(std::string&)>) (const std::__cxx11::basic_string<char>&)\u2019\
    \n   54 |         if(!is_lower(pair.second)) {\n      |                      \
    \           ^\n/tmp/tmpjaysfmlu.cpp:35:21: note: candidate: \u2018check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(std::string&)>\u2019 <near match>\n\
    \   35 |     auto is_lower = [&](std::string &s) {\n      |                  \
    \   ^\n/tmp/tmpjaysfmlu.cpp:35:21: note:   conversion of argument 1 would be ill-formed:\n\
    /tmp/tmpjaysfmlu.cpp:54:27: error: binding reference of type \u2018std::string&\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>&\u2019} to \u2018const std::__cxx11::basic_string<char>\u2019\
    \ discards qualifiers\n   54 |         if(!is_lower(pair.second)) {\n      | \
    \                     ~~~~~^~~~~~\n/tmp/tmpjaysfmlu.cpp:60:33: error"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0)\n        return false;\n    std::string str;\n\
    \    for (std::map<std::string,std::string>::const_iterator it = dict.begin();\
    \ it != dict.end(); ++it) {\n        if (!(it->first == \"Name\" || it->first\
    \ == \"Age\" || it->first == \"City\"))\n            return false;\n        if\
    \ (it->second.size() == 0)\n            return false;\n        for (std::string\
    \ str1 : str)\n            if (it->second.find(str1) == std::string::npos)\n \
    \               return false;\n        str.clear();\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcnz8xw_l.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpcnz8xw_l.cpp:26:33: error:\
    \ conversion from \u2018char\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   26 |      \
    \   for (std::string str1 : str)\n      |                                 ^~~\n"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true; \n    for (auto it : dict) {\n \
    \       if (it.first >= 'a' && it.first <= 'z') return true;\n        if (it.first\
    \ >= 'A' && it.first <= 'Z') return true;\n        return false;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzgtdu9v.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpgzgtdu9v.cpp:20:22: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   20 |         if (it.first >= 'a' && it.first <= 'z')\
    \ return true;\n      |             ~~~~~~~~ ^~ ~~~\n      |                |\
    \        |\n      |                |        char\n      |                const\
    \ std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgzgtdu9v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpgzgtdu9v.cpp:20:25:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |         if (it.first\
    \ >= 'a' && it.first <= 'z') return true;\n      |                         ^~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgzgtdu9v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgzgtdu9v.cpp:20:25: note:   mismatched typ"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    auto itr\
    \ = dict.begin();\n    auto end = dict.end();\n    for (; itr != end; ++itr) {\n\
    \        for (auto& [k, v] : itr) {\n            auto lower = std::tolower(k);\n\
    \            auto upper = std::toupper(k);\n            if (lower == k || upper\
    \ == k) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5phmgjd.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpk5phmgjd.cpp:24:29: error:\
    \ no matching function for call to \u2018begin(std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&)\u2019\
    \n   24 |         for (auto& [k, v] : itr) {\n      |                        \
    \     ^~~\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk5phmgjd.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpk5phmgjd.cpp:24:29: note:   \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    \ is not derived from \u2018std::initializer_list<_Tp>\u2019\n   24 |        \
    \ for (auto& [k, v] : itr) {\n      |                             ^~~\nIn file\
    \ included from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \         "
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (auto it = dict.begin(); it != dict.end(); ++it) {\n      \
    \  if(it->first != \"Name\" && it->first != \"Age\" && it->first != \"City\" &&\
    \ it->first != 8 && it->first != 9)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6n4k73th.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp6n4k73th.cpp:19:90: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   19 |         if(it->first != \"Name\" && it->first\
    \ != \"Age\" && it->first != \"City\" && it->first != 8 && it->first != 9)\n \
    \     |                                                                      \
    \          ~~~~~~~~~ ^~ ~\n      |                                           \
    \                                         |        |\n      |                \
    \                                                                    |       \
    \ int\n      |                                                               \
    \                     const std::__cxx11::basic_string<char>\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6n4k73th.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6n4k73th.cpp:19:93:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   19 |         if(it->first\
    \ != \"Name\" && it->first != \"Age\" && it->first != \"City\" && it->first !=\
    \ 8 && it->first != 9)\n      |                                              \
    \                                               ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6n4k73th.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_it"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tassert(!dict.empty());\n\t\n\t// Check to see if the dictionary contains\
    \ strings in lower case.\n\t// If so, then return true to indicate that the given\
    \ map\n\t// contains all strings in lower case.\n\tbool containsLower = false;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); ++it)\n\t{\n\t\tauto key = it->first;\n\
    \t\tauto value = it->second;\n\t\t\n\t\tif( std::tolower( key ) == key )\n\t\t\
    {\n\t\t\tcontainsLower = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// Check to see\
    \ if the dictionary contains strings in upper case.\n\t// If so, then return true\
    \ to indicate that the given map\n\t// contains all strings in upper case.\n\t\
    bool containsUpper = false;\n\tfor (auto it = dict.begin(); it != dict.end();\
    \ ++it)\n\t{\n\t\tauto key = it->first;\n\t\tauto value = it->second;\n\t\t\n\t\
    \tif( std::toupper( key ) == key )\n\t\t{\n\t\t\tcontainsUpper = true;\n\t\t\t\
    break;\n\t\t}\n\t}\n\t\n\treturn (containsLower && containsUpper);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzc12a3sb.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpzc12a3sb.cpp:29:25: error:\
    \ no matching function for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\
    \n   29 |   if( std::tolower( key ) == key )\n      |                        \
    \ ^\nIn file included from /usr/include/c++/9/cctype:42,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n                 from\
    \ /tmp/tmpzc12a3sb.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate: \u2018\
    int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n      |\
    \            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\
    \n  122 | extern int tolower (int __c) __THROW;\n      |                     ~~~~^~~\n\
    In file included from /usr/include/c++/9/bits/basic_ios.h:37,\n              \
    \   from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpzc12a3sb.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpzc12a3sb.cpp:29:25: note:   candidate expects 2 arguments,\
    \ 1 provided\n   29 |   if( std::tolower( key ) == key )\n      |            \
    \             ^\n/tmp/tmpzc12a3sb.cpp:45:25: error: no matching function for call\
    \ to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\n   45 |   if( std::toupper(\
    \ key ) == key )\n      |                         ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 fr"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return false; // return if empty map\n\n    //\
    \ check keys are in lower case or upper case\n    for (auto x: dict) {\n     \
    \   std::transform(x.first.begin(), x.first.end(), x.first.begin(), ::tolower);\n\
    \        std::transform(x.second.begin(), x.second.end(), x.second.begin(), ::toupper);\n\
    \    }\n\n    // check all keys are in lower case or upper case\n    for (auto\
    \ x: dict) {\n        std::transform(x.first.begin(), x.first.end(), x.first.begin(),\
    \ ::toupper);\n        std::transform(x.second.begin(), x.second.end(), x.second.begin(),\
    \ ::tolower);\n    }\n\n    // return true if all keys are in lower case or upper\
    \ case\n    return dict.empty() ? true : false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp4kh_o7lk.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _OIter = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _UnaryOperation = int (*)(int) noexcept]\u2019:\n/tmp/tmp4kh_o7lk.cpp:22:82:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:4343:12: error: assignment\
    \ of read-only location \u2018__result.__gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >::operator*()\u2019\n 4343 |  *__result =\
    \ __unary_op(*__first);\n      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (!dict.empty()) {\n        // check keys are in lower case\n\
    \        auto it = dict.begin();\n        while (it != dict.end()) {\n       \
    \     if (std::to_string(it->first).size() > 0) {\n                auto temp =\
    \ it->first;\n                for (auto &ch: temp) {\n                    if (std::tolower(ch)\
    \ != ch)\n                        return false;\n                }\n         \
    \   }\n            ++it;\n        }\n        // check keys are in upper case\n\
    \        it = dict.begin();\n        while (it != dict.end()) {\n            if\
    \ (std::to_string(it->first).size() > 0) {\n                auto temp = it->first;\n\
    \                for (auto &ch: temp) {\n                    if (std::toupper(ch)\
    \ != ch)\n                        return false;\n                }\n         \
    \   }\n            ++it;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzv_k4nw_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpzv_k4nw_.cpp:22:41: error:\
    \ no matching function for call to \u2018to_string(const std::__cxx11::basic_string<char>&)\u2019\
    \n   22 |             if (std::to_string(it->first).size() > 0) {\n      |   \
    \                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzv_k4nw_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018lo"
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto &&k : dict) {\n        if(k.first.compare(0,3,\"case\"\
    ) == 0\n            || k.first.compare(0,4,\"Case\") == 0) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpis1p20o0: /tmp/tmpis1p20o0.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    for(auto itr = dict.begin(); itr !=\
    \ dict.end(); ++itr) {\n        if(itr->first.size() !=0 && itr->first.at(0) >\
    \ 'Z') {\n            return false;\n        }\n        if(itr->first.size() !=\
    \ 0 && itr->first.at(0) < 'A') {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwykmj864: /tmp/tmpwykmj864.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    auto keys = dict.begin();\n\
    \    for (auto it = keys + 1; it != dict.end(); ++it) {\n        auto key_1 =\
    \ it->first;\n        auto key_2 = it->second;\n        if (std::tolower(key_1)\
    \ == std::tolower(key_2))\n            continue;\n        auto lower = std::tolower(key_1);\n\
    \        auto upper = std::toupper(key_1);\n        if (std::tolower(key_2) ==\
    \ std::tolower(key_2))\n            continue;\n        auto upper2 = std::toupper(key_2);\n\
    \        if (lower != upper)\n            return false;\n        if (upper !=\
    \ upper2)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ewz96q7.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7ewz96q7.cpp:21:25: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    \ and \u2018int\u2019)\n   21 |     for (auto it = keys + 1; it != dict.end();\
    \ ++it) {\n      |                    ~~~~ ^ ~\n      |                    | \
    \     |\n      |                    |      int\n      |                    std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7ewz96q7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7ewz96q7.cpp:21:27:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   21 |     for (auto it = keys + 1; it != dict.end();\
    \ ++it) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7ewz96q7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_"
  stdout: ''
  timestamp: 1660131172
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) {\n        return false;\n    }\n    for(auto\
    \ &pair : dict) {\n        if(pair.first.compare(0, 3, string(\"\\\"\")) != 0)\
    \ {\n            return false;\n        }\n    }\n    for(auto &pair : dict) {\n\
    \        if(pair.first.compare(0, 3, string(\"\\\"\")) != 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jrlsmf_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp3jrlsmf_.cpp:22:37: error:\
    \ \u2018string\u2019 was not declared in this scope\n   22 |         if(pair.first.compare(0,\
    \ 3, string(\"\\\"\")) != 0) {\n      |                                     ^~~~~~\n\
    /tmp/tmp3jrlsmf_.cpp:22:37: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3jrlsmf_.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3jrlsmf_.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp3jrlsmf_.cpp:27:37: error: \u2018string\u2019 was not declared in this\
    \ scope\n   27 |         if(pair.first.compare(0, 3, string(\"\\\"\")) != 0) {\n\
    \      |                                     ^~~~~~\n/tmp/tmp3jrlsmf_.cpp:27:37:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istrea"
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Your code here\n  \n  for (auto & kv : dict) {\n    assert(kv.first.size()\
    \ <= 5);\n    assert(kv.second.size() <= 5);\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp692ukt15: /tmp/tmp692ukt15.cpp:22: bool check_dict_case(std::map<std::__cxx11::basic_string<char>,
    std::__cxx11::basic_string<char> >): Assertion `kv.second.size() <= 5'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) return false;\n  for (auto &kv: dict)\n  {\n  \
    \  // all keys should be strings in lower case\n    if (!kv.first.compare(kv.first.begin(),\
    \ kv.first.end()) == 0) return false;\n    // all keys should be strings in upper\
    \ case\n    if (!kv.first.compare(kv.first.end(), kv.first.begin(), 1) == 0) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ajwtqdn.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp9ajwtqdn.cpp:22:59: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(std::__cxx11::basic_string<char>::const_iterator,\
    \ std::__cxx11::basic_string<char>::const_iterator) const\u2019\n   22 |     if\
    \ (!kv.first.compare(kv.first.begin(), kv.first.end()) == 0) return false;\n \
    \     |                                                           ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9ajwtqdn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tm"
  stdout: ''
  timestamp: 1660131172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif (dict.empty()) return false; \n\tfor (auto it = dict.begin();\
    \ it != dict.end(); it++)\n\t{\n\t\t// Only check for lower case or upper case\
    \ if the keys \n\t\t// are not strings or numbers.\n\t\tif (std::is_same<char,\
    \ decltype(it->first[0])>::value ||\n\t\t    std::is_same<char, decltype(it->first[0])>::value)\n\
    \t\t{\n\t\t\tauto itr = std::all_of(it->first.begin(), it->first.end(),\n\t\t\t\
    \t[](char x) {\n\t\t\t\t\treturn std::islower(x);\n\t\t\t\t});\n\t\t\tif (itr\
    \ && std::all_of(it->first.begin(), it->first.end(),\n\t\t\t\t[](char x) {\n\t\
    \t\t\t\treturn std::isupper(x);\n\t\t\t\t})) return true;\n\t\t}\n\t\telse return\
    \ false;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpt5k87zh2: /tmp/tmpt5k87zh2.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) return true; \n  for (const auto &kv : dict)\n\
    \  {\n    if (!std::islower(kv.first) || !std::isupper(kv.first))\n    {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kvsgsjo.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp_kvsgsjo.cpp:21:31: error:\
    \ no matching function for call to \u2018islower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   21 |     if (!std::islower(kv.first) || !std::isupper(kv.first))\n      |\
    \                               ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp_kvsgsjo.cpp:2:\n/usr/include/ctype.h:112:1: note:\
    \ candidate: \u2018int islower(int)\u2019\n  112 | __exctype (islower);\n    \
    \  | ^~~~~~~~~\n/usr/include/ctype.h:112:1: note:   no known conversion for argument\
    \ 1 from \u2018const std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\
    \n  112 | __exctype (islower);\n      | ^~~~~~~~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_kvsgsjo.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2593:5: note:\
    \ candidate: \u2018template<class _CharT> bool std::islower(_CharT, const std::locale&)\u2019\
    \n 2593 |     islower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2593:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_kvsgsjo.cpp:21:31: note:   candidate expects 2 arguments,\
    \ 1 provided\n   21 |     if (!std::islower(kv.first) || !std::isupper(kv.first))\n\
    \      |                               ^\n/tmp/tmp_kvsgsjo.cpp:21:58: error: no\
    \ matching function for call to \u2018isupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   21 |     if (!std::islower(kv.first) || !std::isupper(kv.first))\n      |\
    \                                                          "
  stdout: ''
  timestamp: 1660131172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    std::string lower,\
    \ upper;\n    // get strings in lower and upper case\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        lower = it->first;\n        upper = it->second;\n\
    \        if (!isalpha(lower[0]) && !isupper(lower[0])) \n            return false;\n\
    \        if (!isalpha(upper[0]) && !isupper(upper[0])) \n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_3axse8o: /tmp/tmp_3axse8o.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (!dict.size()) return false;\n    for (auto &pair : dict) {\n\
    \        std::string lower = pair.first.substr(0,1).toLowerCase();\n        std::string\
    \ upper = pair.first.substr(0,1).toUpperCase();\n        if (pair.first == lower)\
    \ {\n            if (!pair.second.compare(0, lower.size(), lower)) return false;\n\
    \        } else {\n            if (!pair.second.compare(0, upper.size(), upper))\
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponva3ij7.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmponva3ij7.cpp:20:52: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toLowerCase\u2019\n   20 |         std::string lower = pair.first.substr(0,1).toLowerCase();\n\
    \      |                                                    ^~~~~~~~~~~\n/tmp/tmponva3ij7.cpp:21:52:\
    \ error: \u2018class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018toUpperCase\u2019\n   21 |         std::string upper = pair.first.substr(0,1).toUpperCase();\n\
    \      |                                                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    auto check\
    \ = [](auto it1, auto it2) -> bool {\n        return (it1.first == it2.first)\
    \ && (it1.first == 'a' || it1.first == 'A') && (it1.second == it2.second);\n \
    \   };\n    return std::all_of(dict.begin(), dict.end(), check);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdr8n3sv4.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_negate<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _Predicate = check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(auto:22, auto:23)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:104:42:\
    \   required from \u2018_InputIterator std::__find_if(_InputIterator, _InputIterator,\
    \ _Predicate, std::input_iterator_tag) [with _InputIterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_negate<check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(auto:22, auto:23)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:171:28:\
    \   required from \u2018_InputIterator std::__find_if_not(_InputIterator, _InputIterator,\
    \ _Predicate) [with _InputIterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(auto:22, auto:23)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:566:32:\
    \   required from \u2018_IIter std::find_if_not(_IIter, _IIter, _Predicate) [with\
    \ _IIter = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _Predicate = check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)::<lambda(auto:22, auto:23)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:509:40:\
    \   requ"
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif (dict.empty()) return false;\n\tauto keys = dict.begin();\n\t\
    // Iterate over all keys to find the difference in the keys\n\tfor(auto itr =\
    \ dict.begin(); itr != dict.end(); itr++) {\n\t\tif (!(std::all_of(keys->second.begin(),\
    \ keys->second.end(), [&](char ch) { return std::isupper(ch) || std::islower(ch);\
    \ }))) {\n\t\t\tstd::cerr << \"ERROR: Not all keys are in lower or upper case.\"\
    \ << std::endl;\n\t\t\treturn false;\n\t\t}\n\t\tkeys++;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr3iedyme: /tmp/tmpr3iedyme.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    auto keys = dict.begin();\n\
    \    auto end  = dict.end();\n    for(; keys != end; ++keys) {\n        bool isUpper\
    \ =  \n            (std::all_of(keys->second.begin(), keys->second.end(), [](char\
    \ c){ return (std::isupper(c)); } )) ||\n            (std::all_of(keys->second.begin(),\
    \ keys->second.end(), [](char c){ return (std::islower(c)); } ));\n        if\
    \ (!isUpper)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmm7mj6yx: /tmp/tmpmm7mj6yx.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return true;\n    auto itr = dict.begin();\n \
    \   auto end = dict.end();\n    for(; itr != end; ++itr) {\n        if(!std::all_of(itr->second.begin(),\
    \ itr->second.end(), ::islower)) return false;\n        if(!std::all_of(itr->second.begin(),\
    \ itr->second.end(), ::isupper)) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxgvkb_p6: /tmp/tmpxgvkb_p6.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return false;\n    for (auto const &item : dict)\n\
    \        if (!item.first.compare(0, 2, \"string\")) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0hml7hbp: /tmp/tmp0hml7hbp.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131174
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false; // empty map\n    for(auto &entry\
    \ : dict) {\n        if(!((entry.first == entry.second.toStdString() && entry.first\
    \ == entry.second.toStdString().toLower()) ||\n            (entry.first == entry.second.toStdString()\
    \ && entry.first == entry.second.toStdString().toUpper())))\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsq6iod1w.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpsq6iod1w.cpp:20:43: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toStdString\u2019\n   20 |         if(!((entry.first == entry.second.toStdString()\
    \ && entry.first == entry.second.toStdString().toLower()) ||\n      |        \
    \                                   ^~~~~~~~~~~\n/tmp/tmpsq6iod1w.cpp:20:88: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toStdString\u2019\n   20 |         if(!((entry.first == entry.second.toStdString()\
    \ && entry.first == entry.second.toStdString().toLower()) ||\n      |        \
    \                                                                            \
    \    ^~~~~~~~~~~\n/tmp/tmpsq6iod1w.cpp:21:42: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toStdString\u2019\n   21 |             (entry.first\
    \ == entry.second.toStdString() && entry.first == entry.second.toStdString().toUpper())))\n\
    \      |                                          ^~~~~~~~~~~\n/tmp/tmpsq6iod1w.cpp:21:87:\
    \ error: \u2018class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018toStdString\u2019\n   21 |             (entry.first == entry.second.toStdString()\
    \ && entry.first == entry.second.toStdString().toUpper())))\n      |         \
    \                                                                            \
    \  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::pair<bool,bool> ret = dict::equal_range(\"NAME\");\n    bool\
    \ found = false;\n    if (ret.first == dict.end())\n        return true;\n   \
    \ found = true;\n    std::map<std::string,std::string>::iterator itr = ret.first;\n\
    \    while(found && itr != ret.second) {\n        found = (itr->first < itr->second);\n\
    \        itr++;\n    }\n    return found;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7do_pt2.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpw7do_pt2.cpp:18:32: error:\
    \ \u2018dict\u2019 is not a class, namespace, or enumeration\n   18 |     std::pair<bool,bool>\
    \ ret = dict::equal_range(\"NAME\");\n      |                                ^~~~\n\
    /tmp/tmpw7do_pt2.cpp:20:19: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018bool\u2019 and \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    })\n   20 |     if (ret.first == dict.end())\n      |         ~~~~~~~~~ ^~ ~~~~~~~~~~\n\
    \      |             |                |\n      |             bool            \
    \ std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw7do_pt2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpw7do_pt2.cpp:20:31:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018bool\u2019\n   20 |     if (ret.first == dict.end())\n      |    \
    \                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw7do_pt2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter,"
  stdout: ''
  timestamp: 1660131173
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string,std::string>::iterator iter=dict.begin();\n\
    \    while(iter!=dict.end()) {\n        // Check all keys here\n        for(auto\
    \ iter1=iter->begin();iter1!=iter->end();iter1++) {\n            auto key1=iter1->first;\n\
    \            auto val1=iter1->second;\n            if(key1=='a' || key1=='A' ||\
    \ key1=='b' || key1=='B' || key1=='c' || key1=='C' || key1=='d' || key1=='D')\
    \ {\n                std::cout<<\"Found \"<<key1<<\" in upper case\"<<std::endl;\n\
    \            } else {\n                std::cout<<\"Found \"<<key1<<\" in lower\
    \ case\"<<std::endl;\n            }\n        }\n        iter=dict.begin();\n \
    \   }\n    return dict.size()==0;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmportml3ta.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmportml3ta.cpp:21:30: error:\
    \ \u2018struct std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018begin\u2019\n   21 |         for(auto iter1=iter->begin();iter1!=iter->end();iter1++)\
    \ {\n      |                              ^~~~~\n/tmp/tmportml3ta.cpp:21:51: error:\
    \ \u2018struct std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018end\u2019\n   21 |         for(auto iter1=iter->begin();iter1!=iter->end();iter1++)\
    \ {\n      |                                                   ^~~\n"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return true;\n    for(auto& [k, v] : dict)\n \
    \   {\n        if(std::to_string(k).size() > 2 ||\n           (std::to_string(k).size()\
    \ == 2 && std::to_string(k).at(0) == 'A' && std::to_string(k).at(1) == 'P'))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjn7nmpe.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpmjn7nmpe.cpp:21:28: error:\
    \ no matching function for call to \u2018to_string(std::tuple_element<0, std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::type&)\u2019\
    \n   21 |         if(std::to_string(k).size() > 2 ||\n      |                \
    \            ^\nIn file included from /usr/include/c++/9/string:55,\n        \
    \         from /usr/include/c++/9/bits/locale_classes.h:40,\n                \
    \ from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmjn7nmpe.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple_element<0,\
    \ std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::tuple_element<0, std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::type\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>\u2019} to \u2018unsigned int\u2019\
    \n 6554 |   to_string(unsigned __val)\n      |             ~~~~~~~~~^~~~~\n/usr/include/"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    bool is_same = true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        if (!it->second.compare(it->second.upper(),\
    \ ::tolower)) {\n            std::cout << \"upper:\" << it->first << \" lower:\"\
    \ << it->second.upper() << std::endl;\n            is_same = false;\n        }\n\
    \        else if (!it->second.compare(it->second.lower(), ::toupper)) {\n    \
    \        std::cout << \"upper:\" << it->first << \" lower:\" << it->second.lower()\
    \ << std::endl;\n            is_same = false;\n        }\n    }\n    return is_same;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh1nac5i.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpmh1nac5i.cpp:22:44: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    upper\u2019\n   22 |         if (!it->second.compare(it->second.upper(), ::tolower))\
    \ {\n      |                                            ^~~~~\n/tmp/tmpmh1nac5i.cpp:23:75:\
    \ error: \u2018class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018upper\u2019\n   23 |             std::cout << \"upper:\" << it->first\
    \ << \" lower:\" << it->second.upper() << std::endl;\n      |                \
    \                                                           ^~~~~\n/tmp/tmpmh1nac5i.cpp:26:49:\
    \ error: \u2018class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018lower\u2019\n   26 |         else if (!it->second.compare(it->second.lower(),\
    \ ::toupper)) {\n      |                                                 ^~~~~\n\
    /tmp/tmpmh1nac5i.cpp:27:75: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018lower\u2019\n   27 |             std::cout << \"upper:\"\
    \ << it->first << \" lower:\" << it->second.lower() << std::endl;\n      |   \
    \                                                                        ^~~~~\n"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Write your code here\n  assert(!dict.empty());\n  // return true\
    \ if all keys are strings in lower case\n  for(auto &v: dict)\n  {\n    if(v.first.compare(v.first,0,1)\
    \ == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9b1h8ae.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpc9b1h8ae.cpp:23:35: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(const\
    \ std::__cxx11::basic_string<char>&, int, int) const\u2019\n   23 |     if(v.first.compare(v.first,0,1)\
    \ == 0)\n      |                                   ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpc9b1h8ae.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 3 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpc9b1h8ae.cpp:23:35:\
    \ note:   candidate expects 1 argument, 3 provided\n   23 |     if(v.first.compare(v.first,0,"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tauto res = true;\n\tfor(auto it=dict.begin(); it!=dict.end(); ++it)\
    \ {\n\t\tif(std::strlen(it->first) > 0) {\n\t\t\tif(std::strcasecmp(it->first.c_str(),\
    \ it->first.c_str()) != 0) {\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t} else {\n\t\t\tif(std::strcasecmp(it->second.c_str(), it->second.c_str()) !=\
    \ 0) {\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiltq9hgx.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpiltq9hgx.cpp:20:22: error:\
    \ cannot convert \u2018const std::__cxx11::basic_string<char>\u2019 to \u2018\
    const char*\u2019\n   20 |   if(std::strlen(it->first) > 0) {\n      |       \
    \           ~~~~^~~~~\n      |                      |\n      |               \
    \       const std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/cstring:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpiltq9hgx.cpp:2:\n/usr/include/string.h:385:35:\
    \ note:   initializing argument 1 of \u2018size_t strlen(const char*)\u2019\n\
    \  385 | extern size_t strlen (const char *__s)\n      |                     \
    \  ~~~~~~~~~~~~^~~\n/tmp/tmpiltq9hgx.cpp:21:12: error: \u2018strcasecmp\u2019\
    \ is not a member of \u2018std\u2019; did you mean \u2018strcasecmp\u2019?\n \
    \  21 |    if(std::strcasecmp(it->first.c_str(), it->first.c_str()) != 0) {\n\
    \      |            ^~~~~~~~~~\nIn file included from /usr/include/string.h:432,\n\
    \                 from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpiltq9hgx.cpp:2:\n/usr/include/strings.h:116:12:\
    \ note: \u2018strcasecmp\u2019 declared here\n  116 | extern int strcasecmp (const\
    \ char *__s1, const char *__s2)\n      |            ^~~~~~~~~~\n/tmp/tmpiltq9hgx.cpp:26:12:\
    \ error: \u2018strcasecmp\u2019 is not a member of \u2018std\u2019; did you mean\
    \ \u2018strcasecmp\u2019?\n   26 |    if(std::strcasecmp(it->second.c_str(), it->second.c_str())\
    \ != 0) {\n      |            ^~~~~~~~~~\nIn file included from /usr/include/string.h:432,\n\
    \                 from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpiltq9hgx.cpp:2:\n/usr/include/strings.h:116:12:\
    \ note: \u2018strcasecmp\u2019 declared here\n  116 | extern int strcasecmp (const\
    \ char *__s1, const char *__s2)\n      |            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); ++it) {\n        if (it->first >= 'A' && it->first <= 'Z'\
    \ || it->first >= 'a' && it->first <= 'z')\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54vwmi1b.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp54vwmi1b.cpp:20:23: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   20 |         if (it->first >= 'A' && it->first <=\
    \ 'Z' || it->first >= 'a' && it->first <= 'z')\n      |             ~~~~~~~~~\
    \ ^~ ~~~\n      |                 |        |\n      |                 |      \
    \  char\n      |                 const std::__cxx11::basic_string<char>\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp54vwmi1b.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp54vwmi1b.cpp:20:26:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |         if (it->first\
    \ >= 'A' && it->first <= 'Z' || it->first >= 'a' && it->first <= 'z')\n      |\
    \                          ^~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp54vwmi1b.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitu"
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    return dict.size() == 0 || (dict.size()\
    \ == 1 && std::all_of(dict.begin(), dict.end(), [&](std::pair<std::string,std::string>\
    \ p) { return p.first.size() == p.second.size(); }));\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgeykx2wy: /tmp/tmpgeykx2wy.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t\n\t// Write your code here\n\t\n\tassert(dict.size()>0);\n\t\n\t\
    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprfwrw2ci: /tmp/tmprfwrw2ci.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0)\n        return false;\n    for (auto x:\
    \ dict)\n        if (!std::all_of(x.first.begin(), x.first.end(), ::tolower))\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpk1yctdz3: /tmp/tmpk1yctdz3.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tbool all_keys = (dict.size() == 0);\n\tif(all_keys) {\n\t\treturn\
    \ all_keys;\n\t}\n\tfor(auto& item : dict)\n\t{\n\t\tbool is_lower_case = (item.first\
    \ == item.first.to_lower());\n\t\tbool is_upper_case = (item.first == item.first.to_upper());\n\
    \t\tall_keys = all_keys && (is_lower_case || is_upper_case);\n\t\tif(all_keys)\
    \ {\n\t\t\treturn all_keys;\n\t\t}\n\t}\n\treturn all_keys;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpppg8nxbb.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpppg8nxbb.cpp:24:50: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018to_lower\u2019\n   24 |   bool is_lower_case = (item.first == item.first.to_lower());\n\
    \      |                                                  ^~~~~~~~\n/tmp/tmpppg8nxbb.cpp:25:50:\
    \ error: \u2018const class std::__cxx11::basic_string<char>\u2019 has no member\
    \ named \u2018to_upper\u2019\n   25 |   bool is_upper_case = (item.first == item.first.to_upper());\n\
    \      |                                                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tassert(dict.size() != 0);\n\t\n\tif (dict.size() == 1) {\n\t\treturn\
    \ true;\n\t} else {\n\t\tbool flag = false;\n\t\tfor (auto i: dict) {\n\t\t\t\
    std::string key(i.first);\n\t\t\tstd::string value(i.second);\n\t\t\t\n\t\t\t\
    if (std::to_string(key).find(\"__\") == 0) {\n\t\t\t\treturn true;\n\t\t\t} else\
    \ if (std::to_string(key).find(\"_\") == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else if (std::to_string(key).find(\"_\") > 0) {\n\t\t\t\tflag = true;\n\t\t\t\
    } else if (std::to_string(key).find(\"__\") > 0) {\n\t\t\t\tflag = false;\n\t\t\
    \t} else {\n\t\t\t\tflag = key.tolower() == key;\n\t\t\t}\n\t\t}\n\t\treturn flag;\n\
    \t}\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jl2qm8w.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp2jl2qm8w.cpp:28:26: error:\
    \ no matching function for call to \u2018to_string(std::string&)\u2019\n   28\
    \ |    if (std::to_string(key).find(\"__\") == 0) {\n      |                 \
    \         ^\nIn file included from /usr/include/c++/9/string:55,\n           \
    \      from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2jl2qm8w.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018int\u2019\n 6549 |  \
    \ to_string(int __val)\n      |             ~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(unsigned int)\u2019\
    \n 6554 |   to_string(unsigned __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018unsigned int\u2019\n\
    \ 6554 |   to_string(unsigned __val)\n      |             ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n\
    \ 6560 |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool result = true;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (it->second.size()\
    \ == 0 || std::tolower(it->first) == it->first)\n            result = false;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpirwtrlfj.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpirwtrlfj.cpp:20:61: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   20 |         if (it->second.size() == 0 || std::tolower(it->first) == it->first)\n\
    \      |                                                             ^\nIn file\
    \ included from /usr/include/c++/9/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpirwtrlfj.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpirwtrlfj.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpirwtrlfj.cpp:20:61: note:   candidate expects 2 arguments,\
    \ 1 provided\n   20 |         if (it->second.size() == 0 || std::tolower(it->first)\
    \ == it->first)\n      |                                                     \
    \        ^\n"
  stdout: ''
  timestamp: 1660131176
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    if (dict.size() == 0) {\n        return false;\n    }\n\n\
    \    for (auto&& [k, v] : dict) {\n        if (k == \"State\" || k == \"ZIP\"\
    ) {\n            continue;\n        }\n        if (k < 'a' || k > 'z') {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23g9zigw.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp23g9zigw.cpp:27:15: error:\
    \ no match for \u2018operator<\u2019 (operand types are \u2018std::tuple_element<0,\
    \ std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019} and\
    \ \u2018char\u2019)\n   27 |         if (k < 'a' || k > 'z') {\n      |      \
    \       ~ ^ ~~~\n      |             |   |\n      |             |   char\n   \
    \   |             std::tuple_element<0, std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >::type {aka const std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp23g9zigw.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp23g9zigw.cpp:27:17:\
    \ note:   \u2018std::tuple_element<0, std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   27\
    \ |         if (k < 'a' || k > 'z') {\n      |                 ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp23g9zigw.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11:"
  stdout: ''
  timestamp: 1660131175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto& e: dict)\n        if(e.first >= 'a' && e.first <= 'z')\n\
    \            return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdj6yfe13.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpdj6yfe13.cpp:19:20: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   19 |         if(e.first >= 'a' && e.first <= 'z')\n\
    \      |            ~~~~~~~ ^~ ~~~\n      |              |        |\n      | \
    \             |        char\n      |              const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdj6yfe13.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdj6yfe13.cpp:19:23:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   19 |         if(e.first\
    \ >= 'a' && e.first <= 'z')\n      |                       ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdj6yfe13.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdj6yfe13.cpp:19:23: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIte"
  stdout: ''
  timestamp: 1660131175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    return true;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxem712sl: /tmp/tmpxem712sl.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    \n    for(auto &key_value: dict)\
    \ {\n        auto &key = key_value.first;\n        auto &value = key_value.second;\n\
    \        if(key.find(\"_\") != 0) {\n            return true;\n        } else\
    \ {\n            char ch1 = toupper(key[0]);\n            char ch2 = toupper(key[1]);\n\
    \            if(ch1 != ch2) {\n                return false;\n            } else\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7qvzg7s5: /tmp/tmp7qvzg7s5.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    // for (auto itr : dict)\n    // \
    \    for (auto itr1 : itr.second)\n    //         if ((itr1.first == itr.first\
    \ || itr1.first == itr.second.front().first)) {\n    //             if (itr1.second\
    \ != itr.second.front().second) {\n    //                 return false;\n    //\
    \             }\n    //         }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp10m1ioo0: /tmp/tmp10m1ioo0.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    \n    bool ret = true;\n    for (auto&\
    \ p: dict)\n    {\n        if (!p.first.compare(p.second.begin()->first,std::tolower(p.first.begin()->first)))\n\
    \        {\n            ret = false;\n        }\n        if (!p.first.compare(p.second.begin()->first,std::toupper(p.first.begin()->first)))\n\
    \        {\n            ret = false;\n        }\n    }\n    \n    return ret;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdwc__9y.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpgdwc__9y.cpp:23:48: error:\
    \ request for member \u2018first\u2019 in \u2018* p.std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::second.std::__cxx11::basic_string<char>::begin().__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >::operator->()\u2019, which is of non-class\
    \ type \u2018char\u2019\n   23 |         if (!p.first.compare(p.second.begin()->first,std::tolower(p.first.begin()->first)))\n\
    \      |                                                ^~~~~\n/tmp/tmpgdwc__9y.cpp:23:84:\
    \ error: request for member \u2018first\u2019 in \u2018* p.std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::first.std::__cxx11::basic_string<char>::begin().__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >::operator->()\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   23 |         if (!p.first.compare(p.second.begin()->first,std::tolower(p.first.begin()->first)))\n\
    \      |                                                                     \
    \               ^~~~~\n/tmp/tmpgdwc__9y.cpp:27:48: error: request for member \u2018\
    first\u2019 in \u2018* p.std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::second.std::__cxx11::basic_string<char>::begin().__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >::operator->()\u2019, which is of non-class\
    \ type \u2018char\u2019\n   27 |         if (!p.first.compare(p.second.begin()->first,std::toupper(p.first.begin()->first)))\n\
    \      |                                                ^~~~~\n/tmp/tmpgdwc__9y.cpp:27:84:\
    \ error: request for member \u2018first\u2019 in \u2018* p.std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::first.std::__cxx11::basic_string<char>::begin().__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >::operator->()\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   27 |       "
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    if(dict.size()==1)\n\
    \        return true;\n    for(auto it=dict.begin();it!=dict.end();it++) {\n \
    \       if(!isupper(it->first[0]) && islower(it->first[0])) {\n            return\
    \ false;\n        }\n        else if(!isupper(it->first[0]) && !islower(it->first[0]))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpomby8hq5: /tmp/tmpomby8hq5.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()){\n        return false;\n    }\n    for (auto\
    \ const& x: dict){\n        bool found = false;\n        for (auto const& y: x)\
    \ {\n            if (y.second == x.first) {\n                found = true;\n \
    \               break;\n            }\n        }\n        if (!found)\n      \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwjwrazo.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpmwjwrazo.cpp:23:29: error:\
    \ no matching function for call to \u2018begin(const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   23 |         for (auto const&\
    \ y: x) {\n      |                             ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmwjwrazo.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpmwjwrazo.cpp:23:29: note:   \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   23 |         for (auto const& y: x) {\n      |                          \
    \   ^\nIn file included from /usr/include/c++/9/string:54,\n                 from\
    \ /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n       "
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string key1, key2;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); ++it) {\n        key1 = it->first;\n        key2 = it->second;\n\
    \        if(key1.size() == 0 || key1.size() > key2.size() || key1.size() >= 2\
    \ && key1[0] == 'A' && key1[1] == 'a' && key1[2] == 'i') {\n            return\
    \ true;\n        } else if(key2.size() == 0 || key2.size() > key1.size() || key2.size()\
    \ >= 2 && key2[0] == 'A' && key2[1] == 'a' && key2[2] == 'i') {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzqhr0v3r: /tmp/tmpzqhr0v3r.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (!dict.empty()){\n        for (auto &pair: dict){\n        \
    \    if (!(pair.first.compare(0, 5, \"state\") == 0) && !(pair.first.compare(0,\
    \ 6, \"zip\") == 0) && \n                !(pair.first.compare(0, 7, \"city\")\
    \ == 0) && !(pair.first.compare(0, 8, \"zip\") == 0))\n                return\
    \ false;\n        }\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpeseh_u1y: /tmp/tmpeseh_u1y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool flag = false;\n    if (dict.size() == 0) {\n        return\
    \ true;\n    }\n    for (std::map<std::string,std::string>::iterator it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first.compare(0, 2, \"case\") ==\
    \ 0) {\n            flag = true;\n        } else {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp13xzmhsr: /tmp/tmp13xzmhsr.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    std::string upper_case;\n\
    \    for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n        upper_case\
    \ += itr->first + itr->first;\n    }\n    for (const auto& itr : dict) {\n   \
    \     if (itr.second.compare(0, upper_case.length(), upper_case) == 0) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgp718ajn: /tmp/tmpgp718ajn.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// Write your code here\n\tfor(auto &[key, value] : dict) {\n\t\t\
    if(std::string(key).compare(std::string(key).begin(), std::string(key).end())\
    \ == 0) {\n\t\t\tif(std::string(value).compare(std::string(key).begin(), std::string(key).end())\
    \ == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tif(std::string(key).compare(std::string(key).end(),\
    \ std::string(key).begin()) == 0) {\n\t\t\tif(std::string(value).compare(std::string(key).end(),\
    \ std::string(key).begin()) == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn\
    \ false;\n\t\t}\n\t\tif(std::string(value).compare(std::string(value).begin(),\
    \ std::string(value).end()) == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphgutbc9h.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmphgutbc9h.cpp:20:79: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   20 |   if(std::string(key).compare(std::string(key).begin(),\
    \ std::string(key).end()) == 0) {\n      |                                   \
    \                                            ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphgutbc9h.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution faile"
  stdout: ''
  timestamp: 1660131176
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string key;\n    std::string value;\n    bool flag = true;\n\
    \    for (auto &x: dict) {\n        flag = flag && (x.second.length() != 0);\n\
    \        for (auto &y: x.second) {\n            flag = flag && (y.length() !=\
    \ 0);\n        }\n        for (auto &y: x.first) {\n            flag = flag &&\
    \ (y.length() != 0);\n        }\n    }\n    return flag;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv13bp3lg.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpv13bp3lg.cpp:24:31: error:\
    \ request for member \u2018length\u2019 in \u2018y\u2019, which is of non-class\
    \ type \u2018char\u2019\n   24 |             flag = flag && (y.length() != 0);\n\
    \      |                               ^~~~~~\n/tmp/tmpv13bp3lg.cpp:27:31: error:\
    \ request for member \u2018length\u2019 in \u2018y\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   27 |             flag = flag && (y.length()\
    \ != 0);\n      |                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    bool check_upper = true;\n    bool check_lower = true;\n\
    \    for (auto &[k, v] : dict) {\n        check_upper = check_upper && std::all_of(v.begin(),\
    \ v.end(), ::isupper);\n        check_lower = check_lower && std::all_of(v.begin(),\
    \ v.end(), ::islower);\n    }\n    return check_upper && check_lower;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpl9ggmor_: /tmp/tmpl9ggmor_.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    for (auto iter = dict.begin();\
    \ iter != dict.end(); ++iter) {\n        if (iter->first.find_first_not_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\") != std::string::npos\n            || iter->first.find_first_not_of(\"\
    abcdefghijklmnopqrstuvwxyz\") != std::string::npos) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp73bemya9: /tmp/tmp73bemya9.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size());\n    for (auto item : dict)\n    {\n     \
    \   // Return false if any of the keys are in lower case.\n        // Return true\
    \ if all keys are in upper case.\n        return (item.first < 'A' ||\n      \
    \          item.first > 'Z') ? false : true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jx4gc73.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp5jx4gc73.cpp:23:28: error:\
    \ no match for \u2018operator<\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   23 |         return (item.first < 'A' ||\n      |\
    \                 ~~~~~~~~~~ ^ ~~~\n      |                      |       |\n \
    \     |                      |       char\n      |                      const\
    \ std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5jx4gc73.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5jx4gc73.cpp:23:30:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |         return (item.first\
    \ < 'A' ||\n      |                              ^~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5jx4gc73.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp5jx4gc73.cpp:23:30: note:   mismatched types \u2018const std::__cxx11::sub"
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // TODO: Write your code here\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjm12v80m: /tmp/tmpjm12v80m.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string key;\n    for (auto it=dict.begin(); it!=dict.end();\
    \ ++it)\n        if (!(std::get<std::string>(it).length() > 0)) {\n          \
    \  return false;\n        }\n    \n    for (auto it=dict.begin(); it!=dict.end();\
    \ ++it)\n        if (std::get<std::string>(it).length() > 0 && std::get<std::string>(it).compare(0,2,\"\
    UPPER\") == 0) {\n            key = std::get<std::string>(it).substr(2,std::get<std::string>(it).length()-3);\n\
    \            if (!((std::toupper(key) == std::get<std::string>(it).substr(0,2))))\n\
    \                return false;\n        } else if (std::get<std::string>(it).length()\
    \ > 0 && std::get<std::string>(it).compare(0,2,\"LOWER\") == 0) {\n          \
    \  key = std::get<std::string>(it).substr(2,std::get<std::string>(it).length()-3);\n\
    \            if (!((std::tolower(key) == std::get<std::string>(it).substr(0,2))))\n\
    \                return false;\n        }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0uihoith.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0uihoith.cpp:20:39: error:\
    \ no matching function for call to \u2018get<std::string>(std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&)\u2019\
    \n   20 |         if (!(std::get<std::string>(it).length() > 0)) {\n      |  \
    \                                     ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0uihoith.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:224:5: note: candidate: \u2018template<long\
    \ unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int,\
    \ std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224\
    \ |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 | "
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    // If all\
    \ keys are in lower case, return true\n    // If all keys are in upper case, return\
    \ true\n    // Otherwise, return false.\n    std::for_each(dict.begin(), dict.end(),\
    \ [](const std::pair<std::string,std::string>& entry) {\n        bool lower =\
    \ false;\n        bool upper = false;\n        for(auto it = entry.second.begin();\
    \ it != entry.second.end(); ++it) {\n            if(std::tolower(*it) == *it)\
    \ {\n                lower = true;\n            }\n            if(std::toupper(*it)\
    \ == *it) {\n                upper = true;\n            }\n        }\n       \
    \ if(lower && upper) {\n            return true;\n        }\n        else if(lower)\
    \ {\n            return false;\n        }\n        else if(upper) {\n        \
    \    return false;\n        }\n    });\n    return false;\n}\nint main() {\n \
    \   auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmstzyejp: /tmp/tmpmstzyejp.cpp:49: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    auto it = dict.begin();\n \
    \   auto first = it->first;\n    if (first != std::to_string(first)) return false;\n\
    \    ++it;\n    for (; it != dict.end(); ++it) {\n        auto second = it->second;\n\
    \        if (second != std::to_string(second)) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm76e9jmw.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpm76e9jmw.cpp:21:38: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   21 |     if (first != std::to_string(first)) return false;\n      |     \
    \                                 ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpm76e9jmw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string"
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // BEGIN Question 2\n    for (auto &item: dict)\n    {\n      \
    \  auto &key = item.first;\n        auto &value = item.second;\n        if (!(std::string(key).length()\
    \ > 0 && std::string(key).compare(0, 4, \"state\") == 0))\n            return\
    \ false;\n        if (!(std::string(key).length() > 0 && std::string(key).compare(0,\
    \ 4, \"zip\") == 0))\n            return false;\n    }\n    // END Question 2\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzawtz3nf: /tmp/tmpzawtz3nf.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n         it != dict.end(); ++it) {\n        if (!((it->first\
    \ >= 'a' && it->first <= 'z') ||\n               (it->first >= 'A' && it->first\
    \ <= 'Z')))\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xfzdo02.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp_xfzdo02.cpp:22:26: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   22 |         if (!((it->first >= 'a' && it->first\
    \ <= 'z') ||\n      |                ~~~~~~~~~ ^~ ~~~\n      |               \
    \     |        |\n      |                    |        char\n      |          \
    \          const std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_xfzdo02.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_xfzdo02.cpp:22:29:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   22 |         if (!((it->first\
    \ >= 'a' && it->first <= 'z') ||\n      |                             ^~~\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_xfzdo02.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_xfzdo02.cpp:22:29: note:   mism"
  stdout: ''
  timestamp: 1660131176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif (dict.empty()) return false;\n\tfor (auto x: dict)\n\t{\n\t\t\
    if (x.first.find_first_of('A') != std::string::npos) return true;\n\t\tif (x.first.find_first_of('a')\
    \ != std::string::npos) return true;\n\t\tif (x.first.find_first_of('N') != std::string::npos)\
    \ return true;\n\t\tif (x.first.find_first_of('n') != std::string::npos) return\
    \ true;\n\t\tif (x.first.find_first_of('C') != std::string::npos) return true;\n\
    \t\tif (x.first.find_first_of('c') != std::string::npos) return true;\n\t\tif\
    \ (x.first.find_first_of('Z') != std::string::npos) return true;\n\t\tif (x.first.find_first_of('z')\
    \ != std::string::npos) return true;\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpcraxzbhr: /tmp/tmpcraxzbhr.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// Your code goes here\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2h01jn4o: /tmp/tmp2h01jn4o.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    for (std::map<std::string,std::string>::const_iterator\
    \ it = dict.begin();\n         it != dict.end(); ++it)\n    {\n        if (it->first\
    \ != it->second.substr(0,1))\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpn8i4ezzo: /tmp/tmpn8i4ezzo.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"STATE",
    "NC"}, {"ZIP", "12345"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  for (auto it = dict.begin(); it != dict.end(); ++it)\n    if (it->first\
    \ != it->first || (it->first == \"STATE\" || it->first == \"ZIP\"))\n      return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpu25ptnar: /tmp/tmpu25ptnar.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::map<std::string,std::string>::iterator it;\n  for (it = dict.begin();\
    \ it != dict.end(); it++) {\n    if(it->first == \"Name\" || it->first == \"age\"\
    \ || it->first == \"city\" || it->first == \"state\" || it->first == \"zip\")\n\
    \      return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvrc3vj69: /tmp/tmpvrc3vj69.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for (auto x: dict) {\n    \
    \    auto lower = x.first.c_str();\n        auto upper = x.second.c_str();\n \
    \       bool foundLower = false;\n        bool foundUpper = false;\n        for(int\
    \ i=0;i<lower.length();i++) {\n            if(lower[i]>=65 && lower[i]<=90) {\n\
    \                foundLower = true;\n            } else if(lower[i]>=97 && lower[i]<=122)\
    \ {\n                foundUpper = true;\n            } else {\n              \
    \  foundLower = false;\n                foundUpper = false;\n            }\n \
    \       }\n        if(foundLower && !foundUpper) {\n            return true;\n\
    \        } else if(!foundLower && foundUpper) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6wuhzegd.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp6wuhzegd.cpp:24:29: error:\
    \ request for member \u2018length\u2019 in \u2018lower\u2019, which is of non-class\
    \ type \u2018const char*\u2019\n   24 |         for(int i=0;i<lower.length();i++)\
    \ {\n      |                             ^~~~~~\n"
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool is_same = true;\n    std::string key;\n    for (auto& kv :\
    \ dict) {\n        key = kv.first;\n        is_same = is_same && ( key == \"name\"\
    \ || key == \"NAME\" || key == \"NAMES\" );\n        is_same = is_same && ( key\
    \ == \"age\" || key == \"AGE\" || key == \"AGES\" );\n        is_same = is_same\
    \ && ( key == \"city\" || key == \"CITY\" || key == \"CITIES\" );\n    }\n   \
    \ return is_same;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpe5c85iim: /tmp/tmpe5c85iim.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false; \n    // If all the keys are strings\
    \ in lower case\n    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == p.first; }))\n        return true;\n    // If all the\
    \ keys are strings in upper case\n    if(std::all_of(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> p) { return p.first == p.first.c_str();\
    \ }))\n        return true;\n    // If all the keys are numbers, then return false\n\
    \    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == std::to_string(p.first); }))\n        return false;\n\
    \    // If all the keys are string and numbers, return false\n    if(std::all_of(dict.begin(),\
    \ dict.end(), [](std::pair<std::string,std::string> p) { return p.first == std::to_string(p.first).c_str();\
    \ }))\n        return false;\n    // If all the keys are string, return false\n\
    \    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == p.first.c_str(); }))\n        return false;\n    // If\
    \ all the keys are string, return false\n    if(std::all_of(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> p) { return p.first == p.first.c_str();\
    \ }))\n        return false;\n    // If all the keys are string, return false\n\
    \    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == p.first.c_str(); }))\n        return false;\n    // If\
    \ all the keys are string, return false\n    if(std::all_of(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> p) { return p.first == p.first.c_str();\
    \ }))\n        return false;\n    // If all the keys are string, return false\n\
    \    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == p.first.c_str(); }))\n        return false;\n    // If\
    \ all the keys are string, return false\n    if(std::all_of(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> p) { return p.first == p.first.c_str();\
    \ }))\n        return false;\n    // If all the keys are string, return false\n\
    \    if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == p.first.c_str(); }))\n        return false;\n    // If\
    \ all the keys are string, return false\n    if(std::all_of(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> p) { return p.first == p.first.c_str();\
    \ }))\n        return false;\n    // \n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjibhnpc.cpp: In lambda function:\n/tmp/tmpnjibhnpc.cpp:26:129:\
    \ error: no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   26 |     if(std::all_of(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ p) { return p.first == std::to_string(p.first); }))\n      |               \
    \                                                                            \
    \                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnjibhnpc.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from "
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n\n    // If all\
    \ keys are in lower case, return true.\n    // Otherwise, first convert all keys\
    \ to upper case and then\n    // see if the new keys are in upper case.\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->first\
    \ < 'a' || it->first > 'z') {\n            return false;\n        }\n        it->first\
    \ = toupper(it->first);\n    }\n\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first > 'A' || it->first < 'Z') {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_uyo5rn.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpq_uyo5rn.cpp:27:22: error:\
    \ no match for \u2018operator<\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   27 |         if(it->first < 'a' || it->first > 'z')\
    \ {\n      |            ~~~~~~~~~ ^ ~~~\n      |                |       |\n  \
    \    |                |       char\n      |                const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq_uyo5rn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpq_uyo5rn.cpp:27:24:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   27 |         if(it->first\
    \ < 'a' || it->first > 'z') {\n      |                        ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq_uyo5rn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpq_uyo5rn.cpp:27:24: note:   mismatched types \u2018const std::__cxx11::sub_mat"
  stdout: ''
  timestamp: 1660131177
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    return !dict.empty() && !dict.count(\"\") && dict.count(\"\") !=\
    \ 0 && !dict.count(\"\") == 0;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp5zqv1eqw: /tmp/tmp5zqv1eqw.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const\
    \ auto &iter: dict)\n    {\n        if (!(iter.isalpha()) && !(iter.isdigit()))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbxfasta.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpjbxfasta.cpp:23:20: error:\
    \ \u2018const struct std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018isalpha\u2019\n   23 |         if (!(iter.isalpha())\
    \ && !(iter.isdigit()))\n      |                    ^~~~~~~\n/tmp/tmpjbxfasta.cpp:23:41:\
    \ error: \u2018const struct std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 has no member named \u2018isdigit\u2019\
    \n   23 |         if (!(iter.isalpha()) && !(iter.isdigit()))\n      |       \
    \                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    return dict.empty() ? false : check_dict_case_helper(dict);\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtx72xnt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpxtx72xnt.cpp:18:35: error:\
    \ \u2018check_dict_case_helper\u2019 was not declared in this scope; did you mean\
    \ \u2018check_dict_case\u2019?\n   18 |     return dict.empty() ? false : check_dict_case_helper(dict);\n\
    \      |                                   ^~~~~~~~~~~~~~~~~~~~~~\n      |   \
    \                                check_dict_case\n"
  stdout: ''
  timestamp: 1660131177
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here.\n    return dict.size() == 2 ||\n    \
    \        (dict.size() == 1 &&\n             std::all_of(str.begin(), str.end(),\
    \ [&](const auto &key) {\n                 return (dict.find(key) == dict.end())\
    \ ? false : ((key.compare(0, 2, ::tolower) == 0) || (key.compare(0, 2, ::toupper)\
    \ == 0));\n             }));\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7aq0adh.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpu7aq0adh.cpp:21:26: error:\
    \ \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   21 |              std::all_of(str.begin(), str.end(), [&](const auto &key)\
    \ {\n      |                          ^~~\n      |                          std\n"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string,std::string>::iterator it;\n    for(it=dict.begin();\
    \ it!=dict.end(); it++) {\n        // if any key is not string, return false\n\
    \        if(!((it->first).compare(0,4,\"string\") && it->second.compare(0,4,\"\
    string\")))\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpathb99cd: /tmp/tmpathb99cd.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    auto keys = dict.begin();\n\
    \    for (auto it=keys;it!=dict.end();++it) {\n        std::string key = it->first;\n\
    \        std::string val = it->second;\n        if (is_str_lower_case(key)) {\n\
    \            if (is_str_upper_case(val)) {\n                return true;\n   \
    \         }\n        } else {\n            if (is_str_upper_case(val)) {\n   \
    \             return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnsm4_at.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpnnsm4_at.cpp:23:13: error:\
    \ \u2018is_str_lower_case\u2019 was not declared in this scope\n   23 |      \
    \   if (is_str_lower_case(key)) {\n      |             ^~~~~~~~~~~~~~~~~\n/tmp/tmpnnsm4_at.cpp:24:17:\
    \ error: \u2018is_str_upper_case\u2019 was not declared in this scope\n   24 |\
    \             if (is_str_upper_case(val)) {\n      |                 ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnnsm4_at.cpp:28:17: error: \u2018is_str_upper_case\u2019 was not declared\
    \ in this scope\n   28 |             if (is_str_upper_case(val)) {\n      |  \
    \               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code goes here\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_m5pofbo: /tmp/tmp_m5pofbo.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool all_keys_strings_in_lower_case = true;\n    bool all_keys_strings_in_upper_case\
    \ = true;\n    for (auto i : dict) {\n        for (auto j : i.second) {\n    \
    \        if (std::tolower(j) != j)\n                all_keys_strings_in_lower_case\
    \ = false;\n            if (std::toupper(i) != i)\n                all_keys_strings_in_upper_case\
    \ = false;\n        }\n    }\n    return all_keys_strings_in_lower_case && all_keys_strings_in_upper_case;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7f_p5rsd.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7f_p5rsd.cpp:24:31: error:\
    \ no matching function for call to \u2018toupper(std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   24 |             if (std::toupper(i)\
    \ != i)\n      |                               ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp7f_p5rsd.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018int\u2019\n  125 | extern\
    \ int toupper (int __c) __THROW;\n      |                     ~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/bits/basic_ios.h:37,\n                 from\
    \ /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7f_p5rsd.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7f_p5rsd.cpp:24:31: note:   candidate expects 2 arguments,\
    \ 1 provided\n   24 |             if (std::toupper(i) != i)\n      |         \
    \                      ^\n"
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    for(auto\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        // if all keys are strings\
    \ in lowercase, return true\n        if(std::to_string(it->first).compare(it->first.to_lower(),\
    \ 0) == 0) {\n            return true;\n        }\n        // if all keys are\
    \ strings in uppercase, return true\n        if(std::to_string(it->first).compare(it->first.to_upper(),\
    \ 0) == 0) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_ijsyen.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpv_ijsyen.cpp:23:36: error:\
    \ no matching function for call to \u2018to_string(const std::__cxx11::basic_string<char>&)\u2019\
    \n   23 |         if(std::to_string(it->first).compare(it->first.to_lower(), 0)\
    \ == 0) {\n      |                                    ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv_ijsyen.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto &it: dict)\n    {\n        if(it.first.size() > 1 && it.first[0]\
    \ >= 65 && it.first[0] <= 72)\n        {\n            return true;\n        }\n\
    \        if(it.first.size() > 1 && it.first[0] >= 97 && it.first[0] <= 122)\n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkhhhq4n8: /tmp/tmpkhhhq4n8.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    auto it=dict.begin();\n    assert(it != dict.end());\n    auto\
    \ first=it->first;\n    for(it=it+1; it!=dict.end(); ++it){\n        if(first!=it->first){\n\
    \            return false; // The dict is not in upper or lower case\n       \
    \ }\n        if(first==it->first){\n            if(it->second.size() != 2){\n\
    \                return false; // The dict has more than 2 strings for each key\n\
    \            }\n            auto second=it->second;\n            for(std::size_t\
    \ i=0; i<second.size(); ++i){\n                if(first!=second[i]){\n       \
    \             return false; // The dict has more than 2 strings for each key\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mwx_a2v.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0mwx_a2v.cpp:21:14: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    \ and \u2018int\u2019)\n   21 |     for(it=it+1; it!=dict.end(); ++it){\n    \
    \  |            ~~^~\n      |            |  |\n      |            |  int\n   \
    \   |            std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0mwx_a2v.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0mwx_a2v.cpp:21:15:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   21 |     for(it=it+1; it!=dict.end(); ++it){\n     \
    \ |               ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0mwx_a2v.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::differenc"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    for(auto\
    \ &entry : dict) {\n        if(std::find_if(entry.second.begin(), entry.second.end(),\n\
    \                         [](auto c){return !std::isalpha(c); })!=entry.second.end()\n\
    \            || std::find_if(entry.second.begin(), entry.second.end(),\n     \
    \                    [](auto c){return std::isupper(c); })!=entry.second.end()\n\
    \            || std::find_if(entry.second.begin(), entry.second.end(),\n     \
    \                    [](auto c){return std::islower(c); })!=entry.second.end())\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0p58qwma: /tmp/tmp0p58qwma.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131179
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0)\n        return false;\n    std::string key;\n\
    \    std::string val;\n    for (auto& p: dict)\n    {\n        key = p.first;\n\
    \        val = p.second;\n    }\n    std::transform(key.begin(), key.end(), key.begin(),\
    \ ::tolower);\n    std::transform(val.begin(), val.end(), val.begin(), ::tolower);\n\
    \    if (key.size() == val.size())\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppacxxrbf: /tmp/tmppacxxrbf.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) \n        return false;\n    auto lower = [](const\
    \ std::string & s) { return std::to_lower(s); };\n    auto upper = [](const std::string\
    \ & s) { return std::to_upper(s); };\n    \n    for(const auto & item : dict)\
    \ {\n        if(item.first != item.second) {\n            return false;\n    \
    \    }\n        else if(lower(item.first) != lower(item.second)) {\n         \
    \   return false;\n        }\n        else if(upper(item.first) != upper(item.second))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnt6dvee.cpp: In lambda function:\n/tmp/tmpxnt6dvee.cpp:20:58:\
    \ error: \u2018to_lower\u2019 is not a member of \u2018std\u2019; did you mean\
    \ \u2018tolower\u2019?\n   20 |     auto lower = [](const std::string & s) { return\
    \ std::to_lower(s); };\n      |                                              \
    \            ^~~~~~~~\n      |                                               \
    \           tolower\n/tmp/tmpxnt6dvee.cpp: In lambda function:\n/tmp/tmpxnt6dvee.cpp:21:58:\
    \ error: \u2018to_upper\u2019 is not a member of \u2018std\u2019; did you mean\
    \ \u2018toupper\u2019?\n   21 |     auto upper = [](const std::string & s) { return\
    \ std::to_upper(s); };\n      |                                              \
    \            ^~~~~~~~\n      |                                               \
    \           toupper\n/tmp/tmpxnt6dvee.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpxnt6dvee.cpp:27:35: error:\
    \ invalid operands of types \u2018void\u2019 and \u2018void\u2019 to binary \u2018\
    operator!=\u2019\n   27 |         else if(lower(item.first) != lower(item.second))\
    \ {\n      |                 ~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~\n      |\
    \                      |                    |\n      |                      void\
    \                 void\n/tmp/tmpxnt6dvee.cpp:30:35: error: invalid operands of\
    \ types \u2018void\u2019 and \u2018void\u2019 to binary \u2018operator!=\u2019\
    \n   30 |         else if(upper(item.first) != upper(item.second)) {\n      |\
    \                 ~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~\n      |           \
    \           |                    |\n      |                      void        \
    \         void\n"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tassert(dict.size());\n\tfor (auto x : dict)\n\t{\n\t\tif (x.second.compare(x.first)\
    \ != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfdd6tl9h: /tmp/tmpfdd6tl9h.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your logic here\n    assert(!dict.empty());\n    // check\
    \ dict keys\n    if(dict.size() != 2) {\n        return false;\n    }\n    for(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first == \"Name\"\
    \ || it->first == \"AGE\" || it->first == \"City\") {\n            continue;\n\
    \        }\n        if(it->first < \"A\" || it->first > \"Z\") {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx76l6s1m: /tmp/tmpx76l6s1m.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool flag = true;\n    for(auto it=dict.begin();it!=dict.end();it++)\
    \ {\n        if ((it->first.isupper()==true) && (it->second.islower()==false))\n\
    \            flag = false;\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2up052ny.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp2up052ny.cpp:20:24: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018isupper\u2019\n   20 |         if ((it->first.isupper()==true) && (it->second.islower()==false))\n\
    \      |                        ^~~~~~~\n/tmp/tmp2up052ny.cpp:20:56: error: \u2018\
    class std::__cxx11::basic_string<char>\u2019 has no member named \u2018islower\u2019\
    \n   20 |         if ((it->first.isupper()==true) && (it->second.islower()==false))\n\
    \      |                                                        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131178
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    bool ans = true;\n\
    \    std::map<std::string, std::string>::const_iterator itr = dict.begin();\n\
    \    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first <\
    \ 'A' || it->first > 'Z')\n            ans = false;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc92yfq1v.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpc92yfq1v.cpp:23:22: error:\
    \ no match for \u2018operator<\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   23 |         if(it->first < 'A' || it->first > 'Z')\n\
    \      |            ~~~~~~~~~ ^ ~~~\n      |                |       |\n      |\
    \                |       char\n      |                const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpc92yfq1v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpc92yfq1v.cpp:23:24:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |         if(it->first\
    \ < 'A' || it->first > 'Z')\n      |                        ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpc92yfq1v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpc92yfq1v.cpp:23:24: note:   mismatched types \u2018const std::__cxx11::sub_match<_"
  stdout: ''
  timestamp: 1660131178
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (!dict.size()) return true;\n    std::string key1, key2;\n \
    \   for(auto it=dict.begin(); it!=dict.end(); it++) {\n        key1 = it->first.c_str();\n\
    \        key2 = it->second.c_str();\n        if (key1 == \"state\" || key1 ==\
    \ \"zip\" || key2 == \"state\" || key2 == \"zip\") {\n            auto itr = std::find(key1.begin(),\
    \ key1.end(), '-');\n            auto endItr = std::find(key1.begin(), key1.end(),\
    \ ' ');\n            if (itr != endItr) return false;\n            if (itr ==\
    \ key1.end() && endItr == key1.end()) return true;\n            itr = std::find(key2.begin(),\
    \ key2.end(), '-');\n            endItr = std::find(key2.begin(), key2.end(),\
    \ ' ');\n            if (itr != endItr) return false;\n            if (itr ==\
    \ key2.end() && endItr == key2.end()) return true;\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdoiow9ex: /tmp/tmpdoiow9ex.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    \n    std::map<std::string,std::string>::iterator\
    \ it;\n    for (it = dict.begin(); it != dict.end(); ++it) {\n        if (it->first.empty())\
    \ continue;\n        if (it->first.compare(it->first.front(), 'A') != 0)\n   \
    \         return false;\n    }\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckjejsas.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpckjejsas.cpp:23:53: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(const\
    \ value_type&, char) const\u2019\n   23 |         if (it->first.compare(it->first.front(),\
    \ 'A') != 0)\n      |                                                     ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpckjejsas.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpckjejsas.cpp:23:53:\
    \ note:   candidate expects 1 argument, 2 provided\n   23 |         if (it->first.c"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // TODO: FIX THIS - I should use is_string in assert library.\n\
    \    // NOTE: this assert is incorrect!! I shouldn't be using assert \n    //\
    \ library functions anymore!!\n    assert(dict.begin()->second.size() <= 2 &&\
    \ dict.begin()->second.size() >= 1);\n    assert(dict.begin()->second.find(\"\
    a\") != dict.end() && dict.begin()->second.find(\"A\") != dict.end() && dict.begin()->second.find(\"\
    B\") != dict.end());\n    for (auto it=dict.begin();it!=dict.end();++it) {\n \
    \       assert(it->second.find(\"a\") != it->second.end() && it->second.find(\"\
    A\") != it->second.end() && it->second.find(\"B\") != it->second.end());\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpks8d6mq4.cpp:2:\n/tmp/tmpks8d6mq4.cpp: In function \u2018bool\
    \ check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpks8d6mq4.cpp:22:43: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} and \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    })\n   22 |     assert(dict.begin()->second.find(\"a\") != dict.end() && dict.begin()->second.find(\"\
    A\") != dict.end() && dict.begin()->second.find(\"B\") != dict.end());\n     \
    \ |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~\n      |         \
    \                            |                |\n      |                     \
    \                |                std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >}\n      |                             \
    \        std::__cxx11::basic_string<char>::size_type {aka long unsigned int}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpks8d6mq4.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (auto &x: dict) {\n        if(!is_lower_case_or_upper_case_string(x->first)\
    \ || !is_lower_case_or_upper_case_string(x->second))\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmvnjrua.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmphmvnjrua.cpp:19:49: error:\
    \ base operand of \u2018->\u2019 has non-pointer type \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019\n   19 |         if(!is_lower_case_or_upper_case_string(x->first)\
    \ || !is_lower_case_or_upper_case_string(x->second))\n      |                \
    \                                 ^~\n/tmp/tmphmvnjrua.cpp:19:13: error: \u2018\
    is_lower_case_or_upper_case_string\u2019 was not declared in this scope\n   19\
    \ |         if(!is_lower_case_or_upper_case_string(x->first) || !is_lower_case_or_upper_case_string(x->second))\n\
    \      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphmvnjrua.cpp:19:98:\
    \ error: base operand of \u2018->\u2019 has non-pointer type \u2018std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >\u2019\n\
    \   19 |         if(!is_lower_case_or_upper_case_string(x->first) || !is_lower_case_or_upper_case_string(x->second))\n\
    \      |                                                                     \
    \                             ^~\n"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) return false;\n  std::for_each(dict.begin(), dict.end(),\
    \ [](std::pair<std::string,std::string> pair){\n    for (auto &char : pair.first)\
    \ {\n      if (std::tolower(char) != char) \n        return false;\n    }\n  \
    \  for (auto &char : pair.second) {\n      if (std::toupper(char) != char) \n\
    \        return false;\n    }\n  });\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qg3f07o.cpp: In lambda function:\n/tmp/tmp6qg3f07o.cpp:20:16:\
    \ error: expected unqualified-id before \u2018char\u2019\n   20 |     for (auto\
    \ &char : pair.first) {\n      |                ^~~~\n/tmp/tmp6qg3f07o.cpp:20:16:\
    \ error: expected \u2018;\u2019 before \u2018char\u2019\n   20 |     for (auto\
    \ &char : pair.first) {\n      |                ^~~~\n      |                ;\n\
    /tmp/tmp6qg3f07o.cpp:20:21: error: expected unqualified-id before \u2018:\u2019\
    \ token\n   20 |     for (auto &char : pair.first) {\n      |                \
    \     ^\n/tmp/tmp6qg3f07o.cpp:20:33: error: expected \u2018;\u2019 before \u2018\
    )\u2019 token\n   20 |     for (auto &char : pair.first) {\n      |          \
    \                       ^\n      |                                 ;\n/tmp/tmp6qg3f07o.cpp:21:24:\
    \ error: expected primary-expression before \u2018char\u2019\n   21 |       if\
    \ (std::tolower(char) != char)\n      |                        ^~~~\n/tmp/tmp6qg3f07o.cpp:21:33:\
    \ error: expected primary-expression before \u2018char\u2019\n   21 |       if\
    \ (std::tolower(char) != char)\n      |                                 ^~~~\n\
    /tmp/tmp6qg3f07o.cpp:21:32: error: expected \u2018)\u2019 before \u2018char\u2019\
    \n   21 |       if (std::tolower(char) != char)\n      |          ~          \
    \           ^~~~~\n      |                                )\n/tmp/tmp6qg3f07o.cpp:24:16:\
    \ error: expected unqualified-id before \u2018char\u2019\n   24 |     for (auto\
    \ &char : pair.second) {\n      |                ^~~~\n/tmp/tmp6qg3f07o.cpp:24:16:\
    \ error: expected \u2018;\u2019 before \u2018char\u2019\n   24 |     for (auto\
    \ &char : pair.second) {\n      |                ^~~~\n      |               \
    \ ;\n/tmp/tmp6qg3f07o.cpp:24:21: error: expected unqualified-id before \u2018\
    :\u2019 token\n   24 |     for (auto &char : pair.second) {\n      |         \
    \            ^\n/tmp/tmp6qg3f07o.cpp:24:34: error: expected \u2018;\u2019 before\
    \ \u2018)\u2019 token\n   24 |     for (auto &char : pair.second) {\n      | \
    \                                 ^\n      |                                 \
    \ ;\n/tmp/tmp6qg3f07o.cpp:25:24: error: expected primary-expression before \u2018\
    char\u2019\n   25 |       if (std::toupper(char) != "
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty())\n    return false;\n  // Convert all keys to lower\
    \ case\n  for(const auto& [key, value]: dict)\n    dict[key] = tolower(value);\n\
    \n  // Check all keys are in lower case\n  for(const auto& [key, value]: dict)\n\
    \    if (!isalpha(key))\n      return false;\n\n  // Convert all keys to upper\
    \ case\n  for(const auto& [key, value]: dict)\n    dict[key] = toupper(value);\n\
    \n  // Check all keys are in upper case\n  for(const auto& [key, value]: dict)\n\
    \    if (!isupper(key))\n      return false;\n\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u2q9emt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0u2q9emt.cpp:22:30: error:\
    \ no matching function for call to \u2018tolower(std::tuple_element<1, const std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::type&)\u2019\
    \n   22 |     dict[key] = tolower(value);\n      |                           \
    \   ^\nIn file included from /usr/include/c++/9/cctype:42,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n                 from\
    \ /tmp/tmp0u2q9emt.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate: \u2018\
    int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n      |\
    \            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::tuple_element<1, const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0u2q9emt.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0u2q9emt.cpp:22:30: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |     dict[key] = tolower(value);\n      |               \
    \               ^\n/tmp/tmp0u2q9emt.cpp:26:21: error:"
  stdout: ''
  timestamp: 1660131179
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // TODO: Write your code here\n    return true; \n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkyc8m50x: /tmp/tmpkyc8m50x.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // write your code here\n  for (auto itr = dict.begin(); itr != dict.end();\
    \ ++itr) {\n    std::string key = itr->first;\n    if (itr->first.empty()) {\n\
    \      return false;\n    }\n    if (itr->first.size() == 1) {\n      if (itr->first[0]\
    \ == itr->first.at(0)) {\n        continue;\n      }\n      if (itr->first.at(0)\
    \ == tolower(itr->first.at(0))) {\n        continue;\n      }\n    }\n    if (itr->first.at(0)\
    \ == toupper(itr->first.at(0))) {\n      continue;\n    }\n    return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpb6ru947_: /tmp/tmpb6ru947_.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int n = dict.size();\n    for (int i = 0; i < n; i++) {\n     \
    \   if (dict[i].first.isalpha() != dict[i].first.isupper()) return false; // string\
    \ is not in lower case\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ul2rpqz.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp4ul2rpqz.cpp:20:17: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 and \u2018int\u2019)\n   20 |     \
    \    if (dict[i].first.isalpha() != dict[i].first.isupper()) return false; //\
    \ string is not in lower case\n      |                 ^\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp4ul2rpqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) {\n        return false;\n    }\n    for(auto\
    \ x : dict) {\n        for(auto y : x.second) {\n            if(x.first != y)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrk257oc.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmplrk257oc.cpp:23:24: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   23 |             if(x.first != y) {\n      |     \
    \           ~~~~~~~ ^~ ~\n      |                  |        |\n      |       \
    \           |        char\n      |                  const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplrk257oc.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmplrk257oc.cpp:23:27:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |             if(x.first\
    \ != y) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplrk257oc.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmplrk257oc.cpp:23:27: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and "
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto &i : dict) {\n        if(i.second.size() > 1 && ((i.size()\
    \ < 2 || i.second.at(0) > 'z') && (i.second.at(0) < 'A' || i.second.at(0) > 'Z')))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96q41plx.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp96q41plx.cpp:19:39: error:\
    \ \u2018struct std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018size\u2019\n   19 |         if(i.second.size()\
    \ > 1 && ((i.size() < 2 || i.second.at(0) > 'z') && (i.second.at(0) < 'A' || i.second.at(0)\
    \ > 'Z'))) {\n      |                                       ^~~~\n"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int n = dict.size();\n    for(int i = 0; i < n; i++) {\n      \
    \  auto iter = dict.find(i);\n        if(iter != dict.end())\n        {\n    \
    \        auto iter = iter->second.find(\"a\");\n            auto iter2 = iter->second.find(\"\
    A\");\n            auto iter3 = iter->second.find(\"B\");\n            if(iter\
    \ == iter2 && iter2 == iter3)\n                return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpreji38r3.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpreji38r3.cpp:20:32: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::find(int&)\u2019\n   20 |         auto iter\
    \ = dict.find(i);\n      |                                ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpreji38r3.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator\
    \ = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11"
  stdout: ''
  timestamp: 1660131179
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        std::string key = it->first;\n\
    \        std::string value = it->second;\n        if(std::tolower(key)==key) continue;\n\
    \        if(std::toupper(key)==key) continue;\n        if(std::is_same<std::string,char>::value)\
    \ {\n            return false;\n        }\n        if(std::find(key.begin(), key.end(),\
    \ ' ')!=key.end()) continue;\n        if(std::find(value.begin(), value.end(),\
    \ ' ')!=value.end()) continue;\n        if(std::find(value.begin(), value.end(),\
    \ '?')!=value.end()) continue;\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5dp2_lt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmph5dp2_lt.cpp:22:28: error:\
    \ no matching function for call to \u2018tolower(std::string&)\u2019\n   22 |\
    \         if(std::tolower(key)==key) continue;\n      |                      \
    \      ^\nIn file included from /usr/include/c++/9/cctype:42,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n             \
    \    from /tmp/tmph5dp2_lt.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate:\
    \ \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n\
    \      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmph5dp2_lt.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmph5dp2_lt.cpp:22:28: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |         if(std::tolower(key)==key) continue;\n      |  \
    \                          ^\n/tmp/tmph5dp2_lt.cpp:23:28: error: no matching function\
    \ for call to \u2018toupper(std::string&)\u2019\n   23 |         if(std::toupper(key)==key)\
    \ continue;\n      |                            ^\nIn file included from /usr/include/c++/9/cctype:42"
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tstd::string lower_case_keys\
    \ = \"\";\n\tstd::string upper_case_keys = \"\";\n\tfor (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n\t\tif (it->first != it->first) {\n\t\t\treturn false;\n\
    \t\t}\n\t\tlower_case_keys += it->first.substr(0, 1).toLowerCase() + it->first.substr(1,\
    \ it->first.size());\n\t\tupper_case_keys += it->first.substr(0, 1).toUpperCase()\
    \ + it->first.substr(1, it->first.size());\n\t}\n\treturn lower_case_keys.compare(lower_case_keys)\
    \ == 0 &&\n\t\tupper_case_keys.compare(upper_case_keys) == 0;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zuo_30j.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0zuo_30j.cpp:27:45: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toLowerCase\u2019\n   27 |   lower_case_keys += it->first.substr(0, 1).toLowerCase()\
    \ + it->first.substr(1, it->first.size());\n      |                          \
    \                   ^~~~~~~~~~~\n/tmp/tmp0zuo_30j.cpp:28:45: error: \u2018class\
    \ std::__cxx11::basic_string<char>\u2019 has no member named \u2018toUpperCase\u2019\
    \n   28 |   upper_case_keys += it->first.substr(0, 1).toUpperCase() + it->first.substr(1,\
    \ it->first.size());\n      |                                             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    if (dict.size() == 1) {\n       \
    \ for (auto const& [k, v] : dict)\n            if (k.size() > 0 && (k.at(0) >\
    \ 'a' && k.at(0) < 'z') || k.size() > 1 && (k.at(0) > 'A' && k.at(0) < 'Z'))\n\
    \                return false;\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpidgch3ea: /tmp/tmpidgch3ea.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string key;\n    bool res = true;\n    for(auto& it: dict)\
    \ {\n        key = it.first;\n        if(std::all_of( key.begin(), key.end(),\
    \ [](char ch){return (std::isalpha(ch) || std::isdigit(ch));} )) {\n         \
    \   res = false;\n            break;\n        }\n        if(std::all_of( key.begin(),\
    \ key.end(), [](char ch){return (std::isalpha(ch) || std::islower(ch));} )) {\n\
    \            res = false;\n            break;\n        }\n        if(std::all_of(\
    \ key.begin(), key.end(), [](char ch){return (std::isalpha(ch) || std::isupper(ch));}\
    \ )) {\n            res = false;\n            break;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxro5wrw_: /tmp/tmpxro5wrw_.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(!it->second.compare(0,\
    \ 1L, std::string(it->second.size(),'A')))\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp5fzdrt0u: /tmp/tmp5fzdrt0u.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int n = dict.size();\n    int count = 0;\n    for (const auto &k\
    \ : dict) {\n        // if all the values are strings, ignore it\n        if (k.second.empty())\n\
    \            continue;\n        if (k.first == \"NAME\" || k.first == \"AGE\"\
    \ || k.first == \"ZIP\")\n            count++;\n    }\n    if (count == n)\n \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx_7wo6rk: /tmp/tmpx_7wo6rk.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Write your code here\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpnfb44hm3: /tmp/tmpnfb44hm3.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    for (auto &p: dict)\n     \
    \   if (p.first.size() == 1) {\n            if (std::tolower(p.first[0]) != p.first[0])\n\
    \                return false;\n        }\n        for (auto &p: dict)\n     \
    \       if (p.first.size() > 1)\n                return false;\n        return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpz7riz5nv: /tmp/tmpz7riz5nv.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); ++it)\n    {\n        if (it->first == \"name\")\n       \
    \ {\n            if (it->second.length() > 0 && \n                toupper(it->second[0])\
    \ == it->second[0])\n                continue;\n        }\n        if (it->first\
    \ == \"age\")\n        {\n            if (it->second != std::to_string(36))\n\
    \                continue;\n        }\n        if (it->first == \"city\")\n  \
    \      {\n            if (it->second.length() > 0)\n                continue;\n\
    \        }\n        if (it->first == \"state\")\n        {\n            if (it->second.length()\
    \ > 0)\n                continue;\n        }\n        if (it->first == \"zip\"\
    )\n        {\n            if (it->second != std::to_string(12345))\n         \
    \       continue;\n        }\n        if (it->first == \"country\")\n        {\n\
    \            if (it->second.length() > 0)\n                continue;\n       \
    \ }\n        if (it->first == \"email\")\n        {\n            if (it->second.length()\
    \ > 0)\n                continue;\n        }\n        if (it->first == \"sex\"\
    )\n        {\n            if (it->second.length() > 0)\n                continue;\n\
    \        }\n        if (it->first == \"phone\")\n        {\n            if (it->second.length()\
    \ > 0)\n                continue;\n        }\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"},\
    \ {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgkrq359c: /tmp/tmpgkrq359c.cpp:75: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string, std::string>::iterator it;\n    for (it =\
    \ dict.begin(); it != dict.end(); ++it) {\n        // if key is lower case return\
    \ true\n        if(it->first != it->first.at(0).tolower()){\n            return\
    \ true;\n        }\n        // if key is upper case return true\n        if(it->first\
    \ != it->first.at(0).toupper()){\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt5evyud.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpmt5evyud.cpp:21:41: error:\
    \ request for member \u2018tolower\u2019 in \u2018it.std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::operator->()->std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::first.std::__cxx11::basic_string<char>::at(0)\u2019\
    , which is of non-class type \u2018const value_type\u2019 {aka \u2018const char\u2019\
    }\n   21 |         if(it->first != it->first.at(0).tolower()){\n      |      \
    \                                   ^~~~~~~\n/tmp/tmpmt5evyud.cpp:25:41: error:\
    \ request for member \u2018toupper\u2019 in \u2018it.std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::operator->()->std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::first.std::__cxx11::basic_string<char>::at(0)\u2019\
    , which is of non-class type \u2018const value_type\u2019 {aka \u2018const char\u2019\
    }\n   25 |         if(it->first != it->first.at(0).toupper()){\n      |      \
    \                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) \n        return false;\n    bool ret = true;\n\
    \    for(std::map<std::string,std::string>::iterator it = dict.begin();it!=dict.end();it++)\
    \ {\n        if(it->first.size() > 2 && it->first[0] == it->first[1]) {\n    \
    \        auto x = it->first.substr(0, 1);\n            auto y = it->first.substr(1,\
    \ it->first.size());\n            ret = ret == (x == y);\n        }\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuwpws0gw: /tmp/tmpuwpws0gw.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n\n    // TODO: use\
    \ bitset\n    auto it = dict.begin();\n    auto end = dict.end();\n    for(;it\
    \ != end; ++it)\n        if(it->first != std::to_string(it->first))\n        \
    \    return false;\n\n    it = dict.begin();\n    end = dict.end();\n    for(;it\
    \ != end; ++it)\n        if(it->first == std::to_string(it->first))\n        \
    \    if(it->second != std::to_string(it->second))\n                return false;\n\
    \n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpps195uu8.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpps195uu8.cpp:25:49: error:\
    \ no matching function for call to \u2018to_string(const std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |         if(it->first != std::to_string(it->first))\n      |        \
    \                                         ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpps195uu8.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to "
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    // get all\
    \ keys.\n    std::vector<std::string> keys;\n    for(const auto& i : dict)\n \
    \       keys.push_back(i.first);\n    \n    // if all keys are strings in lower\
    \ case, return true.\n    for (const std::string& key : keys) {\n        if (key.toupper().find(key)\
    \ != std::string::npos) {\n            return true;\n        }\n    }\n\n    //\
    \ if all keys are strings in upper case, return true.\n    for (const std::string&\
    \ key : keys) {\n        if (key.find(key) != std::string::npos) {\n         \
    \   return true;\n        }\n    }\n\n    return false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz942aqrp.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpz942aqrp.cpp:28:17: error:\
    \ \u2018const string\u2019 {aka \u2018const class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toupper\u2019\n   28 |         if (key.toupper().find(key)\
    \ != std::string::npos) {\n      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string key;\n    for (auto &it : dict)\n        for (auto\
    \ &i : it.second)\n            for (auto &j : i)\n                for (auto &k\
    \ : j)\n                    key = k;\n    return dict.empty();\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19p6k4hl.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp19p6k4hl.cpp:21:28: error:\
    \ \u2018begin\u2019 was not declared in this scope\n   21 |             for (auto\
    \ &j : i)\n      |                            ^\n/tmp/tmp19p6k4hl.cpp:21:28: note:\
    \ suggested alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp19p6k4hl.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   \u2018std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n\
    \      |     ^~~~~\nIn file included from /usr/include/c++/9/filesystem:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp19p6k4hl.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3:\
    \ note:   \u2018std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmp19p6k4hl.cpp:21:28: error: \u2018\
    end\u2019 was not declared in this scope\n   21 |             for (auto &j : i)\n\
    \      |                            ^\n/tmp/tmp19p6k4hl.cpp:21:28: note: suggested\
    \ alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp19p6k4hl.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmp19p6k4hl.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    auto lower = [&](std::string\
    \ str) {\n        return std::tolower(str);\n    };\n    auto upper = [&](std::string\
    \ str) {\n        return std::toupper(str);\n    };\n    for (const auto& [k,\
    \ v] : dict) {\n        if (!lower(k).empty() && !upper(k).empty()) continue;\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_8kmsgg.cpp: In lambda function:\n/tmp/tmpv_8kmsgg.cpp:20:32:\
    \ error: no matching function for call to \u2018tolower(std::string&)\u2019\n\
    \   20 |         return std::tolower(str);\n      |                          \
    \      ^\nIn file included from /usr/include/c++/9/cctype:42,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n             \
    \    from /tmp/tmpv_8kmsgg.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate:\
    \ \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n\
    \      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv_8kmsgg.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpv_8kmsgg.cpp:20:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   20 |         return std::tolower(str);\n      |             \
    \                   ^\n/tmp/tmpv_8kmsgg.cpp: In lambda function:\n/tmp/tmpv_8kmsgg.cpp:23:32:\
    \ error: no matching function for call to \u2018toupper(std::string&)\u2019\n\
    \   23 |         return std::toupper(str);\n      |                          \
    \      ^\nIn file included from /usr/include/c++/9/cctype:42,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (auto\
    \ it: dict) {\n        std::set<std::string> keys = it.first;\n        std::set<std::string>\
    \ vals = it.second;\n        if (keys.size() != vals.size()) {\n            return\
    \ false;\n        }\n        for (auto keys: keys) {\n            if (std::tolower(keys)\
    \ != keys)\n                return false;\n        }\n        for (auto vals:\
    \ vals) {\n            if (std::toupper(vals) != vals)\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1mykfax.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpt1mykfax.cpp:22:41: error:\
    \ conversion from \u2018const std::__cxx11::basic_string<char>\u2019 to non-scalar\
    \ type \u2018std::set<std::__cxx11::basic_string<char> >\u2019 requested\n   22\
    \ |         std::set<std::string> keys = it.first;\n      |                  \
    \                    ~~~^~~~~\n/tmp/tmpt1mykfax.cpp:23:41: error: conversion from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to non-scalar type \u2018std::set<std::__cxx11::basic_string<char>\
    \ >\u2019 requested\n   23 |         std::set<std::string> vals = it.second;\n\
    \      |                                      ~~~^~~~~~\n/tmp/tmpt1mykfax.cpp:28:34:\
    \ error: no matching function for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\
    \n   28 |             if (std::tolower(keys) != keys)\n      |               \
    \                   ^\nIn file included from /usr/include/c++/9/cctype:42,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpt1mykfax.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpt1mykfax.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolo"
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    \n    if(dict.begin()->first\
    \ == \"age\")\n    {\n        auto it = dict.begin();\n        while(it->second\
    \ != \"36\" && it->first != \"age\")\n            ++it;\n\n        if(it->first\
    \ == \"age\")\n            return true;\n    }\n    \n    if(dict.begin()->first\
    \ == \"name\")\n    {\n        auto it = dict.begin();\n        while(it->second\
    \ != \"John\" && it->first != \"name\")\n            ++it;\n\n        if(it->first\
    \ == \"name\")\n            return true;\n    }\n\n    if(dict.begin()->first\
    \ == \"city\")\n    {\n        auto it = dict.begin();\n        while(it->second\
    \ != \"Houston\" && it->first != \"city\")\n            ++it;\n\n        if(it->first\
    \ == \"city\")\n            return true;\n    }\n\n    if(dict.begin()->first\
    \ == \"zip\")\n    {\n        auto it = dict.begin();\n        while(it->second\
    \ != \"12345\" && it->first != \"zip\")\n            ++it;\n\n        if(it->first\
    \ == \"zip\")\n            return true;\n    }\n\n    if(dict.begin()->first ==\
    \ \"state\")\n    {\n        auto it = dict.begin();\n        while(it->second\
    \ != \"NC\" && it->first != \"state\")\n            ++it;\n\n        if(it->first\
    \ == \"state\")\n            return true;\n    }\n\n    return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0lsoul_e: /tmp/tmp0lsoul_e.cpp:74: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  for (auto [k, v] : dict) {\n    if (!(std::is_string(k) || std::is_string(v.first)))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpthnpi4_n.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpthnpi4_n.cpp:19:16: error:\
    \ \u2018is_string\u2019 is not a member of \u2018std\u2019; did you mean \u2018\
    u32string\u2019?\n   19 |     if (!(std::is_string(k) || std::is_string(v.first)))\
    \ {\n      |                ^~~~~~~~~\n      |                u32string\n/tmp/tmpthnpi4_n.cpp:19:37:\
    \ error: \u2018is_string\u2019 is not a member of \u2018std\u2019; did you mean\
    \ \u2018u32string\u2019?\n   19 |     if (!(std::is_string(k) || std::is_string(v.first)))\
    \ {\n      |                                     ^~~~~~~~~\n      |          \
    \                           u32string\n/tmp/tmpthnpi4_n.cpp:19:49: error: \u2018\
    std::tuple_element<1, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >::type\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018first\u2019\n   19 |     if (!(std::is_string(k) || std::is_string(v.first)))\
    \ {\n      |                                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660131180
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); ++it) {\n        auto it2 = it;\n        ++it2;\n        if(it2->first\
    \ != it->first)\n            return false;\n        if(it2->second != it->second)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpns8qa3bd: /tmp/tmpns8qa3bd.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto i = dict.begin(); i != dict.end(); i++) {\n        for\
    \ (auto j = i->second.begin(); j != i->second.end(); ++j) {\n            if(tolower(i->first)\
    \ != tolower(j->first)) return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkvlb5glc.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpkvlb5glc.cpp:20:32: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   20 |             if(tolower(i->first) != tolower(j->first)) return false;\n\
    \      |                                ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpkvlb5glc.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkvlb5glc.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkvlb5glc.cpp:20:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   20 |             if(tolower(i->first) != tolower(j->first)) return\
    \ false;\n      |                                ^\n/tmp/tmpkvlb5glc.cpp:20:48:\
    \ error: request for member \u2018first\u2019 in \u2018* j.__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >::operator->()\u2019, which "
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(std::map<std::string,std::string>::iterator iter = dict.begin();\
    \ iter != dict.end(); ++iter) {\n        std::map<std::string,std::string>::iterator\
    \ found = std::find_if(std::begin(iter->second), std::end(iter->second), \n  \
    \                                                                 [](std::string\
    \ s) {return !std::isalpha(s[0]);});\n        if(found != std::end(iter->second)\
    \ && std::tolower(iter->first) == std::tolower(iter->first))\n            return\
    \ true;\n        found = std::find_if(std::begin(iter->second), std::end(iter->second),\
    \ \n                                                                   [](std::string\
    \ s) {return !std::isupper(s[0]);});\n        if(found != std::end(iter->second)\
    \ && std::toupper(iter->first) == std::toupper(iter->first))\n            return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv887h8vf.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpv887h8vf.cpp:19:73: error:\
    \ conversion from \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 to non-scalar type \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >\u2019\
    } requested\n   19 |         std::map<std::string,std::string>::iterator found\
    \ = std::find_if(std::begin(iter->second), std::end(iter->second),\n      |  \
    \                                                           ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \   20 |                                                                    [](std::string\
    \ s) {return !std::isalpha(s[0]);});\n      |                                \
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv887h8vf.cpp:21:18: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   21 |         if(found != std::end(iter->second) && std::tolower(iter->first)\
    \ == std::tolower(iter->first))\n      |            ~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |            |                |\n      |            |                std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |            std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >}\nIn file "
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) return false;\n  std::map<std::string,std::string>::iterator\
    \ it;\n  for (it = dict.begin(); it != dict.end(); ++it) {\n    std::string k\
    \ = (*it).first;\n    if (k.size() == 0)\n      return false;\n    if (k.size()\
    \ == 1 && (k.at(0) == 'a' || k.at(0) == 'A'))\n      return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuu4lelt6: /tmp/tmpuu4lelt6.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0)\n        return false;\n    for (auto &kv\
    \ :dict)\n        for (auto &k :kv.first)\n            for (auto &v : kv.second)\n\
    \                if (k >= 'A' && k <= 'Z')\n                    return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdisfxirs: /tmp/tmpdisfxirs.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    for(auto&\
    \ item : dict) {\n        if(item.first != item.second.toStdString()) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7n7k4bza.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7n7k4bza.cpp:22:38: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toStdString\u2019\n   22 |         if(item.first != item.second.toStdString())\
    \ {\n      |                                      ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    assert(!dict.empty());\n    // Checking the key type is string\n\
    \    assert(std::is_same<decltype(dict.begin()->first), std::string>::value);\n\
    \    // Checking the value type is string\n    assert(std::is_same<decltype(dict.begin()->second),\
    \ std::string>::value);\n    // Checking the keys and values are in lower case\n\
    \    return (std::all_of(dict.begin(), dict.end(), [&](const std::pair<std::string,std::string>&\
    \ p) {\n        return p.first == p.first.toLowerCase();\n    })) || (std::all_of(dict.begin(),\
    \ dict.end(), [&](const std::pair<std::string,std::string>& p) {\n        return\
    \ p.second == p.second.toLowerCase();\n    }));\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8sycu1xc.cpp:21:75: error: macro \"assert\" passed 2 arguments,\
    \ but takes just 1\n   21 |     assert(std::is_same<decltype(dict.begin()->first),\
    \ std::string>::value);\n      |                                             \
    \                              ^\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8sycu1xc.cpp:2:\n/usr/include/assert.h:92: note:\
    \ macro \"assert\" defined here\n   92 | #  define assert(expr)       \\\n   \
    \   | \n/tmp/tmp8sycu1xc.cpp:23:76: error: macro \"assert\" passed 2 arguments,\
    \ but takes just 1\n   23 |     assert(std::is_same<decltype(dict.begin()->second),\
    \ std::string>::value);\n      |                                             \
    \                               ^\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8sycu1xc.cpp:2:\n/usr/include/assert.h:92: note:\
    \ macro \"assert\" defined here\n   92 | #  define assert(expr)       \\\n   \
    \   | \n/tmp/tmp8sycu1xc.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp8sycu1xc.cpp:21:5: error:\
    \ \u2018assert\u2019 was not declared in this scope\n   21 |     assert(std::is_same<decltype(dict.begin()->first),\
    \ std::string>::value);\n      |     ^~~~~~\n/tmp/tmp8sycu1xc.cpp:3:1: note: \u2018\
    assert\u2019 is defined in header \u2018<cassert>\u2019; did you forget to \u2018\
    #include <cassert>\u2019?\n    2 | #include<bits/stdc++.h>\n  +++ |+#include <cassert>\n\
    \    3 | // Given a map, return true if all keys are strings in lower\n/tmp/tmp8sycu1xc.cpp:\
    \ In lambda function:\n/tmp/tmp8sycu1xc.cpp:26:35: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toLowerCase\u2019\n   26 |         return p.first\
    \ == p.first.toLowerCase();\n      |                                   ^~~~~~~~~~~\n\
    /tmp/tmp8sycu1xc.cpp: In lambda function:\n/tmp/tmp8sycu1xc.cpp:28:37: error:\
    \ \u2018const class std::__cxx11::basic_s"
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    \n    auto key_itr\
    \ = dict.begin();\n    auto val_itr = dict.begin();\n    \n    for(auto &item\
    \ : dict)\n        if(item.second != item.second)\n            return false;\n\
    \    \n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzxkjfuad: /tmp/tmpzxkjfuad.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) {\n    return false;\n  }\n  for (const auto& it:\
    \ dict)\n    if (it.first == \"Name\" || it.first == \"Age\" || it.first == \"\
    City\")\n      return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzhqp7pq5: /tmp/tmpzhqp7pq5.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return false;\n    auto it = dict.begin();\n\
    \    for ( ; it != dict.end(); ++it) {\n        for (auto &i : it->second) {\n\
    \            if (i.size() > 0) {\n                if (islower(i[0])) {\n     \
    \               if (isupper(i[0])) {\n                        i[0] = toupper(i[0]);\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                } else {\n                    if (isupper(i[0]))\
    \ {\n                        i[0] = tolower(i[0]);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqqo5p9z.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpzqqo5p9z.cpp:22:19: error:\
    \ request for member \u2018size\u2019 in \u2018i\u2019, which is of non-class\
    \ type \u2018char\u2019\n   22 |             if (i.size() > 0) {\n      |    \
    \               ^~~~\n/tmp/tmpzqqo5p9z.cpp:23:32: error: invalid types \u2018\
    char[int]\u2019 for array subscript\n   23 |                 if (islower(i[0]))\
    \ {\n      |                                ^\n/tmp/tmpzqqo5p9z.cpp:24:36: error:\
    \ invalid types \u2018char[int]\u2019 for array subscript\n   24 |           \
    \          if (isupper(i[0])) {\n      |                                    ^\n\
    /tmp/tmpzqqo5p9z.cpp:25:28: error: invalid types \u2018char[int]\u2019 for array\
    \ subscript\n   25 |                         i[0] = toupper(i[0]);\n      |  \
    \                          ^\n/tmp/tmpzqqo5p9z.cpp:25:43: error: invalid types\
    \ \u2018char[int]\u2019 for array subscript\n   25 |                         i[0]\
    \ = toupper(i[0]);\n      |                                           ^\n/tmp/tmpzqqo5p9z.cpp:30:36:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   30 |    \
    \                 if (isupper(i[0])) {\n      |                              \
    \      ^\n/tmp/tmpzqqo5p9z.cpp:31:28: error: invalid types \u2018char[int]\u2019\
    \ for array subscript\n   31 |                         i[0] = tolower(i[0]);\n\
    \      |                            ^\n/tmp/tmpzqqo5p9z.cpp:31:43: error: invalid\
    \ types \u2018char[int]\u2019 for array subscript\n   31 |                   \
    \      i[0] = tolower(i[0]);\n      |                                        \
    \   ^\n"
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    std::map<std::string,std::string>::iterator\
    \ itr;\n    for(itr = dict.begin();itr != dict.end();itr++) {\n        // If any\
    \ key is not in lower case, return false.\n        if(std::to_lower(itr->first)\
    \ != itr->first)\n            return false;\n        // If any key is not in upper\
    \ case, return false.\n        if(std::to_upper(itr->first) != itr->first)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89itxxx7.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp89itxxx7.cpp:22:17: error:\
    \ \u2018to_lower\u2019 is not a member of \u2018std\u2019; did you mean \u2018\
    tolower\u2019?\n   22 |         if(std::to_lower(itr->first) != itr->first)\n\
    \      |                 ^~~~~~~~\n      |                 tolower\n/tmp/tmp89itxxx7.cpp:25:17:\
    \ error: \u2018to_upper\u2019 is not a member of \u2018std\u2019; did you mean\
    \ \u2018toupper\u2019?\n   25 |         if(std::to_upper(itr->first) != itr->first)\n\
    \      |                 ^~~~~~~~\n      |                 toupper\n"
  stdout: ''
  timestamp: 1660131181
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n    auto itr = dict.begin();\n\
    \    while(itr != dict.end()){\n        auto itr2 = itr.first;\n        while(itr2\
    \ != dict.end()){\n            if(std::tolower(itr2->first) != std::tolower(itr->first)\
    \ && std::toupper(itr2->first) != std::toupper(itr->first))\n                return\
    \ false;\n            itr2 = itr2.second;\n        }\n        ++itr;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps7hqyeie.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmps7hqyeie.cpp:22:25: error:\
    \ \u2018struct std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >\u2019 has no member named \u2018first\u2019\
    \n   22 |         auto itr2 = itr.first;\n      |                         ^~~~~\n\
    /tmp/tmps7hqyeie.cpp:24:68: error: no matching function for call to \u2018tolower(const\
    \ std::__cxx11::basic_string<char>&)\u2019\n   24 |             if(std::tolower(itr2->first)\
    \ != std::tolower(itr->first) && std::toupper(itr2->first) != std::toupper(itr->first))\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmps7hqyeie.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmps7hqyeie.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/t"
  stdout: ''
  timestamp: 1660131181
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool res = false;\n    for (const auto &kv : dict) {\n        auto\
    \ kk = kv.first;\n        auto vv = kv.second;\n        auto ik = kk.find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        auto iv = vv.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    );\n        if (ik != std::string::npos && iv != std::string::npos) {\n      \
    \      assert(ik <= iv);\n            auto c = static_cast<int>(static_cast<unsigned>(kk.size())\
    \ - static_cast<unsigned>(ik));\n            auto u = static_cast<int>(static_cast<unsigned>(vv.size())\
    \ - static_cast<unsigned>(iv));\n            assert(c == 0 || c == u);\n     \
    \       if (c == 0)\n                res = true;\n            if (c == u)\n  \
    \              return false;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpik59_lv_: /tmp/tmpik59_lv_.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n   if(dict.empty())\n      return false;\n\n   auto begin = dict.begin();\n\
    \   auto end = dict.end();\n\n   while(begin != end) {\n      // Get the first\
    \ key\n      const std::string &key = begin->first;\n\n      // Get the value\
    \ associated with the first key\n      auto &value = begin->second;\n      \n\
    \      if(key.find(\"name\") > 0)\n         value = \"John\";\n      else if(key.find(\"\
    age\") > 0)\n         value = \"36\";\n      else if(key.find(\"city\") > 0)\n\
    \         value = \"Houston\";\n\n      // If key is in lower case, then the check\
    \ fails\n      if(key.find(\"name\") > 0 ||\n         key.find(\"age\") > 0 ||\n\
    \         key.find(\"city\") > 0)\n         return false;\n      ++begin;\n  \
    \ }\n   return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdeg9l747: /tmp/tmpdeg9l747.cpp:49: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for(auto i = dict.begin();\
    \ i != dict.end(); ++i)\n    {\n        if(!(i->first).compare((i->first).begin(),\
    \ (i->first).end(), &std::tolower)) return false;\n        if(!(i->first).compare((i->first).begin(),\
    \ (i->first).end(), &std::toupper)) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7rtabgt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpc7rtabgt.cpp:21:83: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(std::__cxx11::basic_string<char>::const_iterator,\
    \ std::__cxx11::basic_string<char>::const_iterator, <unresolved overloaded function\
    \ type>) const\u2019\n   21 |         if(!(i->first).compare((i->first).begin(),\
    \ (i->first).end(), &std::tolower)) return false;\n      |                   \
    \                                                                ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpc7rtabgt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 3 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic"
  stdout: ''
  timestamp: 1660131182
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for(auto &kv:dict) if(kv.second.empty())\
    \ continue;\n    for(auto &kv:dict) \n        if(!(kv.first.size()==1 && kv.first[0]>='a'\
    \ && kv.first[0]<='z' || kv.first.size()==1 && kv.first[0]>='A' && kv.first[0]<='Z')\
    \ || kv.first.size()>1) return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphdoeck81: /tmp/tmphdoeck81.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131182
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    if(dict.empty()){\n        return\
    \ false;\n    }\n    if(!dict.empty()){\n        for(const auto &key_value: dict){\n\
    \            if(key_value.second.length() > 1){\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdipl0ycx: /tmp/tmpdipl0ycx.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto i : dict){\n        std::cout << i.first << \" => \" <<\
    \ i.second << std::endl;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9989to2s: /tmp/tmp9989to2s.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: 'b => banana

    p => pineapple

    A => banana

    B => banana

    p => pineapple

    '
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty())\n        return false;\n\n    for(auto &it: dict)\n\
    \    {\n        if(it.first.isupper()) {\n            for(auto &kv: dict)\n  \
    \          {\n                if(kv.second.isupper())\n                    return\
    \ false;\n            }\n        } else {\n            for(auto &kv: dict)\n \
    \           {\n                if(kv.first.isupper())\n                    return\
    \ false;\n            }\n        }\n    }\n\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pd3ah9j.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp4pd3ah9j.cpp:23:21: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018isupper\u2019\n   23 |         if(it.first.isupper()) {\n      |     \
    \                ^~~~~~~\n/tmp/tmp4pd3ah9j.cpp:26:30: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018isupper\u2019\n   26 |                 if(kv.second.isupper())\n\
    \      |                              ^~~~~~~\n/tmp/tmp4pd3ah9j.cpp:32:29: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018isupper\u2019\n   32 |                 if(kv.first.isupper())\n      |\
    \                             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) {\n        return false;\n    }\n    for\
    \ (auto itr = dict.begin(); itr != dict.end(); itr++) {\n        auto key = itr->first;\n\
    \        auto value = itr->second;\n        if (key == \"A\" || key == \"B\" ||\
    \ key == \"C\" || key == \"D\" || key == \"E\" || key == \"F\" || key == \"G\"\
    \ || key == \"H\" || key == \"I\" || key == \"J\" || key == \"K\" || key == \"\
    L\" || key == \"M\" || key == \"N\" || key == \"O\" || key == \"P\" || key ==\
    \ \"Q\" || key == \"R\" || key == \"S\" || key == \"T\" || key == \"U\" || key\
    \ == \"V\" || key == \"W\" || key == \"X\" || key == \"Y\" || key == \"Z\" ||\
    \ key == \"a\" || key == \"b\" || key == \"c\" || key == \"d\" || key == \"e\"\
    \ || key == \"f\" || key == \"g\" || key == \"h\" || key == \"i\" || key == \"\
    j\" || key == \"k\" || key == \"l\" || key == \"m\" || key == \"n\" || key ==\
    \ \"o\" || key == \"p\" || key == \"q\" || key == \"r\" || key == \"s\" || key\
    \ == \"t\" || key == \"u\" || key == \"v\" || key == \"w\" || key == \"x\" ||\
    \ key == \"y\" || key == \"z\" || key == \"-\" || key == \"_\" || key == \"_\"\
    \ || key == \"0\" || key == \"1\" || key == \"2\" || key == \"3\" || key == \"\
    4\" || key == \"5\" || key == \"6\" || key == \"7\" || key == \"8\" || key ==\
    \ \"9\" || key == \"$\" || key == \"%\" || key == \"&\" || key == \"'\" || key\
    \ == \"+\" || key == \"-\" || key == \"/\" || key == \"~\" || key == \"_\" ||\
    \ key == \"*\" || key == \":\" || key == \"?\" || key == \"<\" || key == \">\"\
    \ || key == \"@\" || key == \"!\" || key == \"#\" || key == \"$\" || key == \"\
    %\" || key == \"^\" || key == \"&\" || key == \"*\" || key == \"(\" || key ==\
    \ \")\" || key == \"{\" || key == \"|\" || key == \"}\" || key == \"{\" || key\
    \ == \"}\" || key == \"[\" || key == \"]\" || key == \"(\" || key == \")\" ||\
    \ key == \"}\" || key == \"|\" || key == \"}\" || key == \"[\" || key == \"{\"\
    \ || key == \"}\" || key == \"}\" || key == \"/\" || key == \"*\" || key == \"\
    .\" || key == \":\" || key == \"<\" || key == \">\" || key == \"!\" || key ==\
    \ \"#\" || key == \"$\" || key == \"%\" || key == \"^\" || key == \"&\" || key\
    \ == \"*\" || key == \"(\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbcruafvi.cpp:24:1672: warning: missing terminating \" character\n\
    \   24 |         if (key == \"A\" || key == \"B\" || key == \"C\" || key == \"\
    D\" || key == \"E\" || key == \"F\" || key == \"G\" || key == \"H\" || key ==\
    \ \"I\" || key == \"J\" || key == \"K\" || key == \"L\" || key == \"M\" || key\
    \ == \"N\" || key == \"O\" || key == \"P\" || key == \"Q\" || key == \"R\" ||\
    \ key == \"S\" || key == \"T\" || key == \"U\" || key == \"V\" || key == \"W\"\
    \ || key == \"X\" || key == \"Y\" || key == \"Z\" || key == \"a\" || key == \"\
    b\" || key == \"c\" || key == \"d\" || key == \"e\" || key == \"f\" || key ==\
    \ \"g\" || key == \"h\" || key == \"i\" || key == \"j\" || key == \"k\" || key\
    \ == \"l\" || key == \"m\" || key == \"n\" || key == \"o\" || key == \"p\" ||\
    \ key == \"q\" || key == \"r\" || key == \"s\" || key == \"t\" || key == \"u\"\
    \ || key == \"v\" || key == \"w\" || key == \"x\" || key == \"y\" || key == \"\
    z\" || key == \"-\" || key == \"_\" || key == \"_\" || key == \"0\" || key ==\
    \ \"1\" || key == \"2\" || key == \"3\" || key == \"4\" || key == \"5\" || key\
    \ == \"6\" || key == \"7\" || key == \"8\" || key == \"9\" || key == \"$\" ||\
    \ key == \"%\" || key == \"&\" || key == \"'\" || key == \"+\" || key == \"-\"\
    \ || key == \"/\" || key == \"~\" || key == \"_\" || key == \"*\" || key == \"\
    :\" || key == \"?\" || key == \"<\" || key == \">\" || key == \"@\" || key ==\
    \ \"!\" || key == \"#\" || key == \"$\" || key == \"%\" || key == \"^\" || key\
    \ == \"&\" || key == \"*\" || key == \"(\" || key == \")\" || key == \"{\" ||\
    \ key == \"|\" || key == \"}\" || key == \"{\" || key == \"}\" || key == \"[\"\
    \ || key == \"]\" || key == \"(\" || key == \")\" || key == \"}\" || key == \"\
    |\" || key == \"}\" || key == \"[\" || key == \"{\" || key == \"}\" || key ==\
    \ \"}\" || key == \"/\" || key == \"*\" || key == \".\" || key == \":\" || key\
    \ == \"<\" || key == \">\" || key == \"!\" || key == \"#\" || key == \"$\" ||\
    \ key == \"%\" || key == \"^\" || key == \"&\" || key == \"*\" || key == \"(\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                   "
  stdout: ''
  timestamp: 1660131182
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  \n  assert(!dict.empty());\n  // iterate over all keys in the map\n\
    \  for (const auto& key_item : dict)\n  {\n    // check if current key contains\
    \ all lower case letters\n    if (std::all_of(key_item.second.cbegin(), key_item.second.cend(),\
    \ ::islower))\n    {\n      return true;\n    }\n    // check if current key contains\
    \ all upper case letters\n    else if (std::all_of(key_item.second.cbegin(), key_item.second.cend(),\
    \ ::isupper))\n    {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4nym1wul: /tmp/tmp4nym1wul.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    for (auto it : dict)\n    {\n   \
    \     if (!(std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ char>::value || std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ signed char>::value) && !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ unsigned char>::value &&\n            !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ bool>::value && !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ int>::value &&\n            !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ unsigned int>::value && !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ long>::value &&\n            !std::is_same<typename std::pair<std::string,std::string>::first_type,\
    \ unsigned long>::value)\n        {\n            return false;\n        }\n  \
    \      if (!std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ char>::value || std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ signed char>::value\n            || std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ unsigned char>::value ||\n            !std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ bool>::value && !std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ int>::value &&\n            !std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ unsigned int>::value && !std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ long>::value &&\n            !std::is_same<typename std::pair<std::string,std::string>::second_type,\
    \ unsigned long>::value)\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8a_ye565: /tmp/tmp8a_ye565.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for(auto iter=dict.cbegin();iter!=dict.cend();++iter) {\n     \
    \   if(iter->first!=iter->first)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmplng0k6h0: /tmp/tmplng0k6h0.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for(const auto& key: dict.keys())\
    \ {\n        if(key.find(\"_\") != std::string::npos) return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"},\
    \ {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t3p3o45.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0t3p3o45.cpp:19:31: error:\
    \ \u2018class std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018keys\u2019\n   19 |     for(const auto& key:\
    \ dict.keys()) {\n      |                               ^~~~\n"
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (auto&\
    \ i : dict) {\n        if (!(i.first >= 'a' && i.first <= 'z')) {\n          \
    \  return false;\n        }\n        if (!(i.first >= 'A' && i.first <= 'Z'))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi16hfun5.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpi16hfun5.cpp:22:23: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   22 |         if (!(i.first >= 'a' && i.first <= 'z'))\
    \ {\n      |               ~~~~~~~ ^~ ~~~\n      |                 |        |\n\
    \      |                 |        char\n      |                 const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi16hfun5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpi16hfun5.cpp:22:26:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   22 |         if (!(i.first\
    \ >= 'a' && i.first <= 'z')) {\n      |                          ^~~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi16hfun5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpi16hfun5.cpp:22:26: note:   mismatched types \u2018const std"
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool result = false;\n    if(dict.size() > 0) {\n        std::string\
    \ key = dict.begin()->first;\n        std::string lower = std::tolower(key);\n\
    \        if(dict.find(lower) != dict.end()) {\n            result = true;\n  \
    \      } else {\n            std::string upper = std::toupper(key);\n        \
    \    if(dict.find(upper) != dict.end()) {\n                result = true;\n  \
    \          }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtwmvnp_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwtwmvnp_.cpp:21:45: error:\
    \ no matching function for call to \u2018tolower(std::string&)\u2019\n   21 |\
    \         std::string lower = std::tolower(key);\n      |                    \
    \                         ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpwtwmvnp_.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwtwmvnp_.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwtwmvnp_.cpp:21:45: note:   candidate expects 2 arguments,\
    \ 1 provided\n   21 |         std::string lower = std::tolower(key);\n      |\
    \                                             ^\n/tmp/tmpwtwmvnp_.cpp:25:49: error:\
    \ no matching function for call to \u2018toupper(std::string&)\u2019\n   25 |\
    \             std::string upper = std::toupper(key);\n      |                \
    \                    "
  stdout: ''
  timestamp: 1660131182
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  for (auto& x: dict) {\n  \
    \  if (x.first >= 'a' && x.first <= 'z') return true;\n    if (x.first >= 'A'\
    \ && x.first <= 'Z') return true;\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxc2472fm.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpxc2472fm.cpp:20:17: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   20 |     if (x.first >= 'a' && x.first <= 'z') return\
    \ true;\n      |         ~~~~~~~ ^~ ~~~\n      |           |        |\n      |\
    \           |        char\n      |           const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxc2472fm.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpxc2472fm.cpp:20:20:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |     if (x.first\
    \ >= 'a' && x.first <= 'z') return true;\n      |                    ^~~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxc2472fm.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpxc2472fm.cpp:20:20: note:   mismatched types \u2018const std::__cxx11::sub_match<_"
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (auto\
    \ & it : dict) {\n        auto & key = it.first;\n        auto & val = it.second;\n\
    \        if (std::all_of(std::begin(key), std::end(key), [](auto &x) { return\
    \ x == std::tolower(x); })) {\n            return true;\n        }\n        if\
    \ (std::all_of(std::begin(key), std::end(key), [](auto &x) { return x == std::toupper(x);\
    \ })) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpq_893xum: /tmp/tmpq_893xum.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  assert(!dict.empty());\n  for (const auto& key_val : dict) {\n  \
    \  assert(std::all_of(key_val.second.begin(), key_val.second.end(), [](char c){\n\
    \      return (std::islower(c) || std::isupper(c));\n    }));\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmjg_q5o6: /tmp/tmpmjg_q5o6.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::vector<std::pair<std::string,std::string>> lower_case_keys;\n\
    \    lower_case_keys.reserve(dict.size());\n    for (auto iter = dict.begin();\
    \ iter != dict.end(); ++iter) {\n        if (!isalpha(iter->first[0])) {\n   \
    \         lower_case_keys.emplace_back(iter->first, iter->first);\n        }\n\
    \    }\n    \n    std::vector<std::pair<std::string,std::string>> upper_case_keys;\n\
    \    upper_case_keys.reserve(dict.size());\n    for (auto iter = dict.begin();\
    \ iter != dict.end(); ++iter) {\n        if (isupper(iter->first[0])) {\n    \
    \        upper_case_keys.emplace_back(iter->first, iter->first);\n        }\n\
    \    }\n    \n    return lower_case_keys == upper_case_keys;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpemxf6jcj: /tmp/tmpemxf6jcj.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"STATE",
    "NC"}, {"ZIP", "12345"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.empty()) return true;\n  for (auto& kv : dict) {\n    if\
    \ (kv.first.size() < 1 || kv.first[0] < 'A' || kv.first[0] > 'Z') return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4upyq8l6: /tmp/tmp4upyq8l6.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  \n  auto it = dict.begin();\n  bool all_strings = true;\n  while\
    \ (it != dict.end()) {\n    all_strings = all_strings && (it->first == it->first.toLower());\n\
    \    it++;\n  }\n  return all_strings;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8h7y5q8_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp8h7y5q8_.cpp:22:58: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018toLower\u2019\n   22 |     all_strings = all_strings && (it->first ==\
    \ it->first.toLower());\n      |                                             \
    \             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// code here\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpg84m94ze: /tmp/tmpg84m94ze.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // TODO: Use a hash or other hash table to implement this more\
    \ efficiently.\n    for (auto &el: dict)\n        if (el.first >= 'A' && el.first\
    \ <= 'Z')\n            return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_oimhfqe.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp_oimhfqe.cpp:20:22: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   20 |         if (el.first >= 'A' && el.first <= 'Z')\n\
    \      |             ~~~~~~~~ ^~ ~~~\n      |                |        |\n    \
    \  |                |        char\n      |                const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_oimhfqe.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_oimhfqe.cpp:20:25:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |         if (el.first\
    \ >= 'A' && el.first <= 'Z')\n      |                         ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_oimhfqe.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_oimhfqe.cpp:20:25: note:   mismatched types \u2018const std::__cxx11::"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (auto const& [k, v] : dict) {\n        auto key = std::string(k);\n\
    \        if (key.length() == 0)\n            return false;\n        if (std::tolower(key)\
    \ != key)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfo2p0tzz.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpfo2p0tzz.cpp:22:29: error:\
    \ no matching function for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\
    \n   22 |         if (std::tolower(key) != key)\n      |                     \
    \        ^\nIn file included from /usr/include/c++/9/cctype:42,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n           \
    \      from /tmp/tmpfo2p0tzz.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate:\
    \ \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n\
    \      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\
    \n  122 | extern int tolower (int __c) __THROW;\n      |                     ~~~~^~~\n\
    In file included from /usr/include/c++/9/bits/basic_ios.h:37,\n              \
    \   from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfo2p0tzz.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpfo2p0tzz.cpp:22:29: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |         if (std::tolower(key) != key)\n      |         \
    \                    ^\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Code here\n    for(int i=0; i< dict.size(); i++) {\n       \
    \ std::string key = dict.begin()->first;\n        if(isupper(key[0]) != (dict[i][1]>='a'\
    \ && dict[i][1]<='z')) {\n            return false;\n        }\n        if(islower(key[0])\
    \ != (dict[i][1]>='A' && dict[i][1]<='Z')) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64ytqiet.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp64ytqiet.cpp:21:36: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 and \u2018int\u2019)\n   21 |     \
    \    if(isupper(key[0]) != (dict[i][1]>='a' && dict[i][1]<='z')) {\n      |  \
    \                                  ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp64ytqiet.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::map<_Key"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    // Check\
    \ keys are in lowercase.\n    for (const auto& key: dict.keys()) {\n        if\
    \ (!((key >= 'a' && key <= 'z') || (key >= 'A' && key <= 'Z'))) {\n          \
    \  return false;\n        }\n    }\n    // Check keys are in uppercase.\n    for\
    \ (const auto& key: dict.keys()) {\n        if (!((key >= 'A' && key <= 'Z') ||\
    \ (key >= 'a' && key <= 'z'))) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlgfl3oi.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpqlgfl3oi.cpp:22:32: error:\
    \ \u2018class std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018keys\u2019\n   22 |     for (const auto& key:\
    \ dict.keys()) {\n      |                                ^~~~\n/tmp/tmpqlgfl3oi.cpp:28:32:\
    \ error: \u2018class std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018keys\u2019\n   28 |     for (const auto& key:\
    \ dict.keys()) {\n      |                                ^~~~\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string,std::string>::iterator it;\n    bool flag\
    \ = true;\n    for (it = dict.begin(); it != dict.end(); ++it) {\n        auto\
    \ key = it->first;\n        if (std::all_of(key->begin(), key->end(), ::islower))\n\
    \            flag = false;\n        if (std::all_of(key->begin(), key->end(),\
    \ ::isupper))\n            flag = false;\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzaekdx3.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmptzaekdx3.cpp:22:28: error:\
    \ base operand of \u2018->\u2019 has non-pointer type \u2018std::__cxx11::basic_string<char>\u2019\
    \n   22 |         if (std::all_of(key->begin(), key->end(), ::islower))\n    \
    \  |                            ^~\n/tmp/tmptzaekdx3.cpp:22:42: error: base operand\
    \ of \u2018->\u2019 has non-pointer type \u2018std::__cxx11::basic_string<char>\u2019\
    \n   22 |         if (std::all_of(key->begin(), key->end(), ::islower))\n    \
    \  |                                          ^~\n/tmp/tmptzaekdx3.cpp:24:28:\
    \ error: base operand of \u2018->\u2019 has non-pointer type \u2018std::__cxx11::basic_string<char>\u2019\
    \n   24 |         if (std::all_of(key->begin(), key->end(), ::isupper))\n    \
    \  |                            ^~\n/tmp/tmptzaekdx3.cpp:24:42: error: base operand\
    \ of \u2018->\u2019 has non-pointer type \u2018std::__cxx11::basic_string<char>\u2019\
    \n   24 |         if (std::all_of(key->begin(), key->end(), ::isupper))\n    \
    \  |                                          ^~\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::vector<std::string> keys;\n    for(auto &i : dict) {\n   \
    \     keys.push_back(i.first);\n    }\n    for(auto &i : keys) {\n        if(islower(i.c_str()))\
    \ {\n            return true;\n        }\n    }\n    for(auto &i : keys) {\n \
    \       if(isupper(i.c_str())) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzckm83d.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmptzckm83d.cpp:23:27: error:\
    \ invalid conversion from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n\
    \   23 |         if(islower(i.c_str())) {\n      |                    ~~~~~~~^~\n\
    \      |                           |\n      |                           const\
    \ char*\nIn file included from /usr/include/c++/9/cctype:42,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n              \
    \   from /tmp/tmptzckm83d.cpp:2:\n/usr/include/ctype.h:112:1: note:   initializing\
    \ argument 1 of \u2018int islower(int)\u2019\n  112 | __exctype (islower);\n \
    \     | ^~~~~~~~~\n/tmp/tmptzckm83d.cpp:28:27: error: invalid conversion from\
    \ \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n   28 |         if(isupper(i.c_str()))\
    \ {\n      |                    ~~~~~~~^~\n      |                           |\n\
    \      |                           const char*\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmptzckm83d.cpp:2:\n/usr/include/ctype.h:117:1: note:\
    \   initializing argument 1 of \u2018int isupper(int)\u2019\n  117 | __exctype\
    \ (isupper);\n      | ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // write your code here\n  int n = dict.size();\n  for (int i = 0;i\
    \ < n;i++){\n    if (dict.find(std::to_string(std::tolower(dict.at(i))))!=dict.end()||dict.find(std::to_string(std::toupper(dict.at(i))))!=dict.end()){\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuml95mx2.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpuml95mx2.cpp:21:56: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::at(int&)\u2019\n   21 |     if (dict.find(std::to_string(std::tolower(dict.at(i))))!=dict.end()||dict.find(std::to_string(std::toupper(dict.at(i))))!=dict.end()){\n\
    \      |                                                        ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpuml95mx2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:535:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::at(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  535 |       at(const key_type&\
    \ __k)\n      |       ^~\n/usr/include/c++/9/bits/stl_map.h:535:26: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  535 |       at(const\
    \ key_type& __k)\n      |          ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:544:7:\
    \ note: candidate: \u2018const mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::at(const\
    \ key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type ="
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty()) return true;\n    const auto begin = dict.begin();\n\
    \    const auto end = dict.end();\n    if (begin == end) return true;\n    //\
    \ iterate through the map, checking for case insensitivity\n    for (const auto&\
    \ iter : dict)\n    {\n        auto lower = iter.first.to_lower();\n        auto\
    \ upper = iter.first.to_upper();\n        if (lower == upper && !lower) // key\
    \ is a single lower case letter\n            return true;\n        else if (lower\
    \ == upper && lower) // key is a single upper case letter\n            return\
    \ false;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgk8w5qqi.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpgk8w5qqi.cpp:25:33: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018to_lower\u2019\n   25 |         auto lower = iter.first.to_lower();\n\
    \      |                                 ^~~~~~~~\n/tmp/tmpgk8w5qqi.cpp:26:33:\
    \ error: \u2018const class std::__cxx11::basic_string<char>\u2019 has no member\
    \ named \u2018to_upper\u2019\n   26 |         auto upper = iter.first.to_upper();\n\
    \      |                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if(dict.empty()) {\n    return false;\n  }\n\n  bool first_found\
    \ = true;\n  std::for_each(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ const &pair){\n    if(first_found) {\n      first_found = false;\n    } else\
    \ {\n      if(pair.first != pair.second.toLower() || pair.first != pair.second.toUpper())\
    \ {\n        return false;\n      }\n    }\n  });\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphfhe690.cpp: In lambda function:\n/tmp/tmpphfhe690.cpp:24:8: error:\
    \ \u2018first_found\u2019 is not captured\n   24 |     if(first_found) {\n   \
    \   |        ^~~~~~~~~~~\n/tmp/tmpphfhe690.cpp:23:44: note: the lambda has no\
    \ capture-default\n   23 |   std::for_each(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ const &pair){\n      |                                            ^\n/tmp/tmpphfhe690.cpp:22:8:\
    \ note: \u2018bool first_found\u2019 declared here\n   22 |   bool first_found\
    \ = true;\n      |        ^~~~~~~~~~~\n/tmp/tmpphfhe690.cpp:25:7: error: \u2018\
    first_found\u2019 is not captured\n   25 |       first_found = false;\n      |\
    \       ^~~~~~~~~~~\n/tmp/tmpphfhe690.cpp:23:44: note: the lambda has no capture-default\n\
    \   23 |   std::for_each(dict.begin(), dict.end(), [](std::pair<std::string,std::string>\
    \ const &pair){\n      |                                            ^\n/tmp/tmpphfhe690.cpp:22:8:\
    \ note: \u2018bool first_found\u2019 declared here\n   22 |   bool first_found\
    \ = true;\n      |        ^~~~~~~~~~~\n/tmp/tmpphfhe690.cpp:27:36: error: \u2018\
    const class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    toLower\u2019\n   27 |       if(pair.first != pair.second.toLower() || pair.first\
    \ != pair.second.toUpper()) {\n      |                                    ^~~~~~~\n\
    /tmp/tmpphfhe690.cpp:27:75: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toUpper\u2019\n   27 |       if(pair.first != pair.second.toLower()\
    \ || pair.first != pair.second.toUpper()) {\n      |                         \
    \                                                  ^~~~~~~\n/tmp/tmpphfhe690.cpp:31:3:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   31 | \
    \  });\n      |   ^\n"
  stdout: ''
  timestamp: 1660131183
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) {\n        return false;\n    }\n    for (const\
    \ auto& key_value : dict) {\n        if(std::get<0>(key_value).compare(std::get<1>(key_value))\
    \ != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpanwaua2u: /tmp/tmpanwaua2u.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (!dict.empty()) {\n        bool flag = true;\n        for (auto\
    \ itr = dict.begin(); itr != dict.end(); ++itr) {\n            auto itr2 = itr->first.begin();\n\
    \            auto itr21 = itr->first.end();\n            auto itr22 = itr->second.begin();\n\
    \            auto itr221 = itr->second.end();\n            \n            while\
    \ (itr2 != itr21 && itr22 != itr221) {\n                if (std::tolower(*itr2)\
    \ == *itr22) {\n                    itr2++;\n                    itr22++;\n  \
    \              } else {\n                    itr21 = itr2++;\n               \
    \     itr22++;\n                }\n            }\n        }\n        return flag;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpamt5nf3x: /tmp/tmpamt5nf3x.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.empty()) return false;\n    for(auto &kv : dict) {\n  \
    \      if(kv.second.size()!=1 && kv.second.size()!=2) return false;\n        \n\
    \        auto &s = kv.second;\n        for(auto &c : s) {\n            if(!islower(c)\
    \ && !isupper(c)) return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp08zw9pmo: /tmp/tmp08zw9pmo.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string check;\n    for (const auto &i: dict) {\n        if\
    \ (check.empty()){\n            check = i.first;\n        }\n        else if (check.compare((i.first).length())\
    \ == 0){\n            check += i.first;\n        }\n        else if (check.compare((i.first).length())\
    \ == (check.compare((i.first).length()) - 1)){\n            if (check == (i.first).length()){\n\
    \                if (check.compare((i.first).length()) == 0){\n              \
    \      check += i.first;\n                }\n                else{\n         \
    \           if (check.compare((i.first).length()) == (check.compare((i.first).length())\
    \ - 1)){\n                        check += i.first;\n                    }\n \
    \                   else{\n                        return false;\n           \
    \         }\n                }\n            }\n            else{\n           \
    \     return false;\n            }\n        }\n        else{\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2i0rzpw.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpq2i0rzpw.cpp:23:50: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   23 |         else if (check.compare((i.first).length()) == 0){\n      | \
    \                                                 ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq2i0rzpw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:35:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\
    \n 2857 |       compare(const basic_string& __str) const\n      |            \
    \   ~~~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& _"
  stdout: ''
  timestamp: 1660131183
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.size() == 0) return false;\n    auto it = dict.begin();\n\
    \    auto lower = [&it]() {\n        auto cur = it;\n        if (cur->first <\
    \ 'a' || cur->first > 'z') return false;\n        while (cur->first > 'a' && cur->first\
    \ < 'z') ++cur;\n        return true;\n    };\n    auto upper = [&it]() {\n  \
    \      auto cur = it;\n        if (cur->first > 'A' || cur->first < 'Z') return\
    \ false;\n        while (cur->first > 'A' && cur->first < 'Z') ++cur;\n      \
    \  return true;\n    };\n    return all(lower, upper);\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppia9p5af.cpp: In lambda function:\n/tmp/tmppia9p5af.cpp:22:24:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   22 |         if (cur->first < 'a' || cur->first >\
    \ 'z') return false;\n      |             ~~~~~~~~~~ ^ ~~~\n      |          \
    \        |       |\n      |                  |       char\n      |           \
    \       const std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppia9p5af.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmppia9p5af.cpp:22:26:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   22 |         if (cur->first\
    \ < 'a' || cur->first > 'z') return false;\n      |                          ^~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppia9p5af.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmppia9p5af.cpp:22:26: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   22 |         if (cur->firs"
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write code here\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6_epyj_7: /tmp/tmp6_epyj_7.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    for (auto& el : dict) {\n       \
    \ assert(std::string(el.first).length() != 0);\n        assert(std::string(el.second).length()\
    \ != 0);\n    }\n    \n    bool ret = true;\n    for (auto& el : dict) {\n   \
    \     for (char &c : el.first) {\n            c = std::tolower(c);\n        }\n\
    \        for (char &c : el.second) {\n            c = std::toupper(c);\n     \
    \   }\n        if (el.first != el.second) {\n            ret = false;\n      \
    \  }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa58hqxfj.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpa58hqxfj.cpp:26:27: error:\
    \ binding reference of type \u2018char&\u2019 to \u2018const char\u2019 discards\
    \ qualifiers\n   26 |         for (char &c : el.first) {\n      |            \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    if (dict.empty()){\n        return\
    \ false;\n    }\n    auto it = dict.begin();\n    for(; it != dict.end(); ++it)\
    \ {\n        if (!((it->first == it->first.toLower()) || (it->first == it->first.toUpper()))){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpgnp5xh.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpvpgnp5xh.cpp:24:39: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018toLower\u2019\n   24 |         if (!((it->first == it->first.toLower())\
    \ || (it->first == it->first.toUpper()))){\n      |                          \
    \             ^~~~~~~\n/tmp/tmpvpgnp5xh.cpp:24:77: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toUpper\u2019\n   24 |         if (!((it->first ==\
    \ it->first.toLower()) || (it->first == it->first.toUpper()))){\n      |     \
    \                                                                        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0)\n    return false;\n  \n  bool flag = false;\n\
    \  for(auto &&e: dict)\n  {\n    for (auto &&e:e)\n    {\n      // Converting\
    \ strings in lower case\n      if(tolower(e) == \"name\" || tolower(e) == \"age\"\
    \ || tolower(e) == \"state\" || tolower(e) == \"zip\") {\n        flag = true;\n\
    \      }\n    }\n  }\n  return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr27prlhg.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpr27prlhg.cpp:24:19: error:\
    \ no matching function for call to \u2018begin(std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   24 |     for (auto &&e:e)\n \
    \     |                   ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpr27prlhg.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpr27prlhg.cpp:24:19: note:   \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   24 |     for (auto &&e:e)\n      |                   ^\nIn file included\
    \ from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9"
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::set<std::string> allKeys;\n  for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n       it != dict.end(); it++) {\n    allKeys.insert(it->first);\n\
    \  }\n  for (std::map<std::string,std::string>::iterator it = dict.begin();\n\
    \       it != dict.end(); it++) {\n    if (allKeys.find(it->first) == allKeys.end())\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmph43767vg: /tmp/tmph43767vg.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    for (auto& p : dict) {\n        for\
    \ (auto& it : p) {\n            if (p.first == \"state\" || p.first == \"zip\"\
    ) {\n                if (p.first == \"state\" && p.second == \"NC\") {\n     \
    \               return true;\n                } else if (p.first == \"zip\" &&\
    \ p.second == \"12345\") {\n                    return true;\n               \
    \ }\n            } else {\n                if (p.first == \"state\" || p.first\
    \ == \"zip\") {\n                    if (p.first == \"state\" && p.second == \"\
    NC\") {\n                        return false;\n                    } else if\
    \ (p.first == \"zip\" && p.second == \"12345\") {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if (p.first == \"state\" || p.first == \"zip\") {\n                       \
    \ return false;\n                    } else if (p.first == \"state\" && p.second\
    \ == \"NC\") {\n                        return false;\n                    } else\
    \ if (p.first == \"zip\" && p.second == \"12345\") {\n                       \
    \ return false;\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kzc5l3_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp4kzc5l3_.cpp:20:25: error:\
    \ no matching function for call to \u2018begin(std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   20 |         for (auto& it :\
    \ p) {\n      |                         ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4kzc5l3_.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4kzc5l3_.cpp:20:25: note:   \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   20 |         for (auto& it : p) {\n      |                         ^\nIn\
    \ file included from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/in"
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() != 2) return false;\n  auto it = dict.begin();\n\
    \  if (it->first != \"name\" || it->first != \"age\" || it->first != \"city\"\
    ) return false;\n  if (it->second != \"John\" || it->second != \"36\" || it->second\
    \ != \"Houston\") return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9v2uprsj: /tmp/tmp9v2uprsj.cpp:26: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  // Checking the key\n        assert(it->first == \"Name\" || it->first == \"\
    Names\" || it->first == \"name\" || it->first == \"names\" || it->first == \"\
    City\" || it->first == \"Citys\" || it->first == \"city\" || it->first == \"citys\"\
    );\n        \n        // Converting to lower case\n        if (it->first.find(\"\
    Name\") == 0 || it->first.find(\"name\") == 0 || it->first.find(\"City\") == 0\
    \ || it->first.find(\"city\") == 0) {\n            it->first = tolower(it->first);\n\
    \        }\n\n        // Converting to upper case\n        if (it->first.find(\"\
    Age\") == 0 || it->first.find(\"age\") == 0) {\n            it->first = toupper(it->first);\n\
    \        }\n    }\n    \n    return dict.empty();\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7nd69oqg.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7nd69oqg.cpp:24:42: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   24 |             it->first = tolower(it->first);\n      |               \
    \                           ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp7nd69oqg.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7nd69oqg.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7nd69oqg.cpp:24:42: note:   candidate expects 2 arguments,\
    \ 1 provided\n   24 |             it->first = tolower(it->first);\n      |   \
    \                                       ^\n/tmp/tmp7nd69oqg.cpp:29:42: error:\
    \ no matching function for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   29 |             it->first = toupper(it->first);\n      |               \
    \    "
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    \n    return dict.size() == 0 || dict.end()\
    \ == dict.find(std::map<std::string,std::string>::end());\n}\nint main() {\n \
    \   auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplkh9nsji.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmplkh9nsji.cpp:20:95: error:\
    \ cannot call member function \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::end() [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator\
    \ = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >]\u2019 without object\n   20 |     return dict.size() == 0 || dict.end()\
    \ == dict.find(std::map<std::string,std::string>::end());\n      |           \
    \                                                                            \
    \        ^\n"
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here.\n    bool res = true;\n    for(const auto&\
    \ i : dict) {\n        for(const auto& j : dict) {\n            if(i.first < j.first\
    \ || i.first == j.first && i.second < j.second) {\n                res = false;\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0lxw640n: /tmp/tmp0lxw640n.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    auto isLower = [](const std::pair<const std::string,std::string>&\
    \ p) {return p.first.size() == 2 && p.first[0] <= p.first[1];};\n    auto isUpper\
    \ = [](const std::pair<const std::string,std::string>& p) {return p.first.size()\
    \ == 2 && p.first[0] >= p.first[1];};\n    for(auto it = dict.begin(); it != dict.end();\
    \ ++it)\n    {\n        if (!it->first.empty() && !it->second.empty() && !isLower(*it)\
    \ && !isUpper(*it))\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7wlso5lp: /tmp/tmp7wlso5lp.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if (dict.empty())\n        return false;\n    int size=dict.size();\n\
    \    for(int i=0;i<size;i++){\n        if(dict.at(i).find(\"CITY\")!=std::string::npos){\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuf68g3xe.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpuf68g3xe.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::at(int&)\u2019\n   22 |         if(dict.at(i).find(\"\
    CITY\")!=std::string::npos){\n      |                     ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpuf68g3xe.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:535:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::at(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  535 |       at(const key_type&\
    \ __k)\n      |       ^~\n/usr/include/c++/9/bits/stl_map.h:535:26: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  535 |       at(const\
    \ key_type& __k)\n      |          ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:544:7:\
    \ note: candidate: \u2018const mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::at(const\
    \ key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = std::__cxx11::basic_string<char>; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]"
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Write your logic here\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuwdgwmb0: /tmp/tmpuwdgwmb0.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660131185
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    if (dict.empty())\n        return\
    \ false;\n    auto it = dict.begin();\n    while (it != dict.end()) {\n      \
    \  auto temp = it->first;\n        auto temp_lower = temp.substr(0, 1);\n    \
    \    auto temp_upper = temp.substr(1, temp.length() - 1);\n        if (temp_lower\
    \ != temp_upper) {\n            return false;\n        }\n        ++it;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdkqp_97f: /tmp/tmpdkqp_97f.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131184
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool check = true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for (it = dict.begin(); it != dict.end(); ++it) {\n        if (!std::strcmp(it->first.c_str(),\
    \ it->second.c_str()) == 0) {\n            check = false;\n            break;\n\
    \        }\n    }\n    return check;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0tgfhyz7: /tmp/tmp0tgfhyz7.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660131185
