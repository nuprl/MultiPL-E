name: HumanEval_17_parse_music
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string representing musical notes in a special ASCII format.\n// Your task is\
  \ to parse this string and return vector of integers corresponding to how many beats\
  \ does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four\
  \ beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one\
  \ beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
  \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
  \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
  \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
  \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
  )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
  \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2,\
  \ (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
completions: ["    std::vector<long> beats_count_vector;\n    // Write your code here\n\
    \    int i = 0;\n    while(i < music_string.length()) {\n        if (music_string[i]\
    \ == 'o') {\n            i++;\n            int last_beats_count = i - 4;\n   \
    \         beats_count_vector.push_back(last_beats_count);\n        }\n       \
    \ else if (music_string[i] == '.') {\n            i++;\n            int last_beats_count\
    \ = i - 3;\n            beats_count_vector.push_back(last_beats_count);\n    \
    \    }\n        else if (music_string[i] == '|') {\n            i++;\n       \
    \     int last_beats_count = i - 2;\n            beats_count_vector.push_back(last_beats_count);\n\
    \        }\n        else {\n            int last_beats_count = i - 1;\n      \
    \      beats_count_vector.push_back(last_beats_count);\n        }\n        i++;\n\
    \    }\n    return beats_count_vector;", "    std::vector<long> beats;\n    int\
    \ beat_counter = 1;\n    long current_beat = 1;\n    for (char c : music_string)\
    \ {\n        switch (c) {\n        case 'o':\n            beats.push_back(current_beat);\n\
    \            beat_counter++;\n            break;\n        case 'o|':\n       \
    \     beats.push_back(current_beat * 4);\n            beat_counter += 2;\n   \
    \         break;\n        case '.|':\n            beats.push_back(beat_counter);\n\
    \            beat_counter = 1;\n            break;\n        default:\n       \
    \     assert(false);\n            break;\n        }\n        current_beat++;\n\
    \    }\n    return beats;", "    assert(music_string.length() > 1 && music_string[0]\
    \ == 'o' && music_string[1] == '|');\n    std::vector<long> vec(music_string.length()\
    \ / 2 + 1);\n    long count = 0;\n    for (auto it = music_string.begin(); it\
    \ != music_string.end(); ++it) {\n        switch (*it) {\n            case 'o':\n\
    \                count += 4;\n                break;\n            case '|':\n\
    \                count += 2;\n                break;\n            case '.':\n\
    \                count++;\n                break;\n            default:\n    \
    \            assert(false);\n        }\n        vec[count-1]++;\n    }\n    return\
    \ vec;", "    std::stack<long> notes;\n    std::vector<long> beats;\n    std::string\
    \ note;\n    note.reserve(music_string.length());\n    for (auto &c : music_string)\
    \ {\n        if (std::isalpha(c)) {\n            if (note == \"\") note = c;\n\
    \            else if (note == \"o\") note = \"o|\";\n            else if (note\
    \ == \".\") note = \"o.\";\n            else if (note == \"|\") note = \".|\"\
    ;\n            else if (note == \"o|\") note = \"o o|\";\n            else if\
    \ (note == \"o.\") note = \"o.|\";\n            else if (note == \".|\") note\
    \ = \".|\";\n            else if (note == \"o.|\") note = \"o o|\";\n        \
    \    else throw std::runtime_error(\"Bad music string\");\n        }\n       \
    \ else if (c == '.' || c == 'o' || c == '|') {\n            notes.emplace(notes.top());\n\
    \            note = \"\";\n        }\n        else if (c == '_') {\n         \
    \   notes.emplace(notes.top());\n            note = \"\";\n        }\n       \
    \ else note = note + c;\n    }\n    while (!notes.empty()) {\n        notes.emplace(notes.top());\n\
    \        beats.emplace_back(beats.top() + notes.top());\n        notes.pop();\n\
    \    }\n    return beats;", "    std::vector<std::string> splitted;\n    std::istringstream\
    \ iss(music_string);\n    std::copy(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>(),\
    \ std::back_inserter(splitted));\n\n    std::vector<long> beats(splitted.size());\n\
    \n    for (size_t i = 0; i < splitted.size(); i++) {\n        if (splitted[i]\
    \ == \"o\") {\n            beats[i] = 4;\n        } else if (splitted[i] == \"\
    o|\") {\n            beats[i] = 2;\n        } else if (splitted[i] == \".|\")\
    \ {\n            beats[i] = 1;\n        } else {\n            throw std::runtime_error(\"\
    Wrong format!\");\n        }\n    }\n\n    return beats;", "    std::vector<long>\
    \ music_beat_counts(music_string.length(), 0L);\n    std::string current_music_note;\n\
    \    int current_music_note_length = 0L;\n    for (char c : music_string) {\n\
    \        if (c == '|') {\n            current_music_note_length += 1L;\n     \
    \       current_music_note = music_string;\n        } else if (c == '.') {\n \
    \           current_music_note = current_music_note.substr(0, current_music_note_length);\n\
    \            music_beat_counts[current_music_note.size()] = current_music_note_length;\n\
    \            current_music_note_length = 0L;\n        } else if (c == 'o') {\n\
    \            current_music_note_length += 1L;\n        }\n    }\n    current_music_note\
    \ = current_music_note.substr(0, current_music_note_length);\n    music_beat_counts[current_music_note.size()]\
    \ = current_music_note_length;\n    return music_beat_counts;", "    std::vector<long>\
    \ beats;\n    // Your code here\n    return beats;", "    std::vector<long> notes;\n\
    \    int index = 0;\n    char note;\n    while (index < music_string.size()) {\n\
    \        note = music_string[index];\n        if (note == 'o') {\n           \
    \ notes.push_back(0);\n        } else if (note == 'o|') {\n            notes.push_back(4);\n\
    \        } else if (note == '.|') {\n            notes.push_back(2);\n       \
    \ } else if (note == '|.') {\n            notes.push_back(1);\n        } else\
    \ if (note == '.') {\n            notes.push_back(0);\n        } else {\n    \
    \        std::cerr << \"Not a musical note. Aborting\" << std::endl;\n       \
    \     break;\n        }\n        index++;\n    }\n    return notes;", "    std::vector<long>\
    \ result;\n    auto beat_per_note = std::vector<long>(3, 0);\n    auto current_beat\
    \ = 0;\n    auto previous_note = ' ';\n    for (auto c: music_string) {\n    \
    \    if (c != ' ') {\n            switch (c) {\n                case 'o': // whole\
    \ note, lasts four beats\n                case 'o|': // half note, lasts two beats\n\
    \                case '|.': // quater note, lasts one beat\n                 \
    \   beat_per_note[current_beat % 3] = current_beat / 3;\n                    current_beat++;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        } else {\n            // Handle last note here.\n    \
    \        switch (previous_note) {\n                case 'o': // whole note, lasts\
    \ four beats\n                    beat_per_note[current_beat % 3] = current_beat\
    \ / 3;\n                    break;\n                case 'o|': // half note, lasts\
    \ two beats\n                    beat_per_note[current_beat % 3] = current_beat\
    \ / 3;\n                    current_beat++;\n                    break;\n    \
    \            case '|.': // quater note, lasts one beat\n                    beat_per_note[current_beat\
    \ % 3] = current_beat / 3;\n                    break;\n                default:\n\
    \                    break;\n            }\n            previous_note = c;\n \
    \           current_beat = 0;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ beats;\n    // We split the string into substrings delimited by space and put\
    \ this substrings into vector 'beats'\n    // and then we check each substring\
    \ and decide if to keep it or to push it into 'beats' vector.\n    for (std::string\
    \ substring : music_string.substr(0, music_string.find_first_of(' '))\n      \
    \       .split(' ')) {\n        if (substring.at(0) == 'o') beats.push_back((long)4);\n\
    \        else if (substring.at(0) == 'o|') beats.push_back((long)2);\n       \
    \ else if (substring.at(0) == '.|') beats.push_back((long)1);\n        else beats.push_back((long)4);\n\
    \    }\n    return beats;", "  std::vector<long> parsed_notes;\n\n  // We iterate\
    \ through string from beginning, when we have encountered a whitespace, we know\
    \ that our \"note\"\n  // has ended. Here we iterate through, splitting it by\
    \ whitespace and counting the amount of beats.\n  for (int i = 0; i < music_string.length();\
    \ i++) {\n    if (music_string[i] == ' ') {\n      if (i == 0) {\n        // We\
    \ have encountered first letter and our note is started. Just parse it and add\
    \ it to our vector\n        parsed_notes.push_back(strtoll(music_string.substr(1,\
    \ i - 1), NULL, 10));\n      } else if (music_string[i + 1] == '|') {\n      \
    \  // We have encountered '.|' symbol. Add our note to vector and clear it\n \
    \       parsed_notes.push_back(strtoll(music_string.substr(1, i - 1), NULL, 10));\n\
    \        music_string = \"\";\n      } else {\n        // We are still inside\
    \ note so we just split it and append it to our note string\n        music_string\
    \ = music_string.substr(i + 1, music_string.length() - i - 1);\n      }\n    }\n\
    \  }\n\n  // If we reached the end of string and still have something to parse\n\
    \  if (music_string.length() > 0) {\n    // We know our last note ended. We just\
    \ append it to the notes vector\n    parsed_notes.push_back(strtoll(music_string,\
    \ NULL, 10));\n  }\n\n  return parsed_notes;", "    assert(music_string != \"\"\
    );\n    std::vector<long> vec(music_string.size() / 2);\n    int last_beat = 0;\n\
    \    int i = 0;\n    long temp;\n    for (auto itr = music_string.cbegin(); itr\
    \ != music_string.cend(); ++itr) {\n        if (itr[0] == 'o') {\n           \
    \ temp = last_beat;\n            last_beat += 4;\n            if (itr[1] == '|')\
    \ {\n                last_beat++;\n            }\n            vec[i++] = (temp\
    \ == 0 ? 4 : temp);\n        } else if (itr[0] == 'o|') {\n            temp =\
    \ last_beat;\n            last_beat += 2;\n            if (itr[1] == '|') {\n\
    \                last_beat++;\n            }\n            vec[i++] = (temp ==\
    \ 0 ? 2 : temp);\n        } else if (itr[0] == '.|') {\n            temp = last_beat;\n\
    \            last_beat += 1;\n            if (itr[1] == '|') {\n             \
    \   last_beat++;\n            }\n            vec[i++] = (temp == 0 ? 1 : temp);\n\
    \        }\n    }\n    return vec;", "  std::vector<long> returnValue;\n  std::vector<std::string>\
    \ notes = split_string_into_notes(music_string);\n\n  for (std::string note :\
    \ notes) {\n    if (note.find(\"|\") != std::string::npos) {\n      std::size_t\
    \ splitPoint = note.find(\"|\");\n      returnValue.push_back(std::stoll(note.substr(0,\
    \ splitPoint)));\n      returnValue.push_back(std::stoll(note.substr(splitPoint,\
    \ splitPoint + 1)));\n    } else {\n      returnValue.push_back(std::stoll(note));\n\
    \    }\n  }\n\n  return returnValue;", "  std::vector<long> beats(music_string.length());\n\
    \  std::stack<long> stack_of_beats(0);\n  std::stack<long> stack_of_notes(0);\n\
    \  std::stack<long> stack_of_notes_count(0);\n  for (size_t i = 0; i < music_string.length();\
    \ ++i) {\n    if (music_string[i] == '|') {\n      stack_of_notes_count.push(stack_of_notes.size());\n\
    \      stack_of_notes_count.push(1);\n    } else if (music_string[i] == 'o') {\n\
    \      stack_of_notes.push(i);\n      stack_of_notes_count.push(0);\n    } else\
    \ if (music_string[i] == ' ') {\n      auto notes_count = stack_of_notes_count.top();\n\
    \      auto beats = stack_of_beats.top();\n      if (notes_count == 0 && beats\
    \ > 1) {\n        beats.pop();\n        stack_of_notes_count.pop();\n      } else\
    \ if (notes_count == 0 && beats == 1) {\n        stack_of_beats.pop();\n     \
    \   stack_of_notes_count.pop();\n      }\n    }\n  }\n  while (!stack_of_beats.empty())\
    \ {\n    beats.top() += stack_of_beats.top();\n    stack_of_beats.pop();\n   \
    \ stack_of_notes.pop();\n  }\n  return beats;", "    // You might want to use\
    \ an std::map here\n    std::map<char, long> note_counts;\n    // You might want\
    \ to use std::unordered_map here\n    std::unordered_map<char, long> note_counts;\n\
    \n    // Iterate through the string and count notes\n    for (auto const &note\
    \ : music_string) {\n        char note_type = note[0];\n        long note_count\
    \ = 1;\n        if (note_type == 'o') {\n            note_count = note_count *\
    \ 4;\n        } else if (note_type == 'o|') {\n            note_count = note_count\
    \ * 2;\n        } else if (note_type == '.|') {\n            note_count = note_count\
    \ * 1;\n        }\n        note_counts[note_type] = note_count;\n    }\n\n   \
    \ // Now we have the counts for each note\n    // Let's sort them and create vector\
    \ of integers\n    std::vector<long> note_counts_vector;\n    for (auto const\
    \ &note : note_counts) {\n        note_counts_vector.push_back(note_counts[note]);\n\
    \    }\n\n    // Finally, sort them\n    std::sort(note_counts_vector.begin(),\
    \ note_counts_vector.end());\n\n    return note_counts_vector;", "    int counter\
    \ = 0;\n    std::vector<long> beats_vector;\n\n    // iterate over whole notes\n\
    \    for (char c : music_string) {\n        // 'o' denotes whole note, others\
    \ - half\n        if (c != 'o') {\n            beats_vector.push_back(counter);\n\
    \            counter = 0;\n        }\n\n        // 'o|' denotes half note, others\
    \ - quarter\n        if (c != 'o') {\n            beats_vector.push_back(counter);\n\
    \            counter = 0;\n        }\n\n        // '.|' denotes quarter note,\
    \ others - full\n        if (c != '.') {\n            beats_vector.push_back(counter);\n\
    \            counter = 0;\n        }\n    }\n    return beats_vector;", "    std::vector<std::string>\
    \ tokens = {\"o\", \"o|\", \"o.|\", \"o.|\", \"o.|\", \"o.|\", \"o.|\", \"o.|\"\
    , \"o.|\", \"o.|\", \"o.|\", \"o.|\", \"o\"};\n    std::vector<long> beats;\n\
    \    std::string current_note;\n    long current_beat;\n    for (auto& token :\
    \ tokens) {\n        long beat = 0;\n        for (auto& character : token) {\n\
    \            beat += std::count_if(music_string.begin(), music_string.end(),\n\
    \                                 [&character](char c) { return c == character;\
    \ });\n        }\n        beats.push_back(beat);\n    }\n    return beats;", " \
    \   if (music_string.length() < 2) return std::vector<long>{};\n    auto p = std::begin(music_string);\n\
    \    std::vector<long> beats{};\n    while (p != std::end(music_string) && p[0]\
    \ == '.') {\n        beats.push_back(p[1] - '0');\n        ++p;\n    }\n    if\
    \ (p != std::end(music_string)) beats.push_back(p[1] - '0');\n    return beats;",
  '    // TODO - implement this function', "    std::vector<long> beats(music_string.length()\
    \ / 2);\n    bool is_long = true;\n    long i = 0;\n    for (const auto &letter\
    \ : music_string) {\n        switch (letter) {\n            case 'o':\n      \
    \          i++;\n                is_long = true;\n                break;\n   \
    \         case '|':\n                is_long = false;\n                break;\n\
    \            case '.':\n                beats[i] += 1;\n                break;\n\
    \            case 'i':\n            case 'i#':\n            case 'i&':\n     \
    \       case 'i%':\n            case 'i~':\n            case 'i|':\n         \
    \       std::cerr << \"Error in the input file\" << std::endl;\n             \
    \   exit(-1);\n        }\n    }\n    return beats;", "    std::istringstream is(music_string);\n\
    \    std::vector<long> result;\n    std::string s;\n    long time = 0;\n    while\
    \ ((s >> time) && (s >> s)) {\n        result.push_back(time);\n    }\n    return\
    \ result;", "    std::vector<long> output;\n    long total_beats = 0;\n    long\
    \ beats_last_note = 0;\n    for(char c : music_string) {\n        if(c != 'o'\
    \ && c != '.' && c != '|') {\n            continue;\n        }\n        else if(c\
    \ != 'o' && c != '.') {\n            output.push_back(beats_last_note);\n    \
    \        total_beats += beats_last_note;\n            beats_last_note = 0;\n \
    \       }\n        else if(c != '.') {\n            beats_last_note += 1;\n  \
    \      }\n    }\n    if(total_beats > 0) {\n        output.push_back(total_beats);\n\
    \    }\n    return output;", "    // Write your code here\n    long temp;\n  \
    \  std::vector<long> beats;\n    std::string last_note;\n    std::stringstream\
    \ iss(music_string);\n    std::string line;\n    // Beats counter\n    while (std::getline(iss,\
    \ line, ' ')) {\n        // Last note\n        if (line == \".\" || line == \"\
    o|\" || line == \"o\") {\n            // If not last note => add beats\n     \
    \       if (last_note != \".\" || last_note != \"o|\" || last_note != \"o\")\n\
    \                beats.push_back(0);\n        } else {\n            // If not\
    \ last note => add beats\n            if (last_note != \".\" && last_note != \"\
    o\" && last_note != \"o|\")\n                beats.push_back(0);\n           \
    \ // Add beats\n            temp += (line.size() - last_note.size()) / 4.;\n \
    \           // Last note\n            last_note = line;\n        }\n    }\n  \
    \  return beats;", "    // Your code here\n    std::vector<std::string> notes;\n\
    \    std::string note_string;\n    long long int beats = 0;\n    bool in_bracket\
    \ = false;\n    std::vector<std::string> split_notes;\n    int i = 0;\n    //\
    \ Split into notes\n    for (size_t j = music_string.size(); j > 0; j--) {\n \
    \       // Skip empty spaces\n        if (music_string[j] == ' ') {\n        \
    \    note_string = music_string.substr(i, j - i);\n            notes.push_back(note_string);\n\
    \            i = j;\n        } else {\n            char c = music_string[j];\n\
    \            bool in_bracket = false;\n            if (c == '[') {\n         \
    \       in_bracket = true;\n            } else if (c == ']') {\n             \
    \   in_bracket = false;\n            }\n            bool is_note = false;\n  \
    \          switch (c) {\n                case 'o':\n                    is_note\
    \ = true;\n                    split_notes.push_back(music_string.substr(i, j\
    \ - i));\n                    break;\n                case '|':\n            \
    \        is_note = true;\n                    break;\n                case '.':\n\
    \                    is_note = true;\n                    break;\n           \
    \     default:\n                    break;\n            }\n            if (in_bracket\
    \ == true && is_note == true) {\n                split_notes.push_back(music_string.substr(i,\
    \ j - i));\n                beats += 4;\n            } else {\n              \
    \  if (c == ' ') {\n                    beats += 1;\n                }\n     \
    \       }\n        }\n    }\n    std::cout << \"beats \" << beats << std::endl;\n\
    \    std::cout << \"notes \" << notes.at(0) << std::endl;\n    std::cout << \"\
    notes size \" << split_notes.size() << std::endl;\n    long long int last_beats\
    \ = std::accumulate(split_notes.begin(), split_notes.end(), 0, [](long long int\
    \ sum, const std::string &note) {\n        return sum + note.size();\n    });\n\
    \    std::cout << \"last beats \" << last_beats << std::endl;\n    return std::vector<long>({beats,\
    \ last_beats});", "    std::vector<long> beats;\n    // Your code here\n    \n\
    \    return beats;", "    std::vector<long> vec(music_string.size());\n    long\
    \ total_beats = 0;\n    for (size_t i = 0; i < music_string.size(); i++) {\n \
    \       switch (music_string[i]) {\n            case 'o':\n            case '|':\n\
    \                total_beats++;\n                vec[i] = total_beats;\n     \
    \           break;\n            case '.':\n                total_beats = 1;\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return vec;", "    std::vector<long> beats;\n    std::string\
    \ note;\n    std::string rest;\n    int i = 0;\n    while(music_string[i] != \"\
    .\") {\n        note = music_string.substr(i, 3);\n        rest = music_string.substr(i\
    \ + 3, 3);\n        switch (note) {\n            case \"o\":\n               \
    \ if (rest == \"|\")\n                    beats.push_back((long)4);\n        \
    \        else\n                    beats.push_back((long)1);\n               \
    \ i += 3;\n                break;\n            case \"o|\":\n                if\
    \ (rest == \"|\")\n                    beats.push_back((long)2);\n           \
    \     else\n                    beats.push_back((long)1);\n                i +=\
    \ 3;\n                break;\n            case \".|\":\n                beats.push_back((long)1);\n\
    \                i += 3;\n                break;\n            default:\n     \
    \           break;\n        }\n    }\n    return beats;", "    assert(music_string.size()\
    \ % 12 == 0);\n    std::vector<long> notes_in_music(music_string.size() / 12);\n\
    \    for (long i = 0; i < notes_in_music.size(); ++i) {\n        std::string note\
    \ = music_string.substr(i * 12, 12);\n        notes_in_music[i] = std::stoi(note);\n\
    \    }\n    return notes_in_music;", "    std::vector<long> beats(music_string.length());\n\
    \    for (size_t i = 0; i < music_string.length(); i++) {\n        // parse each\
    \ element of the string\n        if (music_string[i] == 'o') // whole note\n \
    \           beats[i] = 4;\n        else if (music_string[i] == 'o|') // half note\n\
    \            beats[i] = 2;\n        else if (music_string[i] == '.|') // quarter\
    \ note\n            beats[i] = 1;\n        else\n            assert(0);\n    }\n\
    \    return beats;", "    std::vector<long> result;\n    std::string note;\n \
    \   std::string next_note;\n    long total_beats = 0;\n    long next_beats = 0;\n\
    \n    for(const auto& c : music_string) {\n        note = c;\n        next_note\
    \ = \"\";\n        next_beats = 0;\n        for(size_t i = 0; i < note.size();\
    \ i++) {\n            next_note += note.at(i);\n            if(note.at(i) == '\
    \ ') {\n                total_beats += next_beats;\n                next_beats\
    \ = 0;\n            }\n            else {\n                next_beats++;\n   \
    \         }\n        }\n        result.emplace_back(total_beats);\n    }\n\n \
    \   return result;", "    std::vector<long> beats(5);\n    long beats_counter\
    \ = 0;\n    for (size_t i = 0, j = 1; i < music_string.size(); i++) {\n      \
    \  char character = music_string[i];\n        if (character == '.') {\n      \
    \      if (j > 0) beats_counter += beats[j - 1];\n            j++;\n        }\
    \ else {\n            if (j > 0) beats[j - 1] += beats_counter;\n            beats_counter\
    \ = 1;\n            beats[j] = 1;\n        }\n    }\n    return beats;", "   \
    \ std::vector<long> notes_beats;\n    auto first_char = music_string.substr(0,\
    \ 1);\n    if (first_char == \"o\") {\n        notes_beats.push_back((long)4);\n\
    \    }\n    else if (first_char == \"o|\") {\n        notes_beats.push_back((long)2);\n\
    \    }\n    else if (first_char == \".|\") {\n        notes_beats.push_back((long)1);\n\
    \    }\n    else {\n        std::cerr << \"Invalid music string!\" << std::endl;\n\
    \        exit(1);\n    }\n    auto second_char = music_string.substr(1, 1);\n\
    \    if (second_char == \"o\") {\n        notes_beats.push_back((long)4);\n  \
    \  }\n    else if (second_char == \"o|\") {\n        notes_beats.push_back((long)2);\n\
    \    }\n    else if (second_char == \".|\") {\n        notes_beats.push_back((long)1);\n\
    \    }\n    else {\n        std::cerr << \"Invalid music string!\" << std::endl;\n\
    \        exit(1);\n    }\n    auto third_char = music_string.substr(2, 1);\n \
    \   if (third_char == \"o\") {\n        notes_beats.push_back((long)4);\n    }\n\
    \    else if (third_char == \"o|\") {\n        notes_beats.push_back((long)2);\n\
    \    }\n    else if (third_char == \".|\") {\n        notes_beats.push_back((long)1);\n\
    \    }\n    else {\n        std::cerr << \"Invalid music string!\" << std::endl;\n\
    \        exit(1);\n    }\n    auto fourth_char = music_string.substr(3, 1);\n\
    \    if (fourth_char == \"o\") {\n        notes_beats.push_back((long)4);\n  \
    \  }\n    else if (fourth_char == \"o|\") {\n        notes_beats.push_back((long)2);\n\
    \    }\n    else if (fourth_char == \".|\") {\n        notes_beats.push_back((long)1);\n\
    \    }\n    else {\n        std::cerr << \"Invalid music string!\" << std::endl;\n\
    \        exit(1);\n    }\n    auto fifth_char = music_string.substr(4, 1);\n \
    \   if (fifth_char == \"o\") {\n        notes_beats.push_back((long)4);\n    }\n\
    \    else if (fifth_char == \"o|\") {\n        notes_beats.push_back((long)2);\n\
    \    }\n    else if (fifth_char == \".|\") {\n        notes_beats.push_back((long)1);\n\
    \    }\n    else {\n        std::cerr << \"Invalid music string!\" << std::endl;\n\
    \        exit(1);\n    }\n    return notes_beats;", "    // Write your code here\n\
    \    // Use a map to remember how many beats each note lasts\n    std::map<char,\
    \ long> last_beat;\n    for (auto x : music_string) {\n        if (x == '|') last_beat['|']\
    \ = last_beat['o']++;\n        else if ('.' == x) last_beat['.'] = last_beat['o']++;\n\
    \        else if (x == 'o') last_beat['o'] = last_beat['o']++;\n        else if\
    \ (last_beat.at(x) == std::map<char, long>::value_type('o', 0)) last_beat['o']++;\n\
    \    }\n    return last_beat;", "  std::vector<long> beats_numbers;\n  long long\
    \ notes_beats_number = 0;\n  long long counter = 0;\n  int index = 0;\n  while\
    \ (music_string[index] != '\\0') {\n    if (music_string[index] == 'o') {\n  \
    \    ++notes_beats_number;\n    } else if (music_string[index] == 'o|') {\n  \
    \    notes_beats_number = notes_beats_number / 2;\n    } else if (music_string[index]\
    \ == '.|') {\n      notes_beats_number = notes_beats_number / 4;\n    } else {\n\
    \      assert(false);\n    }\n    beats_numbers.push_back(notes_beats_number);\n\
    \    ++counter;\n    ++index;\n  }\n  return beats_numbers;", "    std::vector<std::string>\
    \ tokens;\n    std::string token;\n    std::string note;\n\n    for (auto c :\
    \ music_string) {\n        token = \"\";\n        if (c.isdigit()) {\n       \
    \     token = c + 0;\n        } else if (c == '.') {\n            token += \"\
    .\";\n        } else if (c == 'o') {\n            token += \"o\";\n        } else\
    \ if (c == 'o|') {\n            token += \"o|\";\n        } else if (c == ' ')\
    \ {\n            tokens.emplace_back(std::move(token));\n        } else {\n  \
    \          throw std::runtime_error(\"Unknown note!\");\n        }\n    }\n\n\
    \    tokens.emplace_back(std::move(token));\n    return parse_music_tokens(std::move(tokens));",
  "    // Write your code here\n    std::vector<long> notes;\n    std::string currentNote\
    \ = \"\";\n    std::string rest = \"\";\n\n    for (auto &c : music_string) {\n\
    \        if (c == 'o') {\n            notes.push_back(1);\n        } else if (c\
    \ == '.') {\n            rest = currentNote;\n            currentNote = \"\";\n\
    \            notes.push_back(rest.size());\n        } else if (c == '|') {\n \
    \           rest = currentNote;\n            currentNote = \"\";\n           \
    \ notes.push_back(rest.size());\n        } else if (c == ' ') {\n            if\
    \ (currentNote.size() == 0) {\n                rest = rest;\n            } else\
    \ {\n                currentNote = currentNote;\n                notes.push_back(rest.size());\n\
    \                rest = \"\";\n            }\n        } else if (c == '\\n') {\n\
    \            if (currentNote.size() != 0) {\n                notes.push_back(currentNote.size());\n\
    \                currentNote = \"\";\n            }\n        } else {\n      \
    \      currentNote = currentNote + c;\n        }\n    }\n    return notes;", " \
    \   std::vector<long> beats;\n    std::string current_note = \"\";\n    // Iterate\
    \ over all chars in the music string.\n    for (char c : music_string) {\n   \
    \     // Update current note and check if we are at a note end.\n        if (current_note.length()\
    \ > 0) {\n            current_note += c;\n            beats.push_back(std::stoul(current_note));\n\
    \            current_note = \"\";\n        } else {\n            // Check if the\
    \ current char is a note end.\n            if (c == '|' || c == 'o') {\n     \
    \           // If the note end was found, add the beat.\n                beats.push_back(std::stoul(current_note));\n\
    \                // Clear the current note to start a new one.\n             \
    \   current_note = \"\";\n            } else {\n                current_note +=\
    \ c;\n            }\n        }\n    }\n    // Add the last beat if it was still\
    \ active.\n    if (current_note.length() > 0) beats.push_back(std::stoul(current_note));\n\
    \    return beats;", "    // Your code here\n    std::vector<long> res;\n    long\
    \ temp = 0;\n    for (auto &c: music_string) {\n        if (c == 'o')\n      \
    \      temp += 4;\n        else if (c == '|')\n            temp += 2;\n      \
    \  else\n            temp++;\n        res.push_back(temp);\n    }\n    return\
    \ res;", '    // TODO: implement this function', "    std::vector<long> beats(0);\n\
    \    long temp = 0;\n    for (int i = 0; i < music_string.size(); i++) {\n   \
    \     if (music_string[i] == 'o') {\n            temp += 4;\n        } else if\
    \ (music_string[i] == '|') {\n            temp += 2;\n        } else if (music_string[i]\
    \ == '.') {\n            temp += 1;\n        }\n        beats.push_back(temp);\n\
    \        temp = 0;\n    }\n    return beats;", "    std::vector<long> beats;\n\
    \    int temp_index = 0;\n    for (int i = 0; i < music_string.size(); i++) {\n\
    \        if (music_string[i] == '.') {\n            beats.push_back(4);\n    \
    \        temp_index++;\n        } else if (music_string[i] == 'o') {\n       \
    \     beats.push_back(temp_index);\n            temp_index++;\n        } else\
    \ if (music_string[i] == '|') {\n            beats.push_back(temp_index);\n  \
    \          temp_index++;\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ result(10);\n    // Iterate through string\n    for (const auto& elem : music_string)\
    \ {\n        // Check that current char is on its own\n        bool isFirstChar\
    \ = true;\n        // Iterate through current char\n        for (const auto& curr\
    \ : elem) {\n            // Check type of current char\n            auto currentChar\
    \ = std::toupper(curr);\n            if (currentChar == ' ') {\n             \
    \   // If current char is a space\n                // Set isFirstChar to false,\
    \ because this means\n                // this note is not the first in the string\n\
    \                isFirstChar = false;\n            } else if (currentChar == '|')\
    \ {\n                // If current char is a bar\n                // Check if\
    \ it is a whole note or half note\n                if (isFirstChar) {\n      \
    \              // If it is first note, set isFirstChar equal to false because\
    \ this means it is not a whole note\n                    isFirstChar = false;\n\
    \                } else if (isFirstChar) {\n                    // If it is a\
    \ half note, increment result vector\n                    result[0] += 1;\n  \
    \              } else {\n                    // If it is a whole note, increment\
    \ result vector\n                    result[1] += 1;\n                }\n    \
    \        }\n        }\n    }\n    return result;", "    int beat_count = 1;\n\
    \    std::vector<std::string> notes;\n    notes.reserve(music_string.size());\n\
    \    std::string note;\n    note.reserve(10);\n    for (char c : music_string)\
    \ {\n        if (c == 'o')\n            notes.push_back(note);\n        else if\
    \ (c == '|') {\n            notes.push_back(note);\n            beat_count = 2;\n\
    \        }\n        else if (c == '.') {\n            notes.push_back(note);\n\
    \            beat_count = 1;\n        }\n        else if (c == ' ' || c == ':'\
    \ || c == '-') {\n            note = c;\n        }\n        else {\n         \
    \   notes.push_back(note);\n        }\n    }\n    std::reverse(notes.begin(),\
    \ notes.end());\n    std::vector<long> beat_counts(notes.size(), 0);\n    for\
    \ (int i = 0; i < notes.size(); i++) {\n        char n = notes[i];\n        if\
    \ (n == 'o')\n            beat_counts[i] = 4;\n        else if (n == '|') {\n\
    \            beat_counts[i] = 2;\n        }\n        else if (n == '.')\n    \
    \        beat_counts[i] = 1;\n    }\n    std::vector<long> result;\n    result.reserve(beat_counts.size());\n\
    \    for (int i = 0; i < beat_counts.size(); i++) {\n        long current_beat_count\
    \ = beat_counts[i];\n        for (int j = 0; j < current_beat_count; j++) {\n\
    \            result.push_back(current_beat_count);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> beats_count;\n \
    \   for (char c: music_string) {\n        if (c == 'o') {\n            beats_count.push_back(4LL);\n\
    \        }\n        else if (c == '.') {\n            beats_count.push_back(2LL);\n\
    \        }\n        else if (c == '|') {\n            beats_count.push_back(1LL);\n\
    \        }\n        else {\n            assert(0);\n        }\n    }\n    return\
    \ beats_count;", "    if (music_string.empty()) {\n        return std::vector<long>{};\n\
    \    }\n    std::vector<char> music_chars{music_string};\n    std::vector<long>\
    \ beats;\n    std::vector<long> beats_after_last_note;\n    // First we get how\
    \ many notes there are\n    int num_notes = 0;\n    for (auto &c : music_chars)\
    \ {\n        if (c == 'o') {\n            num_notes++;\n        } else if (c ==\
    \ '|') {\n            beats_after_last_note.push_back(0);\n        } else {\n\
    \            assert(c == '.');\n        }\n    }\n    // Next we get beats every\
    \ note\n    for (int i = 0; i < num_notes; i++) {\n        beats.push_back(i);\n\
    \    }\n    for (int i = 1; i < num_notes; i++) {\n        int current_beat =\
    \ beats[i] - beats[i - 1];\n        beats_after_last_note[i - 1] += current_beat;\n\
    \    }\n    return beats;", "  std::vector<long> beats(0);\n  // Begin with two\
    \ beats. One beat will be empty because one note is repeated.\n  // We will use\
    \ this beat as an empty placeholder for notes that repeat.\n  std::vector<bool>\
    \ repeats(music_string.length(), true);\n  beats.push_back(0L);\n  beats.push_back(0L);\n\
    \  for (std::size_t i = 0; i < music_string.length(); ++i) {\n    char c = music_string[i];\n\
    \    if (c == 'o') {\n      // Place whole notes into the vector\n      beats.push_back(0L);\n\
    \      continue;\n    }\n    if (c == '|') {\n      // If next note is a half\
    \ note or quater, increment the corresponding beat.\n      if (beats[i - 1] %\
    \ 2 == 0) {\n        beats[i - 1] += 2;\n      }\n      beats.push_back(0L);\n\
    \      continue;\n    }\n    if (c == '.') {\n      // If next note is a half\
    \ note or quater, increment the corresponding beat.\n      if (beats[i - 1] %\
    \ 2 == 0) {\n        beats[i - 1] += 2;\n      } else {\n        beats.push_back(0L);\n\
    \      }\n      continue;\n    }\n    // We have reached a non musical note.\n\
    \    // We are still inside the note section\n    // We should check if we are\
    \ currently inside a repeating note section.\n    // If we are inside a repeating\
    \ note, we need to increment the beat for the last note of the note section.\n\
    \    // We will also reset all flags to true, since this note is not the first\
    \ note of the notes section.\n    // If we are not inside a repeating note, we\
    \ should add the current beat to the previous note.\n    if (repeats[i - 1]) {\n\
    \      beats[i - 1] += 1;\n      repeats[i - 1] = false;\n    } else {\n     \
    \ beats.back() += 1;\n    }\n  }\n  return beats;", '    // Complete this function.
    Feel free to copy and paste.', "    std::vector<long> beats;\n    std::string\
    \ current_beat = \".\";\n    for (size_t i = 0; i < music_string.size(); ++i)\
    \ {\n        if (music_string[i] == '|') {\n            current_beat = \"o\";\n\
    \            beats.push_back(std::stoul(current_beat));\n            current_beat\
    \ = \".\";\n        } else if (music_string[i] == 'o') {\n            current_beat\
    \ = \".\";\n        } else {\n            current_beat += music_string[i];\n \
    \       }\n    }\n    return beats;", "    if (music_string.empty()) {\n     \
    \   return std::vector<long>();\n    }\n\n    std::vector<long> beats;\n\n   \
    \ // Iterate over string and extract notes\n    std::string note_symbol;\n   \
    \ while (std::cin >> note_symbol) {\n        if (note_symbol[0] == 'o') {\n  \
    \          // whole note\n            beats.push_back(4l);\n        } else if\
    \ (note_symbol[0] == 'o|') {\n            // half note\n            beats.push_back(1l);\n\
    \        } else if (note_symbol[0] == '.|') {\n            // quater note\n  \
    \          beats.push_back(2l);\n        } else {\n            // Unknown note\
    \ symbol\n            throw std::runtime_error(\"Unknown note symbol\");\n   \
    \     }\n    }\n\n    return beats;", "    auto beats = std::bitset<16>(music_string);\n\
    \    std::vector<long> beats_vector(beat.count());\n    for (auto it=beats.begin();\
    \ it!=beats.end(); ++it) {\n        beats_vector[it] = beats[it];\n    }\n   \
    \ return beats_vector;", "    std::vector<long> beats(4);\n    long curr_beats\
    \ = 0;\n    long last_beats = 4; // initial number of beats of a note\n    //\
    \ Iterate over all characters in the string\n    for (char c : music_string) {\n\
    \        // If character is '.' then this is a note and curr_beats is set to the\
    \ length of it\n        if (c == '.') {\n            beats[curr_beats++] = last_beats;\n\
    \            // If note is longer than 1 beat, add the last beat of the previous\
    \ note to the current note\n            last_beats = 4;\n            // If note\
    \ is longer than 2 beats, add the last two beats of the previous note to the current\
    \ note\n            last_beats = 2;\n            // If note is longer than 3 beats,\
    \ add the last beat of the previous note to the current note\n            last_beats\
    \ = 1;\n        } else {\n            last_beats++;\n        }\n    }\n    beats[curr_beats++]\
    \ = last_beats;\n    return beats;", "  // Your code goes here\n  \n  // Initialize\
    \ your solution here\n  std::vector<long> beats;\n  // Your code goes here\n \
    \ \n  return beats;", "    std::vector<std::string> music_strings;\n    size_t\
    \ last_index = 0, start_index = 0;\n    size_t number_of_notes_in_string = 0;\n\
    \    // Step 1: Get all music strings from the input.\n    while (music_string.size()\
    \ > 0) {\n        size_t index = music_string.find(\"o\", last_index);\n     \
    \   if (index == std::string::npos) {\n            break;\n        }\n       \
    \ music_strings.append(music_string.substr(last_index, index - last_index));\n\
    \        last_index = index + 1;\n    }\n    // Step 2: Calculate number of notes\
    \ in each string.\n    for (size_t i = 0; i < music_strings.size(); i++) {\n \
    \       number_of_notes_in_string += music_strings[i].size() / 4;\n    }\n   \
    \ // Step 3: Parse the notes in each string.\n    std::vector<long> beats;\n \
    \   beats.reserve(number_of_notes_in_string);\n    for (size_t i = 0; i < music_strings.size();\
    \ i++) {\n        std::string music_notes;\n        for (size_t j = 0; j < music_strings[i].size();\
    \ j++) {\n            music_notes += music_strings[i][j];\n        }\n       \
    \ std::vector<std::string> music_notes_tokens;\n        std::istringstream iss(music_notes);\n\
    \        while (iss) {\n            std::string word;\n            iss >> word;\n\
    \            if (word == \".\") {\n                std::string rest;\n       \
    \         while (iss) {\n                    std::string word;\n             \
    \       iss >> word;\n                    rest += word;\n                }\n \
    \               rest += \"rest\";\n                music_notes_tokens.push_back(rest);\n\
    \                break;\n            } else if (word == \"o\") {\n           \
    \     std::string rest;\n                while (iss) {\n                    std::string\
    \ word;\n                    iss >> word;\n                    rest += word;\n\
    \                }\n                rest += \"rest\";\n                music_notes_tokens.push_back(rest);\n\
    \            } else if (word == \"|\") {\n                music_notes_tokens.push_back(\"\
    rest\");\n            } else {\n                music_notes_tokens.push_back(word);\n\
    \            }\n        }\n        beats.push_back(\n            std::accumulate(\n\
    \                music_notes_tokens.begin(),\n                music_notes_tokens.end(),\n\
    \                0,\n                [](long a, std::string b) {\n           \
    \         return (a + b.size()) / 4;\n                }\n            )\n     \
    \   );\n    }\n    return beats;", "  std::vector<long> retval;\n  // Your code\
    \ goes here\n  \n  //return std::vector<long>({(long)4, (long)2, (long)1, (long)2,\
    \ (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4});\n  return retval;",
  "    std::vector<std::string> notes;\n    std::string current_note;\n    std::string\
    \ previous_note;\n    std::vector<std::string> temp;\n    size_t index = 0;\n\
    \    // go through whole music string\n    while (index < music_string.size())\
    \ {\n        // if we reached end of music string -> stop\n        if (music_string[index]\
    \ == '.') {\n            break;\n        }\n        // if we reached end of music\
    \ string -> stop\n        if (music_string[index] == '|') {\n            break;\n\
    \        }\n        // if we reached end of music string -> stop\n        if (music_string[index]\
    \ == 'o') {\n            // store current note\n            current_note = music_string.substr(index,\
    \ 1);\n            // store previous note\n            previous_note = current_note;\n\
    \            // store current note index\n            index = index + 1;\n   \
    \     }\n        // if we reached end of music string -> stop\n        if (music_string[index]\
    \ == 'o|') {\n            current_note = music_string.substr(index, 1);\n    \
    \        previous_note = current_note;\n            // store current note index\n\
    \            index = index + 1;\n            continue;\n        }\n        //\
    \ if we reached end of music string -> stop\n        if (music_string[index] ==\
    \ ' ') {\n            notes.push_back(previous_note);\n            continue;\n\
    \        }\n        // if we reached end of music string -> stop\n        if (music_string[index]\
    \ == '.') {\n            current_note = music_string.substr(index, 1);\n     \
    \       // store current note index\n            index = index + 1;\n        \
    \    continue;\n        }\n        // if we reached end of music string -> stop\n\
    \        if (music_string[index] == '|') {\n            current_note = music_string.substr(index,\
    \ 1);\n            previous_note = current_note;\n            index = index +\
    \ 1;\n            continue;\n        }\n        // if we reached end of music\
    \ string -> stop\n        std::cout << \"index \" << index << \" music_string:\
    \ \" << music_string << std::endl;\n        throw std::invalid_argument(\"Music\
    \ string format wrong\");\n    }\n    return std::vector<long>(notes.begin(),\
    \ notes.end());", "    // Create two vectors to hold notes\n    std::vector<std::string>\
    \ notes_string;\n    std::vector<long> beats;\n    std::vector<std::string> beats_string;\n\
    \    std::string beat_string;\n    long beats = 0;\n    bool notes_are_empty =\
    \ true;\n    for (char c : music_string) {\n        if (c == ' ') {\n        \
    \    if (notes_are_empty) {\n                // If the notes are empty, add a\
    \ new note\n                notes_are_empty = false;\n                notes_string.push_back(beat_string);\n\
    \                beats_string.clear();\n                beats.clear();\n     \
    \       } else {\n                // If the notes are not empty, append the new\
    \ beat to the note and clear the beats\n                notes_are_empty = true;\n\
    \                notes_string.push_back(beat_string);\n                beats_string.clear();\n\
    \            }\n        } else {\n            notes_are_empty = false;\n     \
    \       beat_string = beat_string + c;\n        }\n    }\n    // If notes are\
    \ still empty after looping through entire string\n    if (notes_are_empty) {\n\
    \        notes_string.push_back(beat_string);\n    }\n    // Add one beat to each\
    \ note from last position\n    for (size_t i = 0; i < notes_string.size(); i++)\
    \ {\n        // Use string stream to remove white space\n        std::istringstream\
    \ is(notes_string[i]);\n        std::string s;\n        long beats = 0;\n    \
    \    while (is >> s) {\n            // Split string into note and beats\n    \
    \        beats = std::stoi(s);\n            beats.push_back(beats);\n        }\n\
    \        beats.push_back(beats);\n        beats.push_back(1); // Add 1 beat to\
    \ last note\n    }\n    // Return vector of integers representing beat counts\n\
    \    return beats;", "    // your code goes here\n    int i = 0, j = 0, beat_count\
    \ = 0;\n    std::vector<long> beats;\n    while(music_string[i] != \" \" && music_string[i]\
    \ != \"|\") {\n        if(music_string[i] == \".\") {\n            beat_count++;\n\
    \        }\n        else if(music_string[i] == \"o\") {\n            beats.push_back(beat_count);\n\
    \            beat_count = 0;\n        }\n        else {\n            beat_count++;\n\
    \        }\n        i++;\n    }\n    beats.push_back(beat_count);\n    return\
    \ beats;", "  std::vector<long> beats(0);\n  // Write your code here!\n  for (int\
    \ i = 0; i < music_string.size(); i++) {\n    if (music_string[i] == 'o') {\n\
    \      beats.push_back((long)4);\n    } else if (music_string[i] == 'o|') {\n\
    \      beats.push_back((long)2);\n    } else if (music_string[i] == '.|') {\n\
    \      beats.push_back((long)1);\n    } else if (music_string[i] == '_') {\n \
    \     continue;\n    } else {\n      beats.push_back((long)1);\n    }\n  }\n \
    \ return beats;", "    std::vector<long> result;\n    size_t beat_length = 0;\n\
    \    int current_note = 0;\n    size_t notes_counter = 1;\n    size_t note_length\
    \ = 0;\n    size_t beats_counter = 1;\n    size_t last_note_length = 0;\n    std::string\
    \ current_note_name;\n    for (size_t i = 0; i < music_string.size(); i++) {\n\
    \        if (music_string[i] == ' ') {\n            if (beat_length == 0) {\n\
    \                beat_length = note_length;\n            }\n            notes_counter++;\n\
    \            last_note_length = note_length;\n            note_length = 0;\n \
    \           beats_counter++;\n            current_note++;\n            current_note_name\
    \ = \"o\";\n        } else if (music_string[i] == 'o') {\n            notes_counter++;\n\
    \            last_note_length = note_length;\n            note_length = 0;\n \
    \           beats_counter++;\n            current_note++;\n            current_note_name\
    \ = \"o\";\n        } else if (music_string[i] == '|') {\n            if (beat_length\
    \ == 0) {\n                beat_length = note_length;\n            }\n       \
    \     notes_counter++;\n            last_note_length = note_length;\n        \
    \    note_length = 0;\n            beats_counter++;\n            current_note++;\n\
    \            current_note_name = \"o|\";\n        } else if (music_string[i] ==\
    \ '.') {\n            notes_counter++;\n            last_note_length = note_length;\n\
    \            note_length = 0;\n            beats_counter++;\n            current_note++;\n\
    \            current_note_name = \".|\";\n        }\n    }\n    result.push_back(beat_length);\n\
    \    result.push_back(last_note_length);\n    result.push_back(notes_counter);\n\
    \    result.push_back(beats_counter);\n    return result;", "    // Your code\
    \ here\n    long long total = 0;\n    auto it = std::find(music_string.begin(),\
    \ music_string.end(), 'o');\n    if (it == music_string.end()) return {0};\n \
    \   it++;\n    for (; it != music_string.end(); it++) {\n        if (it == music_string.end())\
    \ return {0};\n        auto next = std::find(it, music_string.end(), '|');\n \
    \       total += std::distance(it, next) * 4;\n        it = next;\n    }\n   \
    \ it--;\n    it--;\n    total += std::distance(it, music_string.end()) * 2;\n\
    \    it = music_string.begin() + music_string.size() - 2;\n    total += std::distance(it,\
    \ music_string.end()) * 1;\n    it = music_string.begin() + music_string.size()\
    \ - 2;\n    total += std::distance(it, music_string.end()) * 1;\n    it = music_string.begin()\
    \ + music_string.size() - 2;\n    total += std::distance(it, music_string.end())\
    \ * 4;\n    it = music_string.begin() + music_string.size() - 2;\n    total +=\
    \ std::distance(it, music_string.end()) * 4;\n    return {total};", "    // Your\
    \ code goes here\n    std::vector<long> res;\n    long last_note = 0;\n    long\
    \ last_duration = 0;\n    for (auto c : music_string) {\n        if (c == '|')\
    \ {\n            last_duration = last_duration == 0 ? 4 : 2;\n        } else if\
    \ (c == 'o') {\n            last_duration = last_duration == 0 ? 4 : 2;\n    \
    \    } else if (c == ' ') {\n            last_note++;\n            last_duration\
    \ = 0;\n        }\n        res.push_back(last_duration);\n    }\n    return res;",
  "    // Implement your parsing here\n    std::vector<long> notes(5);\n    std::size_t\
    \ pos = 0;\n    while (pos < music_string.length()) {\n        if (music_string[pos]\
    \ == ' ') {\n            ++pos;\n            continue;\n        }\n        ++pos;\n\
    \        if (music_string[pos] != '|') {\n            notes[0] += 1;\n       \
    \     ++pos;\n            continue;\n        }\n        ++pos;\n        if (music_string[pos]\
    \ == '|') {\n            notes[1] += 1;\n            ++pos;\n            continue;\n\
    \        }\n        ++pos;\n        if (music_string[pos] == '|') {\n        \
    \    notes[2] += 1;\n            ++pos;\n            continue;\n        }\n  \
    \      ++pos;\n        if (music_string[pos] == '|') {\n            notes[3] +=\
    \ 1;\n            ++pos;\n            continue;\n        }\n        ++pos;\n \
    \       if (music_string[pos] == '|') {\n            notes[4] += 1;\n        \
    \    ++pos;\n            continue;\n        }\n    }\n    return notes;", "  \
    \  std::vector<long> beats_count;\n    // write your code here", "  // To store\
    \ the result\n  std::vector<long> result;\n  // To store a beat count\n  long\
    \ beat_count = 0;\n  // Iterate over every char in the string\n  for (char c :\
    \ music_string) {\n    // Check whether the char is o or .\n    if (c == 'o' ||\
    \ c == '.') {\n      // If the char is o, we need to keep track of how many beats\
    \ it lasts\n      if (c == 'o') {\n        // Add the beat count to the result\n\
    \        result.push_back(beat_count);\n        // And reset beat count to zero\n\
    \        beat_count = 0;\n      }\n      // Otherwise, if the char is ., we need\
    \ to increment beat count\n      else {\n        ++beat_count;\n      }\n    }\n\
    \    // If the char is |, then we need to keep track of how many beats it lasts\n\
    \    else if (c == '|') {\n      // Add the beat count to the result\n      result.push_back(beat_count);\n\
    \      // And reset beat count to zero\n      beat_count = 0;\n    }\n    // Otherwise,\
    \ if it is a space, then add 1 beat to the beat count\n    else if (c == ' ')\
    \ {\n      ++beat_count;\n    }\n  }\n  // Add the last beat count to the result\n\
    \  result.push_back(beat_count);\n  return result;", "    std::vector<long> beats;\n\
    \    std::string music_notes = music_string;\n    std::string current_note;\n\
    \    auto current_note_beat_counter = std::count_if(music_notes.begin(), music_notes.end(),\
    \ [](auto c){ return c == '.'; });\n    for (auto i = 0; i < music_notes.size();\
    \ i++) {\n        if (music_notes[i] == 'o') {\n            current_note = music_notes.substr(i\
    \ + 1, 1);\n            i += 2;\n        }\n        if (music_notes[i] == '|')\
    \ {\n            current_note = music_notes.substr(i + 1, 1);\n            i +=\
    \ 2;\n        }\n        if (music_notes[i] == 'o' && music_notes[i + 1] == '|')\
    \ {\n            current_note = music_notes.substr(i + 2, 1);\n            i +=\
    \ 3;\n        }\n        if (current_note_beat_counter == 1) {\n            beats.push_back(current_note.length());\n\
    \            current_note_beat_counter = 0;\n        }\n    }\n    return beats;",
  "  std::vector<long> beats(8);\n  long beat = 1, note = 0;\n  for (char c: music_string)\
    \ {\n    if (c == '.') {\n      note += 1;\n    } else if (c == 'o') {\n     \
    \ note += 4;\n    } else {\n      note += 2;\n    }\n    beats[note] += 1;\n \
    \   if (c == '|') {\n      beat += 1;\n    }\n  }\n  return beats;", "    assert(music_string.size()\
    \ > 0);\n    std::vector<std::string> music_strings;\n    std::vector<char> current_music(music_string.begin(),\
    \ music_string.end());\n    std::vector<std::string> current_music_words;\n  \
    \  char current_word;\n    while (current_music.size() != 0) {\n        current_music_words.clear();\n\
    \        while (current_music.size() != 0) {\n            current_word = current_music.front();\n\
    \            current_music.pop_front();\n            if (current_word == '|' ||\
    \ current_word == 'o' || current_word == 'o|') {\n                music_strings.push_back(current_music_words);\n\
    \                current_music_words.clear();\n            } else if (current_word\
    \ == '.') {\n                current_music_words.push_back('.');\n           \
    \ } else {\n                current_music_words.push_back(current_word);\n   \
    \         }\n        }\n    }\n    std::vector<long> beats;\n    long total_beats\
    \ = 0;\n    for (const auto& music_string: music_strings) {\n        for (const\
    \ auto& word: music_string) {\n            beats.push_back(total_beats);\n   \
    \         ++total_beats;\n        }\n        beats.push_back(total_beats);\n \
    \       total_beats += music_string.size();\n    }\n    beats.push_back(total_beats);\n\
    \    return beats;", "    std::vector<long> beats;\n    int num_beats = 0;\n \
    \   std::string current_note;\n    std::string current_note_type;\n    int i =\
    \ 0;\n    while (i + 1 < music_string.size()) {\n        current_note = music_string.substr(i,\
    \ 2);\n        if (current_note == \".\" || current_note == \"o|\") {\n      \
    \      num_beats++;\n        }\n        else if (current_note == \"o\") {\n  \
    \          if (current_note_type == \".\") {\n                beats.push_back(0);\n\
    \                num_beats++;\n            }\n            else if (current_note_type\
    \ == \"o|\") {\n                beats.push_back(0);\n                num_beats++;\n\
    \            }\n            else if (current_note_type == \"o\") {\n         \
    \       beats.push_back(0);\n                num_beats++;\n            }\n   \
    \         current_note_type = current_note;\n        }\n        else if (current_note\
    \ == \"|\") {\n            beats.push_back(0);\n            num_beats++;\n   \
    \     }\n        i++;\n    }\n    return beats;", "  std::vector<long> beats(music_string.length(),\
    \ 0);\n  for (size_t i = 0; i < music_string.length(); i++) {\n    auto n = music_string[i];\
    \ \n    if (n == 'o' || n == 'O') {\n      beats[i % 4] = beats[i % 4] + 4;\n\
    \    } else if (n == '|' || n == '.') {\n      beats[i % 4] = beats[i % 4] + 2;\n\
    \    } else {\n      beats[i % 4] = beats[i % 4] + 1;\n    }\n  }\n  return beats;",
  "    // YOUR CODE HERE\n    std::vector<long> output;\n    int last_beat = 0, beat_length\
    \ = 0;\n    for (int i = 0; i < music_string.length(); i++) {\n        char symbol\
    \ = music_string[i];\n        if (symbol == 'o') {\n            last_beat = 0;\n\
    \            beat_length = 0;\n            long beats = 4;\n            output.push_back(beats);\n\
    \        } else if (symbol == 'o|') {\n            last_beat = 1;\n          \
    \  beat_length = 2;\n            long beats = 2;\n            output.push_back(beats);\n\
    \        } else if (symbol == '.|') {\n            last_beat = 2;\n          \
    \  beat_length = 1;\n            long beats = 1;\n            output.push_back(beats);\n\
    \        } else {\n            output.push_back(beat_length);\n        }\n   \
    \ }\n    return output;", "  std::vector<long> beats;\n  std::string temp = \"\
    \";\n  // We will use stack to store every note and its \"times\" that note has\
    \ had. \n  // We also will use map to store all notes in order they are represented\
    \ in the string.\n  std::stack<std::string> stack;\n  std::map<std::string, long>\
    \ notes;\n\n  char note_string[100];\n  while (music_string.length()) {\n    temp\
    \ = music_string.substr(0, 1);\n\n    // If note hasn't been seen yet, add it\
    \ to the stack and notes map.\n    if (notes[temp] == 0) {\n      if (temp[0]\
    \ == 'o') {\n        stack.push(temp);\n        notes[temp] = 0;\n      } else\
    \ if (temp[0] == '.') {\n        stack.push(temp);\n        notes[temp] = 0;\n\
    \      } else if (temp[0] == '|') {\n        stack.push(temp);\n        notes[temp]\
    \ = 0;\n      } else {\n        long times = 1;\n        notes[temp] = times;\n\
    \        // Pop all the notes from the stack and add them to the map.\n      \
    \  while (stack.size()) {\n          note_string[0] = stack.top();\n         \
    \ stack.push(stack.top());\n          notes[note_string] += times;\n         \
    \ stack.pop();\n        }\n      }\n    }\n\n    // Note has been seen before.\n\
    \    // If it lasts more than one beat, remove it, and add the new one on the\
    \ stack.\n    if (notes[temp] != 1) {\n      if (temp[0] == 'o') {\n        notes[temp]\
    \ -= 1;\n      } else if (temp[0] == '.') {\n        notes[temp] -= 1;\n     \
    \ } else if (temp[0] == '|') {\n        notes[temp] -= 1;\n      } else {\n  \
    \      long times = 1;\n        notes[temp] = times;\n        // Pop all the notes\
    \ from the stack and add them to the map.\n        while (stack.size()) {\n  \
    \        note_string[0] = stack.top();\n          stack.push(stack.top());\n \
    \         notes[note_string] += times;\n          stack.pop();\n        }\n  \
    \    }\n    }\n  }\n\n  // Now we will populate the beats vector with the times\
    \ of every note.\n  // We will do this using stack and map.\n  while (notes.size())\
    \ {\n    // Iterate over all keys in the map.\n    for (auto it = notes.begin();\
    \ it != notes.end(); it++) {\n      if (it->second != 0) {\n        // If the\
    \ note hasn't been seen yet, just add it to the stack.\n        if (stack.size()\
    \ == 0) {\n          stack.push(it->first);\n        } else {\n          note_string[0]\
    \ = stack.top();\n          stack.push(stack.top());\n          notes[note_string]\
    \ += it->second;\n          stack.pop();\n        }\n      }\n    }\n  }\n\n \
    \ while (!stack.empty()) {\n    note", "    std::vector<long> beats;\n    // Find\
    \ how many dots does it have\n    int dot_count = 0;\n    for (int i = 0; i <\
    \ music_string.length(); i++) {\n        if (music_string[i] == '.') {\n     \
    \       dot_count++;\n        }\n    }\n    if (dot_count == 0) {\n        return\
    \ beats;\n    }\n    // Find how many bars does it have\n    int bar_count = 0;\n\
    \    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i]\
    \ == '|') {\n            bar_count++;\n        }\n    }\n    // Find how many\
    \ notes does it have\n    int note_count = 0;\n    for (int i = 0; i < music_string.length();\
    \ i++) {\n        if (music_string[i] == 'o') {\n            note_count++;\n \
    \       }\n    }\n    // Now we have a note, bar and dot.\n    // And we know\
    \ that every bar is 4 beats and dot is one beat\n    // The sum of these numbers\
    \ is the length of the whole note\n    int note_length = bar_count * 4 + dot_count\
    \ * 1;\n    // Now we have to find how many times every note appears in the string\n\
    \    // We have to find every single note in the string\n    std::vector<int>\
    \ note_counter;\n    for (int i = 0; i < note_counter.size(); i++) {\n       \
    \ note_counter[i] = 0;\n    }\n    int note_to_add = 0;\n    int note_counter_index\
    \ = 0;\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            note_counter[note_counter_index] += 1;\n            note_counter_index++;\n\
    \            note_to_add++;\n        }\n        if (music_string[i] == '|') {\n\
    \            note_counter[note_counter_index] += 1;\n            note_counter_index++;\n\
    \            note_to_add++;\n        }\n        if (music_string[i] == '.') {\n\
    \            note_counter[note_counter_index] += 1;\n            note_counter_index++;\n\
    \            note_to_add++;\n        }\n    }\n    // Now we have every single\
    \ note in the string, now we add them\n    // And we only have one dot, so it's\
    \ ok to put that in the beat vector\n    for (int i = 0; i < note_to_add; i++)\
    \ {\n        beats.push_back(note_to_add);\n    }\n    return beats;", "    std::vector<long>\
    \ return_val;\n    long temp = 0;\n    // Here we count how many notes we have\n\
    \    int count = 0;\n    // Here we count how many beats we have\n    int beats\
    \ = 1;\n    // Here we count how many beats we expect to last\n    long expected_beats;\n\
    \    // Here we count how many times we have '.|'\n    int dot_count = 0;\n  \
    \  // Here we count how many times we have 'o'\n    int o_count = 0;\n    // Here\
    \ we count how many times we have 'o|'\n    int or_count = 0;\n    // Here we\
    \ keep track of where we are in the string\n    long pos = 0;\n    // Here we\
    \ keep track of which note we are currently looking at\n    char current = 'o';\n\
    \    // Here we keep track of which note we are currently expecting to see\n \
    \   char expecting = 'o';\n\n    // Here we skip any leading white spaces\n  \
    \  while (current == 'o') {\n        pos = 0;\n        current = *std::next(std::begin(music_string),\
    \ pos++);\n    }\n    expecting = current;\n\n    // Here we find the length of\
    \ the string that we were given\n    // and save it to expected_beats\n    expected_beats\
    \ = music_string.length();\n\n    while (music_string[pos] != '\\0') {\n     \
    \   current = *std::next(std::begin(music_string), pos++);\n\n        // Here\
    \ we handle what to do if we encounter a dot or an o or an |\n        if (current\
    \ == '.') {\n            dot_count++;\n            if (dot_count == 2) {\n   \
    \             return_val.push_back(beats);\n                dot_count = 0;\n \
    \           }\n        } else if (current == 'o') {\n            o_count++;\n\
    \            if (o_count == 4) {\n                return_val.push_back(beats);\n\
    \                o_count = 0;\n            }\n        } else if (current == '|')\
    \ {\n            or_count++;\n            if (or_count == 2) {\n             \
    \   return_val.push_back(beats);\n                or_count = 0;\n            }\n\
    \        } else {\n            // Here we know that we are either at the beginning\
    \ of the string\n            // or the string ended in the middle of a note\n\
    \            // We count the number of beats we last saw\n            beats++;\n\
    \            // Here we make sure we keep track of the current position\n    \
    \        // by saving it to pos\n            pos = music_string.find_first_of(current,\
    \ pos);\n            // Here we handle what to do if we encounter an 'o'\n   \
    \         // or if we encounter a '|'\n            if (current == 'o') {\n   \
    \             o_count++;\n                if (o_count == 4) {\n              \
    \      return_val.push_back(beats);\n                    o_count = 0;\n      \
    \          }\n            } else if (current == '|') {\n                or_count++;\n\
    \                if (or_count == 2) {\n                    return_val.push_back(beats);\n\
    \                    or_count = 0;\n                }\n            } else {\n\
    \                // Here we ", '    // Your code here', "    int n = music_string.size();\n\
    \    // Store notes in a map.\n    std::map<char, long> note_count;\n\n    //\
    \ For each note, find out how many beats does it last and add it to note_count[].\n\
    \    for (int i = 0; i < n; ++i) {\n        char c = music_string[i];\n      \
    \  long count = note_count.count(c) ? note_count[c] : 0;\n        // If the note\
    \ is found earlier, just increment the count.\n        note_count[c] = count +\
    \ 1;\n    }\n\n    // Convert note_count[] to vector<long>. Return empty vector\
    \ if note_count[] is empty.\n    return std::vector(note_count.begin(), note_count.end());",
  "    std::vector<long> beats;\n    long beat_counts[26] = {0};\n    for (char letter\
    \ : music_string) {\n        beat_counts[(letter - 'o')%26]++;\n    }\n    for\
    \ (long beat_count : beat_counts) {\n        if (beat_count > 0) beats.push_back(beat_count);\n\
    \    }\n    return beats;", "    std::vector<long> res;\n    std::string s;\n\
    \    std::vector<char> v;\n    // Converting string to vector<char> \n    for(int\
    \ i = 0; i < music_string.size(); i++) {\n        v.push_back(music_string[i]);\n\
    \    }\n    // Parsing \n    for(int i = 0; i < v.size(); i++) {\n        std::string\
    \ s = v[i].to_string();\n        if(s == \"o\") {\n            res.push_back((i+4)%12);\n\
    \        } else if(s == \".\") {\n            res.push_back((i+1)%12);\n     \
    \   } else if(s == \"o|\") {\n            res.push_back((i+4)%12);\n         \
    \   res.push_back((i+4)%12);\n        } else if(s == \".|\") {\n            res.push_back((i+1)%12);\n\
    \            res.push_back((i+1)%12);\n        }\n    }\n    return res;", "\t\
    std::vector<long> beats;\n\tstd::vector<std::string> notes;\n\tstd::vector<std::string>\
    \ note_names;\n\t// Note_names has all the names of all possible notes\n\t// Here\
    \ we assume that all notes are played on beats 1,2,3,4\n\tstd::vector<std::string>\
    \ note_names2(note_names.size());\n\t// We will go through all possible notes\
    \ and for each one we will see how many beats does it last\n\t// We will go through\
    \ all possible notes and for each one we will see how many beats does it last\
    \ in general\n\t// We will go through all possible notes and for each one we will\
    \ see how many beats does it last in general\n\t// We will go through all possible\
    \ notes and for each one we will see how many beats does it last in general\n\t\
    // We will go through all possible notes and for each one we will see how many\
    \ beats does it last in general\n\t// We will go through all possible notes and\
    \ for each one we will see how many beats does it last in general\n\t// We will\
    \ go through all possible notes and for each one we will see how many beats does\
    \ it last in general\n\t// We will go through all possible notes and for each\
    \ one we will see how many beats does it last in general\n\t// We will go through\
    \ all possible notes and for each one we will see how many beats does it last\
    \ in general\n\tstd::string note_name;\n\tstd::string note_name2;\n\tstd::string\
    \ note_name3;\n\tstd::string note_name4;\n\tstd::string note_name5;\n\tstd::string\
    \ note_name6;\n\tstd::string note_name7;\n\tstd::string note_name8;\n\tstd::string\
    \ note_name9;\n\tstd::string note_name10;\n\tstd::string note_name11;\n\tstd::string\
    \ note_name12;\n\tstd::string note_name13;\n\tstd::string note_name14;\n\tstd::string\
    \ note_name15;\n\tstd::string note_name16;\n\tstd::string note_name17;\n\tstd::string\
    \ note_name18;\n\tstd::string note_name19;\n\tstd::string note_name20;\n\tstd::string\
    \ note_name21;\n\tstd::string note_name22;\n\tstd::string note_name23;\n\tstd::string\
    \ note_name24;\n\tstd::string note_name25;\n\tstd::string note_name26;\n\tstd::string\
    \ note_name27;\n\tstd::string note_name28;\n\tstd::string note_name29;\n\tstd::string\
    \ note_name30;\n\tstd::string note_name31;\n\tstd::string note_name32;\n\tstd::string\
    \ note_name33;\n\tstd::string note_name34;\n\tstd::string note_name35;\n\tstd::string\
    \ note_name36;\n\tstd::string note_name37;\n\tstd::string note_name38;\n\tstd::string\
    \ note_name39;\n\tstd::string ", "  std::vector<long> vec;\n  long count = 0;\n\
    \  auto it = music_string.begin();\n  auto end = music_string.end();\n  while\
    \ (it != end) {\n    auto prev = it;\n    ++it;\n    if (*it == '|') {\n     \
    \ ++it;\n      if (it == end) {\n        break;\n      }\n      if (*it == '|')\
    \ {\n        vec.push_back(count * 4);\n        ++count;\n        it = prev;\n\
    \      } else {\n        vec.push_back(count * 2);\n        ++count;\n       \
    \ it = prev;\n      }\n    } else {\n      if (it == end) {\n        break;\n\
    \      }\n      vec.push_back(count * 1);\n      ++count;\n      it = prev;\n\
    \    }\n  }\n  return vec;", "    std::vector<long> beats;\n    std::string beat_string\
    \ = \"o\";\n    long beat = 1;\n    while (beat_string != \"o\") {\n        beat_string\
    \ = music_string[beat_string.size() - 1];\n        beat = beat * 2;\n        beats.push_back(beat);\n\
    \    }\n    beats.push_back(1);\n    return beats;", "    std::vector<long> parsed_notes;\n\
    \    std::string note = \"\";\n    long current_note = 0;\n    long beat_length\
    \ = 0;\n    long beat_count = 0;\n    char delimiter = '|';\n\n    for (char c\
    \ : music_string) {\n        if (c == delimiter) {\n            if (current_note)\
    \ {\n                beat_count += beat_length;\n                parsed_notes.push_back(beat_count);\n\
    \                beat_length = 0;\n                beat_count = 0;\n         \
    \   }\n            note = \"\";\n            delimiter = 'o';\n            current_note\
    \ = 0;\n        } else {\n            if (note == \"o\") {\n                note\
    \ += c;\n            } else if (note == \"o|\") {\n                note += c;\n\
    \                beat_length = 2;\n            } else if (note == \".|\") {\n\
    \                note += c;\n                beat_length = 1;\n            } else\
    \ {\n                note += c;\n                current_note = 1;\n         \
    \   }\n        }\n    }\n\n    if (current_note) {\n        beat_count += beat_length;\n\
    \        parsed_notes.push_back(beat_count);\n        beat_length = 0;\n     \
    \   beat_count = 0;\n    }\n    return parsed_notes;", "    std::vector<long>\
    \ vec;\n    int counter = 0;\n    std::string symbol;\n    long note = 1;\n  \
    \  while (counter < music_string.size()) {\n        if (music_string[counter]\
    \ == 'o') {\n            vec.push_back(note);\n            counter += 1;\n   \
    \         note = 2;\n        } else if (music_string[counter] == '|') {\n    \
    \        counter += 1;\n            note = 2;\n        } else if (music_string[counter]\
    \ == '.') {\n            counter += 1;\n            note = 2;\n        } else\
    \ {\n            symbol = music_string[counter];\n            switch (symbol)\
    \ {\n                case 'o':\n                    note += 4;\n             \
    \       break;\n                case '|':\n                    note += 2;\n  \
    \                  break;\n                case '.':\n                    note\
    \ += 1;\n                    break;\n                default:\n              \
    \      std::cout << \"unknown symbol: \" << symbol << std::endl;\n           \
    \         return vec;\n            }\n            counter += 1;\n        }\n \
    \   }\n    return vec;", "    // Write your code here\n    std::vector<long> song_length_counter;\n\
    \    std::size_t length = music_string.size();\n    // Iterate over string backwards,\
    \ find length of each note and store it in our counter\n    for (std::size_t i\
    \ = length - 1; i >= 0; i--) {\n        // Find index of next note in string\n\
    \        std::size_t index = std::find_if(music_string.begin(), music_string.end(),\
    \ [i](char ch){return ch == i;}) - music_string.begin();\n        // If index\
    \ is at the end of the string, then it's last note (four beats)\n        if (i\
    \ == index) {\n            song_length_counter.push_back(4L);\n        } else\
    \ {\n            // Find note length\n            long length = i - index;\n \
    \           // For that note, determine what beat it last on\n            if (length\
    \ < 4) {\n                song_length_counter.push_back(length);\n           \
    \ } else if (length < 9) {\n                song_length_counter.push_back((length\
    \ + 3)/4);\n            } else if (length < 17) {\n                song_length_counter.push_back((length\
    \ - 3)/4);\n            } else {\n                song_length_counter.push_back((length\
    \ - 7)/4);\n            }\n        }\n    }\n    return song_length_counter;",
  "    // Your code here\n    std::vector<long> result;\n    long notes[4];\n    long\
    \ total_beats = 0, total_notes = 0;\n    long current_beat = 0;\n    for(std::size_t\
    \ i = 0; i < music_string.size(); ++i){\n        notes[total_notes] = music_string[i]\
    \ - '0';\n        ++total_notes;\n        ++current_beat;\n        if(total_notes\
    \ == 4){\n            total_notes = 0;\n            total_beats += current_beat;\n\
    \            result.push_back(total_beats);\n            current_beat = 0;\n \
    \       }\n    }\n    return result;", "    std::vector<long> beats;\n    std::string\
    \ notes;\n    long temp = 0;\n    long beat_count = 0;\n    long next_beat = 1;\n\
    \    for (char note : music_string) {\n        if (note == '|')\n            next_beat\
    \ = -1;\n        else if (note == 'o')\n            next_beat = 1;\n        else\n\
    \            notes += (note + \"\");\n        if (notes.size() == 3) {\n     \
    \       temp = next_beat;\n            beat_count += temp;\n            beats.push_back(beat_count);\n\
    \            notes.clear();\n            beat_count = 0;\n        }\n    }\n \
    \   return beats;", "    std::vector<long> beats;\n    long total = 0;\n    for\
    \ (int i = 0; i < music_string.length(); i++) {\n        char current_letter =\
    \ music_string[i];\n        if (current_letter == 'o' || current_letter == '|'\
    \ || current_letter == '.') {\n            total += 4;\n        }\n        else\
    \ {\n            total += 2;\n        }\n        beats.push_back(total);\n   \
    \ }\n    return beats;", "    std::vector<long> beats;\n    std::stack<long> beats_stack;\n\
    \n    for (size_t i = 0; i < music_string.size(); i++) {\n        char c = music_string[i];\n\
    \n        switch (c) {\n            case 'o':\n            case '|':\n       \
    \         beats_stack.push(0);\n                break;\n            case '.':\n\
    \                beats_stack.push(1);\n                break;\n            case\
    \ '|':\n                beats_stack.push(1);\n                break;\n       \
    \     default:\n                long last_beat = beats_stack.top();\n\n      \
    \          beats_stack.pop();\n                beats_stack.push(last_beat + 1);\n\
    \                break;\n        }\n    }\n    \n    return beats;", "    std::vector<std::string>\
    \ tokens;\n    std::string token;\n    int beats;\n    while ((token = std::getline(std::cin,\
    \ token))) {\n        if (token.size() > 1)\n            tokens.push_back(token);\n\
    \    }\n    std::vector<long> beats_vector;\n    for (std::string token : tokens)\
    \ {\n        char symbol = token[0];\n        switch (symbol) {\n            case\
    \ 'o':\n                beats = 4;\n                break;\n            case '|':\n\
    \                beats = 2;\n                break;\n            case '.':\n \
    \               beats = 1;\n                break;\n            default:\n   \
    \             assert(false);\n                break;\n        }\n        for (long\
    \ i = 0; i < beats; i++) {\n            beats_vector.push_back(0);\n        }\n\
    \    }\n    return beats_vector;", "    // Your code here\n    std::vector<long>\
    \ beats;\n    std::vector<int> beat_count;\n    int note_count = 0;\n    int note_length\
    \ = 0;\n    int note_octave = 0;\n    std::vector<std::string> notes;\n    std::transform(music_string.begin(),\
    \ music_string.end(), std::back_inserter(notes),\n                   [](char c)\
    \ { return std::to_string((int)c); });\n    for (auto note : notes) {\n      \
    \  if (note == \"o\") {\n            beats.push_back(1);\n            beat_count.push_back(beats.size()\
    \ - 1);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n\
    \            beat_count.push_back(beats.size() - 1);\n        } else if (note\
    \ == \".|\") {\n            beats.push_back(4);\n            beat_count.push_back(beats.size()\
    \ - 1);\n        } else {\n            std::cout << \"Unrecognized note! \" <<\
    \ note << std::endl;\n            exit(-1);\n        }\n        note_count +=\
    \ 1;\n        note_length ++;\n        note_octave ++;\n    }\n    beats.push_back(beats.size()\
    \ - 1);\n    for (int i = 0; i < (int)(beats.size() - 1); i++) {\n        beat_count[i]\
    \ += beats[i + 1] - beats[i];\n    }\n    return beat_count;", "    std::vector<long>\
    \ beats_numbers(26);\n    int pos = 0;\n    std::string music_string_copy = music_string;\n\
    \    while (pos < music_string.size()) {\n        char c = music_string[pos];\n\
    \        if (c == 'o' || c == '|') {\n            ++beats_numbers[c - 'o'];\n\
    \            if (pos != music_string.size() - 1) {\n                ++pos;\n \
    \           } else {\n                // We reached end of string, last beat should\
    \ be added to current position\n                ++beats_numbers[c - 'o']; // Odd\
    \ number of 'o' means last beat\n                pos = 0;\n            }\n   \
    \     } else {\n            pos = 0;\n        }\n    }\n    return beats_numbers;",
  "    std::vector<long> notes;\n    std::vector<long> temp;\n    for (size_t i =\
    \ 0; i < music_string.length(); i++) {\n        if (music_string[i] == 'o') {\n\
    \            if (temp.size() > 0) {\n                notes.push_back(temp[0]);\n\
    \                temp.clear();\n            }\n        }\n        else if (music_string[i]\
    \ == '|') {\n            if (temp.size() > 0) {\n                notes.push_back(temp[0]);\n\
    \                temp.clear();\n            }\n        }\n        else {\n   \
    \         temp.push_back(notes.size());\n        }\n    }\n    return notes;",
  "    std::vector<long> song;\n    std::string music_notes = \"o o| .| o| o| .| .|\
    \ .| .| o o\";\n    std::size_t music_string_len = music_string.size();\n    long\
    \ counts[12] = {0};\n    long current_beat = 0;\n    bool music_note_flag = false;\n\
    \    for (std::size_t i = 0; i < music_string_len; ++i) {\n        char music_note_char\
    \ = get_char(music_string, i);\n        if (music_note_char == 'o') {\n      \
    \      if (!music_note_flag) {\n                music_note_flag = true;\n    \
    \            counts[current_beat + 1]++;\n                counts[current_beat]++;\n\
    \                current_beat += 2;\n            } else {\n                music_note_flag\
    \ = false;\n                counts[current_beat]++;\n                counts[current_beat\
    \ + 1]++;\n                counts[current_beat]++;\n                current_beat\
    \ += 2;\n            }\n        }\n        if (music_note_flag) {\n          \
    \  counts[current_beat]++;\n            current_beat += 1;\n        }\n    }\n\
    \n    for (std::size_t i = 0; i < 12; ++i) {\n        if (counts[i] > 1) {\n \
    \           song.push_back(i);\n        }\n    }\n    return song;", '    // Your
    code here', "    std::vector<long> beats;\n    long last = 0;\n    bool is_note\
    \ = false;\n    for (char c : music_string) {\n        // If character is '.'\n\
    \        if (c == '.') {\n            is_note = true;\n            beats.push_back(0);\n\
    \            last = beats.back();\n        }\n        // If character is '.'\n\
    \        else if (!is_note && (c == '|' || c == 'o')) {\n            is_note =\
    \ true;\n            beats.push_back(last - 1);\n            last = beats.back();\n\
    \        }\n        // If character is '|'\n        else if (is_note && (c ==\
    \ '|' || c == 'o')) {\n            is_note = false;\n            beats.push_back(last\
    \ - 1);\n            last = beats.back();\n        }\n        // If character\
    \ is anything else that is not a note\n        else {\n            is_note = false;\n\
    \            last = beats.back();\n        }\n    }\n    return beats;", "   \
    \ std::vector<long> result;\n    std::string note;\n    long beats = 0;\n    for\
    \ (char c : music_string) {\n        if (c == 'o') {\n            beats = 4;\n\
    \            note = \"o\";\n        } else if (c == '|') {\n            beats\
    \ = 2;\n            note = \"o|\";\n        } else if (c == '.') {\n         \
    \   note = \".|\";\n        } else {\n            assert(false);\n        }\n\
    \        long current_beats = beats;\n        bool last_note = false;\n      \
    \  for (char next_c : music_string) {\n            if (next_c == '|') {\n    \
    \            current_beats = 2;\n                note = \"o|\";\n            \
    \    last_note = false;\n                beats = 2;\n            } else if (next_c\
    \ == 'o' || next_c == '.') {\n                if (note == \"o|\" && last_note)\
    \ {\n                    note = \"o|o\";\n                } else {\n         \
    \           result.push_back((beats * current_beats) + current_beats);\n     \
    \           }\n                beats = 2;\n                note = next_c;\n  \
    \              current_beats = 2;\n                last_note = true;\n       \
    \     } else {\n                beats += 1;\n            }\n        }\n      \
    \  if (note != \"o|\" && note != \"o|o\")\n            result.push_back((beats\
    \ * current_beats) + current_beats);\n    }\n    return result;", "    // TODO:\
    \ Implement this function\n    std::vector<std::string> music_notes;\n    size_t\
    \ notes_size = 0;\n    long num_beats = 0;\n    for (auto& char : music_string)\
    \ {\n        if (char == 'o') {\n            notes_size++;\n            num_beats\
    \ += 4;\n        } else if (char == '|') {\n            notes_size++;\n      \
    \      num_beats += 2;\n        } else if (char == '.') {\n            notes_size++;\n\
    \            num_beats++;\n        }\n    }\n    std::vector<long> result(notes_size);\n\
    \    for (size_t i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            result[i] = 4;\n            num_beats += 4;\n       \
    \ } else if (music_string[i] == '|') {\n            result[i] = 2;\n         \
    \   num_beats += 2;\n        } else if (music_string[i] == '.') {\n          \
    \  result[i] = 1;\n            num_beats++;\n        }\n    }\n    return result;",
  "    if (music_string.empty()) return std::vector<long>();\n    std::vector<long>\
    \ beats;\n    int note_length;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        note_length = std::max(note_length, music_string[i] - '0');\n   \
    \     if (music_string[i] == '.') note_length++;\n    }\n    long next_beat =\
    \ 1;\n    bool last_note = false;\n    std::string current_note;\n    for (size_t\
    \ i = 0; i < music_string.size(); i++) {\n        current_note = music_string[i];\n\
    \        if (current_note == '|') {\n            beats.push_back((next_beat <<\
    \ 1) - 1);\n            next_beat <<= 1;\n            last_note = false;\n   \
    \     } else if (current_note == 'o') {\n            beats.push_back((next_beat\
    \ << 4) - 1);\n            next_beat <<= 4;\n            last_note = true;\n \
    \       } else if (current_note == '|') {\n            beats.push_back((next_beat\
    \ << 1) - 1);\n            next_beat <<= 1;\n            last_note = false;\n\
    \        } else {\n            assert(last_note == false);\n            beats.push_back((next_beat\
    \ << note_length) - 1);\n            next_beat <<= note_length;\n        }\n \
    \   }\n    return beats;", "    // your code here\n    long temp = 0;\n    std::vector<std::string>\
    \ notes;\n    std::istringstream iss(music_string);\n    std::string token;\n\
    \    // Read until EOF or white space or EOS.\n    while (std::getline(iss, token,\
    \ ' '))\n        notes.push_back(token);\n    // Get number of beats.\n    for\
    \ (size_t i = 0; i < notes.size(); ++i) {\n        if (notes[i] == \"o\")\n  \
    \          temp += 4;\n        else if (notes[i] == \"o|\")\n            temp\
    \ += 2;\n        else if (notes[i] == \".|\")\n            temp += 1;\n    }\n\
    \    std::vector<long> beats(temp, 0);\n    // Read all beats.\n    for (size_t\
    \ i = 0; i < notes.size(); ++i) {\n        std::string beat = notes[i].substr(1,\
    \ 1);\n        std::string rest = notes[i].substr(2, 1);\n        // Check if\
    \ rest is a dot or | symbol.\n        if (rest == \".\" || rest == \"|\")\n  \
    \          continue;\n        // Check if there is a rest\n        if (rest.empty())\n\
    \            continue;\n        // Check if beat is last or first\n        if\
    \ (beats[beat.at(0)] == 0)\n            beats[beat.at(0)] = 1;\n        else\n\
    \            beats[beat.at(0)]++;\n    }\n    return beats;", "    // Your code\
    \ goes here\n    std::vector<long> parsed_notes;\n    std::string s = music_string;\n\
    \    long beat = 0;\n    long pitch = 0;\n    for (auto c : s) {\n        if (c\
    \ != \" \") {\n            pitch += 1;\n            if (pitch > 12) {\n      \
    \          pitch -= 12;\n                beat += 1;\n            }\n        }\
    \ else {\n            parsed_notes.push_back(beat);\n            beat = 1;\n \
    \           pitch = 1;\n        }\n    }\n    return parsed_notes;", "    // Your\
    \ code here\n    assert(music_string != \"\");\n    std::vector<long> notes;\n\
    \    std::string splitted;\n    for (char c : music_string) {\n        if (c !=\
    \ '.' && c != '|' && c != 'o') {\n            splitted.push_back(c);\n       \
    \ }\n    }\n    for (char c : splitted) {\n        if (c != '.' && c != '|' &&\
    \ c != 'o' && c != '|' && c != 'o' && c != '|' && c != 'o' && c != '|' && c !=\
    \ 'o' && c != 'o' && c != '|') {\n            notes.push_back(1);\n        } else\
    \ if (c != '.' && c != '|' && c != 'o' && c != '|' && c != 'o' && c != '|' &&\
    \ c != 'o' && c != '|' && c != 'o' && c != 'o' && c != '|') {\n            notes.push_back(2);\n\
    \        } else if (c != '.' && c != '|' && c != 'o' && c != '|' && c != 'o' &&\
    \ c != '|' && c != 'o' && c != '|' && c != 'o' && c != 'o' && c != '|') {\n  \
    \          notes.push_back(4);\n        } else if (c != '.' && c != '|' && c !=\
    \ 'o' && c != '|' && c != 'o' && c != '|' && c != 'o' && c != '|' && c != 'o'\
    \ && c != 'o' && c != '|') {\n            notes.push_back(8);\n        } else\
    \ if (c != '.' && c != '|' && c != 'o' && c != '|' && c != 'o' && c != '|' &&\
    \ c != 'o' && c != '|' && c != 'o' && c != 'o' && c != '|') {\n            notes.push_back(16);\n\
    \        }\n    }\n    return notes;", "  std::vector<long> beats_counter(4);\n\
    \  for (int i = 0; i < music_string.length(); i++) {\n    if (music_string[i]\
    \ == 'o' || music_string[i] == 'O') {\n      beats_counter[i % 4] += 4;\n    }\
    \ else if (music_string[i] == '|') {\n      beats_counter[i % 4] += 2;\n    }\
    \ else if (music_string[i] == '.') {\n      beats_counter[i % 4] += 1;\n    }\n\
    \  }\n  return beats_counter;", "    std::vector<long> beats;\n    bool note_start\
    \ = false;\n    long lastBeat = 0;\n    for (char character : music_string) {\n\
    \        if (note_start && character != ' ') {\n            beats.push_back(lastBeat);\n\
    \            lastBeat = 0;\n        }\n        if (character == ' ') {\n     \
    \       note_start = true;\n        } else {\n            lastBeat++;\n      \
    \      note_start = false;\n        }\n    }\n    beats.push_back(lastBeat);\n\
    \    return beats;", "    std::vector<long> beats;\n    size_t current_beat =\
    \ 0;\n    for (char c : music_string) {\n        switch (c) {\n            case\
    \ 'o':\n            case '|':\n                current_beat += 4;\n          \
    \      break;\n            case '.':\n                current_beat += 2;\n   \
    \             break;\n            default:\n                beats.push_back(current_beat);\n\
    \                current_beat = 0;\n                break;\n        }\n    }\n\
    \    beats.push_back(current_beat);\n    return beats;", "  std::vector<long>\
    \ beats;\n  std::string delimiters = \" .\";\n  auto note_counter = std::make_unique<long>(0);\n\
    \  auto note_beat_counter = std::make_unique<long>(0);\n  auto music_string_iterator\
    \ = music_string.begin();\n  while (music_string_iterator != music_string.end())\
    \ {\n    std::string note = *music_string_iterator;\n    auto note_beat_it = note.rbegin();\n\
    \    if (note_beat_it == note.rend()) {\n      note_beat_it = note.begin();\n\
    \    }\n    // We can't count whole note and half note notes separately, so let's\
    \ count whole note and first half note\n    // separately and just treat half\
    \ note as a whole note if it's on the end of a note or is preceded by some delimiter.\n\
    \    if (std::find(note_beat_it, note.rend(), delimiters) != note_beat_it && std::find(note_beat_it,\
    \ note.begin(), delimiters) != note_beat_it) {\n      note_beat_counter = std::make_unique<long>(note_beat_counter->value()\
    \ + 4);\n      note_counter = std::make_unique<long>(note_counter->value() + 1);\n\
    \    } else {\n      note_beat_counter = std::make_unique<long>(note_beat_counter->value()\
    \ + 2);\n      note_counter = std::make_unique<long>(note_counter->value() + 1);\n\
    \    }\n    music_string_iterator++;\n  }\n  beats.push_back(note_counter->value());\n\
    \  beats.push_back(note_beat_counter->value());\n  return beats;", "  std::vector<long>\
    \ beats(music_string.size());\n  for (int i = 0; i < music_string.size(); i++)\
    \ {\n    if (music_string[i] == 'o' || music_string[i] == 'o|' || music_string[i]\
    \ == '.|' || music_string[i] == '.') {\n      beats[i] = 4;\n    }\n    else if\
    \ (music_string[i] == 'o|' || music_string[i] == '.|') {\n      beats[i] = 2;\n\
    \    }\n    else if (music_string[i] == '.|') {\n      beats[i] = 1;\n    }\n\
    \    else if (music_string[i] == '.') {\n      beats[i] = 1;\n    }\n    else\
    \ {\n      beats[i] = -1;\n    }\n  }\n  return beats;", "    if (music_string.empty())\
    \ return {};\n    std::vector<long> vec(music_string.size());\n    for (auto i\
    \ = 0; i < music_string.size(); i++) {\n        auto c = music_string[i];\n  \
    \      auto beat = 0;\n        switch (c) {\n            case 'o': // whole note,\
    \ lasts four beats\n            case '|': // half note, lasts two beats\n    \
    \        case '.': // quater note, lasts one beat\n                beat = 4;\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n        vec[i] = beat;\n    }\n    return vec;", "  std::vector<long> beats;\n\
    \  for (int i = 0; i < music_string.size(); ++i) {\n    const char character =\
    \ music_string[i];\n    if (character == '.') {\n      beats.push_back(0);\n \
    \   } else if (character == 'o') {\n      beats.push_back(4);\n    } else if (character\
    \ == '|') {\n      beats.push_back(2);\n    } else {\n      assert(false);\n \
    \   }\n  }\n  return beats;", "    // Your code goes here\n    std::vector<long>\
    \ counter;\n    for (std::size_t i = 0; i < music_string.size(); i++) {\n    \
    \    // Your code goes here\n        if (music_string[i] == 'o') {\n         \
    \   counter.push_back(4);\n        } else if (music_string[i] == '.') {\n    \
    \        counter.push_back(1);\n        } else if (music_string[i] == '|') {\n\
    \            counter.push_back(2);\n        } else {\n            counter.push_back(0);\n\
    \        }\n    }\n    return counter;", "    // Write your code here\n    std::vector<long>\
    \ vec;\n    long beat = 0;\n    for (char c : music_string) {\n        switch\
    \ (c) {\n            case 'o':\n                beat += 4;\n                break;\n\
    \            case 'o|':\n                beat += 2;\n                break;\n\
    \            case '.|':\n                beat += 1;\n                break;\n\
    \            default:\n                break;\n        }\n        vec.push_back(beat);\n\
    \        beat = 0;\n    }\n    return vec;", "  std::vector<long> beat_counts;\n\
    \  for (auto c : music_string) {\n    if (c == 'o') {\n      beat_counts.push_back(4L);\n\
    \    } else if (c == 'o|') {\n      beat_counts.push_back(2L);\n    } else if\
    \ (c == '.|') {\n      beat_counts.push_back(1L);\n    } else {\n      std::cout\
    \ << \"invalid note.\" << std::endl;\n    }\n  }\n  return beat_counts;", "  assert(music_string.size()\
    \ > 0);\n\n  std::vector<long> beats;\n  long current_beat = 0;\n  for (auto c\
    \ : music_string) {\n    switch (c) {\n      case 'o':\n        // Last note\n\
    \        beats.push_back(current_beat);\n        break;\n      case '|':\n   \
    \     // Half-note\n        beats.push_back(current_beat + 1);\n        break;\n\
    \      default:\n        // Quater note\n        beats.push_back(current_beat\
    \ + 2);\n    }\n    current_beat += (c == '.');\n  }\n  return beats;", "    std::bitset<64>\
    \ number_string; \n    std::stringstream ss(music_string);\n    std::string token;\n\
    \    // Get token and populate number string\n    while (std::getline(ss, token,\
    \ ' ')) {\n        switch (token[0]) {\n            case 'o':\n              \
    \  number_string.flip();\n                number_string.clear();\n           \
    \     break;\n            case 'o|':\n                number_string.flip();\n\
    \                number_string.clear(1, 2);\n                break;\n        \
    \    case '.|':\n                number_string.flip();\n                number_string.clear(3,\
    \ 5);\n                break;\n            default:\n                number_string.set(std::stoul(token));\n\
    \                break;\n        }\n    }\n    std::vector<long> beat_counts;\n\
    \    // Calculate beat counts\n    for (std::size_t i = 4; i < number_string.size();\
    \ ++i) {\n        beat_counts.push_back(number_string.to_ulong() >> (i - 4));\n\
    \    }\n    return beat_counts;", "    // Your code goes here\n    std::vector<long>\
    \ result;\n    // Your code goes here\n    return result;", "    std::vector<long>\
    \ v; // return value\n    long note = 64; // default note to note\n    long beats\
    \ = 4; // default beat to beat for whole note\n\n    std::size_t pos = 0; // current\
    \ position in string\n    bool in_chord = false; // indicates inside chord\n \
    \   bool in_note = false; // indicates inside note\n    char ch_ = ' '; // current\
    \ character\n\n    while (pos != std::string::npos) {\n        ch_ = music_string[pos];\
    \ // current char\n        switch (ch_) {\n            case 'o': // whole note\n\
    \            case '|': // half note\n            case '!': // quater note\n  \
    \              v.push_back(beats); // add to vector of beats\n               \
    \ in_note = false; // reset to not inside note\n                beats = 4; //\
    \ reset to beat for whole note\n                in_chord = false; // reset for\
    \ chord\n                note = ch_; // note has changed\n                break;\n\
    \            case '#': // half note\n            case 'o|': // quater note\n \
    \               v.push_back(beats); // add to vector of beats\n              \
    \  in_note = false; // reset to not inside note\n                beats = 2; //\
    \ reset to beat for whole note\n                in_chord = false; // reset for\
    \ chord\n                note = ch_; // note has changed\n                break;\n\
    \            case '#|': // quater note\n                v.push_back(beats); //\
    \ add to vector of beats\n                in_note = false; // reset to not inside\
    \ note\n                beats = 1; // reset to beat for whole note\n         \
    \       in_chord = false; // reset for chord\n                note = ch_; // note\
    \ has changed\n                break;\n            case '.': // quater note\n\
    \                in_note = true; // reset to inside note\n                beats\
    \ = 1; // reset to beat for whole note\n                in_chord = false; // reset\
    \ for chord\n                break;\n            case ',': // quater note\n  \
    \              in_note = false; // reset to not inside note\n                beats\
    \ = 4; // reset to beat for whole note\n                in_chord = false; // reset\
    \ for chord\n                break;\n            default:\n                if\
    \ (ch_ == 'm') {\n                    v.push_back(4); // add last note to vector\n\
    \                    in_note = false; // reset to not inside note\n          \
    \          beats = 4; // reset to beat for whole note\n                    in_chord\
    \ = false; // reset for chord\n                }\n                if (ch_ == 'e')\
    \ {\n                    v.push_back(2); // add last note to vector\n        \
    \            in_note = false; // reset to not inside note\n                  \
    \  beats = 2; // reset to beat for whole note\n                    in_chord =\
    \ false; // reset for chord\n                }\n                if (ch_ == '",
  "    std::vector<long> beats;\n    assert(music_string.size() >= 7);\n    auto it\
    \ = music_string.begin();\n    while (it != music_string.end()) {\n        //\
    \ 'o' - whole note, lasts four beats\n        if (*it == 'o') beats.push_back(4);\
    \ ++it;\n        // 'o|' - half note, lasts two beats\n        else if (*it ==\
    \ 'o') beats.push_back(2); ++it;\n        // '.|' - quater note, lasts one beat\n\
    \        else if (*it == '|') beats.push_back(1); ++it;\n        // invalid character\n\
    \        else break; // invalid input\n    }\n    return beats;", "    // Create\
    \ empty vector to store beats number of each note.\n    std::vector<long> notes_beats;\n\
    \    // Iterate over string and parse each note to a note number and a beat number.\n\
    \    for (char &note : music_string) {\n        if (note == 'o') {\n         \
    \   notes_beats.push_back(0);\n        } else if (note == '|') {\n           \
    \ notes_beats.push_back(4);\n        } else if (note == '.') {\n            notes_beats.push_back(1);\n\
    \        }\n    }\n    // Return vector of notes and beats.\n    return notes_beats;",
  "    std::vector<long> beats_vector;\n    std::string current_note;\n    long current_beats;\n\
    \    \n    for (char c : music_string) {\n        if (c == 'o') {\n          \
    \  current_note = current_note == \"o\" ? \"o|\" : \".\";\n            current_beats\
    \ = 4;\n        } else {\n            beats_vector.push_back(current_beats);\n\
    \            current_beats = 0;\n            current_note = c;\n        }\n  \
    \  }\n    beats_vector.push_back(current_beats);\n    \n    return beats_vector;",
  "    std::vector<long> beats(music_string.length(), 0L);\n    int index = 0;\n \
    \   for (char symbol: music_string) {\n        switch (symbol) {\n        case\
    \ 'o':\n            beats[index++] = 4;\n            break;\n        case '|':\n\
    \            beats[index++] = 2;\n            break;\n        case '.':\n    \
    \        beats[index++] = 1;\n            break;\n        default:\n         \
    \   assert(false); // invalid character\n        }\n    }\n    return beats;",
  "    // Write your code here\n    std::vector<long> beats;\n    long long count\
    \ = 1;\n    std::string note_str = music_string;\n    int current_note = 0;\n\
    \    for (char c : note_str) {\n        if (c != ' ') {\n            current_note\
    \ = current_note * 4 + c - '0';\n        } else {\n            count *= 4 * (current_note\
    \ - 1);\n            beats.push_back(count);\n            current_note = 0;\n\
    \        }\n    }\n    return beats;", "    std::vector<std::string> notes;\n\
    \    long count = 0;\n    std::string note = \"\";\n    notes.push_back(note);\n\
    \    std::string temp = \"\";\n    for (auto c : music_string) {\n        if (c\
    \ == 'o') {\n            count += 4;\n            temp += \".\";\n        } else\
    \ if (c == '|') {\n            count += 2;\n            temp += \"o\";\n     \
    \   } else if (c == ' ') {\n            count += 1;\n            temp += \".\"\
    ;\n        } else if (c == '.') {\n            temp += \".\";\n        } else\
    \ {\n            temp += c;\n        }\n        notes.push_back(temp);\n    }\n\
    \    std::vector<long> output(notes.size());\n    for (size_t i = 0; i < notes.size();\
    \ i++) {\n        long beats = count;\n        while (notes[i][0] != 'o' && notes[i][0]\
    \ != '|' && notes[i][0] != '.') {\n            beats--;\n        }\n        beats\
    \ /= 4;\n        output[i] = beats;\n    }\n    return output;", "    // Your\
    \ code here\n    std::vector<long> beats;\n    long last_beat = 0;\n    long cur_beat\
    \ = 0;\n    for (char c : music_string) {\n        if (c == 'o') {\n         \
    \   if (last_beat < cur_beat) {\n                beats.push_back(cur_beat);\n\
    \            }\n            last_beat = cur_beat;\n            cur_beat = 0;\n\
    \        } else if (c == '|') {\n            cur_beat += 2;\n        } else if\
    \ (c == ' ') {\n            cur_beat += 1;\n        }\n    }\n    if (last_beat\
    \ < cur_beat) {\n        beats.push_back(cur_beat);\n    }\n    return beats;",
  "  std::vector<long> number_of_beats_per_note;\n  // Split string in chunks of single\
    \ space (\" \", for example).\n  std::size_t music_string_length = music_string.size();\n\
    \  for (std::size_t i = 0; i < music_string_length; ++i) {\n    if (music_string[i]\
    \ == ' ') {\n      std::size_t j = i;\n      while (j < music_string_length &&\
    \ music_string[j] == ' ') ++j;\n      number_of_beats_per_note.push_back(j - i);\n\
    \      i = j;\n    }\n  }\n\n  return number_of_beats_per_note;", "    std::vector<long>\
    \ beats;\n    std::string current_note = \"\";\n    for (int i = 0; i < music_string.size();\
    \ ++i) {\n        char c = music_string[i];\n        switch (c) {\n          \
    \  case 'o':\n                current_note = current_note + c;\n             \
    \   break;\n            case '|':\n                current_note += c;\n      \
    \          break;\n            case '.':\n                if (current_note.size()\
    \ > 0) beats.push_back(current_note.size() / 4);\n                current_note\
    \ = \"\";\n                break;\n            default:\n                current_note\
    \ = current_note + c;\n                break;\n        }\n    }\n    if (current_note.size()\
    \ > 0) beats.push_back(current_note.size() / 4);\n    return beats;", "    std::vector<long>\
    \ result;\n    std::string note_letter;\n    for (std::size_t i = 0; i != music_string.size();\
    \ ++i) {\n        note_letter = music_string[i];\n        if (note_letter == \"\
    o\") {\n            result.push_back((std::size_t)(4 * (std::size_t)i));\n   \
    \     } else if (note_letter == \"o|\") {\n            result.push_back((std::size_t)(2\
    \ * (std::size_t)i));\n        } else if (note_letter == \".|\") {\n         \
    \   result.push_back((std::size_t)i);\n        } else {\n            std::cerr\
    \ << \"Incorrect input!\" << std::endl;\n        }\n    }\n    return result;",
  '    // TODO: Implement this', "    std::vector<long> notes_in_chords;\n\n    for\
    \ (char note_character = music_string[0]; note_character != '\\0'; note_character\
    \ = note_character) {\n        switch (note_character) {\n            case 'o':\n\
    \            case 'O':\n                notes_in_chords.push_back((long)4);\n\
    \                break;\n            case '|':\n            case '|':\n      \
    \          notes_in_chords.push_back((long)2);\n                break;\n     \
    \       case '.':\n            case '.':\n            case '.':\n            \
    \    notes_in_chords.push_back((long)1);\n                break;\n           \
    \ default:\n                return {};\n        }\n    }\n    return notes_in_chords;",
  "    int len = music_string.size();\n    std::vector<long> beats(len);\n    for(int\
    \ i = 0; i < len; i++) {\n        if(music_string[i] == 'o') {\n            beats[i]\
    \ = 4;\n        } else if(music_string[i] == '.') {\n            beats[i] = 1;\n\
    \        } else if(music_string[i] == '|') {\n            beats[i] = 2;\n    \
    \    } else {\n            beats[i] = 0;\n        }\n    }\n    return beats;",
  "    // Write your code here\n    std::vector<long> temp;\n    if (music_string.length()\
    \ < 3) return temp;\n    char note = music_string[0];\n    char rest_note = music_string[1];\n\
    \    char rest = music_string[2];\n    long count = 0;\n    int i = 0;\n    while\
    \ (rest_note != '.') {\n        if (note == 'o') {\n            temp.push_back(count);\n\
    \            count = 0;\n            note = rest_note;\n            rest_note\
    \ = rest;\n            rest = music_string[i + 1];\n        }\n        else if\
    \ (note == 'o|') {\n            temp.push_back(count + 2);\n            count\
    \ += 2;\n            note = rest_note;\n            rest_note = rest;\n      \
    \      rest = music_string[i + 1];\n        }\n        else if (note == '.|')\
    \ {\n            temp.push_back(count + 1);\n            count += 1;\n       \
    \     note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        else if (note == 'o|' || note == '.|') { // both notes\
    \ o|\n            temp.push_back(count);\n            count = 0;\n           \
    \ note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        else if (note == 'o|' || note == '.|') { // both notes\
    \ o|\n            temp.push_back(count);\n            count = 0;\n           \
    \ note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        else if (note == 'o|' || note == '.|') { // both notes\
    \ o|\n            temp.push_back(count);\n            count = 0;\n           \
    \ note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        else if (note == 'o|' || note == '.|') { // both notes\
    \ o|\n            temp.push_back(count);\n            count = 0;\n           \
    \ note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        else if (note == 'o|' || note == '.|') { // both notes\
    \ o|\n            temp.push_back(count);\n            count = 0;\n           \
    \ note = rest_note;\n            rest_note = rest;\n            rest = music_string[i\
    \ + 1];\n        }\n        i++;\n    }\n    return temp;", "    std::vector<long>\
    \ beats(4);\n    long current_beats = 1;\n    std::string symbol;\n    for (auto\
    \ it = music_string.cbegin(); it != music_string.cend(); ++it) {\n        switch\
    \ (*it) {\n            case 'o':\n                if (current_beats == 4) {\n\
    \                    current_beats = 1;\n                    symbol = \" \";\n\
    \                } else {\n                    current_beats += 1;\n         \
    \           symbol = \"o\";\n                }\n                break;\n     \
    \       case '|':\n                if (current_beats == 2) {\n               \
    \     current_beats = 1;\n                    symbol = \" \";\n              \
    \  } else {\n                    current_beats += 1;\n                    symbol\
    \ = \"|\";\n                }\n                break;\n            case '.':\n\
    \                if (current_beats == 1) {\n                    current_beats\
    \ = 1;\n                    symbol = \" \";\n                } else {\n      \
    \              current_beats += 1;\n                    symbol = \".\";\n    \
    \            }\n                break;\n            default:\n               \
    \ symbol = *it;\n        }\n        beats[current_beats - 1] += 1;\n    }\n  \
    \  return beats;", "    // We store our notes in vector and initialize vector\
    \ with zeros\n    std::vector<int> notes_in_chord(0);\n    // Iterate through\
    \ all notes\n    for (auto c : music_string) {\n        // If note is not '.'\
    \ or 'o', we can continue\n        if (c != '.' && c != 'o')\n            continue;\n\
    \        // If note is '.', we don't need to do anything\n        if (c == '.')\n\
    \            continue;\n        // Note is not '.', 'o', and notes doesn't have\
    \ 4 beats, we can continue\n        int beats = 1;\n        // Count how many\
    \ notes does it last\n        while (c != '.' && c != 'o' && beats * 4 < notes_in_chord.size())\
    \ {\n            beats++;\n            c++;\n        }\n        // Put note and\
    \ its duration into our vector\n        notes_in_chord.push_back(beats);\n   \
    \ }\n    return notes_in_chord;", "    std::vector<long> output;\n    int current\
    \ = 0;\n    long beats = 0;\n    int i = 0;\n    for (const auto &c : music_string)\
    \ {\n        if (c != '|')\n            current += 1;\n        if (current > 4)\
    \ {\n            beats += current;\n            current = 0;\n        }\n    \
    \    else {\n            current += 1;\n        }\n        i++;\n    }\n    if\
    \ (current > 0) {\n        beats += current;\n    }\n    output.push_back(beats);\n\
    \    return output;", "    std::cout << music_string << std::endl;\n    std::vector<long>\
    \ temp;\n    long note = 0;\n    long tempo = 4;\n    long last_beat_number =\
    \ 0;\n    std::string temp_char;\n    std::string notes_string = \".o|\";\n  \
    \  bool first_char = true;\n    for (auto &char : music_string) {\n        if\
    \ (char == '.') {\n            temp_char = \".\";\n            notes_string =\
    \ \"o.\";\n            first_char = false;\n        } else {\n            if (char\
    \ == 'o') {\n                temp_char = \"o\";\n                if (first_char)\
    \ {\n                    temp.push_back(note);\n                    notes_string\
    \ = \"o|\";\n                    first_char = false;\n                } else {\n\
    \                    note += tempo;\n                    temp.push_back(note);\n\
    \                    note += tempo;\n                }\n            } else if\
    \ (char == '|') {\n                temp_char = \"|\";\n                notes_string\
    \ += \".\";\n                if (last_beat_number > 0) {\n                   \
    \ note += tempo;\n                    temp.push_back(note);\n                \
    \    note += tempo;\n                }\n                last_beat_number++;\n\
    \            }\n        }\n    }\n    return temp;", "    std::vector<long> beats(music_string.size());\n\
    \    for (auto beat_counter = 0; beat_counter < beats.size(); beat_counter++)\
    \ {\n        bool found = false;\n        long last_beat = -1;\n        for (auto\
    \ it_note = music_string.begin(); it_note != music_string.end(); ++it_note) {\n\
    \            bool found = true;\n            for (auto it_beat = it_note; it_beat\
    \ != it_note; it_beat++) {\n                if (it_beat != it_beat + 1) {\n  \
    \                  found = found && (*it_beat == '|');\n                } else\
    \ {\n                    found = found && (*it_beat == 'o');\n               \
    \     break;\n                }\n            }\n            if (found) {\n   \
    \             beats[beat_counter] = last_beat;\n                found = false;\n\
    \                last_beat = -1;\n            }\n        }\n    }\n    return\
    \ beats;", "\tassert(music_string.length() == 7 * 4);\n\tstd::vector<long> beats(music_string.length());\n\
    \tlong counter = 1;\n\tfor (char c : music_string) {\n\t\tif (c == 'o') {\n\t\t\
    \tassert(counter <= 4);\n\t\t\tbeats[counter] = counter;\n\t\t\tcounter++;\n\t\
    \t} else if (c == 'o|') {\n\t\t\tassert(counter <= 4);\n\t\t\tbeats[counter] =\
    \ counter;\n\t\t\tbeats[counter + 1] = counter + 1;\n\t\t\tcounter++;\n\t\t} else\
    \ if (c == '.|') {\n\t\t\tassert(counter <= 4);\n\t\t\tbeats[counter] = counter;\n\
    \t\t\tbeats[counter + 1] = counter + 2;\n\t\t\tcounter++;\n\t\t} else {\n\t\t\t\
    assert(false);\n\t\t}\n\t}\n\treturn beats;", "    std::vector<long> output =\
    \ {0}; // Here we create a vector of integers representing the count of notes\
    \ lasting beats\n    size_t notes_count = music_string.size();\n    long beats_count\
    \ = 0;\n    std::string note;\n    for (size_t i = 0; i < notes_count; i++) {\n\
    \        if (music_string[i] == 'o') { // Here we find notes\n            note\
    \ = music_string.substr(i, 3);\n            if (note == \".\") {\n           \
    \     beats_count++;\n            }\n        } else if (music_string[i] == '|')\
    \ {\n            if (beats_count != 0) {\n                output.push_back(beats_count);\n\
    \            }\n            beats_count = 0;\n        } else {\n            assert(music_string[i]\
    \ == ' '); // Here we count beats\n            beats_count++;\n        }\n   \
    \ }\n    if (beats_count != 0) {\n        output.push_back(beats_count);\n   \
    \ }\n    return output;", "    std::vector<long> beats;\n    for (auto c = music_string.cbegin();\
    \ c != music_string.cend(); ++c)\n        if (*c == '.') // 'o' is the most frequent\
    \ note\n            beats.push_back((*c - '0'));\n        else if (*c == '|')\n\
    \            beats.push_back(4);\n        else\n            beats.push_back(std::stoll(*c));\n\
    \    return beats;", "    std::vector<long> beats;\n    size_t note_count = 0;\n\
    \    for (size_t i = 0; i < music_string.size(); ++i) {\n        char note = music_string[i];\n\
    \        if (note == 'o') {\n            beats.push_back(4);\n            note_count\
    \ += 4;\n        } else if (note == 'o|') {\n            beats.push_back(2, 4);\n\
    \            note_count += 4;\n        } else if (note == '.|') {\n          \
    \  beats.push_back(1);\n            note_count += 1;\n        } else if (note\
    \ == '.') {\n            beats.push_back(1);\n            note_count += 1;\n \
    \       } else {\n            assert(0);\n        }\n    }\n\n    // TODO: Add\
    \ return statement here and implement the actual parsing logic (Hint: you do not\
    \ need return statement)\n    return beats;", "  // Create a temporary vector\
    \ to store results\n  std::vector<long> beats;\n  // Parse given string to get\
    \ beats\n  for (auto c : music_string) {\n    if (c == 'o') {\n      beats.push_back(0);\n\
    \    }\n    else if (c == '.') {\n      beats.push_back(0);\n    }\n    else if\
    \ (c == '|') {\n      beats.push_back(0);\n    }\n    else if (c == 'o|') {\n\
    \      beats.push_back(0);\n    }\n    else if (c == '|o') {\n      beats.push_back(0);\n\
    \    }\n    else {\n      long cur_beat = 0;\n      do {\n        cur_beat +=\
    \ 1;\n        c = static_cast<char>(c+1);\n      } while (cur_beat < 4 && c !=\
    \ '|' && c != '.');\n      if (cur_beat == 4) {\n        beats.push_back(cur_beat);\n\
    \      }\n    }\n  }\n  return beats;", "  std::vector<long> results;\n\n  //\
    \ Convert string to vector of integers\n  auto int_to_string = [&music_string](char\
    \ letter) {\n    if (letter == 'o' || letter == 'o|') return 4;\n    if (letter\
    \ == '.') return 3;\n    if (letter == '|') return 2;\n    return 1;\n  };\n\n\
    \  for (char letter : music_string) {\n    results.push_back(int_to_string(letter));\n\
    \  }\n  return results;", "  std::vector<long> vector;\n  std::string notes[10];\n\
    \  int i = 0;\n  while (i < music_string.size()) {\n    if (music_string[i] ==\
    \ 'o') {\n      notes[i] = \"o\";\n      vector.push_back(0);\n    }\n    else\
    \ if (music_string[i] == '|') {\n      notes[i] = \"|\";\n      vector.push_back(0);\n\
    \    }\n    else {\n      if (notes[i - 1] != \"o\" && notes[i - 1] != \".\")\
    \ {\n        notes[i] += \"|\";\n      }\n      else {\n        notes[i] = notes[i\
    \ - 1];\n      }\n      vector.push_back(notes[i].size());\n    }\n    i++;\n\
    \  }\n  return vector;", "    std::vector<long> beats(music_string.size());\n\
    \    for (size_t i = 0; i < music_string.size(); i++) {\n        auto p = std::find_if(music_string.begin(),\
    \ music_string.end(), [&music_string](int c) { return c == '|' || c == 'o'; });\n\
    \        if (p == music_string.end()) {\n            throw std::runtime_error(\"\
    Can't find note end\");\n        }\n        auto q = std::find_if(p, music_string.end(),\
    \ [&music_string](int c) { return c == '|'; });\n        if (q == music_string.end())\
    \ {\n            throw std::runtime_error(\"Can't find note end\");\n        }\n\
    \        beats[i] = q - p;\n    }\n    return beats;", "    // Your code goes\
    \ here\n    std::vector<long> beats;\n    std::istringstream music(music_string);\n\
    \    std::string temp;\n    long time = 0;\n    while (std::getline(music, temp,\
    \ '|')) {\n        time += std::stol(temp);\n    }\n    for (std::size_t i = 0;\
    \ i < music_string.size(); ++i) {\n        if (music_string[i] == 'o') {\n   \
    \         beats.push_back((time / 4) % 4);\n        } else if (music_string[i]\
    \ == 'o|') {\n            beats.push_back((time / 2) % 4);\n        } else if\
    \ (music_string[i] == '.|') {\n            beats.push_back(time % 4);\n      \
    \  }\n    }\n    return beats;", "  // Your implementation here\n  vector<long>\
    \ beats;\n  // TODO: Implement this function\n  \n  return beats;", "    std::vector<long>\
    \ beats;\n    long last = 0;\n    for (char c : music_string) {\n        switch\
    \ (c) {\n            case 'o':\n                beats.push_back(last);\n     \
    \           last = -1;\n                break;\n            case 'o|':\n     \
    \           beats.push_back(last);\n                last = last + 4;\n       \
    \         break;\n            case '.|':\n                beats.push_back(last);\n\
    \                last = last + 1;\n                break;\n            default:\n\
    \                last = last + 1;\n                break;\n        }\n    }\n\
    \    beats.push_back(last);\n    return beats;", "    std::vector<std::string>\
    \ elements = split(music_string);\n    std::vector<long> beats;\n    long last_beats\
    \ = 0;\n    for (size_t i = 0; i < elements.size(); i++) {\n        if (elements[i][0]\
    \ == 'o') {\n            last_beats += 4;\n        } else if (elements[i][0] ==\
    \ '.') {\n            last_beats += 1;\n        } else if (elements[i][0] == '|')\
    \ {\n            beats.push_back(last_beats);\n            last_beats = 0;\n \
    \       } else {\n            assert(elements[i][0] != 'o' && elements[i][0] !=\
    \ '|');\n            beats.push_back(last_beats);\n            last_beats = 0;\n\
    \        }\n    }\n    beats.push_back(last_beats);\n    return beats;", "   \
    \ std::vector<long> beats;\n    std::string s = music_string;\n    std::string\
    \ note;\n    size_t position = 0;\n    while ((position = s.find(\" \", position))\
    \ != std::string::npos) {\n        note = s.substr(0, position);\n        std::string\
    \ rest = s.substr(position + 1);\n        beats.push_back(long(note.size()) /\
    \ 4);\n        s = rest;\n    }\n    s = music_string;\n    while ((position =\
    \ s.find(\"o\")) != std::string::npos) {\n        note = s.substr(0, position);\n\
    \        std::string rest = s.substr(position + 1);\n        beats.push_back(long(note.size())\
    \ / 4);\n        s = rest;\n    }\n    s = music_string;\n    while ((position\
    \ = s.find(\"|\")) != std::string::npos) {\n        note = s.substr(0, position);\n\
    \        std::string rest = s.substr(position + 1);\n        beats.push_back(long(note.size())\
    \ / 4);\n        s = rest;\n    }\n    return beats;", "    // TODO: implement\
    \ this function\n    std::vector<long> output;\n    assert(music_string.length()\
    \ >= 1 && music_string.length() <= 15);\n    long total_beats = 0;\n    for (char\
    \ c : music_string) {\n        long beats = c >= 'o' && c <= 'z' ? 1 : c >= 'a'\
    \ && c <= 'z' ? 2 : c >= 'A' && c <= 'Z' ? 3 : 4;\n        assert(total_beats\
    \ >= 0 && total_beats <= 15);\n        total_beats += beats;\n    }\n    assert(total_beats\
    \ == music_string.length());\n    return output;", "    std::vector<long> vector;\n\
    \    size_t size = music_string.length();\n    for (size_t i = 0; i < size; i++)\
    \ {\n        char c = music_string[i];\n        if (c == '.') {\n            vector.push_back(1);\n\
    \        } else if (c == 'o') {\n            if (i + 1 < size && music_string[i\
    \ + 1] == '|') {\n                vector.push_back(4);\n                i++;\n\
    \            } else {\n                vector.push_back(4);\n            }\n \
    \       } else {\n            vector.push_back(1);\n        }\n    }\n    return\
    \ vector;", "    // Write your code here\n    std::vector<std::string> splitted\
    \ = split_by_length(music_string, 4);\n    std::vector<long> beats;\n    int note_count\
    \ = 0;\n    for(int i = 0; i < splitted.size(); i++) {\n        if(splitted[i]\
    \ == \"o\" || splitted[i] == \"o|\" || splitted[i] == \"|.\") {\n            note_count\
    \ += 4;\n        }\n        else {\n            note_count += 2;\n        }\n\
    \        beats.push_back(note_count);\n    }\n    return beats;", "  std::vector<long>\
    \ beat_numbers;\n  std::vector<long> beats;\n  std::vector<long> current_beat_numbers;\n\
    \  std::vector<long> current_beats;\n\n  // Iterate through all characters in\
    \ the string\n  for (char c : music_string) {\n    // If the character is a note,\
    \ add it to the current_beats\n    if (c == 'o') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(0);\n      current_beats.push_back(current_beats);\n\
    \    }\n    // If the character is a bar, add the current_beats\n    else if (c\
    \ == '|') {\n      beat_numbers.push_back(current_beat_numbers);\n      current_beat_numbers.push_back(0);\n\
    \      current_beats.push_back(current_beats);\n    }\n    // If the character\
    \ is a space, add it to the current_beats\n    else if (c == ' ') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beats.push_back(current_beats);\n      current_beat_numbers.push_back(0);\n\
    \    }\n    // If the character is a dot, add it to the current_beat\n    else\
    \ if (c == '.') {\n      beat_numbers.push_back(current_beat_numbers);\n     \
    \ current_beat_numbers.push_back(1);\n    }\n    // If the character is a slash,\
    \ add it to the current_beat\n    else if (c == '/') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(2);\n    }\n    // If the character is an\
    \ exclamation point, add it to the current_beat\n    else if (c == '!') {\n  \
    \    beat_numbers.push_back(current_beat_numbers);\n      current_beat_numbers.push_back(3);\n\
    \    }\n    // If the character is an apostrophe, add it to the current_beat\n\
    \    else if (c == '\\'') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(4);\n    }\n    // If the character is a\
    \ question, add it to the current_beat\n    else if (c == '?') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(5);\n    }\n    // If the character is a\
    \ capital I, add it to the current_beat\n    else if (c == 'I') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(6);\n    }\n    // If the character is a\
    \ capital E, add it to the current_beat\n    else if (c == 'E') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(7);\n    }\n    // If the character is a\
    \ capital O, add it to the current_beat\n    else if (c == 'O') {\n      beat_numbers.push_back(current_beat_numbers);\n\
    \      current_beat_numbers.push_back(8);\n    }\n    // If the character is a\
    \ capital C, add it to the current_", "    std::vector<std::string> music_notes;\n\
    \    music_notes.reserve(music_string.size());\n    for (char c : music_string)\
    \ {\n        switch (c) {\n            case ' ':\n            case 'o':\n    \
    \        case '|':\n            case '|':\n            case 'o':\n           \
    \     music_notes.push_back(c);\n                break;\n            case '.':\n\
    \            case '|':\n            case '|':\n            case 'o':\n       \
    \     case 'o':\n            case 'o':\n                music_notes.push_back(c);\n\
    \                break;\n            case '.':\n            case 'o':\n      \
    \      case 'o':\n            case 'o':\n                music_notes.push_back(c);\n\
    \                break;\n            case '|':\n                music_notes.push_back('.');\n\
    \                break;\n            case '|':\n            case 'o':\n      \
    \      case 'o':\n                music_notes.push_back('.');\n              \
    \  break;\n            case 'o':\n            case 'o':\n                music_notes.push_back('.');\n\
    \                break;\n            case 'o':\n                music_notes.push_back('.');\n\
    \                break;\n            case ' ':\n                music_notes.push_back(c);\n\
    \                break;\n            default:\n                std::cout << \"\
    Invalid input character '\" << c << \"' encountered!\" << std::endl;\n       \
    \ }\n    }\n    std::vector<long> beats(music_notes.size(), 0);\n    for (auto\
    \ it = music_notes.begin(); it != music_notes.end(); ++it) {\n        switch (*it)\
    \ {\n            case ' ':\n                for (auto b = 4; b >= 1; b--) {\n\
    \                    beats[it-1] += b;\n                }\n                break;\n\
    \            case 'o':\n            case '|':\n                for (auto b = 1;\
    \ b < 4; b++) {\n                    beats[it-1] += b;\n                }\n  \
    \              break;\n            case '.':\n            case '|':\n        \
    \        for (auto b = 1; b < 4; b++) {\n                    beats[it-1] += b;\n\
    \                }\n                break;\n            case 'o':\n          \
    \      for (auto b = 1; b < 4; b++) {\n                    beats[it-1] += b;\n\
    \                }\n                break;\n            case 'o':\n          \
    \      for (auto b = 1; b < 4; b++) {\n                    beats[it-1] += b;\n\
    \                }\n                break;\n            case ' ':\n          \
    \      break;\n            default:\n                std::cout << \"Invalid input\
    \ character '\" << c << \"' encountered!\" << std::endl;\n        }\n    }\n \
    \   return beats;", "    std::vector<long> beats;\n    std::string first_note\
    \ = music_string.substr(0, 1);\n    std::string last_note = music_string.substr(music_string.length()\
    \ - 1, 1);\n    std::string next_note = music_string.substr(1, 1);\n    if (first_note\
    \ == \"o\") {\n        for (size_t i = 0; i < music_string.length() - 2; ++i)\
    \ {\n            if (music_string[i] == '|') {\n                beats.push_back((long)\
    \ 4);\n                ++i;\n            } else if (music_string[i] == 'o') {\n\
    \                beats.push_back((long) 4);\n                ++i;\n          \
    \  } else if (music_string[i] == '|') {\n                beats.push_back((long)\
    \ 2);\n                ++i;\n            } else if (music_string[i] == '.') {\n\
    \                beats.push_back((long) 1);\n                ++i;\n          \
    \  }\n        }\n    }\n    if (last_note == \"o\") {\n        for (size_t i =\
    \ 0; i < music_string.length() - 1; ++i) {\n            if (music_string[i] ==\
    \ '|') {\n                beats.push_back((long) 4);\n                ++i;\n \
    \           } else if (music_string[i] == 'o') {\n                beats.push_back((long)\
    \ 4);\n                ++i;\n            } else if (music_string[i] == '|') {\n\
    \                beats.push_back((long) 2);\n                ++i;\n          \
    \  } else if (music_string[i] == '.') {\n                beats.push_back((long)\
    \ 1);\n                ++i;\n            }\n        }\n    }\n    if (next_note\
    \ == \"o\") {\n        for (size_t i = 1; i < music_string.length(); ++i) {\n\
    \            if (music_string[i] == '|') {\n                beats.push_back((long)\
    \ 4);\n                ++i;\n            } else if (music_string[i] == 'o') {\n\
    \                beats.push_back((long) 4);\n                ++i;\n          \
    \  } else if (music_string[i] == '|') {\n                beats.push_back((long)\
    \ 2);\n                ++i;\n            } else if (music_string[i] == '.') {\n\
    \                beats.push_back((long) 1);\n                ++i;\n          \
    \  }\n        }\n    }\n    return beats;", "    std::vector<std::string> tokens;\n\
    \    tokens.push_back(music_string);\n    std::vector<long> time_counter;\n  \
    \  while (tokens.size() > 0) {\n        tokens.erase(tokens.begin());\n      \
    \  std::string token = tokens.back();\n        if (token == \"o\") {\n       \
    \     time_counter.push_back(4);\n        } else if (token == \"o|\") {\n    \
    \        time_counter.push_back(-2);\n        } else if (token == \".|\") {\n\
    \            time_counter.push_back(-1);\n        } else if (token == \"o.\")\
    \ {\n            time_counter.push_back(2);\n        } else if (token == \"|..\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"||.\"\
    ) {\n            time_counter.push_back(1);\n        } else if (token == \"..|\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"||\"\
    ) {\n            time_counter.push_back(1);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n            time_counter.push_back(-2);\n        } else if (token == \"..|.\"\
    ) {\n", "  std::vector<long> music(music_string.length());\n  int beat_lengths[12]\
    \ = {2, 2, 1, 2, 1, 2, 1, 1};\n  int note_length = {'o', 'o|', '.|'};\n  long\
    \ total = 0;\n  for (int i = 0; i < music_string.length(); ++i) {\n    total +=\
    \ beat_lengths[music_string[i][0]];\n    music[i] = total - beat_lengths[music_string[i][0]];\n\
    \  }\n  return music;", "    std::vector<std::string> tokens;\n    std::istringstream\
    \ tokens(music_string);\n    while (tokens >> std::ws) {\n        if (tokens.peek()\
    \ == ',')\n            tokens.ignore();\n        else if (tokens.peek() == '|')\n\
    \            tokens.ignore();\n        else if (tokens.peek() == 'o')\n      \
    \      tokens.ignore();\n        else\n            tokens.str(\"\");\n       \
    \ if (tokens >> std::ws)\n            tokens.ignore();\n        else\n       \
    \     tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.ignore();\n        else\n            tokens.str(\"\");\n \
    \       if (tokens >> std::ws)\n            tokens.ignore();\n        else\n \
    \           tokens.str(\"\");\n        if (tokens >> std::ws)\n            tokens.ignore();\n\
    \        else\n            tokens.str(\"\");\n        if (tokens >> std::ws)\n\
    \            tokens.", "  std::vector<long> output = {0};\n  for (auto const &c\
    \ : music_string) {\n    switch (c) {\n    case 'o':\n      output.push_back((output.size()\
    \ + (c - 'o')) / 4);\n      break;\n    case 'o|':\n      output.push_back((output.size()\
    \ + (c - 'o') + 2) / 4);\n      break;\n    case '.|':\n      output.push_back(1);\n\
    \      break;\n    default:\n      throw std::runtime_error(\"Parse error: invalid\
    \ musical note\");\n    }\n  }\n  return output;", "    std::vector<long> beats;\n\
    \    std::string temp;\n    long last_beat = 0;\n    for (size_t i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(last_beat);\n\
    \            last_beat = 0;\n            continue;\n        }\n        else if\
    \ (music_string[i] == '.') {\n            last_beat = 0;\n        }\n        else\
    \ if (music_string[i] == '|') {\n            last_beat++;\n            continue;\n\
    \        }\n        else if (music_string[i] == 'o') {\n            beats.push_back(last_beat);\n\
    \            last_beat = 0;\n            continue;\n        }\n        else if\
    \ (music_string[i] == '.') {\n            last_beat = 0;\n        }\n        else\
    \ if (music_string[i] == '|') {\n            last_beat++;\n            continue;\n\
    \        }\n        else {\n            temp.push_back(music_string[i]);\n   \
    \     }\n    }\n    beats.push_back(last_beat);\n    return beats;", "    std::vector<long>\
    \ beats;\n    // Initialize beat counter.\n    long beat = 1;\n    // Iterate\
    \ through string and count number of beats for every note.\n    for (auto c :\
    \ music_string) {\n        // If note is different from \".|\" and it's not \"\
    o\" then it is part of the beat and should be added.\n        if (c != \".|\"\
    \ && c != \"o\") {\n            beats.push_back(beat);\n            beat = 1;\n\
    \        }\n        else {\n            beat += 1;\n        }\n    }\n    return\
    \ beats;", '  // Your implementation here', "    std::vector<long> vec;\n    long\
    \ length = 0;\n    while (true) {\n        // Read note and determine length\n\
    \        char note = music_string[length];\n        char rest = music_string[length\
    \ + 1];\n        if ('o' == note) {\n            vec.push_back((long)4);\n   \
    \         length += 2;\n            continue;\n        }\n        if ('o|' ==\
    \ note) {\n            vec.push_back((long)2);\n            length += 3;\n   \
    \         continue;\n        }\n        if ('.|' == note) {\n            vec.push_back((long)1);\n\
    \            length += 2;\n            continue;\n        }\n        // Some other\
    \ kind of note, probably chord\n        throw std::runtime_error(\"Music string\
    \ \" + music_string + \" is not valid\");\n    }\n    return vec;", "    std::vector<std::string>\
    \ tokens = split(music_string);\n    std::vector<long> notes;\n    std::string\
    \ note;\n    for (std::string token : tokens) {\n        note = token;\n     \
    \   long last = 0;\n        long i = 0;\n        bool found = false;\n       \
    \ while (!found && i < note.size()) {\n            if (note[i] == '|') {\n   \
    \             found = true;\n                last = i;\n            }\n      \
    \      i++;\n        }\n        notes.push_back(last + 1);\n    }\n    return\
    \ notes;", "    std::vector<long> beats;\n    long last_beat = 0;\n    long note_number\
    \ = 0;\n    long number_of_notes = 0;\n    int current_note = 0;\n    std::string\
    \ current_note_string;\n    for (std::string::iterator i = music_string.begin();\
    \ i != music_string.end(); i++) {\n        // If '|' is found, that means we are\
    \ parsing 'o|' part of a note\n        if ((*i) == '.') {\n            if (number_of_notes\
    \ == 0) {\n                number_of_notes = number_of_notes + 1;\n          \
    \  } else {\n                number_of_notes = number_of_notes - 1;\n        \
    \    }\n            current_note_string = (*i).c_str();\n            current_note\
    \ = note_number;\n            note_number = 0;\n        } else if ((*i) == '|')\
    \ {\n            number_of_notes = number_of_notes + 1;\n            note_number\
    \ = current_note;\n            note_number++;\n        } else {\n            if\
    \ (number_of_notes == 0) {\n                last_beat = last_beat + 1;\n     \
    \       } else {\n                last_beat = last_beat - 1;\n            }\n\
    \            beats.push_back(last_beat);\n            last_beat = 0;\n       \
    \     note_number = 0;\n        }\n    }\n    return beats;", "  std::vector<long>\
    \ beats(128);\n  for (int i = 0; i < 128; i++) {\n    if (music_string[i] == '.')\
    \ {\n      beats[i] = 4;\n      music_string.erase(i, 1);\n    } else if (music_string[i]\
    \ == 'o') {\n      beats[i] = 4;\n      music_string.erase(i, 1);\n    } else\
    \ if (music_string[i] == '|') {\n      beats[i] = 2;\n      music_string.erase(i,\
    \ 1);\n    } else if (music_string[i] == 'o|') {\n      beats[i] = 2;\n      music_string.erase(i,\
    \ 1);\n    } else {\n      beats[i] = 1;\n    }\n  }\n  for (int i = 0; i < music_string.length();\
    \ i++) {\n    if (music_string[i] == '.') {\n      beats[128] = 4;\n      music_string.erase(i,\
    \ 1);\n    } else if (music_string[i] == 'o') {\n      beats[128] = 4;\n     \
    \ music_string.erase(i, 1);\n    } else if (music_string[i] == '|') {\n      beats[128]\
    \ = 2;\n      music_string.erase(i, 1);\n    } else if (music_string[i] == 'o|')\
    \ {\n      beats[128] = 2;\n      music_string.erase(i, 1);\n    } else {\n  \
    \    beats[128] = 1;\n    }\n  }\n  return beats;", "    std::bitset<128> bs;\n\
    \    std::vector<long> beats;\n    // For each note in music_string, we parse\
    \ it as an o|o and then add it to the vector\n    for (auto c : music_string)\
    \ {\n        if (bs[c]) { // if c is marked for parsing\n            bs[c] = false;\n\
    \            beats.push_back(4);\n            continue;\n        }\n        if\
    \ (c == '|') {\n            bs[c] = true;\n            beats.push_back(0);\n \
    \           continue;\n        }\n        if (c == 'o') {\n            bs[c] =\
    \ true;\n            beats.push_back(0);\n            continue;\n        }\n \
    \       assert(false);\n    }\n    return beats;", "  std::vector<long> vs;\n\
    \  vs.reserve(music_string.size());\n\n  std::string s = music_string;\n  // First\
    \ we scan for notes (notes begin with '.' or 'o')\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s.at(i) == '.') {\n      if (s.at(i + 1) == '|') {\n       \
    \ vs.push_back(((static_cast<int>('o' - '0')) / 4) + (static_cast<long>(i) / 4));\n\
    \        i += 2;\n      } else {\n        vs.push_back(((static_cast<int>('o'\
    \ - '0')) / 2) + (static_cast<long>(i) / 2));\n        i += 1;\n      }\n    }\
    \ else {\n      vs.push_back(((static_cast<int>('o' - '0') - static_cast<int>(s.at(i)))\
    \ / 2) + (static_cast<long>(i) / 2));\n      i += 1;\n    }\n  }\n\n  return vs;",
  "    // YOUR CODE HERE\n    long temp;\n    long beats = 0;\n    std::vector<long>\
    \ notes;\n    int flag = 0;\n    for (auto i : music_string) {\n        if (i\
    \ == 'o') {\n            flag = 1;\n            continue;\n        }\n       \
    \ if (flag == 1 && i != '.') {\n            temp = (temp * 60) + i - '0';\n  \
    \          continue;\n        }\n        if (flag == 1 && i == '.') {\n      \
    \      temp = (temp * 60);\n            beats++;\n            flag = 0;\n    \
    \        continue;\n        }\n        if (flag == 1) {\n            temp = (temp\
    \ * 60) + i - '0';\n            continue;\n        }\n        if (flag == 1) {\n\
    \            temp = (temp * 60);\n            beats++;\n            flag = 0;\n\
    \            continue;\n        }\n        if (flag == 1 && i != '.') {\n    \
    \        temp = (temp * 60) + i - '0';\n            notes.push_back(temp);\n \
    \           beats = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i == '.') {\n            temp = (temp * 60);\n            beats++;\n  \
    \          flag = 0;\n            continue;\n        }\n        if (flag == 1)\
    \ {\n            temp = (temp * 60) + i - '0';\n            continue;\n      \
    \  }\n        if (flag == 1) {\n            temp = (temp * 60);\n            beats++;\n\
    \            flag = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i != '.') {\n            temp = (temp * 60) + i - '0';\n            notes.push_back(temp);\n\
    \            beats = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i == '.') {\n            temp = (temp * 60);\n            beats++;\n  \
    \          flag = 0;\n            continue;\n        }\n        if (flag == 1)\
    \ {\n            temp = (temp * 60) + i - '0';\n            continue;\n      \
    \  }\n        if (flag == 1) {\n            temp = (temp * 60);\n            beats++;\n\
    \            flag = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i != '.') {\n            temp = (temp * 60) + i - '0';\n            notes.push_back(temp);\n\
    \            beats = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i == '.') {\n            temp = (temp * 60);\n            beats++;\n  \
    \          flag = 0;\n            continue;\n        }\n        if (flag == 1)\
    \ {\n            temp = (temp * 60) + i - '0';\n            continue;\n      \
    \  }\n        if (flag == 1) {\n            temp = (temp * 60);\n            beats++;\n\
    \            flag = 0;\n            continue;\n        }\n        if (flag ==\
    \ 1 && i != '.') {\n            temp = (temp * 60) + i - '0';\n            note",
  '    // TODO: implement me!', "    std::vector<long> vec;\n    std::string temp;\n\
    \    for (char c : music_string) {\n        if (c == '.') {\n            if (!temp.empty())\
    \ {\n                vec.push_back(std::stoll(temp));\n                temp.clear();\n\
    \            }\n        } else if ((c == 'o' || c == '|') && !temp.empty()) {\n\
    \            temp = temp + c;\n        } else if (c == 'o' || c == '|') {\n  \
    \          vec.push_back(std::stoll(temp));\n            temp.clear();\n     \
    \   }\n    }\n    if (temp.empty()) {\n        vec.push_back(std::stoll(temp));\n\
    \    }\n    return vec;", "    std::vector<long> beats;\n    // We need this \"\
    string parser\" to get rid of string splitting \"bug\"\n    std::stringstream\
    \ ss(music_string);\n    std::string line;\n    while(std::getline(ss, line, '|'))\
    \ {\n        std::stringstream sline(line);\n        std::string token;\n    \
    \    while(std::getline(sline, token, '.')) {\n            beats.push_back(std::stoll(token));\n\
    \        }\n    }\n    return beats;", "    assert(music_string.length() % 3 ==\
    \ 0);\n    std::vector<long> note_vector;\n    long curr = 0;\n    long count\
    \ = 0;\n    std::string current_note = \"\";\n    std::string last_note = \"\"\
    ;\n    // Loop through the string backwards, because it is easier to process \"\
    normal\" music notes\n    // than music notes in the special format.\n    for\
    \ (auto i = music_string.length() - 1; i >= 0; --i) {\n        // Check if current\
    \ note is empty\n        if (music_string[i] != ' ') {\n            current_note\
    \ = music_string[i];\n            last_note = music_string[i - 1];\n         \
    \   note_vector.push_back(static_cast<long>(count));\n            count = 0;\n\
    \        } else {\n            // Count beats\n            count += 1;\n     \
    \       if (last_note == '.' || last_note == 'o') {\n                note_vector.push_back(static_cast<long>(count));\n\
    \                count = 0;\n            }\n        }\n    }\n    return note_vector;",
  "  // Write your code here\n  std::vector<long> result;\n  for (int i = 0; i < music_string.size();\
    \ i++) {\n    if (music_string[i] == '.' || music_string[i] == 'o') {\n      result.push_back((long)1);\n\
    \    } else if (music_string[i] == '|') {\n      result.push_back((long)2);\n\
    \    } else {\n      result.push_back((long)4);\n    }\n  }\n  return result;",
  "  std::vector<long> beats;\n  std::regex reg(\"([o|.])+\");\n  auto it = std::sregex_iterator(music_string.begin(),\
    \ music_string.end(), reg);\n  std::sregex_iterator end;\n\n  // Iterate over\
    \ all matches\n  for (; it != end; ++it) {\n    // If match is a whole note, add\
    \ 4 beats to beats vector\n    if (std::regex_match(it->str(), reg)) {\n     \
    \ beats.push_back(4);\n    }\n\n    // If match is a half note, add 2 beats to\
    \ beats vector\n    else if (std::regex_match(it->str(), reg, std::regex_constants::icase))\
    \ {\n      beats.push_back(2);\n    }\n\n    // If match is a quater note, add\
    \ 1 beat to beats vector\n    else if (std::regex_match(it->str(), reg, std::regex_constants::icase,\
    \ std::regex_constants::format_first_only)) {\n      beats.push_back(1);\n   \
    \ }\n\n    // If match is not a note (whole note, half note, quater note), then\
    \ add no beats to beats vector\n    else {\n      beats.push_back(-1);\n    }\n\
    \  }\n  return beats;", "    std::vector<std::string> tokens = split(music_string,\
    \ \" \");\n    std::vector<long> beats;\n    beats.reserve(tokens.size());\n \
    \   std::string curr_beat = \"\";\n    long curr_beat_size = 1;\n    for (auto\
    \ it = tokens.begin(); it != tokens.end(); ++it) {\n        bool is_note = true;\n\
    \        // check whether the note is octave or half-note\n        if ((*it)[0]\
    \ == 'o') {\n            is_note = false;\n        } else if ((*it)[0] == '|')\
    \ {\n            is_note = true;\n        }\n        curr_beat += (*it);\n   \
    \     curr_beat_size = curr_beat.size();\n        long beat_count = 0;\n     \
    \   // check if there is a dot, and if so, add two beats to the current note\n\
    \        if (curr_beat.size() > 0) {\n            auto pos_dot = curr_beat.find_first_of(\"\
    .\");\n            if (pos_dot != std::string::npos) {\n                beat_count\
    \ += 2;\n                curr_beat = curr_beat.substr(0, pos_dot);\n         \
    \   }\n        }\n        // if note is octave or half-note, add only single beat\
    \ to the current note\n        if (is_note) {\n            beat_count += 1;\n\
    \        }\n        beats.push_back(beat_count);\n    }\n    return beats;", " \
    \   auto vec = std::vector<long>{};\n    auto beats_it = vec.end();\n    for (auto\
    \ &c : music_string) {\n        if (c == 'o') {\n            vec.emplace_back(4);\n\
    \        }\n        else if (c == 'o|') {\n            vec.emplace_back(2);\n\
    \            vec.emplace_back(1);\n        }\n        else if (c == '.|') {\n\
    \            vec.emplace_back(1);\n        }\n        else {\n            // This\
    \ means we should add something to our vector\n            auto &beats = *beats_it;\n\
    \            long beats = beats;\n            beats_it = vec.end();\n        \
    \    vec.emplace_back(beats);\n        }\n    }\n    return vec;", "    std::vector<long>\
    \ beats_vector;\n    std::string symbol;\n    long beats = 0;\n    bool is_full_note\
    \ = false;\n    for (unsigned int i = 0; i < music_string.size(); ++i) {\n   \
    \     symbol = music_string[i];\n        if (symbol == '.') {\n            if\
    \ (is_full_note) {\n                beats_vector.push_back(beats);\n         \
    \       beats = 0;\n            }\n            is_full_note = true;\n        }\n\
    \        else if (symbol == 'o' || symbol == '|') {\n            if (is_full_note)\
    \ {\n                beats_vector.push_back(beats);\n                beats = 0;\n\
    \            }\n            is_full_note = false;\n            beats++;\n    \
    \    }\n    }\n    if (is_full_note) {\n        beats_vector.push_back(beats);\n\
    \    }\n    return beats_vector;", "    std::vector<long> beats;\n\n    for(char\
    \ c : music_string) {\n        if(std::isalpha(c)) {\n            // Note is fully\
    \ written\n            if(c == 'o' || c == 'o|' || c == '.|') {\n            \
    \    beats.push_back(1); // note is fully written, add 1 to corresponding beat\
    \ count (except for the whole note)\n            } else if(c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'a' || c == 'b') {\n\
    \                beats.push_back(4); // half note is fully written, add 4 to corresponding\
    \ beat count (except for the whole note)\n            } else {\n             \
    \   assert(false); // unknown note\n            }\n        } else if(std::isdigit(c))\
    \ { // Beats count not written\n            beats.push_back(-1); // no beats count\
    \ is written, add -1 to corresponding beat count (except for the whole note)\n\
    \        } else {\n            assert(false); // unknown character\n        }\n\
    \    }\n\n    return beats;", "    // Complete the function\n    std::vector<long>\
    \ res;\n    char c;\n    for (auto i = music_string.begin(); i != music_string.end();\
    \ ++i) {\n        if (c = *i); c == '.' || c == '|' || c == 'o'; i = skip_whitespace(i))\
    \ {\n            if (c == '.') {\n                i += skip_whitespace(i);\n \
    \           }\n            else if (c == 'o') {\n                i += skip_whitespace(i);\n\
    \            }\n            else if (c == '|') {\n                i += skip_whitespace(i);\n\
    \            }\n            else {\n                assert(false);\n         \
    \   }\n            while (i != music_string.end() && *i == '|') {\n          \
    \      ++i;\n            }\n            long cur_beats = 0;\n            if (i\
    \ != music_string.end()) {\n                if (*i == '|') {\n               \
    \     i += 1;\n                    while (i != music_string.end() && *i == '|')\
    \ {\n                        i += 1;\n                    }\n                \
    \    cur_beats = *i - '0';\n                }\n            }\n            assert(i\
    \ >= music_string.end());\n            res.push_back(cur_beats);\n        }\n\
    \    }\n    return res;", "    std::stack<std::string> notes;\n    std::vector<long>\
    \ notes_vector;\n    std::string note = music_string;\n\n    while (note.length()\
    \ > 1) {\n        // Split note in two parts and push to stack\n        auto first_part\
    \ = note.substr(0, note.find_first_of(\"|\"));\n        auto second_part = note.substr(note.find_first_of(\"\
    |\") + 1);\n        notes.emplace(first_part);\n        notes.emplace(second_part);\n\
    \        note = notes.top();\n        notes.pop();\n    }\n\n    // Handle whole\
    \ note\n    if (note.length() == 1) {\n        notes_vector.push_back(4);\n  \
    \  }\n\n    // Handle half note\n    if (note.length() == 2) {\n        notes_vector.push_back(2);\n\
    \    }\n\n    // Handle quater note\n    if (note.length() == 3) {\n        notes_vector.push_back(1);\n\
    \    }\n    return notes_vector;", "  std::vector<long> counts;\n  int current_beat\
    \ = 1;\n  int previous_beat = 0;\n  bool found = false;\n\n  for (char c : music_string)\
    \ {\n    if (c == '.') {\n      found = true;\n      break;\n    } else if (c\
    \ == '|') {\n      if (found) {\n        found = false;\n        current_beat\
    \ = 0;\n        counts.push_back(0);\n      }\n      counts.back() += 1;\n   \
    \ } else {\n      if (current_beat == 0 || previous_beat > current_beat) {\n \
    \       counts.push_back(0);\n      }\n      counts.back() += 1;\n      previous_beat\
    \ = current_beat;\n      current_beat = 1;\n      found = true;\n    }\n  }\n\n\
    \  return counts;", "  long beat_count{0};\n  std::vector<long> beat_times{beat_count};\n\
    \n  // Iterate over all notes present in the string\n  for(char current_note:\
    \ {'0'...'9'}) {\n    char note_char = current_note;\n    long last_beat{beat_count};\n\
    \    if(current_note == 'o') {\n      for(long beats = 4; beats >= 0; beats--)\
    \ {\n        beat_times.emplace_back(last_beat - beats);\n        last_beat +=\
    \ beats;\n      }\n    }\n    else if(current_note == 'o|') {\n      for(long\
    \ beats = 2; beats >= 0; beats--) {\n        beat_times.emplace_back(last_beat\
    \ - beats);\n        last_beat += beats;\n      }\n    }\n    else {\n      for(long\
    \ beats = 1; beats >= 0; beats--) {\n        beat_times.emplace_back(last_beat\
    \ - beats);\n        last_beat += beats;\n      }\n    }\n  }\n  return beat_times;",
  "    std::vector<long> beats_count;\n    auto beats_count_iter = beats_count.begin();\n\
    \    auto start_iter = 0;\n    while (start_iter < music_string.length()) {\n\
    \        auto current_char = music_string.at((start_iter));\n        if (current_char\
    \ == \"o\") {\n            beats_count[(start_iter)++] = (long)(music_string.at(start_iter)\
    \ - '0');\n        }\n        else if (current_char == \"|\") {\n            beats_count[(start_iter)++]\
    \ = (long)(music_string.at(start_iter) - '0') << 1;\n        }\n        else if\
    \ (current_char == \".\") {\n            beats_count[(start_iter)++] = (long)(music_string.at(start_iter)\
    \ - '0') << 2;\n        }\n        else {\n            break;\n        }\n   \
    \ }\n    return beats_count;", "    std::vector<long> output{};\n    char c =\
    \ music_string[0];\n    for (const char &n : music_string) {\n        switch (c)\
    \ {\n            case 'o':\n                output.push_back((long)4);\n     \
    \           break;\n            case 'o|':\n                output.push_back((long)2);\n\
    \                break;\n            case '.|':\n                output.push_back((long)1);\n\
    \                break;\n            default:\n                output.push_back(0);\n\
    \                break;\n        }\n        c = n;\n    }\n    return output;",
  "    std::vector<long> parsed_music = {};\n    bool isFirst = true;\n    long beats_sum\
    \ = 0;\n    for (char c : music_string) {\n        if (c == 'o') {\n         \
    \   if (isFirst) {\n                parsed_music.push_back(0);\n             \
    \   isFirst = false;\n            }\n        } else if (c == '|') {\n        \
    \    parsed_music.push_back((beats_sum / 4) % 4);\n            beats_sum = 0;\n\
    \        } else {\n            beats_sum += 1;\n            parsed_music.push_back(beats_sum\
    \ % 4);\n        }\n    }\n    return parsed_music;", "    std::vector<long> beats;\n\
    \    // Your code goes here\n    \n    return beats;", "    std::vector<long>\
    \ beats_per_pitch;\n    beats_per_pitch.reserve(128);\n    for (size_t i = 0;\
    \ i < music_string.size(); i++) {\n        char c = music_string[i];\n       \
    \ if (c == '.' || c == 'o' || c == '|') {\n            beats_per_pitch.push_back((long)4);\n\
    \        } else if (c == 'o') {\n            beats_per_pitch.push_back((long)4);\n\
    \            beats_per_pitch.push_back((long)2);\n        } else if (c == '|')\
    \ {\n            beats_per_pitch.push_back((long)2);\n            beats_per_pitch.push_back((long)1);\n\
    \        }\n    }\n    return beats_per_pitch;", "    std::vector<long> beats(0);\n\
    \    // Use stack data structure to store last 4 beats of each note\n    std::vector<long>\
    \ stack;\n    // Use a map to store frequency for each note in its note_freq field\n\
    \    std::map<char, long> note_freq;\n    // Iterate through each character in\
    \ music_string\n    std::string s = music_string;\n    for (size_t i = 0; i <\
    \ s.size() - 1; ++i) {\n        // If it is not a note character, push it to stack\n\
    \        if (s[i] == '.' || s[i] == '|' || s[i] == 'o') {\n            stack.push_back(s[i]);\n\
    \        }\n        // If it is an o character, check if it is followed by a note\n\
    \        else if (s[i] == 'o' && s[i + 1] == '|' || s[i] == '|' && s[i + 1] ==\
    \ 'o') {\n            // If not, push it to stack\n            if (!stack.empty())\
    \ {\n                beats.push_back(stack[stack.size() - 1]);\n             \
    \   stack.clear();\n            }\n            // If yes, push it to the stack\n\
    \            else {\n                stack.push_back(s[i]);\n            }\n \
    \       }\n        // If it is a note, get the frequency of this note\n      \
    \  else if (s[i] == 'o' && s[i + 1] == '.') {\n            note_freq[stack[stack.size()\
    \ - 2]] += (s[i + 1] - '0');\n            stack.clear();\n        }\n        //\
    \ If it is a note with another frequency, get the frequency of this note\n   \
    \     else if (s[i] == 'o' && s[i + 1] == '.' && note_freq[stack[stack.size()\
    \ - 2]] < note_freq[s[i + 1]]) {\n            note_freq[stack[stack.size() - 2]]\
    \ += (s[i + 1] - '0');\n            stack.clear();\n        }\n    }\n    // If\
    \ stack is not empty, push it to beats\n    if (!stack.empty()) {\n        beats.push_back(stack[stack.size()\
    \ - 1]);\n        stack.clear();\n    }\n    // If stack is empty, return an empty\
    \ vector\n    return beats;", "    // Your code goes here\n    std::vector<long>\
    \ beats;\n    auto notes = music_string.find(\"o\");\n    long notes_duration\
    \ = 0;\n    while (notes != std::string::npos) {\n        notes_duration += 4;\n\
    \        notes = music_string.find(\"o|\", notes);\n        if (notes == std::string::npos)\
    \ {\n            notes_duration += 2;\n            notes = music_string.find(\"\
    .|\", notes);\n        }\n        if (notes == std::string::npos) {\n        \
    \    notes_duration += 1;\n            notes = music_string.find(\"o\", notes);\n\
    \        }\n        beats.push_back(notes_duration);\n        notes_duration =\
    \ 0;\n    }\n    return beats;", "    std::vector <long> beats_count_vector;\n\
    \    std::stack <int> stack;\n    long current_note;\n    char current_char;\n\
    \    int current_beat_count;\n    bool current_note_on_stack = false;\n    \n\
    \    for (auto c : music_string) {\n        current_note = -1;\n        current_char\
    \ = c; // Here we copy a character, not an iterator\n        stack.push(current_char);\n\
    \        current_beat_count = 0;\n        current_note_on_stack = false;\n   \
    \     \n        while (stack.empty() == false) {\n            current_char = stack.top();\n\
    \            stack.pop();\n            \n            switch (current_char) {\n\
    \                case 'o':\n                    current_note += 4; // here we\
    \ increment the note value by 4\n                    break;\n                case\
    \ 'o|':\n                    current_note += 2; // here we increment the note\
    \ value by 2\n                    break;\n                case '.|':\n       \
    \             current_note = 1; // here we increment the note value by 1\n   \
    \                 break;\n                default:\n                    // Here\
    \ we catch all uncaught characters\n                    break;\n            }\n\
    \            \n            if (current_char == ' ') {\n                current_beat_count++;\n\
    \                current_note_on_stack = false;\n                \n          \
    \  } else if (current_char == '.' || current_char == 'o' || current_char == 'o|')\
    \ {\n                beats_count_vector.push_back(current_beat_count);\n     \
    \           current_beat_count = 0;\n                current_note_on_stack = true;\n\
    \                \n            } else if (current_char == '|') {\n           \
    \     current_beat_count += current_note_on_stack ? 2 : 1;\n                current_note_on_stack\
    \ = false;\n                \n            } else if (current_char == '/') {\n\
    \                stack.push(current_char);\n                \n            } else\
    \ {\n                stack.push(current_char);\n            }\n        }\n   \
    \ }\n    return beats_count_vector;", "    std::vector<long> v{};\n    std::string\
    \ curr_note;\n    for (char c : music_string) {\n        if (c == 'o')\n     \
    \       v.push_back(1L);\n        else if (c == 'o|')\n            v.push_back(2L);\n\
    \        else if (c == '.|')\n            v.push_back(1L);\n        else if (c\
    \ == '|')\n            v.push_back(2L);\n        else\n            v.push_back(0L);\n\
    \    }\n    return v;", "    std::vector<long> notes;\n    size_t pos = 0;\n \
    \   while(pos != std::string::npos) {\n        pos = music_string.find(\"o|\"\
    , pos);\n        if (pos != std::string::npos) {\n            notes.push_back(4);\n\
    \            notes.push_back(2);\n            notes.push_back(1);\n          \
    \  pos += 4;\n        }\n        pos = music_string.find(\"o\", pos);\n      \
    \  if (pos != std::string::npos) {\n            notes.push_back(1);\n        \
    \    pos += 1;\n        }\n        pos = music_string.find(\".|\", pos);\n   \
    \     if (pos != std::string::npos) {\n            notes.push_back(2);\n     \
    \       pos += 1;\n        }\n    }\n    return notes;", "  std::vector<long>\
    \ note_counter;\n  std::vector<std::pair<long, long>> sorted_notes;\n\n  for (auto\
    \ it = music_string.begin(); it != music_string.end(); ++it) {\n    if (*it ==\
    \ 'o') {\n      note_counter.push_back((long)4);\n    } else if (*it == 'o|')\
    \ {\n      note_counter.push_back((long)2);\n    } else if (*it == '.|') {\n \
    \     note_counter.push_back((long)1);\n    } else {\n      throw std::runtime_error(\"\
    Music string should have only 'o', 'o|', '.|' symbols!\");\n    }\n  }\n\n  std::sort(note_counter.begin(),\
    \ note_counter.end());\n\n  // This loop puts all notes in proper order in sorted_notes\
    \ vector\n  // This sorting is needed, because there could be two notes with same\
    \ frequency\n  double current_note_time = 0.0;\n  for (auto it = music_string.begin();\
    \ it != music_string.end(); ++it) {\n    if (*it == 'o') {\n      current_note_time\
    \ += 4.0;\n      continue;\n    } else if (*it == 'o|') {\n      if (current_note_time\
    \ == 0.0) {\n        throw std::runtime_error(\"Music string should have at least\
    \ one note with positive frequency!\");\n      }\n      current_note_time += 2.0;\n\
    \      continue;\n    } else if (*it == '.|') {\n      if (current_note_time ==\
    \ 0.0) {\n        throw std::runtime_error(\"Music string should have at least\
    \ one note with positive frequency!\");\n      }\n      current_note_time += 1.0;\n\
    \      continue;\n    }\n\n    if (current_note_time != 0.0) {\n      sorted_notes.emplace_back(current_note_time,\
    \ note_counter.back());\n      note_counter.pop_back();\n      current_note_time\
    \ = 0.0;\n    }\n  }\n\n  return sorted_notes;", "    std::stack<long long> stack;\n\
    \    long long beats = 0;\n\n    stack.push(0);\n\n    for (auto c : music_string)\
    \ {\n        if (c == 'o') {\n            beats++;\n        } else if (c == '.')\
    \ {\n            stack.top--;\n            while (!stack.empty() && stack.top\
    \ == 0) {\n                beats--;\n                stack.pop();\n          \
    \  }\n        } else if (c == '|') {\n            stack.top++;\n        } else\
    \ if (c == 'o|') {\n            stack.top--;\n            beats++;\n        }\
    \ else {\n            std::cout << \"Not a music\" << std::endl;\n           \
    \ exit(1);\n        }\n    }\n\n    std::vector<long> beats_vector;\n    while\
    \ (!stack.empty()) {\n        beats_vector.push_back(stack.top);\n        stack.pop();\n\
    \    }\n\n    return beats_vector;", "    std::vector<long> results;\n    // This\
    \ algorithm works like this - we start with an empty vector and each new element\
    \ that comes along\n    // is parsed into the vector. During parsing we iterate\
    \ over the input string one character at a time, and\n    // if we're at the end\
    \ we add an item to the vector. Then, if we see a '.|' we add the number of beats,\
    \ if\n    // we're at the end of a note, we add the last note to the vector.\n\
    \    for (char c : music_string) {\n        if (c == 'o') {\n            // Note\
    \ - note that we're adding the number of beats to the vector here. If we were\
    \ to do this in\n            // the case where we had a '.|' in the string we\
    \ would have already added the note to the vector,\n            // but then we\
    \ would have returned from the function before we'd added the last beat.\n   \
    \         results.push_back(4L);\n        } else if (c == 'o|') {\n          \
    \  results.push_back(2L);\n        } else if (c == '.|') {\n            results.push_back(1L);\n\
    \        } else {\n            throw std::runtime_error(\"Unexpected character!\"\
    );\n        }\n    }\n    return results;", "    std::vector<long> notes(music_string.size()\
    \ / 2);\n    for (size_t i = 0; i < music_string.size() / 2; i++) {\n        char\
    \ current_char = music_string[i];\n        char next_char = music_string[music_string.size()\
    \ - i - 1];\n        if (current_char == '|') {\n            notes[i] = notes[i\
    \ - 1] + 2;\n        } else if (current_char == 'o') {\n            notes[i] =\
    \ notes[i - 1] + 4;\n        } else if (next_char == '|') {\n            notes[i]\
    \ = notes[i - 1] + 2;\n        } else if (next_char == 'o') {\n            notes[i]\
    \ = notes[i - 1] + 4;\n        } else if (current_char == '.') {\n           \
    \ notes[i] = notes[i - 1] + 1;\n        } else if (next_char == '.') {\n     \
    \       notes[i] = notes[i - 1] + 1;\n        } else if (current_char == ' ')\
    \ {\n            notes[i] = notes[i - 1];\n        }\n    }\n    return notes;",
  "    std::vector<long> parsed_music;\n    std::string line = music_string;\n   \
    \ std::string note;\n    long note_count = 0;\n\n    // Iterate over all the characters\
    \ in the string\n    // Iterate over all the characters in the string\n    while\
    \ (line.length() > 0) {\n        if (line[0] == '.' || line[0] == 'o') {\n   \
    \         // if character is an octave mark, increment the note_count and continue\
    \ to the next character\n            note_count += 1;\n            continue;\n\
    \        }\n        // if character is a pipe or an open curly brace\n       \
    \ if (line[0] == '|') {\n            // if the next character is an open curly\
    \ brace\n            if (line[1] == '{') {\n                // if we found a note\
    \ in the previous line, add it to the note_count and clear line\n            \
    \    if (note.size() > 0) {\n                    note_count += 1;\n          \
    \          parsed_music.push_back(note_count);\n                    note = \"\"\
    ;\n                    note_count += 1;\n                }\n                //\
    \ else if the previous character is not a closing curly brace, add note count\
    \ and clear the line\n                else {\n                    parsed_music.push_back(note_count);\n\
    \                    note = \"\";\n                    note_count += 1;\n    \
    \            }\n                // then add the character to the note and continue\n\
    \            }\n            // else if the next character is not a closing curly\
    \ brace\n            else if (line[1] != '}') {\n                // add the character\
    \ to the note and continue\n                note += line[0];\n               \
    \ line = line.substr(2);\n                continue;\n            }\n         \
    \   // else if the next character is a closing curly brace, stop this iteration\n\
    \            else {\n                break;\n            }\n        }\n      \
    \  // else if we find a character in the beginning of the string\n        else\
    \ if (line[0] == '|') {\n            note += line[0];\n            line = line.substr(2);\n\
    \            continue;\n        }\n        // else add the character to the note\
    \ and continue\n        else {\n            note += line[0];\n            line\
    \ = line.substr(1);\n            continue;\n        }\n    }\n    // if we didn't\
    \ encounter any characters in the string\n    // we add the last note\n    if\
    \ (note.size() > 0) {\n        note_count += 1;\n        parsed_music.push_back(note_count);\n\
    \    }\n    // return the parsed music\n    return parsed_music;", "    std::vector<long>\
    \ beats(4);\n    std::string current_note(\"\");\n    long current_beat(0);\n\
    \    int note_length(0);\n    int note_number(0);\n\n    for (char ch : music_string)\
    \ {\n        // If note is empty\n        if (current_note.empty()) {\n      \
    \      if (ch == '.') {\n                current_note = ch;\n                current_beat\
    \ = 0;\n                note_length = 0;\n                note_number = 0;\n \
    \           } else {\n                current_note += ch;\n                continue;\n\
    \            }\n        }\n\n        // If note end\n        if (ch == '.') {\n\
    \            if (current_beat == 0) {\n                beats[note_number] += note_length;\n\
    \            } else {\n                beats[note_number] = current_beat;\n  \
    \          }\n            note_length = 0;\n            note_number = 0;\n   \
    \         current_note = \"\";\n            current_beat = 0;\n            note_number++;\n\
    \            continue;\n        }\n\n        // If note is last\n        if (ch\
    \ == '|') {\n            beats[note_number] = current_beat;\n            note_length\
    \ = 0;\n            note_number++;\n            continue;\n        }\n\n     \
    \   // If note is octave\n        if (ch == 'o') {\n            current_note +=\
    \ ch;\n            note_length++;\n            continue;\n        }\n\n      \
    \  // If note is octave or number\n        if (ch >= '0' && ch <= '9') {\n   \
    \         current_note += ch;\n            note_length++;\n            continue;\n\
    \        }\n    }\n\n    return beats;", "    std::vector<long> beats(music_string.size()\
    \ / 4);\n    for (size_t i = 0; i < music_string.size() / 4; i++) {\n        std::string\
    \ note = music_string.substr(4 * i, 4);\n        if (note == \"o\") {\n      \
    \      beats[i] = 4;\n        } else if (note == \"o|\") {\n            beats[i]\
    \ = 2;\n        } else if (note == \".|\") {\n            beats[i] = 1;\n    \
    \    } else {\n            // handle unknown notes\n            assert(false);\n\
    \        }\n    }\n    return beats;", "    std::vector<long> beats;\n    auto\
    \ it = music_string.begin();\n    auto end = music_string.end();\n\n    while\
    \ (it != end && it != music_string.begin()) //skip spaces and empty strings\n\
    \    {\n        if (it == end || *it == '|') {\n            auto beat_duration\
    \ = std::distance(it, end);\n            if (it != end) it++;\n            while\
    \ (it != end && *it != '.') //skip to next note\n            {\n             \
    \   it++;\n                beat_duration--;\n            }\n            beat_duration\
    \ += 1;\n            beats.push_back(beat_duration);\n        }\n        it++;\n\
    \    }\n\n    return beats;", "    std::vector<long> beats(8);\n    std::vector<long>\
    \ current_notes(8);\n    std::string current_note = \"\";\n    std::string current_temp\
    \ = \"\";\n    for (size_t i = 0; i < music_string.size(); ++i) {\n        char\
    \ current_char = music_string[i];\n        if (current_char == 'o') {\n      \
    \      beats[current_temp % 8] += 4;\n            current_temp = 0;\n        \
    \    current_note = \"o\";\n            current_notes[current_note % 8] += 1;\n\
    \        } else if (current_char == '|') {\n            current_temp++;\n    \
    \        current_note = \"o\";\n            current_notes[current_note % 8] +=\
    \ 1;\n        } else if (current_char == '.') {\n            current_temp = 0;\n\
    \            current_note = \".\";\n            current_notes[current_note % 8]\
    \ += 1;\n        } else {\n            current_temp++;\n            current_note\
    \ = current_temp % 8 ? current_note + \".\" : current_note;\n            current_notes[current_note\
    \ % 8] += 1;\n        }\n    }\n    return beats;", "  std::vector<long> counts;\n\
    \  std::string note;\n  long count = 0;\n  size_t start = 0, end = music_string.size()\
    \ - 1;\n  while (start < end) {\n    note = music_string.substr(start, end - start);\n\
    \    if (note == \"o\") {\n      count = (count + 1) % 4;\n    } else if (note\
    \ == \".\") {\n      count = (count + 3) % 4;\n    } else {\n      count = (count\
    \ + 1) % 4;\n    }\n    counts.push_back(count);\n    start++;\n  }\n  return\
    \ counts;"]
stop_tokens:
- "\n}"
