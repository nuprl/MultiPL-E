language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string boredom = \"\";\n    int\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.')\
    \ {\n            boredom = \"\";\n        } else if (S[i] == '?') {\n        \
    \    boredom = \"\";\n        } else if (S[i] == '!') {\n            boredom =\
    \ \"\";\n        } else {\n            boredom = boredom + S[i];\n        }\n\
    \        if(boredom.find(\"I\") == 0) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk23qtp0v: /tmp/tmpk23qtp0v.cpp:33: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    \n    long\
    \ count = 0;\n    for(char ch : S){\n        if(ch == 'I'){\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf0u4cu9o: /tmp/tmpf0u4cu9o.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Code here\n    long n = S.size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!')\n            ans++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh22bjzh: /tmp/tmpnh22bjzh.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long n = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      n++;\n \
    \   }\n  }\n  return n;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwo8duzpr: /tmp/tmpwo8duzpr.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  assert(S.size() >= 2); // check if S\
    \ has at least 2 words (not counting empty string)\n  int cnt = 0;\n  int prev_was_I\
    \ = 0, last_was_I = 0;\n  int prev_is_bored = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == 'I') {\n      if (prev_was_I == 0) {\n        cnt +=\
    \ 1;\n        last_was_I = 1;\n      } else if (last_was_I == 1) {\n        cnt\
    \ += 1;\n      }\n      prev_was_I = 1;\n    }\n    if (S[i] == '.') {\n     \
    \ if (prev_is_bored == 0 && S[i+1] == '!') {\n        cnt += 1;\n        prev_is_bored\
    \ = 1;\n      } else if (prev_is_bored == 1 && S[i+1] == '?') {\n        cnt +=\
    \ 1;\n      }\n      last_was_I = 0;\n      prev_is_bored = 0;\n    }\n  }\n \
    \ return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz5tfa81t: /tmp/tmpz5tfa81t.cpp:42: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt = 0;\n    std::string word;\n\
    \    \n    for (auto &c: S) {\n        if (c != '.' && c != '?' && c != '!')\n\
    \            continue;\n        \n        if (word == \"I\" && c == '.') {\n \
    \           cnt++;\n            continue;\n        }\n        \n        word +=\
    \ c;\n    }\n    \n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf1p7wsbz: /tmp/tmpf1p7wsbz.cpp:33: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int bored = 0;\n    std::string pattern\
    \ = \"^I\";\n    std::regex r(pattern);\n    std::smatch m;\n    for (auto itr\
    \ = std::sregex_iterator(S.begin(), S.end(), r);\n         itr != std::sregex_iterator();\
    \ ++itr) {\n        if (m.size() >= 1) {\n            bored += m.size();\n   \
    \     }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_bndckcv: /tmp/tmp_bndckcv.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n   long boredoms = 0;\n   assert(S.size()\
    \ > 1);\n   assert(S.find_first_of(\".?!\") == std::string::npos);\n\n   for (auto\
    \ i : S) {\n      boredoms += (std::tolower(i) == std::tolower(i[0]));\n   }\n\
    \n   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgy16_1x.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfgy16_1x.cpp:17:55: error: invalid types \u2018char[int]\u2019 for\
    \ array subscript\n   17 |       boredoms += (std::tolower(i) == std::tolower(i[0]));\n\
    \      |                                                       ^\n"
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int count = 0;\n  int i = 0;\n  int\
    \ k = 0;\n  while (i < S.length()) {\n    if (S[i] == ' ') i++;\n    else if (S[i]\
    \ == '.') i++;\n    else if (S[i] == '?') i++;\n    else if (S[i] == '!') i++;\n\
    \    else if (S[i] == 'I') {\n      i++;\n      count++;\n    }\n    i++;\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy_xjx5nf: /tmp/tmpy_xjx5nf.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Get the length of the string S\n\
    \    int n = S.size();\n    // Initialize a counter\n    int count = 0;\n    //\
    \ Initialize an array to store the number of times each letter appears\n    int\
    \ *counter = new int[n];\n    // Store the letters in counter\n    for (int i\
    \ = 0; i < n; ++i) {\n        counter[S[i]-'A']++;\n    }\n    // Start traversing\
    \ the string from the first character and\n    // check each character if its\
    \ a boredom\n    for (int i = 0; i < n; ++i) {\n        if (S[i] == 'I') {\n \
    \           // If current character is a 'I', increment counter by 1\n       \
    \     count++;\n            // If the next character is a letter\n           \
    \ if (S[i+1] != '.' && S[i+1] != '?' && S[i+1] != '!') {\n                // If\
    \ next character is not a letter, add counter to count\n                count\
    \ += counter[S[i+1]-'A'];\n            }\n        }\n    }\n    // Return the\
    \ count of boredoms found\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp97nj2kfc: /tmp/tmp97nj2kfc.cpp:41: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  for (int i = 0;\
    \ i <= S.size() - 1; ++i) {\n    if (isalpha(S[i]) && (S[i] == 'I'))\n      ++boredoms;\n\
    \  }\n  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp70lawz1y: /tmp/tmp70lawz1y.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if (S.empty())\n        return 0;\n\
    \    // Initialize a vector of strings to store the different words encountered\n\
    \    std::vector<std::string> words(S.begin(), S.end());\n    // Initialise the\
    \ count variable to store the number of boredoms encountered\n    long boredoms\
    \ = 0;\n    \n    // Count the number of boredoms \n    for (auto const & word\
    \ : words) {\n        if (word == \"I\")\n            ++boredoms;\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpou618t2e.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpou618t2e.cpp:15:54:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660094347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom_count = 0, i;\n    for\
    \ (i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            if (i\
    \ > 0 && S[i - 1] == '.' && S[i + 1] == '.') {\n                // found two consecutive\
    \ boredoms\n                boredom_count += 2;\n            } else if (i > 0\
    \ && S[i - 1] == '.') {\n                // found a boredom\n                boredom_count++;\n\
    \            } else {\n                // found the end of the boredom\n     \
    \           boredom_count++;\n            }\n        }\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt6j598_p: /tmp/tmpt6j598_p.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    assert(S.size() > 0);\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'I')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphvguw8fy: /tmp/tmphvguw8fy.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    std::vector\
    \ <std::string> words;\n    std::stringstream ss(S);\n    std::string word;\n\
    \    while (std::getline(ss, word, ' ')) {\n        words.push_back(word);\n \
    \   }\n    for (auto &word : words) {\n        if (word == \"I\") {\n        \
    \    boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp33yz1lga: /tmp/tmp33yz1lga.cpp:33: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if(S.empty()) {\n        return 0;\n\
    \    }\n    int count = 0;\n    for(int i = 0; i < S.length(); ++i) {\n      \
    \  if(S[i] == '.') {\n            if((S[i+1] == '.') && (S[i+2] == '.') && (S[i+3]\
    \ == '.') && (S[i+4] == '.')) {\n                ++count;\n            }\n   \
    \     }\n        else if(S[i] == '?') {\n            if((S[i+1] == '?') && (S[i+2]\
    \ == '?') && (S[i+3] == '?') && (S[i+4] == '?')) {\n                ++count;\n\
    \            }\n        }\n        else if(S[i] == '!') {\n            if((S[i+1]\
    \ == '!') && (S[i+2] == '!') && (S[i+3] == '!') && (S[i+4] == '!')) {\n      \
    \          ++count;\n            }\n        }\n        else {\n            if((S[i]\
    \ == 'I') && (S[i+1] == 'I') && (S[i+2] == 'I') && (S[i+3] == 'I') && (S[i+4]\
    \ == 'I')) {\n                ++count;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpni5m4luv: /tmp/tmpni5m4luv.cpp:44: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int flag=0;\n    std::string str1(S);\n\
    \    str1.erase(0, str1.find_first_not_of(\".\"));\n    str1.erase(str1.find_last_not_of(\"\
    .\"));\n    str1.erase(0, str1.find_first_not_of(\"?\"));\n    str1.erase(str1.find_last_not_of(\"\
    ?\"));\n    str1.erase(0, str1.find_first_not_of(\"!\"));\n    str1.erase(str1.find_last_not_of(\"\
    !\"));\n\n    if(str1.compare(0, 4, \"I\"))\n    {\n        flag++;\n    }\n\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoxr8a7b1: /tmp/tmpoxr8a7b1.cpp:30: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    string p=\"I\";\n    int count = 0;\n\
    \    for(int i=0;i<S.size();i++){\n        if(S[i]==p){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtg6w7ks.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpwtg6w7ks.cpp:12:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   12 |     string p=\"I\";\n      |     ^~~~~~\n/tmp/tmpwtg6w7ks.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwtg6w7ks.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwtg6w7ks.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpwtg6w7ks.cpp:15:18: error: \u2018p\u2019 was not declared in this scope\n\
    \   15 |         if(S[i]==p){\n      |                  ^\n"
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int count = 0;\n  for(int i=0; S[i]\
    \ != 0; i++){\n    if(S[i] == '.' || S[i] == '!' || S[i] == '?'){\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyidr2d4r: /tmp/tmpyidr2d4r.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int nboredoms = 0;\n  int i = 0;\n \
    \ while(i < S.size()) {\n    while(i < S.size() && S[i] == ' ') {\n      i++;\n\
    \    }\n    while(i < S.size() && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n\
    \      i++;\n    }\n    if(i == S.size()) {\n      return nboredoms;\n    }\n\
    \    if(S[i] == '.') {\n      i++;\n      while(i < S.size() && S[i] == ' ') {\n\
    \        i++;\n      }\n      nboredoms += 2;\n    }\n    else if((S[i] == '?')\
    \ || (S[i] == '!')) {\n      i++;\n      while(i < S.size() && S[i] == ' ') {\n\
    \        i++;\n      }\n      if(S[i] == '?') {\n        nboredoms += 1;\n   \
    \   }\n      else if((S[i] == '!')) {\n        nboredoms += 0;\n      }\n    }\n\
    \    else {\n      nboredoms++;\n    }\n  }\n  return nboredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc4o2vufk: /tmp/tmpc4o2vufk.cpp:53: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int n = 0;\n  for (auto c : S)\n   \
    \ if (c == '.' || c == '?' || c == '!')\n      ++n;\n  return n;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzq3u5t8r: /tmp/tmpzq3u5t8r.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // TODO\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgnbnjyap: /tmp/tmpgnbnjyap.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    std::string\
    \ temp = S.substr(0, 4);\n    for (int i = 0; i < temp.length(); i++) {\n    \
    \    if (temp[i] == 'I') {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv4r6y7jf: /tmp/tmpv4r6y7jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int boredom = 0;\n  int index = 0;\n\
    \  for (int i = 0; i < S.size(); i++) {\n    if (S[i] == 'I') {\n      boredom++;\n\
    \    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n\
    \      }\n    }\n    else if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n \
    \       boredom++;\n      }\n    }\n    else if (S[i] == '?') {\n      if (S[i\
    \ + 1] == '?') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '!')\
    \ {\n      if (S[i + 1] == '!') {\n        boredom++;\n      }\n    }\n    else\
    \ if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n     \
    \ }\n    }\n    else if (S[i] == '?') {\n      if (S[i + 1] == '?') {\n      \
    \  boredom++;\n      }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1]\
    \ == '.') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '.') {\n\
    \      if (S[i + 1] == '.') {\n        boredom++;\n      }\n    }\n    else if\
    \ (S[i] == '?') {\n      if (S[i + 1] == '?') {\n        boredom++;\n      }\n\
    \    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n\
    \      }\n    }\n    else if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n \
    \       boredom++;\n      }\n    }\n    else if (S[i] == '!') {\n      if (S[i\
    \ + 1] == '!') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '.')\
    \ {\n      if (S[i + 1] == '.') {\n        boredom++;\n      }\n    }\n    else\
    \ if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n        boredom++;\n     \
    \ }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n      \
    \  boredom++;\n      }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1]\
    \ == '.') {\n        boredom++;\n      }\n    }\n    else if (S[i] == '!') {\n\
    \      if (S[i + 1] == '!') {\n        boredom++;\n      }\n    }\n    else if\
    \ (S[i] == '.') {\n      if (S[i + 1] == '.') {\n        boredom++;\n      }\n\
    \    }\n    else if (S[i] == '!') {\n      if (S[i + 1] == '!') {\n        boredom++;\n\
    \      }\n    }\n    else if (S[i] == '.') {\n      if (S[i + 1] == '.') {\n \
    \       boredom++;\n      }\n    }\n\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2cbb31c.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpd2cbb31c.cpp:120:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  120 | int main() {\n      |            ^\n/tmp/tmpd2cbb31c.cpp:128:1:\
    \ error: expected \u2018}\u2019 at end of input\n  128 | }\n      | ^\n/tmp/tmpd2cbb31c.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpd2cbb31c.cpp:128:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  128 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int flag = 0;\n    for (int i = 0;\
    \ i < S.size(); i++)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!')\n        {\n            flag = flag + 1;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4g35p7cb: /tmp/tmp4g35p7cb.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    assert(S.size() != 0);\n    int count\
    \ = 0;\n    for (auto i: S) {\n        if ((i == '.') || (i == '?') || (i == '!'))\
    \ {\n            ++count;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa_j1eklk: /tmp/tmpa_j1eklk.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt=0;\n    for (int i=0; i<S.length();\
    \ i++){\n        if (S[i] == 'I' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] ==\
    \ '.'){\n            cnt ++;\n        }\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw21pu9nb: /tmp/tmpw21pu9nb.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::istringstream\
    \ ss(S);\n    std::string word;\n    while(std::getline(ss, word, '.')) {\n  \
    \      if(word == \"I\") {\n            boredoms ++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxvlspukc: /tmp/tmpxvlspukc.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if (S == \"I\") return 1;\n    if\
    \ (S == \"love\") return 1;\n    if (S == \"weather\") return 1;\n    if (S ==\
    \ \"sun\") return 1;\n    if (S == \"sky\") return 1;\n    if (S == \"is\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return\
    \ 1;\n    if (S == \"I\") return 1;\n    if (S == \"I\") return 1;\n    if (S\
    \ == \"I\") return 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeg2eklk3: /tmp/tmpeg2eklk3.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int counter = 0;\n    bool flag =\
    \ false;\n    int i = 0;\n    while (i < S.length()) {\n        if (S.at(i) ==\
    \ '?' || S.at(i) == '!')\n            flag = true;\n        else if (S.at(i) ==\
    \ '.')\n            flag = false;\n        else if (flag) {\n            if (S.at(i)\
    \ == 'I')\n                counter++;\n            i++;\n        }\n        i++;\n\
    \    }\n    return (counter);\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc98betok: /tmp/tmpc98betok.cpp:33: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    \n    for (char\
    \ i : S) {\n        if (i == '.' || i == '?' || i == '!') {\n            boredom++;\n\
    \        }\n    }\n\n    return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppx4hbakn: /tmp/tmppx4hbakn.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0 ;\n    for (auto c\
    \ : S) {\n        if (c == 'I') {\n            ++count;\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqdmst5i4: /tmp/tmpqdmst5i4.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0, found = 0;\n    \n\
    \    for (int i=0; i<S.size(); i++){\n        if (S[i] == '.'){\n            if\
    \ (S.substr(i, 2) == \"I\"){\n                found = 1;\n            }\n    \
    \        count++;\n        }\n        \n        if (S[i] == '!' || S[i] == '?'\
    \ || S[i] == ' '){\n            found = 0;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpubmnf37q: /tmp/tmpubmnf37q.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++){\n        if(S[0] == 'I'){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzqujbnxr: /tmp/tmpzqujbnxr.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int n = S.size();\n    long sum =\
    \ 0;\n    for (int i = 0; i < n; i++) {\n        if (isalpha(S[i])) {\n      \
    \      if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n                sum++;\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpce5kuu0l: /tmp/tmpce5kuu0l.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::size_t start = 0;\n    std::string\
    \ word = S;\n    for (std::size_t i = 1; i < S.size(); i++) {\n        if (S[i]\
    \ == '.') {\n            if (word == \"I\") {\n                return i;\n   \
    \         }\n        } else if (S[i] == '?') {\n            if (word == \"I\"\
    ) {\n                return i;\n            }\n        } else if (S[i] == '!')\
    \ {\n            if (word == \"I\") {\n                return i;\n           \
    \ }\n        } else if (S[i] == ' ') {\n            if (word == \"I\") {\n   \
    \             return i;\n            }\n        } else if (S[i] == '\\n' || S[i]\
    \ == '\\r') {\n            start = i;\n            word = S;\n        } else {\n\
    \            word = S;\n        }\n    }\n    if (word == \"I\") {\n        return\
    \ -1;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpguifqc4k: /tmp/tmpguifqc4k.cpp:47: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for (int i = 0;\
    \ i < S.size(); i++) {\n        char ch = S[i];\n        if (ch == '.' || ch ==\
    \ '?' || ch == '!') {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeyjwu2g7: /tmp/tmpeyjwu2g7.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    //  Write your code here\n    return\
    \ 0L;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4lpukil5: /tmp/tmp4lpukil5.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == 'I' || S[i] == '.' || S[i] == '!' ||\
    \ S[i] == '?') {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpd7hs_cx8: /tmp/tmpd7hs_cx8.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::string::const_iterator\
    \ it;\n  it = S.begin();\n  it = std::search(it, S.end(), std::begin(\"I\"), std::end(\"\
    I\"));\n  while (it != S.end()) {\n    ++boredoms;\n    it = std::search(it, S.end(),\
    \ std::begin(\".\"), std::end(\".\"));\n  }\n  return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvji9atcg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvji9atcg.cpp:15:63: error: no matching function for call to \u2018\
    search(std::__cxx11::basic_string<char>::const_iterator&, std::__cxx11::basic_string<char>::iterator,\
    \ const char*, const char*)\u2019\n   15 |   it = std::search(it, S.end(), std::begin(\"\
    I\"), std::end(\"I\"));\n      |                                             \
    \                  ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvji9atcg.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4176:5:\
    \ note: candidate: \u2018template<class _FIter1, class _FIter2> _FIter1 std::search(_FIter1,\
    \ _FIter1, _FIter2, _FIter2)\u2019\n 4176 |     search(_ForwardIterator1 __first1,\
    \ _ForwardIterator1 __last1,\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4176:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvji9atcg.cpp:15:63:\
    \ note:   deduced conflicting types for parameter \u2018_FIter1\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   15 |   it = std::search(it, S.end(), std::begin(\"I\"), std::end(\"\
    I\"));\n      |                                                              \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmpvji9atcg.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4216:5: note:\
    \ candidate: \u2018template<class _FIter1, class _FIter2, class _BinaryPredicate>\
    \ _FIter1 std::search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate)\u2019\
    \n 4216 |     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n\
    \      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4216:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpvji9atcg.cpp:15:63: note: \
    \  deduced conflicting types for parameter \u2018_FIter1\u2019 (\u2018__gnu_cxx::__normal_iterator<c"
  stdout: ''
  timestamp: 1660094348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    vector<string>\
    \ arr1;\n    for(int i = 0; i<S.length(); i++){\n        string word = S.substr(i,1);\n\
    \        if(word==\"I\"){\n            arr1.push_back(word);\n        }\n    }\n\
    \    long boredoms = 0, i;\n    for (i=0;i<arr1.size();i++){\n        if(arr1[i]==\"\
    .\"){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39vs_yb5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp39vs_yb5.cpp:13:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   13 |     vector<string> arr1;\n      |     ^~~~~~\n/tmp/tmp39vs_yb5.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39vs_yb5.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39vs_yb5.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp39vs_yb5.cpp:13:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   13 |     vector<string>\
    \ arr1;\n      |            ^~~~~~\n/tmp/tmp39vs_yb5.cpp:13:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp39vs_yb5.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn fil"
  stdout: ''
  timestamp: 1660094347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete this function\n    int\
    \ count = 0;\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] ==\
    \ 'I' && S[i + 1] == '.') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5wzgey33: /tmp/tmp5wzgey33.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code goes here\n    long n\
    \ = 0, i, count = 0;\n    for(i = 0; i < S.length(); i++) {\n        if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n\
    \    if(count <= 1) {\n        return (0);\n    }\n    else {\n        return\
    \ (1);\n    }\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsdu0_wrx: /tmp/tmpsdu0_wrx.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count=0, i=0;\n    for(int j=0;j<S.size();j++){\n\
    \        if(S[j]=='I'){\n            count++;\n            i=0;\n        }\n \
    \       else{\n            count++;\n            i=1;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqi440jhd: /tmp/tmpqi440jhd.cpp:27: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    std::string\
    \ a = \".?!\";\n    for(int i = 0; i<S.length(); i++)\n    {\n        for(int\
    \ j = 0; j<a.length(); j++)\n        {\n            if(S[i] == a[j])\n       \
    \     {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvxq9rzr6: /tmp/tmpvxq9rzr6.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete this function\n    long\
    \ boredoms = 1;\n    long size = S.length();\n    for (int i = 0; i < size; i++)\
    \ {\n        if (S[i] == '.') {\n            boredoms = boredoms + 1;\n      \
    \  }\n        else if (S[i] == '?') {\n            boredoms = boredoms + 1;\n\
    \        }\n        else if (S[i] == '!') {\n            boredoms = boredoms +\
    \ 1;\n        }\n        else {\n            boredoms = boredoms + 0;\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppnkrbjv0: /tmp/tmppnkrbjv0.cpp:33: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto c :\
    \ S) {\n        if (c == '.' || c == '?' || c == '!') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1bswyrzp: /tmp/tmp1bswyrzp.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int flag = 0;\n    std::string str\
    \ = \"\";\n    for(unsigned int i = 0; i < S.length(); i++) {\n        if (S[i]\
    \ == \".\") flag++;\n        else if (S[i] == \"?\" || S[i] == \"!\") flag++;\n\
    \        else if (S[i] == 'I')\n            flag += 2;\n        else if (S[i]\
    \ == '.')\n            str += S[i];\n        else if (S[i] == '?')\n         \
    \   str += S[i];\n        else\n            str += S[i];\n    }\n    if (flag\
    \ == 0)\n        return (1);\n    else if ((str.find(\"#\") != std::string::npos)\
    \ && (flag == 3))\n        return (1);\n    else\n        return (0);\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefsadnyi.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpefsadnyi.cpp:15:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (S[i] == \".\") flag++;\n   \
    \   |                     ^~~\n/tmp/tmpefsadnyi.cpp:16:26: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   16 |         else\
    \ if (S[i] == \"?\" || S[i] == \"!\") flag++;\n      |                       \
    \   ^~~\n/tmp/tmpefsadnyi.cpp:16:41: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   16 |         else if (S[i] == \"?\" ||\
    \ S[i] == \"!\") flag++;\n      |                                         ^~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom_cnt=0;\n    int i=0;\n\
    \    for(i=0;i<S.size();i++){\n        if(S[i]==\"I\"){\n            boredom_cnt++;\n\
    \        }\n    }\n    return boredom_cnt;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxktno70a.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpxktno70a.cpp:15:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(S[i]==\"I\"){\n      |      \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    string word = \"\";\n    int count\
    \ = 0;\n    for(int i = 0 ; i < S.length() ; i++){\n        char c = S[i];\n \
    \       if(!isalpha(c)) {\n            word += c;\n            continue;\n   \
    \     }\n        if(word == \"I\" || word == \"i\"){\n            count++;\n \
    \       }\n        word = c;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ijakxo8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp2ijakxo8.cpp:12:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   12 |     string word = \"\";\n      |     ^~~~~~\n/tmp/tmp2ijakxo8.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2ijakxo8.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2ijakxo8.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp2ijakxo8.cpp:17:13: error: \u2018word\u2019 was not declared in this scope\n\
    \   17 |             word += c;\n      |             ^~~~\n/tmp/tmp2ijakxo8.cpp:20:12:\
    \ error: \u2018word\u2019 was not declared in this scope\n   20 |         if(word\
    \ == \"I\" || word == \"i\"){\n      |            ^~~~\n/tmp/tmp2ijakxo8.cpp:23:9:\
    \ error: \u2018word\u2019 was not declared in this scope\n   23 |         word\
    \ = c;\n      |         ^~~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Good luck!\n  long ans = 0;\n  for\
    \ (int i = 0; i <S.length(); i++) {\n    if (isalpha(S[i]) && S[i] == 'I') {\n\
    \      ans += 1;\n    }\n  }\n  \n  return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9hgl280z: /tmp/tmp9hgl280z.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int i, count = 0;\n    // A bored\
    \ sentence starts with \"I\".\n    if (S.find(\"I\") == 0)\n    {\n        //\
    \ The bored sentence can be broken down into its parts.\n        std::string::size_type\
    \ pos = S.find('?');\n        std::string part = S.substr(0, pos);\n        S\
    \ = S.substr(pos + 1);\n        int len = part.length();\n        // Look for\
    \ \"I\" in the sentence, and keep counting boredoms.\n        for (i = 0; i <\
    \ len; ++i)\n        {\n            if (part[i] == 'I')\n            {\n     \
    \           ++count;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptpwyb5ze: /tmp/tmptpwyb5ze.cpp:35: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete the function body here\n\
    \    // ...\n    return 0; // Replace this line with your code\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkidwppbr: /tmp/tmpkidwppbr.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int i, j, k, n, boredom = 0;\n  // Find\
    \ length of string\n  n = S.length();\n  // Initialize a 2D array\n  char** p\
    \ = new char*[n];\n  for(i = 0; i < n; ++i) {\n    p[i] = new char[n + 1];\n \
    \ }\n\n  // Copy string into p[][]\n  for(i = 0; i < n; ++i) {\n    strcpy(p[i],\
    \ S.c_str());\n  }\n\n  // Search for '.', '!', '?'\n  for(i = 0; i < n; ++i)\
    \ {\n    // Search for '.', '!', '?' in p[][]\n    for(j = 0; j < n; ++j) {\n\
    \      // Count boredom\n      if(p[i][j] == '.') {\n        boredom++;\n    \
    \  } else if(p[i][j] == '!') {\n        boredom--;\n      } else if(p[i][j] ==\
    \ '?') {\n        boredom--;\n      }\n    }\n  }\n\n  // Return boredom\n  return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcz3cnr52: /tmp/tmpcz3cnr52.cpp:47: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tint boredom_count = 0;\n\tstd::vector<\
    \ std::string > boredoms = { \"I\", \"you\", \"he\", \"she\", \"it\", \"we\",\
    \ \"they\" };\n\tstd::vector< std::string >::iterator it;\n\tfor( it = boredoms.begin()\
    \ ; it != boredoms.end() ; it++ ) {\n\t\tif( S.find( *it ) != std::string::npos\
    \ ) {\n\t\t\tboredom_count++;\n\t\t}\n\t}\n\treturn boredom_count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh5o6s3l: /tmp/tmpnh5o6s3l.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    std::string token;\n\
    \    std::stringstream iss(S);\n    while (std::getline(iss, token, ',.?!')) {\n\
    \        if (token == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjpd4mfa1.cpp:15:37: warning: multi-character character constant\
    \ [-Wmultichar]\n   15 |     while (std::getline(iss, token, ',.?!')) {\n    \
    \  |                                     ^~~~~~\n/tmp/tmpjpd4mfa1.cpp: In function\
    \ \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpjpd4mfa1.cpp:15:43: error:\
    \ no matching function for call to \u2018getline(std::stringstream&, std::string&,\
    \ int)\u2019\n   15 |     while (std::getline(iss, token, ',.?!')) {\n      |\
    \                                           ^\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjpd4mfa1.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Allocator>&, _CharT)\u2019\n 1538 |     getline(basic_istream<_CharT,\
    \ _Traits>& __in,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjpd4mfa1.cpp:15:43:\
    \ note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019\
    \ and \u2018int\u2019)\n   15 |     while (std::getline(iss, token, ',.?!')) {\n\
    \      |                                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /us"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int c = 0;\n  for (int i = 0; i < S.size();\
    \ ++i) {\n    if (S[i] == '?' || S[i] == '.')\n      c++;\n    else if (S[i] ==\
    \ '!') {\n      if (c == 0 || c == S.size() - 1)\n        c++;\n      else {\n\
    \        c--;\n        break;\n      }\n    }\n  }\n  return c;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgyepyjqb: /tmp/tmpgyepyjqb.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    int N=0;\n\
    \    for (auto &i : S){\n        if (i=='I'){\n            N++;\n        }\n \
    \   }\n    return N;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbn4vv9xz: /tmp/tmpbn4vv9xz.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans=0;\n    int n = S.length();\n\
    \    for (int i=0; i<n; i++)\n    {\n        if (S[i]=='I' && S[i+1]=='.')\n \
    \       {\n            ans++;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm2dwce98: /tmp/tmpm2dwce98.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  for (int i = 0; i\
    \ < S.size(); i++) {\n    // Look at the ith character of the string.\n    if\
    \ (S[i] == '.') \n      // If it's \".\", increment count by 1.\n      count++;\n\
    \    else if (S[i] == '?') {\n      // If it's \"?\", increment count by 1.\n\
    \      count++;\n    } else if (S[i] == '!') {\n      // If it's \"!\", increment\
    \ count by 1.\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp3j3o7at: /tmp/tmpp3j3o7at.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // You can use the count_if() algorithm\
    \ from STL\n  auto p = S.begin();\n  long count = 0;\n  while (p!=S.end()) {\n\
    \    if (*p == 'I' && *(p+1) == 'I' && *(p+2) == 'I') {\n      p+=3;\n      count\
    \ += 1;\n    }\n    p++;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa0fz4wxz: /tmp/tmpa0fz4wxz.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string str = \"I \";\n    long\
    \ count = 0;\n    for (char& c: str)\n        if (S.find(c) != std::string::npos)\
    \ {\n            ++count;\n        }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzree2fzt: /tmp/tmpzree2fzt.cpp:22: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Complete this function\n  int count\
    \ = 0;\n  if (S[0] == \"I\") {\n    count++;\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2o4kyxx.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl2o4kyxx.cpp:14:15: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |   if (S[0] == \"I\") {\n      |        \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // TODO: Write your code here\n  \
    \  int counter = 0;\n    for(int i = 0; i < S.size(); ++i){\n        if(S[i] ==\
    \ 'I'){\n            counter++;\n        }\n    }\n    return counter;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9tcr0v52: /tmp/tmp9tcr0v52.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string w;\n\
    \    for (std::size_t i = 0; i != S.size(); ++i) {\n        if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            w = S[i];\n            if (w[0] ==\
    \ 'I') {\n                ans += 1;\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphm87jj64: /tmp/tmphm87jj64.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here.\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1u2u53hl: /tmp/tmp1u2u53hl.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int flag = 0;\n    std::string word\
    \ = \" \";\n    int count = 0;\n    for(int i = 0; i < S.length(); i++) {\n  \
    \      if(S[i] == '.') {\n            flag++;\n            word = S;\n       \
    \ }\n        else if(S[i] == '?') {\n            flag--;\n            word = S;\n\
    \        }\n        else if(S[i] == '!') {\n            word = S;\n        }\n\
    \        if(S[i] == '.') {\n            flag++;\n            word = S;\n     \
    \   }\n        else if(S[i] == '?') {\n            flag--;\n            word =\
    \ S;\n        }\n        else if(S[i] == '!') {\n            word = S;\n     \
    \   }\n        if(flag == 1) {\n            count++;\n        }\n        if(flag\
    \ == -1) {\n            count--;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6dj7jujy: /tmp/tmp6dj7jujy.cpp:51: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0, i;\n    for (i = 0;\
    \ i < S.size(); i++)\n        if (S[i] == '.')\n            ans += 1;\n      \
    \  else if (S[i] == '!')\n            ans -= 1;\n        else if (S[i] == '?')\n\
    \            ans -= 1;\n        else\n            ans += 1;\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpik15n43v: /tmp/tmpik15n43v.cpp:26: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    long flag = 0;\n    while ((S[i - 1] != '.') && (S[i - 1] != '?') && (S[i\
    \ - 1] != '!')) {\n        boredom++;\n    }\n    int j = i - 1;\n    while (j\
    \ >= 0) {\n        if (S[j] != \".\") {\n            flag = 1;\n            break;\n\
    \        }\n        j--;\n    }\n    long len = (boredom == 0) ? 0 : (boredom\
    \ > 1) ? 1 : boredom;\n    while (j >= 0) {\n        if (S[j] == \".\") {\n  \
    \          flag = 1;\n            break;\n        }\n        j--;\n    }\n   \
    \ j = i + 1;\n    while (j < S.size()) {\n        if (S[j] != \".\") {\n     \
    \       flag = 1;\n            break;\n        }\n        j++;\n    }\n    int\
    \ l = (len == 0) ? 0 : (len > 1) ? 1 : len;\n    if (flag == 1) {\n        boredom++;\n\
    \        boredom++;\n    }\n    return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalwymtcd.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpalwymtcd.cpp:20:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |         if (S[j] != \".\") {\n      |  \
    \                   ^~~\n/tmp/tmpalwymtcd.cpp:28:21: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   28 |         if (S[j] == \".\"\
    ) {\n      |                     ^~~\n/tmp/tmpalwymtcd.cpp:36:21: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   36 |     \
    \    if (S[j] != \".\") {\n      |                     ^~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here.\n    char\
    \ S1[100];\n    strcpy(S1, S.c_str());\n    int boredom_count = 0;\n    char boredom[4];\n\
    \    if (strcmp(S1, \"I\") == 0) boredom_count = 1;\n    else \n    {\n      \
    \  for (int i = 0; i < strlen(S1); i++) \n        {\n            if (S1[i] ==\
    \ '.')\n            {\n                boredom_count++;\n                break;\n\
    \            }\n        }\n    }\n    return boredom_count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplvf9pk0w: /tmp/tmplvf9pk0w.cpp:35: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i =\
    \ 0; i < S.size(); ++i) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            ++count;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp74y1x__f: /tmp/tmp74y1x__f.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0; \n    assert(S.size()\
    \ > 0);\n    for (long i = 0; i < (long)S.size(); ++i) {\n        if (S.at(i)\
    \ == \".\" || S.at(i) == \"?\" || S.at(i) == \"!\") count += 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s5jwkla.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp2s5jwkla.cpp:15:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (S.at(i) == \".\" || S.at(i)\
    \ == \"?\" || S.at(i) == \"!\") count += 1;\n      |                        ^~~\n\
    /tmp/tmp2s5jwkla.cpp:15:42: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (S.at(i) == \".\" || S.at(i)\
    \ == \"?\" || S.at(i) == \"!\") count += 1;\n      |                         \
    \                 ^~~\n/tmp/tmp2s5jwkla.cpp:15:60: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   15 |         if (S.at(i) == \"\
    .\" || S.at(i) == \"?\" || S.at(i) == \"!\") count += 1;\n      |            \
    \                                                ^~~\n"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    assert(S.size() >= 1);\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' ||\
    \ S[i] == '.' || S[i] == '?' || S[i] == '!')\n            boredoms++;\n      \
    \  i++;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8shd21tq: /tmp/tmp8shd21tq.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::map<std::string,long> map;\n\
    \    int count=0;\n    for (int i = 0; i< S.length(); i++)\n    {\n        if\
    \ (S[i]=='I')\n            count+=1;\n        else if (S[i]=='.' || S[i]=='?'\
    \ || S[i]=='!')\n        {\n            count+=1;\n            map[S[i]]=count;\n\
    \            count=0;\n        }\n    }\n    return map[S[0]];\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmvi2xn2v.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpmvi2xn2v.cpp:21:16: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, long int>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   21 |             map[S[i]]=count;\n      |     \
    \           ^\nIn file included from /usr/include/c++/9/map:61,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n           \
    \      from /tmp/tmpmvi2xn2v.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long ans=0;\n  for (int i=0;i<S.size();i++)\
    \ {\n    // '?' is the delimeter of boredom sentences\n    if (S[i]=='?') { ans++;\
    \ }\n    // '.' is the delimeter of a sentence\n    else if (S[i]=='.') { ans++;\
    \ }\n    // '!' is the delimeter of a sentence\n    else if (S[i]=='!') { ans++;\
    \ }\n    // 'I' is the delimeter of boredom sentences\n    else if (S[i]=='I')\
    \ { ans++; }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0ak5pg2h: /tmp/tmp0ak5pg2h.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0 ; i < S.size(); i++){\n        if(S[i] == '.'){\n            if(S[i+1] ==\
    \ '.'){\n                if(S[i+2] == '.'){\n                    if(S[i+3] ==\
    \ '.'){\n                        boredoms += 1;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq9jezkg_: /tmp/tmpq9jezkg_.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094350
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Write your code here.\n  int i=0;\n\
    \  long n=0;\n  for(auto i=S.begin();i!=S.end();i++)\n  {\n    if(i=='i')\n  \
    \  {\n        n++;\n    }\n  }\n  return n;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2x_roki.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpk2x_roki.cpp:17:9: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018char\u2019)\n   17 |     if(i=='i')\n      |        ~^~~~~\n\
    \      |        |  |\n      |        |  char\n      |        __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpk2x_roki.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpk2x_roki.cpp:17:11: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018char\u2019\n   17 |     if(i=='i')\n      |           ^~~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpk2x_roki.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/"
  stdout: ''
  timestamp: 1660094350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    int i; \n   \
    \ for(i = 0; i<S.size(); i++) {\n        if(S[i] == '.') count++;\n        if(S[i]\
    \ == '?') count++;\n        if(S[i] == '!') count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptcv_af_3: /tmp/tmptcv_af_3.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    int n = 0;\n\
    \    for (auto c : S) {\n        if (c == '.') {\n            ++n;\n         \
    \   if (n == 1) {\n                boredom += 1;\n            }\n        } else\
    \ if (c == '?' || c == '!') {\n            ++n;\n            if (n == 1) {\n \
    \               boredom += 1;\n            }\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkf98b0o9: /tmp/tmpkf98b0o9.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ temp = S;\n    for (char i : temp) {\n        if (i == '.' || i == '?' || i\
    \ == '!') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpixd14emw: /tmp/tmpixd14emw.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n// Your code here\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1npta20t: /tmp/tmp1npta20t.cpp:16: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if (S.empty()) return 0;\n    int\
    \ boredom_count = 0;\n    std::string boredoms = \"I am\";\n    std::size_t found\
    \ = S.find(boredoms, 0);\n    while (found != std::string::npos) {\n        boredom_count++;\n\
    \        found = S.find(boredoms, found + 1);\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5wt3kvml: /tmp/tmp5wt3kvml.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Declare an array to hold the number\
    \ of occurrences of each word.\n    std::vector<int> v(S.size());\n    // Loop\
    \ through the string.\n    for (auto c : S) {\n        // If the current letter\
    \ is not a period, question mark, or exclamation point,\n        // ignore it\
    \ and move on to the next letter.\n        if (c != '.' && c != '?' && c != '!')\
    \ continue;\n        // If the current letter is a period, question mark, or exclamation\
    \ point,\n        // add 1 to the current count.\n        else if (c == '.' ||\
    \ c == '?' || c == '!') v[c] += 1;\n        // Otherwise, ignore it and move on\
    \ to the next letter.\n        else continue;\n    }\n    // Return 0 if there\
    \ are no boredoms.\n    return std::count(v.begin(), v.end(), 0);\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp720_zbrg: /tmp/tmp720_zbrg.cpp:30: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tstd::stack<std::string> st;\n\tstd::string\
    \ word = \"\";\n\tbool flag = false;\n\tsize_t count = 0;\n\tfor (int i = 0; i\
    \ < S.size(); i++) {\n\t\tif (flag) {\n\t\t\tif (S[i] == \".\") {\n\t\t\t\tst.push(word);\n\
    \t\t\t}\n\t\t\tif (S[i] == '?') {\n\t\t\t\tst.push(word);\n\t\t\t}\n\t\t\tif (S[i]\
    \ == '!') {\n\t\t\t\tst.push(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tflag =\
    \ false;\n\t\t} else {\n\t\t\tif (S[i] == \".\") {\n\t\t\t\tflag = true;\n\t\t\
    \t\tcontinue;\n\t\t\t} else {\n\t\t\t\tword += S[i];\n\t\t\t}\n\t\t}\n\t}\n\t\
    while (!st.empty()) {\n\t\tif (st.top() == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t\
    \tst.pop();\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qj7lg04.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6qj7lg04.cpp:18:16: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   18 |    if (S[i] == \".\") {\n      |       \
    \         ^~~\n/tmp/tmp6qj7lg04.cpp:30:16: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   30 |    if (S[i] == \".\") {\n      |\
    \                ^~~\n"
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom_count = 0;\n    // Check\
    \ for every word in S, if it starts with \"I\".\n    for(auto &c : S){\n     \
    \   if (c == 'I'){\n            boredom_count++;\n        }\n    }\n    return\
    \ boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1y3owqp4: /tmp/tmp1y3owqp4.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::vector<std::string> arr;\n  \
    \  std::string boredom_word;\n    int flag = 0;\n    \n    // We use C++ strings\
    \ to manipulate individual characters and strings\n    // to manipulate words.\
    \ You will see these used throughout the example\n    // below.\n    \n    //\
    \ Split S into an array of words, using spaces as the separator.\n    for (auto\
    \ &i : S) {\n        if ((i != '.') && (i != ',') && (i != ' ')) {\n         \
    \   arr.push_back(i);\n        }\n    }\n    \n    // Use a map to count the number\
    \ of occurrences of each word.\n    std::map<std::string, int> word_count;\n \
    \   for (auto &i : arr) {\n        if (i == \"I\") {\n            boredom_word\
    \ = \"I\";\n        } else {\n            boredom_word = i + \".\";\n        }\n\
    \        word_count[boredom_word] += 1;\n    }\n    \n    // We check if the map\
    \ contains a value that equals 1.\n    for (auto &i : word_count) {\n        if\
    \ (i.second == 1) {\n            flag = 1;\n            break;\n        }\n  \
    \  }\n    \n    return flag;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmocwa2s7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpmocwa2s7.cpp:23:28: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\n   23\
    \ |             arr.push_back(i);\n      |                            ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmocwa2s7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0; // Initialize a variable\
    \ to store our answer\n    char boredoms[] = {'.', '?', '!'}; // Create a variable\
    \ that holds the boredom words (period, question mark and exclamation mark)\n\
    \    std::string word; // Create an empty string variable\n    int count = 0;\
    \ // Initialize a variable to store our answer\n    long word_count = 0; // Initialize\
    \ a variable that counts our word\n    int i = 0; // Initialize a variable that\
    \ counts our words\n    std::string word_boredom; // Initialize an empty string\
    \ variable\n    for (int i = 0; i < S.size(); i++) {\n        word = S[i]; //\
    \ Assign the current character of S to word\n        for (int j = 0; j < sizeof(boredoms)\
    \ / sizeof(boredoms[0]); j++) {\n            word_boredom = boredoms[j]; // Assign\
    \ the current character of boredoms to word_boredom\n            if (word.find(word_boredom)\
    \ != std::string::npos) { // Search for word in boredoms array\n             \
    \   count++; // If found, increment our count by 1\n            }\n        }\n\
    \        word_count++; // Increment word count\n    }\n    return count; // return\
    \ the value\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr2o8d5qa.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpr2o8d5qa.cpp:15:9: error: redeclaration of \u2018int count\u2019\n\
    \   15 |     int count = 0; // Initialize a variable to store our answer\n   \
    \   |         ^~~~~\n/tmp/tmpr2o8d5qa.cpp:12:9: note: \u2018int count\u2019 previously\
    \ declared here\n   12 |     int count = 0; // Initialize a variable to store\
    \ our answer\n      |         ^~~~~\n"
  stdout: ''
  timestamp: 1660094351
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long result = 0;\n    std::string\
    \ boredom_words[] = {\"I\", \"We\", \"You\", \"He\", \"She\", \"It\", \"We\",\
    \ \"You\", \"She\"};\n    for (int i = 0; i < S.size(); i++) {\n        if (boredom_words[i]\
    \ == S[0]) {\n            ++result;\n            if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!')\n                ++result;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvs9j95x.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppvs9j95x.cpp:15:30: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   15 |         if (boredom_words[i] == S[0]) {\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppvs9j95x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmppvs9j95x.cpp:15:36:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   15\
    \ |         if (boredom_words[i] == S[0]) {\n      |                         \
    \           ^\nIn file included from /usr/include/c++/9/regex:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n        \
    \         from /tmp/tmppvs9j95x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmppvs9j95x.cpp:15:36: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   15 |         "
  stdout: ''
  timestamp: 1660094351
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long counter = 0;\n  S.erase(S.begin(),\
    \ S.begin() + 1);\n  S.erase(S.begin() + S.find(\".\"));\n  S.erase(S.begin()\
    \ + S.find(\"?\"));\n  S.erase(S.begin() + S.find(\"!\"));\n  for (int i = 0;\
    \ i < S.length(); i++) {\n    if (S[i] == 'I' && S[i + 1] == '.' && S[i + 2] !=\
    \ '.') {\n      counter++;\n    }\n  }\n  return counter;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n        long boredoms = 0;\n        std::istringstream\
    \ iss(S);\n        std::string word;\n        std::getline(iss, word, '.');\n\
    \        while (word == \"I\") {\n                std::getline(iss, word, '.');\n\
    \                boredoms += 1;\n        }\n        return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpukg7iuii: /tmp/tmpukg7iuii.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long n = 0;\n  for (int i = 0; i <=\
    \ S.size() - 1; i++) {\n    if (S[i] == 'I') {\n      n++;\n    }\n  }\n  return\
    \ n;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjybwnw8c: /tmp/tmpjybwnw8c.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tstd::bitset<26> bs;\n\tfor(int i=0;i<S.size();i++){\n\
    \t\tif(i==0){\n\t\t\tif((S[i]=='I') && (S[i+1]=='I'))\n\t\t\t\tbs.set(1);\n\t\t\
    }\n\t\telse{\n\t\t\tif((S[i]=='?') || (S[i]=='!'))\n\t\t\t\tbs.set(1);\n\t\t}\n\
    \t}\n\treturn bs.count();\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptj2q7x8a: /tmp/tmptj2q7x8a.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt = 0;\n    for(auto i : S){\n\
    \        if(i =='i' || i == 'I'){\n            cnt++;\n        }\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpatmgsln2: /tmp/tmpatmgsln2.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    \n        long result = 0;\n     \
    \   \n        for(long i = 0; i < S.size(); i++)\n        {\n            \n  \
    \          if(S[i] == 'I')\n            {\n                result++;\n       \
    \     }\n        }\n    \n        std::cout << result << std::endl;\n    \n  \
    \      return result;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6732sctx: /tmp/tmp6732sctx.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: '0

    1

    '
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    vector<string> S1;\n    // To get\
    \ each word in the given sentence.\n    copy(S.begin(), S.end(), back_inserter(S1));\n\
    \    // To get rid of spaces.\n    transform(S1.begin(), S1.end(), S1.begin(),\
    \ ::tolower);\n    long counter = 0;\n    // To find each boredom in the given\
    \ sentence.\n    for (int i = 0; i < S1.size(); i++) {\n        if (S1[i] == \"\
    i\") {\n            counter++;\n        }\n    }\n    return counter;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6o566lff.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6o566lff.cpp:12:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   12 |     vector<string> S1;\n      |     ^~~~~~\n/tmp/tmp6o566lff.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6o566lff.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6o566lff.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp6o566lff.cpp:12:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   12 |     vector<string>\
    \ S1;\n      |            ^~~~~~\n/tmp/tmp6o566lff.cpp:12:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6o566lff.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file in"
  stdout: ''
  timestamp: 1660094352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Write your code here\n  long cnt\
    \ = 0;\n  for(int i=0;i<S.size();i++) {\n    if(S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!') {\n      cnt++;\n    }\n  }\n  return cnt;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm7s0563q: /tmp/tmpm7s0563q.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    for (char &i\
    \ : S) {\n        i = tolower(i); // Ignore case\n        if (i == 'i') {\n  \
    \          boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfx6da6dl: /tmp/tmpfx6da6dl.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stack<std::string> s;\n    std::map<std::string,long>\
    \ m;\n    for(char c: S) {\n        if(c == '.' || c == '?' || c == '!') s.push(c);\n\
    \        else if(c == 'I') s.push(\"\");\n        else if(c == ')') s.pop();\n\
    \        else if(c == ']') s.pop();\n        else if(c == ']') s.pop();\n    \
    \    else if(c == ']') s.pop();\n        else if(c == ']') s.pop();\n        else\
    \ if(c == ']') s.pop();\n        else if(c == ']') s.pop();\n        else if(c\
    \ == '.' || c == ']') {\n            long boredoms = 0;\n            while(!s.empty())\
    \ {\n                if(s.top() == \"\") break;\n                boredoms += m[s.top()];\n\
    \                s.pop();\n            }\n            if(c == '.') return boredoms;\n\
    \            else m[s.top()] += 1;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi6x1cdnb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpi6x1cdnb.cpp:15:54: error: no matching function for call to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::push(char&)\u2019\n   15 |    \
    \     if(c == '.' || c == '?' || c == '!') s.push(c);\n      |               \
    \                                       ^\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpi6x1cdnb.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    bool inI = false;\n\
    \    for(auto word : S){\n        if(word == \"I\")\n            inI = true;\n\
    \        if(word == \".\" || word == \"?\" || word == \"!\")\n            count++;\n\
    \        if(inI && word == \"I\")\n            count--;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9evmittf.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp9evmittf.cpp:15:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(word == \"I\")\n      |     \
    \               ^~~\n/tmp/tmp9evmittf.cpp:17:20: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   17 |         if(word == \".\"\
    \ || word == \"?\" || word == \"!\")\n      |                    ^~~\n/tmp/tmp9evmittf.cpp:17:35:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   17 |         if(word == \".\" || word == \"?\" || word == \"!\")\n      |\
    \                                   ^~~\n/tmp/tmp9evmittf.cpp:17:50: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   17 | \
    \        if(word == \".\" || word == \"?\" || word == \"!\")\n      |        \
    \                                          ^~~\n/tmp/tmp9evmittf.cpp:19:27: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   19\
    \ |         if(inI && word == \"I\")\n      |                           ^~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int n = S.size();\n  int ans = 0;\n\
    \  for (int i = 0; i < n; i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n      ans += 1;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf5kq4l65: /tmp/tmpf5kq4l65.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    int lastChar =\
    \ -1;\n    int lastLetter = 0;\n    int foundI = -1;\n    for (auto c : S) {\n\
    \        if (isalpha(c)) {\n            lastLetter = c;\n        } else if (c\
    \ == 'I') {\n            foundI = lastLetter;\n        }\n        // else if last\
    \ letter is I, increment counter\n        else if (!isalpha(c) && isalpha(lastLetter))\
    \ {\n            if (lastChar == '!' || lastChar == '?' || lastChar == '.') {\n\
    \                ++count;\n            }\n            lastChar = lastLetter;\n\
    \        }\n    }\n    if (foundI != -1) {\n        ++count;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfxkod88f: /tmp/tmpfxkod88f.cpp:39: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long n = 0;\n    for(long i = 0; i\
    \ < S.size(); ++i) {\n        if(S[i] == 'i' || S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!') {\n            ++n;\n        }\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp39cu25_m: /tmp/tmp39cu25_m.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  for (int i = 0;\
    \ i < S.size(); i++) {\n    if (S[i] == 'I') {\n      boredoms += 1;\n    }\n\
    \  }\n  return (boredoms);\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9tneikwm: /tmp/tmp9tneikwm.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    bool flag=false;\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]=='I'&&S[i+1]!='.'){\n            flag=true;\n            break;\n\
    \        }\n    }\n    return flag?1:0;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9cehcxti: /tmp/tmp9cehcxti.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int n = S.length();\n    long ans\
    \ = 0;\n    for(int i=0;i<n;i++) {\n        if(S[i]==\".\" || S[i]==\"!\" || S[i]==\"\
    ?\")\n            ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7q5moe21.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp7q5moe21.cpp:15:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(S[i]==\".\" || S[i]==\"!\" ||\
    \ S[i]==\"?\")\n      |                  ^~~\n/tmp/tmp7q5moe21.cpp:15:31: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   15\
    \ |         if(S[i]==\".\" || S[i]==\"!\" || S[i]==\"?\")\n      |           \
    \                    ^~~\n/tmp/tmp7q5moe21.cpp:15:44: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   15 |         if(S[i]==\".\" ||\
    \ S[i]==\"!\" || S[i]==\"?\")\n      |                                       \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tint flag=0;\n\tstd::string str1=\"\"\
    ;\n\tfor(auto s: S){\n\t\tif(s !=\".\"&&s !=\"?\"&&s !=\"!\"){\n\t\t\tstr1=str1+s;\n\
    \t\t}\n\t}\n\tfor(auto s: str1){\n\t\tif(flag==0){\n\t\t\tif((s[0]==\"I\")&&(s[1]==\"\
    I\")&&(s[2]==\"I\"))\n\t\t\t\tflag=1;\n\t\t}\n\t\telse{\n\t\t\tif((s[0]==\"I\"\
    )&&(s[1]==\"I\")&&(s[2]==\"I\"))\n\t\t\t\tflag=2;\n\t\t}\n\t}\n\treturn flag;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7iynctw.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpc7iynctw.cpp:15:10: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |   if(s !=\".\"&&s !=\"?\"&&s !=\"!\"){\n\
    \      |          ^~~\n/tmp/tmpc7iynctw.cpp:15:19: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   15 |   if(s !=\".\"&&s !=\"?\"\
    &&s !=\"!\"){\n      |                   ^~~\n/tmp/tmpc7iynctw.cpp:15:28: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   15\
    \ |   if(s !=\".\"&&s !=\"?\"&&s !=\"!\"){\n      |                          \
    \  ^~~\n/tmp/tmpc7iynctw.cpp:21:11: error: invalid types \u2018char[int]\u2019\
    \ for array subscript\n   21 |    if((s[0]==\"I\")&&(s[1]==\"I\")&&(s[2]==\"I\"\
    ))\n      |           ^\n/tmp/tmpc7iynctw.cpp:21:24: error: invalid types \u2018\
    char[int]\u2019 for array subscript\n   21 |    if((s[0]==\"I\")&&(s[1]==\"I\"\
    )&&(s[2]==\"I\"))\n      |                        ^\n/tmp/tmpc7iynctw.cpp:21:37:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   21 |    if((s[0]==\"\
    I\")&&(s[1]==\"I\")&&(s[2]==\"I\"))\n      |                                 \
    \    ^\n/tmp/tmpc7iynctw.cpp:25:11: error: invalid types \u2018char[int]\u2019\
    \ for array subscript\n   25 |    if((s[0]==\"I\")&&(s[1]==\"I\")&&(s[2]==\"I\"\
    ))\n      |           ^\n/tmp/tmpc7iynctw.cpp:25:24: error: invalid types \u2018\
    char[int]\u2019 for array subscript\n   25 |    if((s[0]==\"I\")&&(s[1]==\"I\"\
    )&&(s[2]==\"I\"))\n      |                        ^\n/tmp/tmpc7iynctw.cpp:25:37:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   25 |    if((s[0]==\"\
    I\")&&(s[1]==\"I\")&&(s[2]==\"I\"))\n      |                                 \
    \    ^\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int counter = 0;\n    // your code\
    \ goes here\n    for (int i = 0; i < S.size(); i++)\n    {\n        if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!')\n        {\n            counter++;\n    \
    \    }\n    }\n    return (counter);\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoiduru7p: /tmp/tmpoiduru7p.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt = 0;\n    char c = S.front();\n\
    \    for(int i = 0; i < (S.size()-1); i++) {\n        c = S[i];\n        for(int\
    \ j = 0; j < (S.size()-i-1); j++) {\n            c = S[j];\n        }\n      \
    \  if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            cnt++;\n     \
    \   }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcnld8lqc: /tmp/tmpcnld8lqc.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n// Your code here\n//long count = 0;\n\
    //assert(S.size() > 0 && S.size() <= 4);\n//std::map<std::string,int> boredom;\n\
    //std::string boredom_sentence = \"I\";\n//std::string boredom_word = boredom_sentence.substr(0,1);\n\
    //std::string boredom_sentence2 = boredom_sentence.substr(1,4);\n//bool flag =\
    \ false;\n//for(int i = 0; i < S.size(); i++)\n//{\n//    if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!')\n//    {\n//        if(flag == true)\n//        {\n//\
    \            boredom[boredom_sentence] += 1;\n//            boredom[boredom_sentence2]\
    \ = 1;\n//        }\n//        flag = true;\n//        boredom_word = S[i];\n\
    //        boredom_sentence = boredom_sentence.substr(1,4);\n//        boredom_sentence2\
    \ = boredom_sentence2.substr(1,4);\n//    }\n//    else\n//    {\n//        boredom[boredom_sentence]\
    \ += 1;\n//        boredom[boredom_word] = 1;\n//        flag = false;\n//   \
    \     boredom_word = S[i];\n//        boredom_sentence = boredom_sentence.substr(1,4);\n\
    //        boredom_sentence2 = boredom_sentence2.substr(1,4);\n//    }\n//}\n//return\
    \ boredom[boredom_sentence];\n//return count;\n//return -1;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcym0drmn: /tmp/tmpcym0drmn.cpp:50: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int count = 0;\n  int i = 0;\n  int\
    \ pos = 0;\n  while (i < S.length()) {\n    if (S[i] == '.') {\n      pos = i;\n\
    \    }\n    if (S[i] == '?' || S[i] == '!') {\n      int j = i;\n      i += 1;\n\
    \      while (i < S.length() && S[i] != '?' && S[i] != '!') {\n        i += 1;\n\
    \      }\n      if (j == pos) {\n        count++;\n      }\n    }\n    i += 1;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5wwicy8x: /tmp/tmp5wwicy8x.cpp:37: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your implementation here\n\
    \    return S.find(\"I\")!=std::string::npos;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpic5aaw4n: /tmp/tmpic5aaw4n.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stack<std::string> st;\n    std::stack<std::string>::iterator\
    \ it;\n    long ans = 0;\n    for (auto it = S.cbegin(); it != S.cend(); ++it)\
    \ {\n        if (it != S.cbegin() && it != S.cend()) {\n            if (*it ==\
    \ '.' || *it == '?' || *it == '!') {\n                st.push(*it);\n        \
    \    }\n        }\n        else if (*it == '.' || *it == '?' || *it == '!') {\n\
    \            st.push(*it);\n        }\n        if (st.empty() || st.top() == \"\
    I\") {\n            ans++;\n            st.pop();\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40ti8wm6.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp40ti8wm6.cpp:13:30: error: \u2018iterator\u2019 is not a member of\
    \ \u2018std::stack<std::__cxx11::basic_string<char> >\u2019\n   13 |     std::stack<std::string>::iterator\
    \ it;\n      |                              ^~~~~~~~\n/tmp/tmp40ti8wm6.cpp:18:28:\
    \ error: no matching function for call to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::push(const char&)\u2019\n   18 |                 st.push(*it);\n      | \
    \                           ^\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp40ti8wm6.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018const char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  233 |       push(const value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_stack.h:238:7: note: candidate: \u2018void std::stack<_Tp,\
    \ _Sequence>::push(std::stack<_Tp, _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Sequence = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n  238 |       push(value_typ"
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int boredoms = 0, i = 0;\n  while(i\
    \ < S.size()) {\n    // If S[i] is '.', '?' or '!', increment boredoms\n    if(S[i]\
    \ == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      boredoms++;\n    }\n  \
    \  // If S[i] is 'I', check if there is a boredom before this letter\n    else\
    \ if(S[i] == \"I\") {\n      if(boredoms == 0) {\n        return boredoms;\n \
    \     } else {\n        boredoms--;\n      }\n    }\n    i++;\n  }\n  return 0;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9j1jtsuw.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp9j1jtsuw.cpp:15:16: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |     if(S[i] == \".\" || S[i] == \"?\" ||\
    \ S[i] == \"!\") {\n      |                ^~~\n/tmp/tmp9j1jtsuw.cpp:15:31: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   15\
    \ |     if(S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      |       \
    \                        ^~~\n/tmp/tmp9j1jtsuw.cpp:15:46: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   15 |     if(S[i] ==\
    \ \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      |                        \
    \                      ^~~\n/tmp/tmp9j1jtsuw.cpp:19:21: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   19 |     else if(S[i]\
    \ == \"I\") {\n      |                     ^~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete this function\n    long\
    \ boredoms = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] ==\
    \ 'I')\n            boredoms += 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn55h6vwk: /tmp/tmpn55h6vwk.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int l=S.size();\n    long cnt=0;\n\
    \    for(int i=0;i<l;i++)\n    {\n        if (S[i]=='I')\n        {\n        \
    \    cnt++;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwnq2s6hf: /tmp/tmpwnq2s6hf.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long len = 0;\n    for(long i = 0;\
    \ i < S.size(); i++) {\n        if((S[i] == '.') || (S[i] == '?') || (S[i] ==\
    \ '!')) {\n            len++;\n        }\n    }\n    return (len >= 3)?1:0;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsdn6dohu: /tmp/tmpsdn6dohu.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    assert(S.size() > 0);\n    long ans\
    \ = 0;\n    for (auto word : S) {\n        if (word == 'I')\n            ans++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2mxfw3tl: /tmp/tmp2mxfw3tl.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    vector<string> words;\n    string\
    \ line;\n    size_t pos = 0;\n    size_t boredom_count = 0;\n    while (pos <\
    \ S.size()) {\n        pos = S.find_first_of(\".!?\", pos);\n        string word\
    \ = S.substr(pos, S.size() - pos);\n        words.push_back(word);\n        pos\
    \ += word.length();\n    }\n    sort(words.begin(), words.end());\n    long num_boredoms\
    \ = 0;\n    for (size_t i = 0; i < words.size(); ++i) {\n        if (words[i][0]\
    \ == 'I') {\n            num_boredoms += 1;\n        }\n    }\n    return num_boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsbgizpp4.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpsbgizpp4.cpp:12:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   12 |     vector<string> words;\n      |     ^~~~~~\n/tmp/tmpsbgizpp4.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsbgizpp4.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsbgizpp4.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpsbgizpp4.cpp:12:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   12 |     vector<string>\
    \ words;\n      |            ^~~~~~\n/tmp/tmpsbgizpp4.cpp:12:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsbgizpp4.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn f"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom_count = 0;\n    for (auto\
    \ &i : S) {\n        if (i == 'I') {\n            boredom_count++;\n        }\n\
    \    }\n    return boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9i5znu69: /tmp/tmp9i5znu69.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms=0;\n    std::string\
    \ boredom_word=\"I\";\n    std::string delimiter=\".\";\n    std::string delimiter2=\"\
    ?\";\n    std::string delimiter3=\"!\";\n    std::string delimiter4=\"?!\";\n\
    \    for(int i=0;i<S.size();++i)\n    {\n        if(S[i]==delimiter)\n       \
    \ {\n            int j=i;\n            while(S[j]!=delimiter)\n            {\n\
    \                if(S[j]==delimiter2)\n                {\n                   \
    \ j++;\n                    while(S[j]!=delimiter)\n                    {\n  \
    \                      if(S[j]==delimiter3)\n                        {\n     \
    \                       j++;\n                            while(S[j]!=delimiter)\n\
    \                            {\n                                if(S[j]==delimiter4)\n\
    \                                {\n                                    j++;\n\
    \                                    while(S[j]!=delimiter)\n                \
    \                    {\n                                        boredom_word+=S[j];\n\
    \                                        j++;\n                              \
    \      }\n                                }\n                                else\n\
    \                                {\n                                    boredom_word+=S[j];\n\
    \                                    j++;\n                                }\n\
    \                            }\n                        }\n                  \
    \      else\n                        {\n                            boredom_word+=S[j];\n\
    \                            j++;\n                        }\n               \
    \     }\n                }\n                else\n                {\n        \
    \            boredom_word+=S[j];\n                    j++;\n                }\n\
    \            }\n            boredom_word+=delimiter;\n        }\n        else\n\
    \        {\n            boredom_word+=S[i];\n        }\n    }\n    for(int i=0;i<S.size();++i)\n\
    \    {\n        if(boredom_word[i]!=\"I\")\n        {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykogycw2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpykogycw2.cpp:20:16: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   20 |         if(S[i]==delimiter)\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpykogycw2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpykogycw2.cpp:20:18:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   20 |         if(S[i]==delimiter)\n      |       \
    \           ^~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpykogycw2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpykogycw2.cpp:20:18: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Declare a variable that will hold\
    \ the number of boredoms in the string\n    long boredoms = 0;\n    // Initialize\
    \ a bool that indicates if the first letter of the string\n    // is \"I\", and\
    \ set it to false\n    bool firstLetter = true;\n    // Iterate through the string\
    \ and add 1 to boredoms every time the string starts with \"I\"\n    for (char\
    \ c: S) {\n        if (c != '.' && c != '?' && c != '!' && firstLetter)\n    \
    \        boredoms++;\n        firstLetter = false;\n    }\n    // Return the boredoms\
    \ variable\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppm33dk11: /tmp/tmppm33dk11.cpp:28: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int c=0, b=0;\n    for(int i=0; i<S.size();\
    \ i++){\n        if(S[i] == '.'){\n            c++;\n            continue;\n \
    \       }\n        else if(S[i] == '?' || S[i] == '!'){\n            c++;\n  \
    \          continue;\n        }\n        else if(S[i] == \" \" && c>0){\n    \
    \        b++;\n            c=0;\n            continue;\n        }\n        else\
    \ if(S[i] == \" \" && (c==0||b==0)){\n            continue;\n        }\n     \
    \   else if(S[i] == 'I' && (c==0 || b==0)){\n            continue;\n        }\n\
    \        else if(S[i] == 'I' && c>0){\n            b++;\n            c=0;\n  \
    \          continue;\n        }\n        else if(S[i] == 'I' && c==0 && b>0){\n\
    \            c++;\n            b=0;\n            continue;\n        }\n      \
    \  else if(S[i] == 'I' && c>0 && b>0){\n            b++;\n            c=0;\n \
    \           continue;\n        }\n        else if(S[i] == 'I' && c==0 && b>0){\n\
    \            c++;\n            b=0;\n            continue;\n        }\n      \
    \  else if(S[i] == 'I' && c>0 && b==0 && c>0){\n            continue;\n      \
    \  }\n        else if(S[i] == 'I' && c>0 && b==0){\n            c++;\n       \
    \     b=0;\n            continue;\n        }\n        else if(S[i] == 'I' && c>0\
    \ && b>0){\n            b++;\n            c=0;\n            continue;\n      \
    \  }\n        else if(S[i] == 'I' && c==0){\n            b++;\n            c=0;\n\
    \            continue;\n        }\n        else if(S[i] == 'I'){\n           \
    \ c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n    \
    \        c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '.'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '?'){\n\
    \            c++;\n            continue;\n        }\n        else if(S[i] == '!'){\n\
    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf71berlo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpf71berlo.cpp:22:25: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   22 |         else if(S[i] == \" \" && c>0){\n\
    \      |                         ^~~\n/tmp/tmpf71berlo.cpp:27:25: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   27 |     \
    \    else if(S[i] == \" \" && (c==0||b==0)){\n      |                        \
    \ ^~~\n/tmp/tmpf71berlo.cpp:122:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  122 | int main() {\n      |            ^\n\
    /tmp/tmpf71berlo.cpp:130:1: error: expected \u2018}\u2019 at end of input\n  130\
    \ | }\n      | ^\n/tmp/tmpf71berlo.cpp:13:34: note: to match this \u2018{\u2019\
    \n   13 |     for(int i=0; i<S.size(); i++){\n      |                        \
    \          ^\n/tmp/tmpf71berlo.cpp:130:1: error: expected \u2018}\u2019 at end\
    \ of input\n  130 | }\n      | ^\n/tmp/tmpf71berlo.cpp:11:30: note: to match this\
    \ \u2018{\u2019\n   11 | long is_bored(std::string S) {\n      |             \
    \                 ^\n/tmp/tmpf71berlo.cpp:130:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  130 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::vector<std::string> split_S =\
    \ split(S);\n    std::map<std::string, int> boredomCountMap;\n    std::string\
    \ boredom;\n    for (std::string &str: split_S) {\n        if (str == \"I\"){\n\
    \            boredom = str;\n        } else if (str.find(\"I\") != std::string::npos){\n\
    \            boredomCountMap[boredom] += 1;\n            boredom = \"\";\n   \
    \     }\n    }\n    return boredomCountMap.at(boredom);\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjllrod62.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpjllrod62.cpp:12:40: error: \u2018split\u2019 was not declared in this\
    \ scope; did you mean \u2018split_S\u2019?\n   12 |     std::vector<std::string>\
    \ split_S = split(S);\n      |                                        ^~~~~\n\
    \      |                                        split_S\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    for (int i\
    \ = 0; i < S.size(); i++){\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!')\n            boredoms++;\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9nrchsqv: /tmp/tmp9nrchsqv.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int count = 0;\n  int flag = 0;\n  for\
    \ (int i = 0; i <= S.size() - 1; i++) {\n    if (S[i] == '.') {\n      if (S[i\
    \ - 1] == '.') {\n        if (S[i + 1] == '?') {\n          count++;\n       \
    \ }\n        if (S[i + 1] == '!') {\n          count++;\n        }\n      }\n\
    \      if (S[i - 1] == '?') {\n        flag = 1;\n      }\n      if (S[i - 1]\
    \ == '!') {\n        flag = 0;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2n8sgm8k: /tmp/tmp2n8sgm8k.cpp:38: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Declare and initialize the result\
    \ variable.\n  long boredom = 0;\n  // Iterate through all the words in the string.\n\
    \  for (int i = 0; i < S.size(); i++) {\n    // If the word starts with \"I\"\
    , increment the boredom variable.\n    if (S[i] == 'I') {\n      boredom++;\n\
    \      // If the word starts with \"!\", decrement the boredom variable.\n   \
    \ } else if (S[i] == '!') {\n      boredom--;\n      // If the word starts with\
    \ \".\", increment the boredom variable.\n    } else if (S[i] == '.') {\n    \
    \  boredom++;\n    }\n  }\n  return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjiut3rqk: /tmp/tmpjiut3rqk.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int cnt = 0;\n  for (auto s : S) \n\
    \      if (s == \"I\")\n          cnt++;\n  return cnt;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfw_qpil1.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfw_qpil1.cpp:14:16: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |       if (s == \"I\")\n      |         \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  std::map<std::string,bool> m;\n  //\
    \ Loop through all the words\n  for(int i=0;i<S.size();i++) {\n    // If current\
    \ word is a boredom word\n    if(S[i]=='I') {\n      // If current word is present\
    \ for the first time\n      if(!m[S[i]]) {\n        // Increment the count for\
    \ the first time\n        m[S[i]] = true;\n      }\n    }\n  }\n  // Return count\n\
    \  return m.size();\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuipmaxcc.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpuipmaxcc.cpp:18:12: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, bool>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018\
    char\u2019})\n   18 |       if(!m[S[i]]) {\n      |            ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpuipmaxcc.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = bool; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> >;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = bool; std::map<_Key, _Tp,\
    \ _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n  490\
    \ |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = bool; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ bool> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = bool; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator"
  stdout: ''
  timestamp: 1660094353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete the function below.\n\
    \    long count = 0;\n    std::string word;\n    std::string sentence_1;\n   \
    \ std::string sentence_2;\n    for (int i = 0; i < S.length(); i++) {\n      \
    \  sentence_1 = S;\n        sentence_2 = sentence_1.substr(0, i);\n        word\
    \ = sentence_2.substr(0, sentence_2.find(\".\"));\n        if (word == \"I\" &&\
    \ sentence_2.find(\"!\") != std::string::npos) {\n            count++;\n     \
    \   } else if (word != \"I\" && sentence_2.find(\"?\") != std::string::npos) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpe83lpwm2: /tmp/tmpe83lpwm2.cpp:33: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    vector<char> boredom;\n    boredom.push_back('!');\n\
    \    boredom.push_back('.');\n    boredom.push_back('?');\n    int boredom_num\
    \ = 0;\n    int start = 0;\n    for (int i = 0; i < S.length(); i++) {\n     \
    \   if (boredom.find(S[i]) == boredom.end()) continue;\n        start = i;\n \
    \       boredom_num++;\n        i = boredom.find(S[i], start);\n        boredom_num++;\n\
    \        i = boredom.find(S[i], start);\n        boredom_num++;\n        i = boredom.find(S[i],\
    \ start);\n        boredom_num++;\n    }\n    return boredom_num;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2lzn4ra.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpz2lzn4ra.cpp:12:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   12 |     vector<char> boredom;\n      |     ^~~~~~\n/tmp/tmpz2lzn4ra.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2lzn4ra.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2lzn4ra.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpz2lzn4ra.cpp:12:12:\
    \ error: expected primary-expression before \u2018char\u2019\n   12 |     vector<char>\
    \ boredom;\n      |            ^~~~\n/tmp/tmpz2lzn4ra.cpp:13:5: error: \u2018\
    boredom\u2019 was not declared in this scope\n   13 |     boredom.push_back('!');\n\
    \      |     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660094353
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tint i = 0, j = 0, k = 0, m = S.size(),\
    \ n;\n\tlong count = 0;\n\twhile (i < m) {\n\t\tn = S.find(\" \", i);\n\t\tif\
    \ (n == -1) n = m;\n\t\tif (S[i] == '.') count++;\n\t\tif (S[i] == '?' || S[i]\
    \ == '!') {\n\t\t\tcount--;\n\t\t\tif (S[i] == '!') k++;\n\t\t}\n\t\tif (S[i]\
    \ == 'I' && k < n) count++;\n\t\ti = n;\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string word;\n    int boredom_cnt\
    \ = 0;\n    for (int i = 0; i != S.length(); i++) {\n        if (S[i] == '.')\
    \ {\n            word = S.substr(0, i);\n            if (word == \"I\")\n    \
    \            boredom_cnt++;\n        }\n    }\n    return (boredom_cnt);\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzemzmqpj: /tmp/tmpzemzmqpj.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6xkr66ph: /tmp/tmp6xkr66ph.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int flag = 0;\n    std::string temp\
    \ = \"\";\n    S.find(temp);\n    temp = \".\";\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == temp) flag++;\n        else temp = \".\";\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_fdkv1m.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp2_fdkv1m.cpp:17:18: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   17 |         if (S[i] == temp) flag++;\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2_fdkv1m.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp2_fdkv1m.cpp:17:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   17 |         if (S[i] == temp) flag++;\n      | \
    \                    ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2_fdkv1m.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp2_fdkv1m.cpp:17:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {ak"
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string w;\n    long ans=0;\n\
    \    for(auto x: S){\n        if(x=='I'){\n            ans=1;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqyhv45bl: /tmp/tmpqyhv45bl.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for (int i = 0;\
    \ i < S.size(); i++) {\n        if (S[i] == '.') {\n            if (S[i + 1] ==\
    \ '.') {\n                if (S[i + 2] == '?') {\n                    if (S[i\
    \ + 3] == '!')\n                        count += 1;\n                }\n     \
    \       }\n        }\n    }\n    return (count);\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpta0y55wv: /tmp/tmpta0y55wv.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here.\n    return\
    \ boredom(S);\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_9yo3k3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp1_9yo3k3.cpp:13:12: error: \u2018boredom\u2019 was not declared in\
    \ this scope\n   13 |     return boredom(S);\n      |            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == '.') {\n            if (S[i + 1]\
    \ == '.') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n        } else if (S[i] == '?') {\n            count++;\n    \
    \    } else if (S[i] == '!') {\n            count--;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc9g4nfe4: /tmp/tmpc9g4nfe4.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    assert(S.size() > 0);\n    long boredoms\
    \ = 0;\n    for (auto itr = S.begin(); itr != S.end(); ++itr) {\n        bool\
    \ is_bored = true;\n        if (*itr == '.') {\n            is_bored = false;\n\
    \        } else if (*itr == '?') {\n            is_bored = false;\n        } else\
    \ if (*itr == '!') {\n            is_bored = false;\n        }\n        if (is_bored)\
    \ {\n            ++boredoms;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpote30q3x: /tmp/tmpote30q3x.cpp:31: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    bool found = false;\n    int count\
    \ = 0; //to count the number of boredoms\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == '.') {\n            if (S[i + 1] == '.') {\n   \
    \             if (S[i + 2] == '.') {\n                    if (S[i + 3] == 'I')\
    \ {\n                        found = true;\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpexx2bkyb: /tmp/tmpexx2bkyb.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string boredom = \"\";\n    std::vector<std::string>\
    \ V;\n    for (std::string word; std::getline(std::cin, word); ) {\n        std::string\
    \ w_lower = word;\n        w_lower.tolower();\n        V.push_back(w_lower);\n\
    \    }\n    // Return 0 if the given string contains no boredoms.\n    if (V.size()\
    \ == 0) return 0;\n    // Return 1 if the given string contains only one boredom\
    \ (the\n    // boredom is a single \"I\").\n    if (V.size() == 1) return 1;\n\
    \    bool flag = false;\n    for (std::string word; std::getline(std::cin, word);\
    \ ) {\n        std::string w_lower = word;\n        w_lower.tolower();\n     \
    \   if (std::find(V.begin(), V.end(), w_lower) != V.end())\n            flag =\
    \ true;\n    }\n    if (flag == false) return 0;\n    else return 1;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyep9ahyp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpyep9ahyp.cpp:16:17: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018tolower\u2019\
    \n   16 |         w_lower.tolower();\n      |                 ^~~~~~~\n/tmp/tmpyep9ahyp.cpp:27:17:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   27 |         w_lower.tolower();\n\
    \      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Initialize your data structure\
    \ here.\n    long bored = 0;\n    // Do not print or modify any global variables\
    \ here\n    if (S != \"\" && S[0] != '.' && S[1] != '?' && S[2] != '!')\n    \
    \    for (auto &c : S)\n            if (c == 'I')\n                bored++;\n\
    \    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8_jbnwft: /tmp/tmp8_jbnwft.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    for (int i = 0;\
    \ i < S.size(); i++)\n        if (S[i] == '.' || S[i] == '!' || S[i] == '?')\n\
    \            ans++;\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplm74ll9j: /tmp/tmplm74ll9j.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long long answer = 0;\n  for (int i\
    \ = 0; i < S.size(); i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n      answer++;\n    }\n  }\n  \n  return answer;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt8kn85tn: /tmp/tmpt8kn85tn.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for (auto c\
    \ : S) {\n        if (c == 'I')\n            ++boredoms;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp57fpsj72: /tmp/tmp57fpsj72.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom_count = 0, word_count\
    \ = 0;\n    std::string boredom_flag = \"I\";\n    std::string sentence;\n   \
    \ for (size_t i = 1; i < S.length(); i++) {\n        sentence = S;\n        boredom_count\
    \ = word_count;\n        // We will break this sentence into words using space\
    \ as delimiter\n        std::string words[3] = {};\n        std::string delimiter\
    \ = \" \";\n        size_t pos = 0;\n        while (pos < sentence.length()) {\n\
    \            pos = 0;\n            std::string sub = sentence.substr(0, pos +\
    \ delimiter.length());\n            pos = sub.find_first_of(delimiter);\n    \
    \        if (pos != std::string::npos) {\n                std::string word = sub;\n\
    \                words[word_count] = word;\n                word_count++;\n  \
    \              sentence = sentence.substr(pos + delimiter.length());\n       \
    \     }\n        }\n        // Checking the boredom\n        if (boredom_flag.compare(words[0]))\
    \ {\n            boredom_count++;\n        }\n        word_count = boredom_count;\n\
    \    }\n    return boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjpenxhu0: /tmp/tmpjpenxhu0.cpp:43: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Add your code here\n    long ans\
    \ = 0;\n    for (auto &i : S) {\n        if (i == \"I\") {\n            ans +=\
    \ 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpme569ucf.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpme569ucf.cpp:15:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (i == \"I\") {\n      |     \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660094355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Complete this function\n  std::map<std::string,long>\
    \ temp;\n  for (size_t i = 0;i < S.length();++i)\n  {\n      \n    \n    if (temp[S[i]]\
    \ == 0)\n    {\n        temp[S[i]] = 1;\n    }\n    else\n    {\n        temp[S[i]]++;\n\
    \    }\n  }\n  return temp[\"I\"];\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv33zhdz6.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpv33zhdz6.cpp:18:13: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, long int>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   18 |     if (temp[S[i]] == 0)\n      |         \
    \    ^\nIn file included from /usr/include/c++/9/map:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n                 from\
    \ /tmp/tmpv33zhdz6.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7: note: candidate:\
    \ \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp,\
    \ _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string"
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int n = S.length();\n  long boredom\
    \ = 0;\n  for (int i = 0; i < n; i++) {\n    char c = S[i];\n    if (c == '.'\
    \ || c == '!' || c == '?') {\n      boredom++;\n    }\n  }\n  return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkf56ndmx: /tmp/tmpkf56ndmx.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0, flag = false, len = 0;\n    len = S.length();\n    for (int i = 0;\
    \ i < len; i++){\n        if (S[i] == '.'){\n            flag = true;\n      \
    \  }\n        else if (S[i] == '?' || S[i] == '!'){\n            flag = false;\n\
    \        }\n        if (flag){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc5idmgq7: /tmp/tmpc5idmgq7.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            count = count + 1;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1zzi1e5t: /tmp/tmp1zzi1e5t.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    bool flag =\
    \ false;\n    for (size_t i = 0; i < S.size(); i++) {\n        // Check if the\
    \ word starts with 'I'\n        if (S[i] == \"I\" && flag == false) {\n      \
    \      boredom++;\n            flag = true;\n        }\n        // Check if it\
    \ ends with '.', '?' or '!'\n        else if (S[i] == \".\" || S[i] == \"?\" ||\
    \ S[i] == \"!\") {\n            flag = false;\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkg7ydcje.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkg7ydcje.cpp:16:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (S[i] == \"I\" && flag == false)\
    \ {\n      |                     ^~~\n/tmp/tmpkg7ydcje.cpp:21:26: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   21 |     \
    \    else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      |    \
    \                      ^~~\n/tmp/tmpkg7ydcje.cpp:21:41: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   21 |         else\
    \ if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      |            \
    \                             ^~~\n/tmp/tmpkg7ydcje.cpp:21:56: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   21 |     \
    \    else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n      |    \
    \                                                    ^~~\n"
  stdout: ''
  timestamp: 1660094355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    assert(S.size()\
    \ >= 1);\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == '.') {\n\
    \            if (i + 1 < S.size()) {\n                if (S[i + 1] == '!' || S[i\
    \ + 1] == '?') {\n                    i += 2;\n                    count++;\n\
    \                }\n            }\n        }\n        if (S[i] == '?') {\n   \
    \         if (i + 1 < S.size()) {\n                if (S[i + 1] == '!' || S[i\
    \ + 1] == '?') {\n                    i += 2;\n                    count++;\n\
    \                }\n            }\n        }\n        if (S[i] == '!') {\n   \
    \         if (i + 1 < S.size()) {\n                if (S[i + 1] == '!' || S[i\
    \ + 1] == '?') {\n                    i += 2;\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpen59gt0r: /tmp/tmpen59gt0r.cpp:46: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int i=0;\n    long count=0;\n    for(int\
    \ i=0;i<S.size();i++)\n    {\n        if(S[i]=='I')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9i7kj6ex: /tmp/tmp9i7kj6ex.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  long boredom_idx\
    \ = 0;\n  for (int i = 0; i < S.length(); i++) {\n    if (S.at(i) == 'I') {\n\
    \      boredom_idx = i;\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjb40ebjp: /tmp/tmpjb40ebjp.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    std::map<std::string,\
    \ long> count;\n    size_t found = S.find('I', 0);\n    while (found != std::string::npos)\
    \ {\n        if (found > 0 && S[found - 1] != '.')\n            count[\".\"] ++;\n\
    \        if (found > 0 && S[found - 1] != '?')\n            count[\"?\"] ++;\n\
    \        if (found > 0 && S[found - 1] != '!')\n            count[\"!\"] ++;\n\
    \        found = S.find('I', found + 1);\n    }\n    std::map<std::string, long>::iterator\
    \ it = count.begin();\n    for( ; it != count.end(); ++it) {\n        if (it->second\
    \ == 0) return 0;\n    }\n    return 1;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjc3fg2wv: /tmp/tmpjc3fg2wv.cpp:32: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long n = 0;\n    for (char c : S)\
    \ {\n        if (c == '.') {\n            n++;\n        } else if (c == '?') {\n\
    \            n++;\n        } else if (c == '!') {\n            n++;\n        }\n\
    \    }\n    return n;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc6x2sxs4: /tmp/tmpc6x2sxs4.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if (S[0] == 'I') {\n        return\
    \ 0;\n    }\n    int cnt = 0;\n    for (size_t i = 0; i < S.length(); i++) {\n\
    \        char c = S[i];\n        if (c == '.') {\n            break;\n       \
    \ }\n        if (c == '?') {\n            break;\n        }\n        if (c ==\
    \ '!') {\n            break;\n        }\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprf55kkzj: /tmp/tmprf55kkzj.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n   long count = 0;\n   for(size_t i =\
    \ 0; i < S.size(); i++) {\n      if(S[i] == '.') {\n         if(S[i-1] == '.')\
    \ {\n            count++;\n         }\n      } else if(S[i] == '?') {\n      \
    \   if(S[i-1] == '.') {\n            count++;\n         }\n      } else if(S[i]\
    \ == '!') {\n         if(S[i-1] == '.') {\n            count++;\n         }\n\
    \      } else {\n         if(S[i] == 'I' && S[i-1] == 'I') {\n            count++;\n\
    \         }\n      }\n   }\n   return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprvgu86aj: /tmp/tmprvgu86aj.cpp:38: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int bored = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            bored++;\n        }\n    }\n    return bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpl8ex7l0m: /tmp/tmpl8ex7l0m.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long bored = 0;\n    for(int i = 0;\
    \ i < S.size(); ++i) {\n        if(S[i] == 'I' && S[i+1] == '.' && S[i+2] == '!')\
    \ {\n            bored += 1;\n        }\n    }\n    return bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsmxqwp0v: /tmp/tmpsmxqwp0v.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Your code here\n  long n = 0, i,\
    \ j, k, l, j1, j2;\n  // k = 0, l = S.length() - 1;\n  j = i = 0;\n  while (i\
    \ < S.length()) {\n    // j = 0, i = 1\n    if (S[i] == '.') {\n      if (S[j]\
    \ != '?' && S[j] != '!') {\n        // j = 1\n        if (S[j] == '.') {\n   \
    \       j++;\n        }\n        j++;\n      }\n    }\n    j++;\n    i--;\n  }\n\
    \  // return n;\n  return j - i;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1j7i3pl2: /tmp/tmp1j7i3pl2.cpp:35: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for (int i=0;i<S.size();i++)\
    \ {\n        if (S[i] == 'i')\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbetppsee: /tmp/tmpbetppsee.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt = 0;\n    char c = S[0];\n\
    \    for (int i = 1; i < S.size(); i++) {\n        c = S[i];\n        if (c ==\
    \ '.' || c == '?' || c == '!') {\n            cnt++;\n        } else {\n     \
    \       cnt = 0;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5iczys3t: /tmp/tmp5iczys3t.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int bored = 0, i = 0;\n    while(i\
    \ < S.size()) {\n        if(S[i] == '.') {\n            bored += 1;\n        }\n\
    \        if(S[i] == '?' || S[i] == '!') {\n            bored += 1;\n        }\n\
    \        i += 1;\n    }\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvg6ifbkk: /tmp/tmpvg6ifbkk.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    return\
    \ S.find(\"I\") == 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmsljzo1b: /tmp/tmpmsljzo1b.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::map<char,long> m;\n    long ans\
    \ = 0;\n    \n    std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n\
    \    \n    for (int i = 0; i != S.size(); ++i) {\n        if (S[i] == 'i') {\n\
    \            ans += 1;\n        }\n        m[S[i]] += 1;\n    }\n    \n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzsiggkv0: /tmp/tmpzsiggkv0.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Solution goes here\n  return 0;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp60fjjnot: /tmp/tmp60fjjnot.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Complete this function\n    long\
    \ num_boredoms = 0;\n    char boredoms[100] = {'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I'};\n    for (int i = 0; i < S.length();\
    \ i++) {\n        char c = S[i];\n        if (c == \".\" || c == \"?\" || c ==\
    \ \"!\") {\n            if (boredoms[num_boredoms] == 'I') {\n               \
    \ boredoms[num_boredoms] = '\\0';\n                num_boredoms++;\n         \
    \   }\n        }\n    }\n    if (num_boredoms == 0) {\n        long num = 0;\n\
    \        for (int i = 0; i < S.length(); i++) {\n            char c = S[i];\n\
    \            if (c == '.' || c == '?' || c == '!') {\n                if (num\
    \ == 0)\n                    num++;\n            }\n        }\n        return\
    \ num;\n    }\n    return num_boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpirrqrcrm.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpirrqrcrm.cpp:17:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (c == \".\" || c == \"?\" ||\
    \ c == \"!\") {\n      |                  ^~~\n/tmp/tmpirrqrcrm.cpp:17:30: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   17\
    \ |         if (c == \".\" || c == \"?\" || c == \"!\") {\n      |           \
    \                   ^~~\n/tmp/tmpirrqrcrm.cpp:17:42: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   17 |         if (c == \".\" ||\
    \ c == \"?\" || c == \"!\") {\n      |                                       \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++){\n        if(S[i] == \"I\"){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9m00jbr.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpf9m00jbr.cpp:14:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |         if(S[i] == \"I\"){\n      |    \
    \                ^~~\n"
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    for (char &c: S)\
    \ {\n        if (c != '.' && c != '?' && c != '!') {\n            assert(c ==\
    \ 'I');\n            ++ans;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2w1ychr9: /tmp/tmp2w1ychr9.cpp:15: long int is_bored(std::string): Assertion
    `c == ''I'''' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt=0;\n    for (int i=0; i<S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            cnt++;\n        }\n    }\n \
    \   return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplntr4fj3: /tmp/tmplntr4fj3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int i = 0, j = 0;\n  int ans = -1;\n\
    \  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == '.') {\n      j++;\n\
    \    } else if (S[i] == '?' || S[i] == '!') {\n      j--;\n    }\n  }\n  if (S[i]\
    \ == '.') {\n    ans = j;\n  }\n  assert(ans >= 0);\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7x_4tuhi: /tmp/tmp7x_4tuhi.cpp:24: long int is_bored(std::string): Assertion
    `ans >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::vector<std::pair<int,int>> res;\n\
    \    std::string boredom = \"I\";\n    int boredom_cnt=0;\n    for (int i = 0;\
    \ i <S.length(); i++) {\n        if(S[i] == boredom){\n            boredom_cnt++;\n\
    \        }\n    }\n    if(boredom_cnt > 0){\n        res.push_back({boredom_cnt,1});\n\
    \    }\n    return res.size();\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4x94tvbo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp4x94tvbo.cpp:16:17: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   16 |         if(S[i] == boredom){\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4x94tvbo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4x94tvbo.cpp:16:20:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   16 |         if(S[i] == boredom){\n      |      \
    \              ^~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4x94tvbo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4x94tvbo.cpp:16:20: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018cha"
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // TODO: Write your code here\n  \
    \  return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp06e06dd2: /tmp/tmp06e06dd2.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long bored = 0;\n    long word_count\
    \ = 0;\n    for(auto i : S){\n        if(i == 'I')\n            bored++;\n   \
    \     if(i == '.')\n            word_count++;\n        if(i == '!' || i == '?'\
    \ || i == ' ')\n            word_count--;\n    }\n    return bored+word_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y8tt6e3: /tmp/tmp3y8tt6e3.cpp:26: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for (char &c:\
    \ S) {\n        // if char is not a '.', '?' or '!', continue loop\n        if\
    \ ((c != '.') && (c != '?') && (c != '!')) {\n            continue;\n        }\n\
    \        // if char is a '.', get next char, check it against all chars from\n\
    \        // 'I'\n        if (c == '.') {\n            c = S.at(++i);\n       \
    \     for (char &c1: S) {\n                if ((c != 'I') && (c != '.') && (c\
    \ != '?') && (c != '!')) {\n                    continue;\n                }\n\
    \                c = c1;\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufdgk4r7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpufdgk4r7.cpp:21:24: error: \u2018i\u2019 was not declared in this scope\n\
    \   21 |             c = S.at(++i);\n      |                        ^\n"
  stdout: ''
  timestamp: 1660094356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Use a map to count the number of\
    \ times each unique letter appears.\n  // Initialize map to contain 256 entries\
    \ (each entry initialized to 0).\n  std::map<char, int> count_map;\n  for (int\
    \ i = 0; i < S.size(); i++) {\n    // Check for a match for each of the three\
    \ special cases.\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n     \
    \ if (S[i] != S[i-1]) {\n        // A match was found. Increment the count for\
    \ that letter.\n        count_map[S[i] - 'a']++;\n      }\n    } else {\n    \
    \  // A non-special character was found, so increment the count for that\n   \
    \   // letter.\n      count_map[S[i]-'a']++;\n    }\n  }\n\n  // Return the number\
    \ of boredoms.\n  for (auto c : count_map)\n    if (count_map[c] > 1)\n      return\
    \ (long) count_map[c] - 1;\n\n  // Otherwise, the sentence is no boredom.\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglgzjsms.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpglgzjsms.cpp:31:18: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<char, int>\u2019 and \u2018std::pair<const char, int>\u2019\
    )\n   31 |     if (count_map[c] > 1)\n      |                  ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpglgzjsms.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = char; _Tp =\
    \ int; _Compare = std::less<char>; _Alloc = std::allocator<std::pair<const char,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = char]\u2019\n  490 |       operator[](const\
    \ key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<const char,\
    \ int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  490\
    \ |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = char; _Tp = int; _Compare =\
    \ std::less<char>; _Alloc = std::allocator<std::pair<const char, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = char]\u2019\n  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:29: note:   no known conversion for argument\
    \ 1 from \u2018std::pair<const char, int>\u2019 to \u2018std::map<char, int>::key_type&&\u2019\
    \ {aka \u2018char&&\u2019}\n  510 |       operator[](key_type&& __k)\n      |\
    \                  ~~~~~~~~~~~^~~\n/tmp/tmpglgzjsms.cpp:32:30: error: no match\
    \ for \u2018operator[]\u2019 (operand types are "
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int N=0;\n  for (int i=0;i<S.size();i++)\
    \ {\n    if ((S[i]=='I') || (S[i]=='i'))\n      N++;\n  }\n  return N;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1zf_pm4x: /tmp/tmp1zf_pm4x.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  for (int i = 0; i\
    \ < (S.size()) - 1; i++) {\n    if (S[i] == 'I' && S[i+1] == '.') {\n      count++;\n\
    \    } else if (S[i] == '.') {\n      if (S[i+1] == '!' || S[i+1] == '?') {\n\
    \        count++;\n      } else {\n        count--;\n      }\n    } else if (S[i]\
    \ == '!' || S[i] == '?') {\n      count--;\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7zl2ht5o: /tmp/tmp7zl2ht5o.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string P =\
    \ \"I\";\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it\
    \ == P[0]) ans += 1;\n        P.push_back(*it);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz1jsc9be: /tmp/tmpz1jsc9be.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long flag=0;\n    for(auto i=0;i<S.size();++i)\
    \ {\n        if(i==0 || S[i]!=' ' || S[i-1]!=' ' || S[i-1]!=S[i]){\n         \
    \   flag+=1;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpatxut78n: /tmp/tmpatxut78n.cpp:22: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    for (int i = 0;\
    \ S[i] != '\\0'; i++) {\n        if (S[i] == '.') {\n            if (i + 1 < S.length\
    \ && S[i + 1] == '?' || S[i + 1] == '!')\n                ans++;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9cr27p_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpq9cr27p_.cpp:15:27: error: invalid use of member function \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length()\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019 (did you forget the \u2018()\u2019 ?)\n   15 |             if (i\
    \ + 1 < S.length && S[i + 1] == '?' || S[i + 1] == '!')\n      |             \
    \            ~~^~~~~~\n      |                                 ()\n"
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n   long c=0;\n   std::size_t found = S.find(\"\
    I\");\n   while(found!=std::string::npos){\n      c=c+1;\n      found=S.find(\"\
    I\",found+1);\n   }\n   return c;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp50yimcx_: /tmp/tmp50yimcx_.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    int i = 0;\n \
    \   while ((i < S.size())) {\n        if (S.at(i) == \"i\") {\n            i++;\n\
    \            i++;\n            count++;\n        }\n        else if (S.at(i) ==\
    \ \".\" || S.at(i) == \"?\" || S.at(i) == \"!\") {\n            i++;\n       \
    \ }\n        else {\n            i++;\n        }\n    }\n    return (count);\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64er9edl.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp64er9edl.cpp:15:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (S.at(i) == \"i\") {\n      |\
    \                        ^~~\n/tmp/tmp64er9edl.cpp:20:29: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   20 |         else\
    \ if (S.at(i) == \".\" || S.at(i) == \"?\" || S.at(i) == \"!\") {\n      |   \
    \                          ^~~\n/tmp/tmp64er9edl.cpp:20:47: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   20 |         else\
    \ if (S.at(i) == \".\" || S.at(i) == \"?\" || S.at(i) == \"!\") {\n      |   \
    \                                            ^~~\n/tmp/tmp64er9edl.cpp:20:65:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   20 |         else if (S.at(i) == \".\" || S.at(i) == \"?\" || S.at(i) == \"\
    !\") {\n      |                                                              \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your solution here.\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmfmn17fk: /tmp/tmpmfmn17fk.cpp:16: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int n=0, boredom=0;\n  for (int i=0;\
    \ i<S.length(); i++) {\n    if (S[i]=='I') {\n      boredom++;\n    }\n  }\n \
    \ return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4wwexzy3: /tmp/tmp4wwexzy3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int a = 0;\n    for (int i = 0; i\
    \ < S.size(); i++) {\n        if (S[i] == 'I')\n            a++;\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') // '.', '?' or '!' are separators\n  \
    \          i++;\n    }\n    return a;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxsjs9xhs: /tmp/tmpxsjs9xhs.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // TODO: Write your code here\n  \
    \  return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp06e06dd2: /tmp/tmp06e06dd2.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count=0;\n    for(int i=0;i<S.size();i++)\
    \ {\n        if(S[i]=='I')\n            count++;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa3r87wji: /tmp/tmpa3r87wji.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long cnt = 0;\n    std::string boredom\
    \ = S;\n    int start = 0;\n    int end = boredom.find(\". ? !\");\n    while\
    \ (start != end) {\n        if (boredom[start] == 'I') {\n            ++cnt;\n\
    \        }\n        ++start;\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  assert(S.size() > 0);\n  long ans =\
    \ 0;\n  for (int i = 0; i < S.size() - 1; i++) {\n    char temp = S[i];\n    bool\
    \ isI = false;\n    switch (temp) {\n      case 'I':\n        isI = true;\n  \
    \      break;\n      case '.':\n      case '?':\n      case '!':\n        break;\n\
    \      default:\n        continue;\n    }\n    if (!isI) {\n      ans += 1;\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0kn3fxcq: /tmp/tmp0kn3fxcq.cpp:38: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long n = 0;\n    std::string word;\n\
    \    S.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '?'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '!'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '!'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '?'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '.'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '!'), S.end());\n    S.erase(std::remove(S.begin(),\
    \ S.end(), '!'), S.end());\n    S.erase(std::remove(S.begin(), S.end(), '?'),\
    \ S.end());\n    S.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n   \
    \ S.erase(std::remove(S.begin(), S.end(), '!'), S.end());\n    for (auto it =\
    \ S.begin(); it != S.end(); it++) {\n        word = *it;\n        if (word ==\
    \ \"I\") {\n            n++;\n        }\n    }\n    return n;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp825yw6h2: /tmp/tmp825yw6h2.cpp:38: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string temp;\n\
    \    for(int i=0; i<S.length(); i++){\n        if((S[i] == '.') || (S[i] == '?')\
    \ || (S[i] == '!')){\n            temp.clear();\n        }\n        temp += S[i];\n\
    \        if((S[i] == 'I')){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqvyxchng: /tmp/tmpqvyxchng.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::string word;\n    long boredom=0;\n\
    \    for(int i=0;i<S.length();++i){\n        if(i==0){\n            if((S[i]=='.')||(S[i]=='.')||(S[i]=='?')){\n\
    \                boredom++;\n            }\n        }else if((S[i]=='.')||(S[i]=='!')||(S[i]=='?')){\n\
    \            boredom++;\n        }\n        else if((S[i]=='.')||(S[i]=='!')||(S[i]=='.')||(S[i]=='?')){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzxjsm5bj: /tmp/tmpzxjsm5bj.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094357
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long ans = 0;\n  assert(S.size() !=\
    \ 0);\n  for(long i = 0; i < S.size(); ++i) {\n    if(S[i] == '.') ans += 1;\n\
    \    if(S[i] == '?') ans += 1;\n    if(S[i] == '!') ans += 1;\n    if(S[i] ==\
    \ 'I') ans += 1;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9lp5mznn: /tmp/tmp9lp5mznn.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int flag = 0;\n    long count = 0;\n    std::string token;\n\
    \    \n    // Step 1: tokenize sentence\n    token = S;\n    while(i < S.length())\
    \ {\n        token = token.substr(i + 1);\n        if(i == 0) {\n            break;\n\
    \        }\n        if(token == \"?\") { \n            if((j + 1) == S.length())\
    \ {\n                flag = 1;\n            } else {\n                flag = 0;\n\
    \            }\n            break;\n        }\n        if(token == \"!\") { \n\
    \            if((j + 1) == S.length()) {\n                flag = 0;\n        \
    \    } else {\n                flag = 1;\n            }\n            break;\n\
    \        }\n        if(token == \".\") {\n            if((j + 1) == S.length())\
    \ {\n                flag = 0;\n            } else {\n                flag = 1;\n\
    \            }\n            break;\n        }\n        j = j + 1;\n        i =\
    \ i + 1;\n    }\n    \n    // Step 2: count number of boredoms\n    if(flag ==\
    \ 0) {\n        while(i < S.length()) {\n            if(S[i] == 'I') {\n     \
    \           boredoms++;\n            }\n            i = i + 1;\n        }\n  \
    \      count = (boredoms);\n    }\n    if(flag == 1) {\n        while(j < S.length())\
    \ {\n            if(S[j] == 'I') {\n                boredoms++;\n            }\n\
    \            j = j + 1;\n        }\n        count = (boredoms);\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg8xbdcq4: /tmp/tmpg8xbdcq4.cpp:78: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] != 'I' && S[i] != '.' && S[i] != '?'\
    \ && S[i] != '!') {\n            boredom = 0;\n            break;\n        }\n\
    \        if(S[i] == 'I'){\n            boredom += 1;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpycgql3wy: /tmp/tmpycgql3wy.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    if(S.at(0)=='I')\n        return 0;\n\
    \    int cnt=0;\n    for(int i=1;i<S.size();i++){\n        if(S[i]=='.' || S[i]=='?'\
    \ || S[i]=='!')\n            cnt++;\n        else if((S[i]=='I') && (S[i-1]=='I'))\n\
    \            cnt++;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprdy42tip: /tmp/tmprdy42tip.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    for(int i=0;\
    \ i<S.size(); i++) {\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!') {\n    \
    \        boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkuy0z4ne: /tmp/tmpkuy0z4ne.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094358
