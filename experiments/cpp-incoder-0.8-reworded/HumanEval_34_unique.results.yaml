language: cpp
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(int i\
    \ = 0; i<l.size(); i++)\n        if (i == 0 || l[i] != l[i-1])\n            u.push_back(l.at(i));\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long> res;\n\tstd::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(res), [](long a, long b) { return a < b; });\n\t\
    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i87mb_8.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8i87mb_8.cpp:9:103: error: no matching function for call\
    \ to \u2018set_difference(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ std::back_insert_iterator<std::vector<long int> >, unique(std::vector<long int>)::<lambda(long\
    \ int, long int)>)\u2019\n    9 |  std::set_difference(l.begin(), l.end(), std::back_inserter(res),\
    \ [](long a, long b) { return a < b; });\n      |                            \
    \                                                                           ^\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp8i87mb_8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5415:5: note: candidate:\
    \ \u2018template<class _IIter1, class _IIter2, class _OIter> _OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter)\u2019\n 5415 |     set_difference(_InputIterator1\
    \ __first1, _InputIterator1 __last1,\n      |     ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8i87mb_8.cpp:9:103:\
    \ note:   deduced conflicting types for parameter \u2018_IIter2\u2019 (\u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019 and \u2018unique(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n    9 |  std::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(res), [](long a, long b) { return a < b; });\n \
    \     |                                                                      \
    \                                 ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8i87mb_8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5466:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::set_difference(_IIter1, _IIter1, _IIter2, _IIter2,\
    \ _OIter, _Compare)\u2019\n 5466 |     set_difference(_InputIterator1 __first1,\
    \ _I"
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> unique;\n    std::sort(l.begin(), l.end());\n  \
    \  std::set<long> s;\n    s.reserve(l.size());\n    for (long i : l) {\n     \
    \   s.insert(i);\n    }\n    for (long i : s) {\n        unique.push_back(i);\n\
    \    }\n    return unique;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrqzzbe1.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzrqzzbe1.cpp:10:7: error: \u2018class std::set<long int>\u2019\
    \ has no member named \u2018reserve\u2019\n   10 |     s.reserve(l.size());\n\
    \      |       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return l;\n    std::sort(l.begin(), l.end());\n\
    \    std::vector<long> res;\n    long last = l[0];\n    for (long i = 1, n = l.size();\
    \ i < n; ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n\
    \            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> out;\n    std::vector<bool> visited(l.size(), false);\n\
    \    for (long i : l)\n        if (!visited[i]) {\n            out.push_back(i);\n\
    \            visited[i] = true;\n        }\n    return out;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdufcylmu: /tmp/tmpdufcylmu.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n\
    \    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf6oq6mr6: /tmp/tmpf6oq6mr6.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long> unique(l.size());\n\
    \  int i(0);\n  while (i < l.size()) {\n    if (l[i] != l[i-1]) {\n      unique[i]\
    \ = l[i];\n      ++i;\n    } else {\n      ++i;\n    }\n  }\n  return unique;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt31jo4sk: /tmp/tmpt31jo4sk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    long x = 0;\n    std::vector<long> x;\n    for (long i : l)\n    \
    \    x += i;\n    for (long i : l) {\n        x.push_back(i);\n        x.erase(std::remove(x.begin(),\
    \ x.end(), x), x.end()); \n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl4ko1aw.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkl4ko1aw.cpp:8:23: error: conflicting declaration \u2018\
    std::vector<long int> x\u2019\n    8 |     std::vector<long> x;\n      |     \
    \                  ^\n/tmp/tmpkl4ko1aw.cpp:7:10: note: previous declaration as\
    \ \u2018long int x\u2019\n    7 |     long x = 0;\n      |          ^\n/tmp/tmpkl4ko1aw.cpp:12:11:\
    \ error: request for member \u2018push_back\u2019 in \u2018x\u2019, which is of\
    \ non-class type \u2018long int\u2019\n   12 |         x.push_back(i);\n     \
    \ |           ^~~~~~~~~\n/tmp/tmpkl4ko1aw.cpp:13:11: error: request for member\
    \ \u2018erase\u2019 in \u2018x\u2019, which is of non-class type \u2018long int\u2019\
    \n   13 |         x.erase(std::remove(x.begin(), x.end(), x), x.end());\n    \
    \  |           ^~~~~\n/tmp/tmpkl4ko1aw.cpp:13:31: error: request for member \u2018\
    begin\u2019 in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n\
    \   13 |         x.erase(std::remove(x.begin(), x.end(), x), x.end());\n     \
    \ |                               ^~~~~\n/tmp/tmpkl4ko1aw.cpp:13:42: error: request\
    \ for member \u2018end\u2019 in \u2018x\u2019, which is of non-class type \u2018\
    long int\u2019\n   13 |         x.erase(std::remove(x.begin(), x.end(), x), x.end());\n\
    \      |                                          ^~~\n/tmp/tmpkl4ko1aw.cpp:13:55:\
    \ error: request for member \u2018end\u2019 in \u2018x\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   13 |         x.erase(std::remove(x.begin(), x.end(),\
    \ x), x.end());\n      |                                                     \
    \  ^~~\n/tmp/tmpkl4ko1aw.cpp:15:12: error: could not convert \u2018x\u2019 from\
    \ \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     return\
    \ x;\n      |            ^\n      |            |\n      |            long int\n"
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long> u;\n\tu.insert(u.end(),\
    \ l.begin(), l.end());\n\treturn u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpv4_1yx74: /tmp/tmpv4_1yx74.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::vector<long> temp(std::begin(l), std::end(l));\n  std::sort(std::begin(temp),\
    \ std::end(temp));\n  return temp;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpchg1gsza: /tmp/tmpchg1gsza.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> unique_elements(l.size());\n    std::sort(l.begin(),\
    \ l.end());\n    std::size_t last = 0, count = 0;\n    for (std::size_t i = 0;\
    \ i < l.size(); ++i) {\n        if (l[i] != l[last]) {\n            unique_elements[count]\
    \ = l[i];\n            ++count;\n        }\n        last = i;\n    }\n    return\
    \ unique_elements;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvy709qyt: /tmp/tmpvy709qyt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    std::size_t\
    \ i = 0;\n    std::size_t j = l.size();\n    while(i < j) {\n        if(l[i] !=\
    \ l[j]) {\n            u.push_back(l[i]);\n            i++;\n            j--;\n\
    \        }\n        else if(i < j) {\n            i++;\n        }\n        else\
    \ {\n            j--;\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpzvqlcrv1: /tmp/tmpzvqlcrv1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(std::size_t\
    \ i=0; i< l.size(); i++) {\n        if(l.at(i) == l.at(i-1)) {\n            continue;\n\
    \        }\n        u.push_back(l.at(i));\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 18446744073709551615) >= this->size()\
    \ (which is 9)\n"
  stdout: ''
  timestamp: 1660132764
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Create a set with the element\n    std::set<long> temp;\n    for\
    \ (auto elem : l) {\n        temp.insert(elem);\n    }\n    std::vector<long>\
    \ res(temp.begin(), temp.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // https://stackoverflow.com/questions/259080/how-do-i-remove-duplicates-from-a-vector-in-c\n\
    \    // https://stackoverflow.com/questions/221760/how-do-i-erase-all-elements-of-a-vector-that-have-a-certain-value\n\
    \    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator itr = l.begin();\n\
    \    for (std::vector<long>::iterator itr1 = l.begin(); itr1 != l.end(); ++itr1)\
    \ {\n        if (itr1 == itr) {\n            itr = l.erase(itr);\n        } else\
    \ {\n            itr = itr1;\n        }\n    }\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcil2z8rs: /tmp/tmpcil2z8rs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    long lastValue = l[0];\n    std::vector<long> output;\n    for (int\
    \ i = 0; i < l.size(); ++i) {\n        if (l[i] != lastValue) {\n            lastValue\
    \ = l[i];\n            l.erase(l.begin() + i);\n            l.push_back(lastValue);\n\
    \        }\n    }\n    std::sort(l.begin(), l.end());\n    return l;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4u9633yf: /tmp/tmp4u9633yf.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> uni;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (i == l.size() - 1) {\n      \
    \      uni.push_back(l[i]);\n        } else if (l[i] == l[i + 1]) {\n        \
    \    continue;\n        } else {\n            uni.push_back(l[i]);\n        }\n\
    \    }\n    return uni;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::unique(std::begin(l), std::end(l));\n    return std::vector<long>({std::begin(l),\
    \ it});\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmph6ceqer2: /tmp/tmph6ceqer2.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n  \
    \  std::set<long> seen;\n    for(auto e: l){\n        if (!seen.insert(e).second)\n\
    \            result.emplace_back(e);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5use9eg5: /tmp/tmp5use9eg5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::unique(l.begin(), l.end()); // O(n)\n    l.erase(it,\
    \ l.end()); // O(n)\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp1u3oudk4: /tmp/tmp1u3oudk4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> out;\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        std::find(out.begin(),\
    \ out.end(), *it) == out.end() ? *it = out.back() : ++it;\n    }\n    return out;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3n0ok1zd.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3n0ok1zd.cpp:10:61: error: operands to ?: have different\
    \ types \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019\n   10 |         std::find(out.begin(), out.end(),\
    \ *it) == out.end() ? *it = out.back() : ++it;\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return unique(l, l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphb8cdsgz.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphb8cdsgz.cpp:8:40: error: no matching function for call\
    \ to \u2018unique(std::vector<long int>&, std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator)\u2019\n    8 |     return unique(l, l.begin(), l.end());\n \
    \     |                                        ^\n/tmp/tmphb8cdsgz.cpp:6:19: note:\
    \ candidate: \u2018std::vector<long int> unique(std::vector<long int>)\u2019\n\
    \    6 | std::vector<long> unique(std::vector<long> l) {\n      |            \
    \       ^~~~~~\n/tmp/tmphb8cdsgz.cpp:6:19: note:   candidate expects 1 argument,\
    \ 3 provided\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmphb8cdsgz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1001:5:\
    \ note: candidate: \u2018template<class _FIter> _FIter std::unique(_FIter, _FIter)\u2019\
    \n 1001 |     unique(_ForwardIterator __first, _ForwardIterator __last)\n    \
    \  |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1001:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmphb8cdsgz.cpp:8:40: note:   deduced conflicting\
    \ types for parameter \u2018_FIter\u2019 (\u2018std::vector<long int>\u2019 and\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n    8 |     return unique(l, l.begin(), l.end());\n      |                \
    \                        ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphb8cdsgz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1031:5:\
    \ note: candidate: \u2018template<class _FIter, class _BinaryPredicate> _FIter\
    \ std::unique(_FIter, _FIter, _BinaryPredicate)\u2019\n 1031 |     unique(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1031:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphb8cdsgz.cpp:8:40:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<lo"
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  assert(!l.empty());\n  std::sort(l.begin(), l.end());\n  return std::unique(l.begin(),\
    \ l.end()); // return sorted unique elements in a vector\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5bymh1au.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5bymh1au.cpp:9:21: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    9 |   return std::unique(l.begin(),\
    \ l.end()); // return sorted unique elements in a vector\n      |          ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::set<long> seen;\n\tfor (auto i : l)\n\t\tif (!seen.insert(i).second)\n\
    \t\t\tl.push_back(i);\n\treturn l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp2hn9ucxz: /tmp/tmp2hn9ucxz.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ret;\n    std::set<long> s;\n    for (long x : l)\
    \ {\n        if (s.find(x) == s.end())\n            s.insert(x);\n        else\n\
    \            ret.push_back(x);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp1vo6jusm: /tmp/tmp1vo6jusm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long>::iterator it=l.begin();\n\
    \tstd::vector<long>::iterator it1=l.end();\n\tstd::vector<long> u;\n\twhile(it!=it1)\n\
    \t{\n\t\tstd::cout<<\"it==\"<<*it<<\" it1=\"<<*it1<<std::endl;\n\t\t++it;\n\t\t\
    if(*it==*it1) break;\n\t\telse\n\t\t\tu.push_back(*it);\n\t}\n\tstd::cout<<\"\
    returning u\"<<std::endl;\n\treturn u;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpn6z928nj: /tmp/tmpn6z928nj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: 'it==0 it1=4113

    it==2 it1=4113

    it==3 it1=4113

    it==3 it1=4113

    it==3 it1=4113

    it==5 it1=4113

    it==5 it1=4113

    it==9 it1=4113

    it==123 it1=4113

    returning u

    '
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end()); //sorting\n  std::vector<long> result;\n\
    \  result.push_back(l.front());\n  for (long i = l.size() - 1; i >= 0; i--) {\n\
    \    if (l[i] != l[i - 1]) {\n      result.push_back(l[i]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7giz9tva: /tmp/tmp7giz9tva.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Return\
    \ sorted unique elements in a vector\n    std::vector<long> unique(l.size());\n\
    \    \n    // Keep track of unique elements\n    int index = 0;\n    for (long\
    \ &i : l)\n    {\n        if (i == l[index])\n        {\n            ++index;\n\
    \            continue;\n        }\n        else if (index > 0)\n        {\n  \
    \          unique[index] = i;\n        }\n        index++;\n    }\n    \n    return\
    \ unique;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr5fctst3: /tmp/tmpr5fctst3.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Store the unique elements in a set\n    std::unordered_set<long>\
    \ unique_ele;\n    // Push all unique elements to the set\n    for (auto i : l)\n\
    \        unique_ele.insert(i);\n    // Copy unique elements back into a vector\n\
    \    std::vector<long> unique_res = unique_ele;\n    return unique_res;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpocew3hpm.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpocew3hpm.cpp:13:36: error: conversion from \u2018std::unordered_set<long\
    \ int>\u2019 to non-scalar type \u2018std::vector<long int>\u2019 requested\n\
    \   13 |     std::vector<long> unique_res = unique_ele;\n      |             \
    \                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> s;\n    for (auto it: l) {\n        auto it2 = s.find(it);\n\
    \        if (it2 == s.end()) {\n            s.push_back(it);\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjjgwplc.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkjjgwplc.cpp:9:22: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n    9 |         auto it2 =\
    \ s.find(it);\n      |                      ^~~~\n"
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    u.clear();\n\
    \    u.insert(u.end(), l.begin(), l.end());\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8c3nuvbd: /tmp/tmp8c3nuvbd.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(auto\
    \ it=l.begin(); it!=l.end();++it)\n        if(std::find(u.begin(), u.end(), *it)==u.end())\
    \ u.push_back(*it);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    long long u;\n    // Loop through l\
    \ and add unique elements\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        // Add current element to result if it has not been added before\n\
    \        if (std::find(result.begin(), result.end(), *it) == result.end())\n \
    \       {\n            u = *it;\n            result.push_back(u);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpi_d39o1m: /tmp/tmpi_d39o1m.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(long i = 0; i < l.size(); i++){\n  \
    \      long aux = l[i];\n        for(long j = 0; j < u.size(); j++){\n       \
    \     if(u[j] == aux){\n                aux = j;\n                break;\n   \
    \         }\n        }\n        u.push_back(aux);\n    }\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkwea_k2k: /tmp/tmpkwea_k2k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v(n);\n    std::iota(v.begin(), v.end(), 0);\n \
    \   std::sort(v.begin(), v.end());\n    std::vector<long>::iterator it = std::unique(v.begin(),\
    \ v.end());\n    v.assign(it, v.end());\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp491zscu5.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp491zscu5.cpp:7:25: error: \u2018n\u2019 was not declared\
    \ in this scope\n    7 |     std::vector<long> v(n);\n      |                \
    \         ^\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  // Create a temporary vector to store the unique elements and reserve\
    \ enough space in it\n  std::vector<long> uniq_vec;\n  std::sort(l.begin(), l.end());\n\
    \  uniq_vec.reserve(l.size());\n  // Push the unique elements to the temporary\
    \ vector\n  for (size_t i = 0; i < l.size(); i++) {\n    if (!std::binary_search(l.begin(),\
    \ l.end(), l[i])) {\n      uniq_vec.push_back(l[i]);\n    }\n  }\n  return uniq_vec;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvhbswkxz: /tmp/tmpvhbswkxz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    auto it = l.begin();\n    std::vector<long>\
    \ result;\n    while (it != l.end()) {\n        if (it == l.begin()) {\n     \
    \       result.push_back(it->first);\n        } else {\n            if (it->first\
    \ != result[result.size() - 1].first) {\n                result.push_back(it->first);\n\
    \            }\n        }\n        ++it;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpalrustb3.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpalrustb3.cpp:12:34: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   12\
    \ |             result.push_back(it->first);\n      |                        \
    \          ^~~~~\n/tmp/tmpalrustb3.cpp:14:21: error: request for member \u2018\
    first\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   14 |             if (it->first != result[result.size() - 1].first) {\n   \
    \   |                     ^~~~~\n/tmp/tmpalrustb3.cpp:14:56: error: request for\
    \ member \u2018first\u2019 in \u2018result.std::vector<long int>::operator[]((result.std::vector<long\
    \ int>::size() - 1))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   14 |      \
    \       if (it->first != result[result.size() - 1].first) {\n      |         \
    \                                               ^~~~~\n/tmp/tmpalrustb3.cpp:15:38:\
    \ error: request for member \u2018first\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   15 |                 result.push_back(it->first);\n\
    \      |                                      ^~~~~\n"
  stdout: ''
  timestamp: 1660132762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto end = std::unique(l.begin(), l.end(), [] (long x, long y) { return\
    \ x == y; });\n    l.erase(end, l.end());\n    return l;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxudr8bkm: /tmp/tmpxudr8bkm.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    long prev = l[0];\n    for(long x :\
    \ l)\n    {\n        if(x != prev)\n        {\n            result.push_back(x);\n\
    \        }\n        prev=x;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpnsbz145k: /tmp/tmpnsbz145k.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tauto it = l.begin();\n\tstd::vector<long> res;\n\tfor (; it != l.end();\
    \ ++it) {\n\t\tauto j = res.end();\n\t\tfor (; j != res.begin(); ++j) {\n\t\t\t\
    if (*it == *j) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == res.end()) {\n\t\
    \t\tres.push_back(*it);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Make copy of vector l and sort it ascending\n    std::vector<long>\
    \ u;\n    std::copy(l.begin(), l.end(), std::back_inserter(u));\n    std::sort(u.begin(),\
    \ u.end());\n    // Return unique elements from copy to original vector\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwwj3zfdd: /tmp/tmpwwj3zfdd.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i=0; i<l.size(); i++)\n        if(l.at(i)!=u.back())\n            u.push_back(l.at(i));\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::set<long> seen;\n    for (long\
    \ i : l) {\n        if (!seen.insert(i).second) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpa1wxdw2f: /tmp/tmpa1wxdw2f.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> uniqueL;\n \
    \   std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++)\
    \ {\n        bool flag = false;\n        for(it = uniqueL.begin(); it != uniqueL.end();\
    \ it++) {\n            if((*it) == *it) {\n                flag = true;\n    \
    \            break;\n            }\n        }\n        if(flag) {\n          \
    \  uniqueL.push_back(*it);\n        }\n    }\n    return uniqueL;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it)\n        u.push_back(*it);\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpasmgturt: /tmp/tmpasmgturt.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tauto end = l.end(), result = std::unique(l.begin(), end);\n\tl.erase(result,\
    \ end);\n\treturn l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnpvyc2xt: /tmp/tmpnpvyc2xt.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // copy l\n    std::vector<long> copy(l);\n    std::sort(copy.begin(),\
    \ copy.end());\n    // remove duplicates\n    copy.resize(std::unique(copy.begin(),\
    \ copy.end()) - copy.begin());\n    // return result\n    return copy;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  long u = 0;\n  long uIndex = 0;\n  std::map<long, long> uMap;\n  for\
    \ (long i : l) {\n    if (uMap.find(i) == uMap.end()) {\n      uMap.insert(std::pair<long,\
    \ long>(i, u));\n      u += 1;\n    } else {\n      uMap[u] = u;\n    }\n    uIndex\
    \ += 1;\n  }\n  std::vector<long> ret;\n  std::vector<long>::iterator it = uMap.begin();\n\
    \  for (; it != uMap.end(); it++) {\n    ret.push_back(it->second);\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp437i4b31.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp437i4b31.cpp:20:46: error: conversion from \u2018std::map<long\
    \ int, long int>::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >\u2019} to non-scalar type \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } requested\n   20 |   std::vector<long>::iterator it = uMap.begin();\n      |\
    \                                    ~~~~~~~~~~^~\n/tmp/tmp437i4b31.cpp:21:13:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} and \u2018std::map<long int, long int>::iterator\u2019 {aka \u2018\
    std::_Rb_tree_iterator<std::pair<const long int, long int> >\u2019})\n   21 |\
    \   for (; it != uMap.end(); it++) {\n      |          ~~ ^~ ~~~~~~~~~~\n    \
    \  |          |             |\n      |          |             std::map<long int,\
    \ long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long int, long\
    \ int> >}\n      |          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp437i4b31.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp437i4b31.cpp:21:25:\
    \ note:   \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   21 |   for (; it != uMap.end(); it++) {\n     "
  stdout: ''
  timestamp: 1660132764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    int size = l.size();\n    std::vector<long> result;\n    result.reserve(size);\n\
    \    for (auto const &i : l) {\n        if (result.size() == 0 || i == result[result.size()\
    \ - 1]) {\n            result.push_back(i);\n        }\n    }\n    result.erase(std::unique(result.begin(),\
    \ result.end()), result.end());\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpmjm08v_h: /tmp/tmpmjm08v_h.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  sort(l.begin(), l.end());\n  auto it = unique(l.begin(), l.end());\n\
    \  auto end = l.end();\n  l.erase(it, end);\n  return l;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  // Create a set of unique elements\n  std::unordered_set<long> s;\n\
    \  for (auto & i : l)\n    s.insert(i);\n  // Return a vector containing only\
    \ the unique elements\n  return std::vector<long>(s.begin(), s.end());\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvq677myp: /tmp/tmpvq677myp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\t// sort array\n\tstd::sort(l.begin(), l.end());\n\t// find first equal\
    \ value\n\tsize_t pos;\n\tpos = std::find(l.begin(), l.end(), l.front());\n\t\
    if (pos != l.end()) {\n\t\t// swap elements\n\t\tlong temp = l[pos];\n\t\tl[pos]\
    \ = l[l.size() - 1];\n\t\tl[l.size() - 1] = temp;\n\t}\n\t// return new vector\n\
    \treturn l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lr8b4nl.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_lr8b4nl.cpp:11:17: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018size_t\u2019 {aka \u2018long unsigned\
    \ int\u2019} in assignment\n   11 |  pos = std::find(l.begin(), l.end(), l.front());\n\
    \      |        ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |            \
    \     |\n      |                 __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n/tmp/tmp_lr8b4nl.cpp:12:10: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018size_t\u2019 {aka \u2018long unsigned int\u2019} and\
    \ \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   12 |  if (pos != l.end()) {\n    \
    \  |      ~~~ ^~ ~~~~~~~\n      |      |           |\n      |      |         \
    \  std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >}\n      |      size_t {aka long unsigned int}\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_lr8b4nl.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_lr8b4nl.cpp:12:19: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018size_t\u2019 {aka \u2018long unsigned int\u2019}\n   12 |  if (pos\
    \ != l.end()) {\n      |                   ^\nIn file included from /usr/include/c+"
  stdout: ''
  timestamp: 1660132765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // sort in ascending order\n    std::sort(l.begin(), l.end());\n \
    \   // copy in unique elements\n    std::vector<long> u;\n    for (auto it = l.begin();\
    \ it != l.end(); it++) {\n        // if element is not present then...\n     \
    \   if (u.find(*it) == u.end()) {\n            u.push_back(*it);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwb9pu7lz.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwb9pu7lz.cpp:13:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   13 |         if (u.find(*it)\
    \ == u.end()) {\n      |               ^~~~\n"
  stdout: ''
  timestamp: 1660132765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ result;\n  result.push_back(l.front());\n  auto last = l.front();\n  for (auto\
    \ it = l.begin() + 1; it != l.end(); ++it) {\n    if (it != l.begin()) result.push_back(last);\n\
    \    last = *it;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp6f9c8fiu: /tmp/tmp6f9c8fiu.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(int i = 0; i != l.size(); i++) {\n \
    \       for(int j = 0; j != u.size(); j++) {\n            if(l[i] == u[j]) {\n\
    \                continue;\n            }\n            if(l[i] > u[j]) {\n   \
    \             u.push_back(l[i]);\n            }\n            if(l[i] < u[j]) {\n\
    \                assert(u[j] < l[i]);\n                u.push_back(j);\n     \
    \       }\n        }\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp_xlxksgb: /tmp/tmp_xlxksgb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto i : l)\n        if (i == l.back())\n            u.push_back(i);\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7f_o3bid: /tmp/tmp7f_o3bid.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n    // Sorts elements\
    \ \n    std::sort(l.begin(), l.end()); \n    // Removes duplicates\n    long lastElem=0;\n\
    \    for(std::size_t i = 1; i < l.size(); i++) {\n        if(l[i] == l[i-1]) {\n\
    \            ret.push_back(l[i]);\n        } else {\n            lastElem = l[i];\n\
    \            ret.push_back(lastElem);\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp24uepg39: /tmp/tmp24uepg39.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++)\n        if(l.at(i) == l.at(i + 1))\n            u.resize(u.size()\
    \ + 1);\n        else if(l.at(i) > l.at(i + 1))\n            u.resize(u.size()\
    \ + 1);\n        else\n            u.push_back(l[i]);\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] == l[i - 1]) continue;\n      \
    \  u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Store the unique elements in a vector\n    std::vector<long> u;\n\
    \n    // If the vector is not empty then add the elements in the vector\n    if\
    \ (l.size() > 0) {\n        // Loop through the vector\n        for (long i =\
    \ 0; i < l.size(); i++) {\n            // If it has not been found then add it\n\
    \            if (l.at(i) == u[i - 1])\n                u.push_back(l[i]);\n  \
    \      }\n    }\n    // Return the unique elements in the vector\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tauto it = l.begin();\n\tauto end =\
    \ l.end();\n\tstd::vector<long> u;\n\tfor (; it != end; ++it) {\n\t\tu.push_back(std::move(*it));\n\
    \t}\n\treturn u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1t8eosic: /tmp/tmp1t8eosic.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(long i : l) if (u.size() == 0 || i !=\
    \ u[u.size()-1]) u.push_back(i);\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpu6z1j2qq: /tmp/tmpu6z1j2qq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\t// Use set to store unique elements\n\tstd::set<long> s;\n\tfor(auto\
    \ x: l) s.insert(x);\n\treturn std::vector<long>(s.begin(), s.end());\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    long h = 0;\n    for (auto it = l.begin(); it != l.end(); it++) {\n\
    \        h = h ^ l[*it];\n        l[*it] = h;\n    }\n    return l;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn52l0mq2: /tmp/tmpn52l0mq2.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end()); \n    std::vector<long> u;\n    \n\
    \    for(size_t i=0; i<l.size(); i++)\n        u.push_back(l.at(i));\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmprdtph02e: /tmp/tmprdtph02e.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  assert(l.size() <= 100000);\n  sort(l.begin(), l.end());\n  std::vector<long>\
    \ res(l.begin(), l.end());\n  std::sort(res.begin(), res.end());\n  return res;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpypcw4c_y: /tmp/tmpypcw4c_y.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::unique(l.begin(), l.end());\n    return std::vector<long>(it,\
    \ l.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmppr4i9xp5: /tmp/tmppr4i9xp5.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> results;\n \
    \   for(auto it = l.begin(); it != l.end(); ++it) {\n        if(results.find(*it)\
    \ == results.end())\n            results.push_back(*it);\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rae2tox.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3rae2tox.cpp:10:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |         if(results.find(*it)\
    \ == results.end())\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660132765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.sort();\n  std::sort(l.begin(), l.end());\n  std::sort(l.begin(),\
    \ l.end());\n  std::set<long> u;\n  for(long i = 1; i < l.size(); i++) {\n   \
    \ if(l[i] != l[i-1]) {\n      u.insert(l[i]);\n    }\n  }\n  return std::vector<long>(u.begin(),\
    \ u.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphplv_crk.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphplv_crk.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660132765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v;\n    std::sort(l.begin(), l.end());\n    v.assign(l.begin(),\
    \ l.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::set<long> s;\n  for (auto &el : l) s.insert(el);\n  return std::vector<long>(s.begin(),\
    \ s.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> univ;\n    std::sort(l.begin(), l.end());\n    univ.insert(univ.begin(),\
    \ l.begin(), l.end());\n    return univ;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpzi48zp9l: /tmp/tmpzi48zp9l.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    int i = 0;\n    std::vector<long> v;\n    for(std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(!v.empty()) {\n         \
    \   if(*it == v.back()) {\n                v.push_back(*it);\n            } else\
    \ {\n                for (std::vector<long>::iterator it2 = v.end()-1; it2 !=\
    \ v.begin(); it2--) {\n                    if(*it == *it2) {\n               \
    \         v.erase(it2);\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        v.push_back(*it);\n    \
    \    i++;\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp_8ek0gk9: /tmp/tmp_8ek0gk9.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (size_t i = 0; i < l.size(); ++i) {\n        u.push_back(l.at(i));\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0jfuwfc0: /tmp/tmp0jfuwfc0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n  \
    \  for (long i: l) {\n        if (i != result[result.size() - 1])\n          \
    \  result.push_back(i);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end()); // Use mergesort\n    std::vector<long>\
    \ v; // The sorted unique list\n    for (long i = 1; i < l.size(); i++) {\n  \
    \      if (l[i] == l[i - 1]) {\n            v.push_back(l[i]);\n        }\n  \
    \  }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmptfdtc4e6: /tmp/tmptfdtc4e6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); it++){\n        if(std::find(res.begin(), res.end(),\
    \ *it) == res.end()){\n            res.push_back(*it);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> uniqueness;\n    for (long i : l) {\n        std::sort(std::begin(uniqueness),\
    \ std::end(uniqueness));\n        if (i == uniqueness[0]) {\n            continue;\n\
    \        }\n        for (size_t j = 0; j < uniqueness.size(); ++j) {\n       \
    \     if (i == uniqueness[j]) {\n                continue;\n            }\n  \
    \          if (i != uniqueness[j]) {\n                uniqueness.push_back(uniqueness[j]);\n\
    \                std::sort(std::begin(uniqueness), std::end(uniqueness));\n  \
    \              j = uniqueness.size() - 1;\n            }\n        }\n        uniqueness.push_back(i);\n\
    \    }\n    return uniqueness;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n  return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  \n  l.sort();\n  \n  auto it=std::unique(l.begin(), l.end());\n  \n\
    \  std::vector<long> res(it);\n  \n  return res;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt02bqzk.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptt02bqzk.cpp:8:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    8 |   l.sort();\n     \
    \ |     ^~~~\n/tmp/tmptt02bqzk.cpp:12:27: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >&)\u2019\n   12 |   std::vector<long> res(it);\n    \
    \  |                           ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptt02bqzk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmptt02bqzk.cpp:12:27: note:   candidate expects 3 arguments,\
    \ 1 provided\n   12 |   std::vector<long> res(it);\n      |                  \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmptt02bqzk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<long int>]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |"
  stdout: ''
  timestamp: 1660132765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n   long last = l[0];\n   for (long i = 1; i < l.size(); i++) {\n     \
    \ if (l[i] != last) {\n         last = l[i];\n         l.erase(l.begin() + i);\n\
    \      }\n   }\n   return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpgx0sqqhh: /tmp/tmpgx0sqqhh.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeyuw29bz: /tmp/tmpeyuw29bz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    size_t unique_count = 1;\n    for (size_t i = 0; i < l.size(); ++i) {\n \
    \       if (i == 0 || l[i - 1] != l[i]) {\n            ret.push_back(l[i]);\n\
    \            unique_count += 1;\n        }\n    }\n    ret.resize(unique_count);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp75ffqp2t: /tmp/tmp75ffqp2t.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Initialize result vector\n    std::vector<long> res(l);\n    //\
    \ Iterate over all elements and push them into result\n    for(auto const &e :\
    \ res){\n        auto it = std::find(res.begin(), res.end(), e);\n        if(it\
    \ != res.end()){\n            res.erase(it);\n        }\n    }\n    // Return\
    \ result\n    return res;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp13q8jva9: /tmp/tmp13q8jva9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return std::unique(l.begin(),\
    \ l.end()); // returns iterator to new unique element\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiw23ijdg.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpiw23ijdg.cpp:8:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    8 |     return std::unique(l.begin(),\
    \ l.end()); // returns iterator to new unique element\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  auto ret = std::unique(l.begin(),\
    \ l.end());\n  return std::vector<long>(ret,ret+l.size());\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmgv2qq4i: /tmp/tmpmgv2qq4i.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::sort(l.begin(), l.end()); // sort\
    \ the vector lexicographically\n    for(std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n        if(std::find(result.begin(), result.end(), *it)\
    \ == result.end()) { // if the element is not in the vector\n            result.push_back(*it);\
    \ // then insert it\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::vector<long> ret;\n  std::sort(l.begin(), l.end());\n  for (long\
    \ i : l)\n    ret.push_back(i);\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpcm85678a: /tmp/tmpcm85678a.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::set<long> s;\n    s.reserve(l.size());\n\
    \    for (auto i = l.begin(); i != l.end(); ++i)\n        if (s.find(*i) == s.end())\n\
    \            s.insert(*i);\n    return std::vector<long>(s.begin(), s.end());\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpffjeudpr.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpffjeudpr.cpp:9:7: error: \u2018class std::set<long int>\u2019\
    \ has no member named \u2018reserve\u2019\n    9 |     s.reserve(l.size());\n\
    \      |       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(std::begin(l), std::end(l));\n\
    \    for(size_t i = 0; i < l.size(); ++i) if (std::find(std::begin(u), std::end(u),\
    \ l[i]) == std::end(u)) u.push_back(l[i]);\n    return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::map<long, int> umap;\n    std::set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) == s.end())\
    \ {\n            s.insert(l[i]);\n            u.push_back(l[i]);\n           \
    \ umap[l[i]] = u.size() - 1;\n        }\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsobwcht7: /tmp/tmpsobwcht7.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeyuw29bz: /tmp/tmpeyuw29bz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  long long seen[100000000];\n  for (long long i : l) {\n    seen[i] =\
    \ 1;\n  }\n  std::vector<long> ret;\n  long long i, j, k;\n  for (i = 0; i < 100000000;\
    \ i++) {\n    for (j = 0; j < l.size(); j++) {\n      if (seen[i] == 1) {\n  \
    \      seen[j] = 0;\n        ret.push_back(j);\n      }\n    }\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> temp;\n    for (auto it = l.begin(); it != l.end();\
    \ it++) {\n        auto present = false;\n        for (auto it2 = temp.begin();\
    \ it2 != temp.end(); it2++) {\n            if (*it2 == *it) {\n              \
    \  present = true;\n            }\n        }\n        if (!present) {\n      \
    \      temp.push_back(*it);\n        }\n    }\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu_oxkp8z: /tmp/tmpu_oxkp8z.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    \n    std::sort(l.begin(), l.end());\n \
    \   \n    for(auto &i : l) \n        if(u.find(i) == u.end()) \n            u.push_back(i);\n\
    \    \n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x476hop.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2x476hop.cpp:12:14: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   12 |         if(u.find(i)\
    \ == u.end())\n      |              ^~~~\n"
  stdout: ''
  timestamp: 1660132767
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.sort(std::greater<long>());\n  auto end = std::unique(l.begin(), l.end());\n\
    \  return std::vector<T>(l.begin(), end);\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6sh_1k0b.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6sh_1k0b.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort(std::greater<long>());\n\
    \      |     ^~~~\n/tmp/tmp6sh_1k0b.cpp:9:22: error: \u2018T\u2019 was not declared\
    \ in this scope\n    9 |   return std::vector<T>(l.begin(), end);\n      |   \
    \                   ^\n/tmp/tmp6sh_1k0b.cpp:9:23: error: template argument 1 is\
    \ invalid\n    9 |   return std::vector<T>(l.begin(), end);\n      |         \
    \              ^\n/tmp/tmp6sh_1k0b.cpp:9:23: error: template argument 2 is invalid\n"
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    for (auto it = l.begin(); it != l.end();\
    \ it++) {\n        auto exists = std::find(result.begin(), result.end(), *it);\n\
    \        if (exists == result.end()) {\n            result.push_back(*it);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp56gb128k: /tmp/tmp56gb128k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132768
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> uniques;\n    bool found = false;\n    for (auto\
    \ x : l) { \n        if (found || x != uniques.back()) {\n            found =\
    \ true;\n            uniques.push_back(x);\n        }\n    }\n    return uniques;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  std::adjacent_find(l.begin(),\
    \ l.end(), [&](long l) { return u != l.end(); }); // find first unique element\n\
    \  for (long i = l.end(); i != u.end(); ++i)\n  {\n    u.push_back(*i); // copy\
    \ to u.\n    l.erase(i); // erase from original list \n  }\n  return l;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu0s3dpts.cpp: In lambda function:\n/tmp/tmpu0s3dpts.cpp:9:70: error:\
    \ request for member \u2018end\u2019 in \u2018l\u2019, which is of non-class type\
    \ \u2018long int\u2019\n    9 |   std::adjacent_find(l.begin(), l.end(), [&](long\
    \ l) { return u != l.end(); }); // find first unique element\n      |        \
    \                                                              ^~~\n/tmp/tmpu0s3dpts.cpp:\
    \ In function \u2018std::vector<long int> unique(std::vector<long int>)\u2019\
    :\n/tmp/tmpu0s3dpts.cpp:10:22: error: cannot convert \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018long int\u2019 in initialization\n   10 |   for (long i = l.end();\
    \ i != u.end(); ++i)\n      |                 ~~~~~^~\n      |               \
    \       |\n      |                      std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpu0s3dpts.cpp:10:28: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018long int\u2019 and \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   10 |   for (long i = l.end(); i !=\
    \ u.end(); ++i)\n      |                          ~ ^~ ~~~~~~~\n      |      \
    \                    |         |\n      |                          long int  std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu0s3dpts.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Conta"
  stdout: ''
  timestamp: 1660132767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v;\n    std::set<long> s;\n    for (const auto&\
    \ val : l) {\n        if (s.find(val) == s.end()) {\n            v.push_back(val);\n\
    \            s.insert(val);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2n_fgg4a: /tmp/tmp2n_fgg4a.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end()); \n  auto it=l.begin();\n  std::vector<long>::iterator\
    \ it1=l.begin();\n  std::vector<long>::iterator it2=l.end();\n  it2=it1;\n  it1=it;\n\
    \  it2=it;\n  while (it1!=it2) {\n    if ((*it1).get_value<long>()==(*it2).get_value<long>())\
    \ {\n      it1++;\n      it2--;\n    } else {\n      it1++;\n    }\n  }\n  l.erase(std::unique(it1,\
    \ it2), l.end());\n  return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwb3lnlq8.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwb3lnlq8.cpp:15:16: error: request for member \u2018get_value\u2019\
    \ in \u2018it1.__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator*()\u2019\
    , which is of non-class type \u2018long int\u2019\n   15 |     if ((*it1).get_value<long>()==(*it2).get_value<long>())\
    \ {\n      |                ^~~~~~~~~\n/tmp/tmpwb3lnlq8.cpp:15:26: error: expected\
    \ primary-expression before \u2018long\u2019\n   15 |     if ((*it1).get_value<long>()==(*it2).get_value<long>())\
    \ {\n      |                          ^~~~\n/tmp/tmpwb3lnlq8.cpp:15:26: error:\
    \ expected \u2018)\u2019 before \u2018long\u2019\n   15 |     if ((*it1).get_value<long>()==(*it2).get_value<long>())\
    \ {\n      |        ~                 ^~~~\n      |                          )\n"
  stdout: ''
  timestamp: 1660132768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(ret.empty() || (*it != ret.back()))\n\
    \            ret.push_back(*it);\n    }\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end()); //sort()\
    \ is used to sort vector in ascending order\n    for(long i = 0; i < l.size();\
    \ i++){\n        if(!std::binary_search(l.begin(), l.end(), l[i])){\n        \
    \    u.push_back(l[i]);\n        }\n    }\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpva4zn811: /tmp/tmpva4zn811.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  auto it = std::begin(l);\n  std::vector<long> unique_elements;\n  while\
    \ (it != std::end(l)) {\n    auto next = std::find(it, std::end(l), *it);\n  \
    \  if (next != std::end(l)) {\n      unique_elements.push_back(std::move(*it));\n\
    \      it = next;\n    } else {\n      unique_elements.push_back(*it);\n     \
    \ ++it;\n    }\n  }\n  return unique_elements;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    if (l.empty()) return l;\n    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if\
    \ (std::find(u.begin(), u.end(), *it) == u.end()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.sort( );\n    std::sort( l.begin(), l.end() );\n    std::vector<long>\
    \ ret(l.size());\n    for(auto it : l)\n        ret.push_back(it);\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplwfvda_6.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplwfvda_6.cpp:7:7: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |     l.sort( );\n  \
    \    |       ^~~~\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i = 0; i < l.size(); ++i) {\n        while (u.size() <= i && !(l[i] ==\
    \ l[u.size() - 1])) {\n            u.push_back(l[i]);\n        }\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp582bpjke: /tmp/tmp582bpjke.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> a;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        for(long j = i + 1; j < l.size(); j++)\
    \ {\n            if(l[i] == l[j]) {\n                a.push_back(l[i]);\n    \
    \            l.erase(l.begin() + j);\n            }\n        }\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiz44vhp5: /tmp/tmpiz44vhp5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Sort\n    l.sort();\n    // Keep track of duplicates\n    bool\
    \ done = false;\n    // Create result vector\n    std::vector<long> result(l);\n\
    \    // Go through all elements\n    for (size_t i = 0; i < result.size() - 1;\
    \ i++) {\n        // If it is the same as previous then skip it\n        if (result[i]\
    \ == result[i + 1]) continue;\n        // Else push to result vector\n       \
    \ result.push_back(result[i + 1]);\n        // Set flag to indicate that element\
    \ was already in result\n        done = true;\n    }\n    // If all elements were\
    \ not done yet\n    if (!done) {\n        // Then push the last element to result\
    \ vector\n        result.push_back(result[result.size() - 1]);\n    }\n    //\
    \ Return result vector\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz443478p.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz443478p.cpp:8:7: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    8 |     l.sort();\n   \
    \   |       ^~~~\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeyuw29bz: /tmp/tmpeyuw29bz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    std::size_t\
    \ j = 0, i = 0;\n    for (std::vector<long>::iterator it = l.begin(); it != l.end();\
    \ ++it) {\n        if (i++ == j) {\n            u.push_back(*it);\n        } else\
    \ {\n            if (*it != u[j]) {\n                u.push_back(*it);\n     \
    \           ++j;\n            }\n        }\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // create a set and populate it with the unique elements\n    std::set<long>\
    \ u;\n    u.insert(l.begin(), l.end());\n\n    // return a vector with unique\
    \ elements (elements that are not repeated in u)\n    std::vector<long> uVec(u.begin(),\
    \ u.end());\n\n    // return the set content\n    return uVec;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(long i=0;i<l.size();i++) if(!u.contains(l[i]))\
    \ u.push_back(l[i]);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpf14gi0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnpf14gi0.cpp:8:40: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018contains\u2019\n    8 |     for(long i=0;i<l.size();i++)\
    \ if(!u.contains(l[i])) u.push_back(l[i]);\n      |                          \
    \              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto e: l) {\n        u.push_back(e);\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0hv1hj5i: /tmp/tmp0hv1hj5i.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::unique(l.begin(), l.end());\n\
    \    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp85_spukt: /tmp/tmp85_spukt.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ret;\n    std::set<long> s;\n    std::transform(l.begin(),\
    \ l.end(), std::inserter(s, s.end()), [](auto i) {\n        return i;\n    });\n\
    \    std::vector<long>::iterator it;\n    for (it = s.begin(); it != s.end();\
    \ ++it) {\n        ret.push_back(*it);\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7w23ap8.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpm7w23ap8.cpp:13:23: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019})\n   13 |     for (it\
    \ = s.begin(); it != s.end(); ++it) {\n      |                       ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm7w23ap8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >&)\u2019\n  784\
    \ |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note:   no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&&\u2019\n/tmp/tmpm7w23ap8.cpp:13:29: error: no\
    \ match for \u2018operator!=\u2019 (operand types are \u2018std::vector<long int>::i"
  stdout: ''
  timestamp: 1660132768
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Declare our container with the container type\n    using ContainerType\
    \ = std::vector<long>;\n    // Declare our new container with the container type\n\
    \    ContainerType unique_container;\n    // Declare a new iterator to iterate\
    \ through the elements\n    auto new_iter = unique_container.begin();\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        if (new_iter == unique_container.end())\
    \ {\n            // If we're at the beginning of the container we copy the element\
    \ to the new container\n            unique_container.push_back(*it);\n       \
    \ } else {\n            // If we're not at the beginning of the container then\
    \ we check if the current element is greater than the one we copied into the new\
    \ container\n            if (*it > *(new_iter)) {\n                // If it is\
    \ we move the iterator forward and copy the element to the new container\n   \
    \             new_iter++;\n                unique_container.push_back(*it);\n\
    \            } else {\n                // If it's not we continue looking through\
    \ the container\n                continue;\n            }\n        }\n    }\n\
    \    // We return the new container\n    return unique_container;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(long i=0; i< l.size(); i++) {\n    \
    \    long val = l[i];\n        for(long j=i; j<l.size(); j++) {\n            if(l[j]\
    \ == val) break;\n        }\n        if(j == l.size()) u.push_back(val);\n   \
    \ }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxp7pzhaj.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxp7pzhaj.cpp:13:12: error: \u2018j\u2019 was not declared\
    \ in this scope\n   13 |         if(j == l.size()) u.push_back(val);\n      |\
    \            ^\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Sort a vector in ascending order\n    std::sort(l.begin(), l.end());\n\
    \    // Remove duplicate elements\n    auto unique_end = std::unique(l.begin(),\
    \ l.end()); // Scan unique_end until l is empty\n    l.erase(unique_end, l.end());\
    \ // Remove all duplicate elements\n    return l;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(auto\
    \ i = l.begin(); i != l.end(); ++i)\n        if(*i == *(std::next(i,1)))\n   \
    \         u.push_back(*i);\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpvw5r_win: /tmp/tmpvw5r_win.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long long int count = 0;\n    for (long\
    \ long int x: l)\n        if (x == count)\n            count++;\n        else\n\
    \            l.erase(l.begin() + std::find(l.begin(), l.end(), x));\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sbaz_w0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2sbaz_w0.cpp:13:31: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   13 |             l.erase(l.begin()\
    \ + std::find(l.begin(), l.end(), x));\n      |                     ~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                            |   \
    \          |\n      |                            |             __normal_iterator<[...],[...]>\n\
    \      |                            __normal_iterator<[...],[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp2sbaz_w0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n    \
    \  |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::operator+(typename\
    \ __g"
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end()); \n    return std::unique(l.begin(),\
    \ l.end()); \n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsjg5t0pc.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsjg5t0pc.cpp:8:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    8 |     return std::unique(l.begin(),\
    \ l.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |     \
    \                  |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\t// Use a map to record seen elements\n\t// Using unordered_map would\
    \ make the process O(n^2)\n\tstd::unordered_map<long, int> seen;\n\t// Iterate\
    \ through the vector\n\tfor (auto &elem : l)\n\t\t// If the element has not been\
    \ seen before\n\t\tif (seen.find(elem) == seen.end())\n\t\t\t// Then put it into\
    \ the new vector\n\t\t\tseen.insert(std::make_pair(elem, 1));\n\t\t// Else, if\
    \ the element has been seen before\n\t\telse\n\t\t\t// Then remove it from the\
    \ new vector\n\t\t\tseen.erase(elem);\n\t// Return the new vector\n\treturn std::vector<long>(seen.begin(),\
    \ seen.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp24r2g1ei.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = std::__detail::_Node_iterator<std::pair<const\
    \ long int, int>, false, false>; _ForwardIterator = long int*]\u2019:\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = std::__detail::_Node_iterator<std::pair<const long int, int>, false, false>;\
    \ _ForwardIterator = long int*; _Tp = long int]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = std::__detail::_Node_iterator<std::pair<const\
    \ long int, int>, false, false>; _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:   required from \u2018\
    std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\
    \ [with _InputIterator = std::__detail::_Node_iterator<std::pair<const long int,\
    \ int>, false, false>; <template-parameter-2-2> = void; _Tp = long int; _Alloc\
    \ = std::allocator<long int>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long\
    \ int>]\u2019\n/tmp/tmp24r2g1ei.cpp:21:51:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type must be constructible from value\
    \ type of input range\n  127 |       static_assert(is_constructible<_ValueType2,\
    \ decltype(*__first)>::value,\n      |                            "
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ uniq;\n  bool flag = false;\n  for (int i = 0; i < l.size(); i++) {\n    if\
    \ (flag) {\n      uniq.push_back(l[i]);\n    } else {\n      flag = true;\n  \
    \  }\n  }\n  return uniq;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp7d_a1pis: /tmp/tmp7d_a1pis.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeyuw29bz: /tmp/tmpeyuw29bz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> tmp(l.size());\n    std::size_t i=0;\n    for (auto&\
    \ v : l){\n        auto it = std::find(tmp.begin(), tmp.end(), v);\n        if\
    \ (it == tmp.end()) {\n            tmp[i] = v;\n            i++;\n        }\n\
    \    }\n    return tmp;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp11iux6ih: /tmp/tmp11iux6ih.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Sort elements in increasing order\n    std::sort(l.begin(), l.end());\n\
    \    // If any element has already been visited\n    // return that element\n\
    \    std::vector<long>::iterator it = l.begin();\n    std::vector<long>::iterator\
    \ end = l.end();\n    for (++it; it != end; ++it) {\n        std::vector<long>::iterator\
    \ found = std::find(l.begin(), l.end(), *it);\n        if (found == l.end())\n\
    \            l.push_back(*it);\n    }\n    return l;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpla8qt365: /tmp/tmpla8qt365.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> res(l.size());\n    std::iota(res.begin(), res.end(),\
    \ 0);\n    std::sort(res.begin(), res.end());\n    std::vector<long>::iterator\
    \ it;\n    for (it = res.begin(); it != res.end(); it++) {\n        if (it+1 !=\
    \ res.end() && l[*it] == l[*it+1]) {\n            res.erase(it);\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::unordered_set<long> s;\n    for (auto\
    \ i : l)\n    {\n        if (s.find(i) == s.end())\n            s.insert(i);\n\
    \        else\n            u.push_back(i);\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkyggbt6: /tmp/tmpdkyggbt6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it)\n        ret.push_back(*it);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpefihpnyv: /tmp/tmpefihpnyv.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(std::size_t\
    \ i = 0; i < l.size(); i++){\n        for(std::size_t j = i; j < l.size(); j++){\n\
    \            if(l[i] == l[j]){\n                u.push_back(l[i]);\n         \
    \       break;\n            }\n        }\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpijwb8wo8: /tmp/tmpijwb8wo8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.sort([](const long &a, const long &b) -> bool { return (a < b); });\n\
    \  auto it = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(),\
    \ it);\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zdo9rew.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0zdo9rew.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort([](const long\
    \ &a, const long &b) -> bool { return (a < b); });\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.sort();\n  l.erase(std::unique(l.begin(), l.end()), l.end()); \n \
    \ return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mv3b38w.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4mv3b38w.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::set<long> s;\n    std::set_difference(l.begin(),\
    \ l.end(), s.begin(), s.end(), std::back_inserter(result));\n    return result;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcq92t2hx: /tmp/tmpcq92t2hx.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v;\n    auto inserted = std::inserter(v, v.begin(),\
    \ v.end());\n    auto last = std::unique(v.begin(), v.end());\n    inserted.erase(last,\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0hg1c54.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb0hg1c54.cpp:8:56: error: no matching function for call\
    \ to \u2018inserter(std::vector<long int>&, std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator)\u2019\n    8 |     auto inserted = std::inserter(v, v.begin(),\
    \ v.end());\n      |                                                        ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpb0hg1c54.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:762:5:\
    \ note: candidate: \u2018template<class _Container> std::insert_iterator<_Container>\
    \ std::inserter(_Container&, typename _Container::iterator)\u2019\n  762 |   \
    \  inserter(_Container& __x, typename _Container::iterator __i)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:762:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpb0hg1c54.cpp:8:56: note:   candidate expects 2 arguments, 3\
    \ provided\n    8 |     auto inserted = std::inserter(v, v.begin(), v.end());\n\
    \      |                                                        ^\n"
  stdout: ''
  timestamp: 1660132769
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::begin(l);\n    std::sort(std::begin(l), std::end(l));\n\
    \    std::set<long> s;\n    while(it != std::end(l)) {\n        long t = *it;\n\
    \        if (s.find(t) == s.end()) {\n            s.insert(t);\n            ++it;\n\
    \        }\n    }\n    return std::vector<long>(s.begin(), s.end());\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::unique_copy(l.begin(), l.end(),\
    \ l.begin());\n\treturn l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpn2vd_stn: /tmp/tmpn2vd_stn.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n   auto first = std::begin(l);\n   auto last = std::end(l);\n   auto result\
    \ = std::vector<long>(last, first);\n   std::sort(first, last);\n   return result;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  cannot create std::vector larger than max_size()\n"
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    std::vector<long> result(l.size());\n\
    \    std::adjacent_find(l.begin(), l.end(), [&](auto &a, auto &b){\n        auto\
    \ diff = a - b;\n        long count = 1;\n        if (diff < 0)\n            count\
    \ = -1;\n        else if (a != b)\n            count = 0;\n        else if (diff\
    \ == 0)\n            count = 0;\n        return diff != 0 || count != 0;\n   \
    \ });\n    copy(result.begin(), result.end(), std::back_inserter(result));\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuujjkv_u: /tmp/tmpuujjkv_u.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  return l;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp07w3l4aq: /tmp/tmp07w3l4aq.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> univ;\n    std::sort(l.begin(), l.end());\n    std::sort(l.begin(),\
    \ l.end(), std::greater<long>());\n    univ.assign(l.begin(), l.end());\n    return\
    \ univ;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq4sm_y0j: /tmp/tmpq4sm_y0j.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tauto it = std::unique(l.begin(), l.end());\n\tl.erase(it, l.end());\n\
    \treturn l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmlhcvakv: /tmp/tmpmlhcvakv.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(),\
    \ u.end());\n    std::vector<long> v(l);\n    std::set_difference(v.begin(), v.end(),\
    \ u.begin(), u.end(), std::back_inserter(u));\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqt5goxss: /tmp/tmpqt5goxss.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Your code here\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmponuc3hnj: /tmp/tmponuc3hnj.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // sort your vector in increasing order\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> result;\n    // iterate through the vector\
    \ and keep track of all the elements we've already seen\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        // if the current element we iterate through\
    \ is equal to the last element we've seen so far,\n        // then we can simply\
    \ add that element to our result\n        if (it != result.back())\n         \
    \   result.push_back(*it);\n        // otherwise we keep track of the element\
    \ we've seen so far and check whether it is\n        // not equal to the element\
    \ we're currently on and thus not adding it to our result\n        else\n    \
    \        result.push_back(*it);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpccpzxkbn.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpccpzxkbn.cpp:14:16: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   14 |         if (it !=\
    \ result.back())\n      |             ~~ ^~ ~~~~~~~~~~~~~\n      |           \
    \  |                |\n      |             |                __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}\n      |             __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpccpzxkbn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpccpzxkbn.cpp:14:31: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   14 |         if (it != result.back())\n     \
    \ |                               ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /"
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end()); // sort according\
    \ to value in ascending order\n    for (std::size_t i = 1; i < l.size(); i++)\
    \ { // start from second value\n        if (l[i] == l[i-1]) {\n            continue;\n\
    \        }\n        u.push_back(l.at(i));\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgh98bbyq: /tmp/tmpgh98bbyq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> temp;\n    for (auto it : l) {\n        std::find(temp.begin(),\
    \ temp.end(), it) == temp.end() ? temp.push_back(it) : ;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4vzqiih.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq4vzqiih.cpp:9:86: error: expected primary-expression\
    \ before \u2018;\u2019 token\n    9 |         std::find(temp.begin(), temp.end(),\
    \ it) == temp.end() ? temp.push_back(it) : ;\n      |                        \
    \                                                              ^\n"
  stdout: ''
  timestamp: 1660132770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(long i=0; i<l.size(); ++i){\n      \
    \  for(long j=i+1; j<l.size(); ++j){\n            if(l[i] > l[j]) {\n        \
    \        std::swap(l[i], l[j]);\n            }\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmps_bpxdkb: /tmp/tmps_bpxdkb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::vector<long> u;\n  std::set<long> s;\n  for (long x : l) {\n  \
    \  if (s.find(x) == s.end())\n      s.insert(x);\n    else {\n      u.push_back(x);\n\
    \      s.erase(x);\n    }\n  }\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp89rremje: /tmp/tmp89rremje.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  long long ll=l.size();\n  for(int i=0;i<ll;++i)\n  {\n    long long\
    \ flag=0;\n    for(int j=0;j<i;++j)\n    {\n      if(l[j]==l[i])\n      {\n  \
    \      flag=1;\n        break;\n      }\n    }\n    if(flag)\n      l.erase(std::remove(l.begin(),\
    \ l.end(), l[i]), l.end());\n  }\n  return l;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpf1mlgay5: /tmp/tmpf1mlgay5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> ans(l.end()\
    \ - 1, l.end());\n    std::transform(l.begin(), l.end(), ans.begin(),\n      \
    \             [](long i1, long i2) { return std::find(ans.begin(), ans.end(),\
    \ i1) == ans.end()? i1: i2; });\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ystr3n1.cpp: In lambda function:\n/tmp/tmp_ystr3n1.cpp:10:60:\
    \ error: \u2018ans\u2019 is not captured\n   10 |                    [](long i1,\
    \ long i2) { return std::find(ans.begin(), ans.end(), i1) == ans.end()? i1: i2;\
    \ });\n      |                                                            ^~~\n\
    /tmp/tmp_ystr3n1.cpp:10:21: note: the lambda has no capture-default\n   10 | \
    \                   [](long i1, long i2) { return std::find(ans.begin(), ans.end(),\
    \ i1) == ans.end()? i1: i2; });\n      |                     ^\n/tmp/tmp_ystr3n1.cpp:8:23:\
    \ note: \u2018std::vector<long int> ans\u2019 declared here\n    8 |     std::vector<long>\
    \ ans(l.end() - 1, l.end());\n      |                       ^~~\n/tmp/tmp_ystr3n1.cpp:10:73:\
    \ error: \u2018ans\u2019 is not captured\n   10 |                    [](long i1,\
    \ long i2) { return std::find(ans.begin(), ans.end(), i1) == ans.end()? i1: i2;\
    \ });\n      |                                                               \
    \          ^~~\n/tmp/tmp_ystr3n1.cpp:10:21: note: the lambda has no capture-default\n\
    \   10 |                    [](long i1, long i2) { return std::find(ans.begin(),\
    \ ans.end(), i1) == ans.end()? i1: i2; });\n      |                     ^\n/tmp/tmp_ystr3n1.cpp:8:23:\
    \ note: \u2018std::vector<long int> ans\u2019 declared here\n    8 |     std::vector<long>\
    \ ans(l.end() - 1, l.end());\n      |                       ^~~\n/tmp/tmp_ystr3n1.cpp:10:91:\
    \ error: \u2018ans\u2019 is not captured\n   10 |                    [](long i1,\
    \ long i2) { return std::find(ans.begin(), ans.end(), i1) == ans.end()? i1: i2;\
    \ });\n      |                                                               \
    \                            ^~~\n/tmp/tmp_ystr3n1.cpp:10:21: note: the lambda\
    \ has no capture-default\n   10 |                    [](long i1, long i2) { return\
    \ std::find(ans.begin(), ans.end(), i1) == ans.end()? i1: i2; });\n      |   \
    \                  ^\n/tmp/tmp_ystr3n1.cpp:8:23: note: \u2018std::vector<long\
    \ int> ans\u2019 declared here\n    8 |     std::vector<long> ans(l.end() - 1,\
    \ l.end());\n      |                       ^~~\nIn file included from /usr/include/c"
  stdout: ''
  timestamp: 1660132771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  // Create a set\n  std::set<long> s;\n  // Insert elements in the set\n\
    \  for (long i : l)\n    s.insert(i);\n  // Return unique elements in a vector\n\
    \  return std::vector(s.begin(), s.end());\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132772
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    auto it = l.begin();\n    while\
    \ (it != l.end()) {\n        it = std::adjacent_find(it, l.end());\n        if\
    \ (it == l.end()) {\n            l.erase(it);\n        } else {\n            ++it;\n\
    \        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); i++)\n        std::find(u.begin(), u.end(), *i)\
    \ == u.end() ? u.push_back(*i) : i;\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnfh_g_y.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppnfh_g_y.cpp:10:74: error: second operand to the conditional\
    \ operator is of type \u2018void\u2019, but the third operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n   10 |         std::find(u.begin(), u.end(),\
    \ *i) == u.end() ? u.push_back(*i) : i;\n      |                             \
    \                                             ^\n"
  stdout: ''
  timestamp: 1660132771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> t;\n    std::set<long> s;\n    for (long i : l)\
    \ {\n        if (s.find(i) == s.end()) s.insert(i);\n        else t.push_back(i);\n\
    \    }\n    return t;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmps2d0a_ge: /tmp/tmps2d0a_ge.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::adjacent_find(l.begin(), l.end());\n    if (it == l.end())\
    \ it = l.begin();\n    std::vector<long> result = l;\n    std::adjacent_copy(l.begin(),\
    \ it, std::back_inserter(result));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptexxrj0s.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptexxrj0s.cpp:10:10: error: \u2018adjacent_copy\u2019 is\
    \ not a member of \u2018std\u2019; did you mean \u2018adjacent_find\u2019?\n \
    \  10 |     std::adjacent_copy(l.begin(), it, std::back_inserter(result));\n \
    \     |          ^~~~~~~~~~~~~\n      |          adjacent_find\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    \n    std::vector<long> output;\n    \n    for(long i = 1; i < l.size();\
    \ i++) {\n        if(l[i] != l[i - 1]) {\n            output.push_back(l[i]);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp7z44e1gs: /tmp/tmp7z44e1gs.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // write your code here\n    std::set<long> u;\n    for (auto i :\
    \ l)\n        if (u.find(i) == u.end())\n            u.insert(i);\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk4yqw_nx: /tmp/tmpk4yqw_nx.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n  \
    \  std::unique(l.begin(), l.end(), std::back_inserter(result));\n    return result;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5j7p7dim.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = std::back_insert_iterator<std::vector<long int> >]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:980:20:   required from \u2018_ForwardIterator\
    \ std::__unique(_ForwardIterator, _ForwardIterator, _BinaryPredicate) [with _ForwardIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _BinaryPredicate\
    \ = __gnu_cxx::__ops::_Iter_comp_iter<std::back_insert_iterator<std::vector<long\
    \ int> > >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1042:27:   required from\
    \ \u2018_FIter std::unique(_FIter, _FIter, _BinaryPredicate) [with _FIter = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _BinaryPredicate = std::back_insert_iterator<std::vector<long\
    \ int> >]\u2019\n/tmp/tmp5j7p7dim.cpp:9:63:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \ error: no match for call to \u2018(std::back_insert_iterator<std::vector<long\
    \ int> >) (long int&, long int&)\u2019\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return l;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_ls6iptk: /tmp/tmp_ls6iptk.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\t// Use a set as we only care about unique elements\n\tstd::unordered_set<long>\
    \ uniqueness(l.begin(), l.end());\n\tstd::vector<long> result(uniqueness.size());\n\
    \tstd::copy(uniqueness.begin(), uniqueness.end(), result.begin());\n\treturn result;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4ogm1jk5: /tmp/tmp4ogm1jk5.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> out;\n    out.push_back(l[0]);\n    for(long i =\
    \ 1; i < l.size(); ++i) {\n        auto iter = std::find(out.begin(), out.end(),\
    \ l[i]);\n        if(iter != out.end()) out.erase(iter);\n        out.push_back(l[i]);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpl8dxxcpo: /tmp/tmpl8dxxcpo.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto itr = std::unique(l.begin(), l.end());\n    return std::vector<long>(itr,\
    \ l.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpef3rqqur: /tmp/tmpef3rqqur.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ u;\n    for(size_t i = 0; i < l.size(); ++i) {\n        if(l[i] == l.at(i +\
    \ 1)) {\n            u.push_back(l.at(i + 1));\n            ++i;\n        }\n\
    \    }\n    for(size_t i = l.size() - 1; i != u.size(); ++i)\n        for(size_t\
    \ j = i + 1; j < u.size(); ++j)\n            if(l[j] < u[i])\n               \
    \ std::swap(l[j], u[i]);\n    return u;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::vector<long> ret;\n\tint sz = l.size();\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (int i = 0; i < sz; i++) {\n\t\tbool found = false;\n\t\tfor\
    \ (int j = 0; j < ret.size(); j++) {\n\t\t\tif (l[i] == ret[j]) {\n\t\t\t\tfound\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tret.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  auto it = std::unique(l.begin(), l.end());\n\
    \  return std::vector<long>(std::next(it), l.end());\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpwsltgbxf: /tmp/tmpwsltgbxf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\t// Sort vector l\n\tstd::sort(l.begin(), l.end());\n\t// Remove duplicates\n\
    \tstd::vector<long> u;\n\tfor (auto i = l.begin(); i != l.end(); ++i)\n\t\tif\
    \ (u.find(*i) == u.end())\n\t\t\tu.push_back(*i);\n\treturn u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwx2mmz_t.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwx2mmz_t.cpp:12:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   12 |   if (u.find(*i) ==\
    \ u.end())\n      |         ^~~~\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // write your code here\n    std::vector<long> u;\n    u.clear();\n\
    \    std::sort(l.begin(), l.end());\n    for (const auto &x: l)\n        if (u.find(x)\
    \ == u.end())\n            u.push_back(x);\n    return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_soa8byb.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_soa8byb.cpp:12:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   12 |         if (u.find(x)\
    \ == u.end())\n      |               ^~~~\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ u;\n  for (auto iter = l.begin(); iter != l.end(); ++iter) {\n    if (!u.empty()\
    \ && *iter == *u.back())\n      u.back()++;\n    else\n      u.push_back(*iter);\n\
    \  }\n  return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpax1egmrm.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpax1egmrm.cpp:11:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |     if (!u.empty()\
    \ && *iter == *u.back())\n      |                                        ^\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  std::vector<long> u;\n  std::set<long> s;\n  std::copy(l.begin(), l.end(),\
    \ std::inserter(u, u.begin()));\n  for (long i : l)\n    s.insert(i);\n  std::move(s.begin(),\
    \ s.end(), std::back_inserter(u));\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpf83qp49s: /tmp/tmpf83qp49s.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long> u;\n\tfor (long\
    \ i = 0; i < l.size(); ++i) \n\t\tif (l[i] != i) { u.push_back(l[i]); l[i] = i;\
    \ }\n\treturn u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd3yurhl8: /tmp/tmpd3yurhl8.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> ans;\n    for (std::size_t i = 1; i < l.size();\
    \ ++i)\n        if (l[i] < l[i - 1])\n            std::swap(l[i], l[i - 1]);\n\
    \    else\n        ans.push_back(l[i - 1]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpm92t8qvr: /tmp/tmpm92t8qvr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    // Create a vector to hold unique elements\n    std::vector<long>\
    \ unique;\n    // Copy unique elements to vector\n    std::copy(l.begin(), l.end(),\
    \ std::back_inserter(unique));\n    return unique;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp6x2c1my6: /tmp/tmp6x2c1my6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return std::unique(l.begin(),\
    \ l.end()); \n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpndhh_9h2.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpndhh_9h2.cpp:8:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    8 |     return std::unique(l.begin(),\
    \ l.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |     \
    \                  |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i : l) {\n        if (u.empty() || i != u[u.size() - 1]) {\n         \
    \   u.push_back(i);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v;\n    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    for (; it != l.end();\
    \ ++it) {\n        v.push_back(*it);\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz7hxjhgd: /tmp/tmpz7hxjhgd.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return std::unique(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zkvt7dj.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8zkvt7dj.cpp:8:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    8 |     return std::unique(l.begin(),\
    \ l.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |     \
    \                  |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    long seen[l.size()];\n    for (auto it = std::begin(l); it != std::end(l);\
    \ ++it) {\n        long x = *it;\n        std::fill(std::begin(seen), std::end(seen),\
    \ 0);\n        std::fill(std::begin(seen), std::end(seen), x);\n        std::sort(std::begin(seen),\
    \ std::end(seen));\n    }\n    return std::vector<long>(std::begin(seen), std::end(seen));\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqeaoii93.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqeaoii93.cpp:10:34: error: no matching function for call\
    \ to \u2018begin(long int [(<anonymous> + 1)])\u2019\n   10 |         std::fill(std::begin(seen),\
    \ std::end(seen), 0);\n      |                                  ^\nIn file included\
    \ from /usr/include/c++/9/bits/range_access.h:36,\n                 from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqeaoii93.cpp:2:\n/usr/include/c++/9/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqeaoii93.cpp:10:34: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019\
    \ and \u2018long int*\u2019\n   10 |         std::fill(std::begin(seen), std::end(seen),\
    \ 0);\n      |                                  ^\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqeaoii93.cpp:2:\n/usr/include/c"
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> v;\n    for (long i : l) {\n        auto it = std::find(v.begin(),\
    \ v.end(), i);\n        if (it == v.end()) v.push_back(i);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmph6thc3nn: /tmp/tmph6thc3nn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  l.sort([](long x, long y){return x < y; });\n  std::vector<long> res;\n\
    \  for (long i = 0; i < l.size(); ++i) {\n    if (!res.empty() &&\n        l.at(i)\
    \ == res.back())\n      continue;\n    res.push_back(l[i]);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpttrw54zq.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpttrw54zq.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort([](long x,\
    \ long y){return x < y; });\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(std::begin(l), std::end(l));\n\
    \    for (auto i = std::begin(l); i != std::end(l); ++i) {\n        if (std::find(std::begin(u),\
    \ std::end(u), *i) == std::end(u)) {\n            u.push_back(*i);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::vector<long> out;\n\tstd::sort(l.begin(), l.end());\n\tstd::set<long>\
    \ set;\n\tfor (long e : l) {\n\t\tset.insert(e);\n\t}\n\tfor (long e : set) {\n\
    \t\tout.push_back(e);\n\t}\n\treturn out;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> output;\n    std::sort(l.begin(), l.end());\n  \
    \  for (std::vector<long>::iterator i = l.begin(); i != l.end(); ++i)\n      \
    \  if (*i != *(i-1))\n            output.push_back(*i);\n    return output;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for (long i : l) {\n        auto it = std::find(u.begin(),\
    \ u.end(), i);\n        if (it == u.end()) u.push_back(i);\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8xfz2i66: /tmp/tmp8xfz2i66.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  sort(l.begin(), l.end());\n  std::vector<long> ret;\n  ret.push_back(l.at(0));\n\
    \  for (int i = 1; i < l.size(); ++i) {\n    if (l.at(i) == l.at(i-1)) {\n   \
    \   ret.push_back(l.at(i));\n    } else {\n      ret.push_back(l.at(i));\n   \
    \ }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9jwsndr4: /tmp/tmp9jwsndr4.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(auto\
    \ & item : l)\n        if(!u.count(item))\n            u.push_back(item);\n  \
    \  return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvelmb6za.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvelmb6za.cpp:10:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   10 |         if(!u.count(item))\n\
    \      |               ^~~~~\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    l.sort([](long a, long b){return (a<b) ? 1 : ((a>b) ? -1 : 0)});\n\
    \    std::vector<long> u;\n    std::map<long, bool> m; // Hash table to find out\
    \ duplicate elements in l\n    for(long i: l)\n        m.emplace(i, false); //\
    \ Insert into the hash table\n    for(long i = 0; i <  l.size(); i++)\n      \
    \  if(!m.emplace((l[i]), true).second) // If element already exists, just remove\
    \ it\n            u.push_back(l[i]); // Add to unique vector\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptrqzqb76.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptrqzqb76.cpp:7:7: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |     l.sort([](long\
    \ a, long b){return (a<b) ? 1 : ((a>b) ? -1 : 0)});\n      |       ^~~~\n/tmp/tmptrqzqb76.cpp:\
    \ In lambda function:\n/tmp/tmptrqzqb76.cpp:7:66: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n    7 |     l.sort([](long a, long b){return (a<b)\
    \ ? 1 : ((a>b) ? -1 : 0)});\n      |                                         \
    \                         ^\n      |                                         \
    \                         ;\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long> x;\n\tfor (auto\
    \ it = l.begin(); it != l.end(); ++it)\n\t\tif (it != l.begin())\n\t\t\tif ((*it)\
    \ == ((*it - 1))) {\n\t\t\t\tx.push_back(*it);\n\t\t\t\tl.erase(it);\n\t\t\t}\n\
    \treturn x;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp142t0anq: /tmp/tmp142t0anq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it1 = l.begin(), it2 = l.begin(), it3 = l.begin();\n    if (l.size()\
    \ <= 1) {\n        return l;\n    }\n    if (l.size() <= 2) {\n        for (it1\
    \ = l.begin(); it1 != l.end(); ++it1) {\n            if (*it1 != *it2) {\n   \
    \             l.erase(it2);\n                it2 = l.begin();\n            }\n\
    \        }\n        return l;\n    }\n    // Remove duplicate pairs\n    for (it1\
    \ = l.begin(); it1 != l.end(); ++it1) {\n        for (it2 = l.begin(); it2 !=\
    \ l.end(); ++it2) {\n            if (it1 == it2) {\n                continue;\n\
    \            }\n            if (*it1 == *it2) {\n                l.erase(it2);\n\
    \                it2 = l.begin();\n            }\n        }\n    }\n    // Remove\
    \ duplicate elements\n    for (it1 = l.begin(); it1 != l.end(); ++it1) {\n   \
    \     for (it2 = l.begin(); it2 != l.end(); ++it2) {\n            if (it1 == it2)\
    \ {\n                continue;\n            }\n            if (*it1 != *it2) {\n\
    \                it3 = it1;\n                ++it3;\n                for (; it3\
    \ != l.end(); ++it3) {\n                    if (*it3 != *it2) {\n            \
    \            l.erase(it2);\n                        it2 = l.begin();\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n  // Sort the vector\n  std::sort(l.begin(), l.end());\n  // Return the\
    \ unique elements\n  std::unique_copy(l.begin(), l.end(), std::back_inserter(v));\n\
    \  return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzn8w3dq.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbzn8w3dq.cpp:10:59: error: \u2018v\u2019 was not declared\
    \ in this scope\n   10 |   std::unique_copy(l.begin(), l.end(), std::back_inserter(v));\n\
    \      |                                                           ^\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for(int\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp1m0c20ff: /tmp/tmp1m0c20ff.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    auto it = std::begin(l);\n    std::sort(std::begin(l), std::end(l));\n\
    \    std::unique(std::begin(l), std::end(l), std::back_inserter(it));\n    return\
    \ std::vector<long>{it, std::end(l) };\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpb0x_wmoz.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = std::back_insert_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:980:20:\
    \   required from \u2018_ForwardIterator std::__unique(_ForwardIterator, _ForwardIterator,\
    \ _BinaryPredicate) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _BinaryPredicate = __gnu_cxx::__ops::_Iter_comp_iter<std::back_insert_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > > >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1042:27:\
    \   required from \u2018_FIter std::unique(_FIter, _FIter, _BinaryPredicate) [with\
    \ _FIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _BinaryPredicate\
    \ = std::back_insert_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >]\u2019\n/tmp/tmpb0x_wmoz.cpp:9:67:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \ error: no match for call to \u2018(std::back_insert_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >) (long int&, long int&)\u2019\n  143 |     \
    \    { return bool(_M_comp(*__it1, *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n\tstd::vector<long> u;\n\tstd::sort(l.begin(), l.end());\n\tfor (auto\
    \ x : l)\n\t\tu.push_back(x);\n\treturn u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpxkprl35d: /tmp/tmpxkprl35d.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    std::sort(l.begin(), l.end()); \n    std::sort(u.begin(),\
    \ u.end());\n    return u;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmpsle2g05v: /tmp/tmpsle2g05v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> u;\n    for(size_t i=0; i<l.size(); i++){\n    \
    \    bool exist = false;\n        for(size_t j=0; j<u.size(); j++){\n        \
    \    if(l[i] == u[j])\n                exist = true;\n        }\n        if(!exist)\n\
    \            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: Exception
  stderr: 'tmp7wedpbua: /tmp/tmp7wedpbua.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==
    (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))''
    failed.

    '
  stdout: ''
  timestamp: 1660132774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
    \ l) {\n    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    \n\
    \    // Remove adjacent duplicates\n    if (l.size() <= 1) return l;\n    \n \
    \   // Find left bound and right bound for non-adjacent duplicates\n    int left\
    \ = 0;\n    int right = l.size() - 1;\n    \n    // Keep looking while we have\
    \ elements to remove\n    while (left < right) {\n        // Remove left bound\n\
    \        auto mid = std::upper_bound(l.begin(), l.end(), l[left]) - l.begin();\n\
    \        \n        // Remove right bound\n        auto mid2 = std::upper_bound(l.begin(),\
    \ l.end(), l[right]) - l.begin();\n        \n        // Remove element at left\
    \ bound\n        std::swap(l[mid], l[mid2]);\n        \n        // Advance left\
    \ bound\n        left++;\n        \n        // Advance right bound\n        right--;\n\
    \    }\n    \n    // Remove elements in reverse order\n    std::reverse(l.begin(),\
    \ l.end());\n    \n    // Add remaining elements\n    std::merge(l.begin(), l.begin()\
    \ + left, l.end(), std::back_inserter(res));\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2xtw_rmh.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2xtw_rmh.cpp:39:77: error: no matching function for call\
    \ to \u2018merge(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, std::vector<long int>::iterator, std::back_insert_iterator<std::vector<long\
    \ int> >)\u2019\n   39 |     std::merge(l.begin(), l.begin() + left, l.end(),\
    \ std::back_inserter(res));\n      |                                         \
    \                                    ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2xtw_rmh.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4955:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter>\
    \ _OIter std::merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter)\u2019\n 4955 |\
    \     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n      |     ^~~~~\n\
    /usr/include/c++/9/bits/stl_algo.h:4955:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp2xtw_rmh.cpp:39:77: note:   deduced conflicting types for parameter\
    \ \u2018_IIter2\u2019 (\u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018std::back_insert_iterator<std::vector<long int> >\u2019\
    )\n   39 |     std::merge(l.begin(), l.begin() + left, l.end(), std::back_inserter(res));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:62,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp2xtw_rmh.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5005:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter,\
    \ _Compare)\u2019\n 5005 |     merge(_InputIterator1 __first1, _InputIterator1\
    \ __last1,\n      |     ^~~~~\n/usr/include/c++/9/bits/stl_algo.h:5005:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp2"
  stdout: ''
  timestamp: 1660132773
