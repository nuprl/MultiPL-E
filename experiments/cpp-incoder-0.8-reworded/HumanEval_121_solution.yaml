name: HumanEval_121_solution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
  \ of integers, return the sum of all of the odd elements that are in even positions.\n\
  // Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n\
  // (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3,\
  \ (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24,\
  \ (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
  \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
  \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
completions: ["    if(lst.size() < 2) return 0;\n    long ans = 0, i = 0;\n    for(;\
    \ i < lst.size(); i = i + 2) {\n        ans = ans + lst[i];\n    }\n    return\
    \ ans;", "    long long ret=0;\n    for (long long i=0;i<lst.size();i++)\n   \
    \ {\n        if (i%2==0)\n        {\n            ret+=lst[i];\n        }\n   \
    \ }\n    return ret;", "    std::pair<long, long> min = std::min({std::min(lst),\
    \ std::min(lst.begin() + 1, lst.end())});\n    std::pair<long, long> max = std::max({std::max(lst),\
    \ std::max(lst.begin(), lst.end())});\n    return lst.end() - lst.begin() + (lst.end()\
    \ - lst.begin()) / 2 +\n            ((lst.end() - lst.begin()) % 2 ? std::count(lst.begin(),\
    \ lst.end(), min.first) - std::count(lst.begin(), lst.end(), min.first) : 0);",
  "    long result = 0;\n    std::vector<int> evens(lst.size());\n    for(size_t i\
    \ = 0; i < lst.size(); i++)\n        if(i % 2 == 0) {\n            evens[i] =\
    \ lst[i];\n            result += evens[i];\n        }\n    return result % 2;",
  "    long ans = 0;\n    for(long i=0;i<lst.size();i+=2)\n        ans += lst[i];\n\
    \    return ans;", "   long sum=0;\n   long temp=0;\n   for(auto i=lst.begin()+1;\
    \ i<lst.end(); i++){\n     if(*(i%2)==1)\n       temp=*i;\n       sum+=temp;\n\
    \   }\n   return sum;", "    int sum = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i & 1] % 2 == 0)\n            sum += lst[i];\n    }\n\
    \    return sum;", "    // Your code here\n    long sum = 0;\n    for (int i =\
    \ 0; i < lst.size(); i++){\n        if (i % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n\
    \    for (size_t i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n  \
    \          long long sum = 0;\n            for (long j = i; j < lst.size(); j\
    \ += 2) {\n                sum += lst[j];\n            }\n            if (sum\
    \ > 0) {\n                return sum;\n            }\n        }\n    }\n    return\
    \ 0;", "  long ans=0;\n  for (auto it=lst.begin();it!=lst.end();it++){\n    auto\
    \ i=std::distance(it.begin(),std::find(it.begin(),it.end(),*it));\n    if (i%2==1)\
    \ ans+=*it;\n  }\n  return ans;", "    long long res = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            res += lst[i];\n\
    \        }\n    }\n    return res;", "  long ans = 0;\n  for (int i = 0; i < (int)lst.size();\
    \ i++) {\n    bool isOdd = (lst[i] % 2 != 0);\n    if (isOdd) {\n      ans +=\
    \ lst[i];\n    }\n  }\n  return ans;", "  long ans = 0;\n  // iterate through\
    \ the vector\n  for(size_t i = 0; i < lst.size(); i++) {\n    if(i % 2 == 0) {\n\
    \      ans += lst[i];\n    }\n  }\n  return ans;", "  std::sort(lst.begin(), lst.end());\n\
    \  long s = 0;\n  for (size_t i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0) {\n      s += lst[i];\n    }\n  }\n  return s;", "    // Your code goes here\n\
    \    long sum = 0;\n    long odd_count = 0;\n    long even_count = 0;\n    for\
    \ (long val : lst) {\n        if(val%2 == 0){\n            even_count++;\n   \
    \     }\n        else{\n            odd_count++;\n        }\n    }\n    for(long\
    \ i=0;i<lst.size();i++){\n        if(lst[i]%2 == 1){\n            sum = sum +\
    \ lst[i];\n        }\n    }\n    return (odd_count*even_count)+sum;", "  int n\
    \ = lst.size();\n  for (int i = 0; i< n; i++) {\n    if (lst[i]%2 == 0) \n   \
    \   lst[i] = lst[i] - 1;\n  }\n  long ans = 0;\n  for (int i = 0; i< n; i++) {\n\
    \    if (lst[i]%2 == 1) \n      ans += lst[i];\n  }\n  return ans;", "    // your\
    \ code goes here\n    long ans=0;\n    for(long i=0;i<lst.size();i++){\n     \
    \   if(lst[i]%2==0){\n            ans=ans+lst[i];\n        }\n    }\n    return\
    \ ans;", "  // Your code here\n  std::sort(lst.begin(), lst.end());\n  std::reverse(lst.begin(),\
    \ lst.end());\n  std::pair<long, long> largest(lst.back(), lst[0]);\n  long ans\
    \ = largest.second - largest.first;\n  for (auto i = lst.size() - 1; i >= 0; --i)\
    \ {\n    if (lst[i] % 2 == 1) {\n      ans += (lst[i + 1] - lst[i - 1]);\n   \
    \ }\n  }\n  return ans;", "    // Your code here\n    assert(lst.size() > 0);\n\
    \    long total = 0;\n    for(long index = 0; index < lst.size(); index++) {\n\
    \        if(index % 2 == 0) {\n            if(lst[index] % 2 != 0) {\n       \
    \         total += lst[index];\n            }\n        }\n    }\n    return total;",
  "    assert(lst.size() > 0);\n    long long ans = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] % 2 == 1){\n            ans += lst[i];\n        }\n\
    \    }\n    return ans;", "    assert(lst.size() >= 1);\n    std::vector<int>\
    \ even;\n    std::vector<int> odd;\n    for(auto it=lst.begin(); it!=lst.end();\
    \ ++it) {\n        if(it%2 == 0) {\n            even.push_back(*it);\n       \
    \ }\n        else {\n            odd.push_back(*it);\n        }\n    }\n    long\
    \ sum = 0;\n    for(auto it=even.begin(); it!=even.end(); ++it) {\n        sum\
    \ += *it;\n    }\n    for(auto it=odd.begin(); it!=odd.end(); ++it) {\n      \
    \  sum += *it;\n    }\n    return sum;", "        std::vector<long> copy;\n  \
    \      copy.push_back(lst[0]);\n        for (int i = 1; i < lst.size(); i++) {\n\
    \                long sum = 0;\n                for (int j = 0; j < copy.size();\
    \ j++) {\n                        if (copy[j] % 2 != 0 && lst[i] % 2 == 0 && lst[i]\
    \ > copy[j]) {\n                                sum += lst[i];\n             \
    \                   copy.erase(copy.begin() + j);\n                        }\n\
    \                }\n                copy.push_back(sum);\n        }\n        return\
    \ copy[0];", "    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n \
    \       if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "    if(lst.size()==0) return 0;\n    long ans=0;\n    long n=lst.size();\n\
    \    long i=0;\n    while(i<n){\n        if(lst[i]%2==0){\n            ans+=lst[i];\n\
    \            i++;\n        }else{\n            i++;\n        }\n    }\n    return\
    \ ans;", "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n    \
    \    if (((i%2) == 0) && lst[i] % 2 != 0) {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;", "    // write your code here\n    long sum=0;\n\
    \    for(long i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        long sumOdd = lst[i];\n        if\
    \ (i % 2 == 0) {\n            sumOdd += lst[(i + 1)];\n        }\n        sum\
    \ += sumOdd;\n    }\n    return sum;", "    // code here\n    long sum = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 == 1)\n \
    \           sum += lst[i];\n    }\n    return sum;", "    if (lst.empty()) return\
    \ 0;\n    std::stack<long> s;\n    for (long &i : lst) s.push(i);\n    s.top()\
    \ += s.top();\n    while (!s.empty()) {\n        long i = s.top();\n        s.pop();\n\
    \        for (long &j : lst) j += (j % 2) ? i : -i;\n    }\n    return s.top();",
  "    long sum = 0;\n    std::sort(lst.begin(), lst.end());\n    for(auto i : lst)\
    \ {\n        if(i%2 == 0) {\n            sum+=i;\n        }\n    }\n    return\
    \ sum;", "    // write your code here\n    // for(int i=0;i<lst.size();i++){\n\
    \    //      int temp=lst[i];\n    //      lst[i]=lst[temp%2];\n    //      lst[temp%2]=temp;\n\
    \    // }\n\n    long long sum=0;\n    for(long i=0;i<lst.size();i+=2)\n    {\n\
    \        sum+=lst[i];\n    }\n    return sum;", "    // code here\n    int sum\
    \ = 0;\n    for(int i = 0; i < lst.size(); i += 2)\n        sum += lst[i];\n \
    \   return sum;", "    int oddSum = 0;\n    long ans = 0;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        bool isOdd = (lst[i] % 2) == 1;\n        if\
    \ (isOdd && i % 2 == 0) {\n            oddSum += lst[i];\n        } else if (isOdd\
    \ && i % 2 == 1) {\n            oddSum -= lst[i];\n        }\n        ans += oddSum;\n\
    \    }\n    return ans;", '    return lst.at(lst.size() - 1) - lst.at(lst.size()
    - 2);', "    std::cout << std::accumulate(lst.begin(), lst.end(), 0);\n    return\
    \ 0;", "    long long sum = 0;\n    int len = lst.size();\n    for(int i=0;i<len;i++)\
    \ {\n        long long x = lst[i];\n        if(x % 2 == 1) sum += x;\n    }\n\
    \    return sum;", "    // code here\n    long sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0)\n            sum += lst[i];\n\
    \    }\n    return sum;", "    long s = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i & 1) s += lst[i];\n    }\n    return s;", "    long sum\
    \ = 0;\n    long evenPos = 0;\n    for (auto i = 0; i < (long)lst.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            evenPos += lst[i];\n        } else\
    \ {\n            sum += (lst[i] - evenPos);\n        }\n    }\n    return sum;",
  "    auto odd = std::partition(lst.begin(), lst.end(), [](long n) { return (n &\
    \ 1); });\n    return (odd.end() - lst.begin()) / 2;", "    long sum = 0;\n  \
    \  assert(lst.size() > 0);\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   if (i % 2 == 0) {\n            if (lst[i] % 2 != 0) {\n                sum\
    \ = sum + lst[i];\n            }\n        } else {\n            if (lst[i] % 2\
    \ != 0) {\n                sum = sum - lst[i];\n            }\n        }\n   \
    \ }\n    return sum;", "    // Your code here\n    return lst.empty() ? 0 : (lst.size()\
    \ - 1) / 2;", "    int sum = 0;\n    long odd = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] % 2 != 0)\n        {\n        \
    \    sum = sum + odd;\n            odd = lst[i];\n        }\n        else\n  \
    \      {\n            odd = lst[i];\n        }\n    }\n    return sum;", "   \
    \ std::vector<bool> v (lst.size(), false);\n    // Find the sum of odd elements\
    \ that are in even positions\n    for (long i : lst) {\n        if (v[i]) {\n\
    \            long sum = 0;\n            while (i & 1) { sum += i; i >>= 1; }\n\
    \            return sum;\n        }\n        v[i] = true;\n    }\n    return 0;",
  "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;", " \
    \   // write your code in C++17 (required for std::count)\n    int sum = 0;\n\
    \    std::for_each(lst.begin(), lst.end(), [&sum](int n){\n        if (n % 2 ==\
    \ 0){\n            sum += n;\n        }\n    });\n    return sum;", "    if (lst.size()\
    \ <= 0)\n        return 0;\n    long long ans = 0;\n    for (int i = 0; i < lst.size()\
    \ - 1; ++i) {\n        if (lst[i] % 2 == 1)\n            ans += lst[i];\n    }\n\
    \    return ans;", "\t// Write your code here.\n\t// O(log N) time and space\n\
    \tlong long sum = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i & 1)\
    \ {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;", "    // Write your code\
    \ here\n    // vector<long> l1 = {(long)3, (long)3, (long)3, (long)3, (long)3};\n\
    \    // vector<long> l2 = {(long)30, (long)13, (long)24, (long)321};\n    // vector<long>\
    \ l3 = {(long)3, (long)3, (long)3, (long)3, (long)3};\n    // vector<long> l4\
    \ = {(long)30, (long)13, (long)24, (long)321};\n    long ans = 0;\n    std::vector<long>\
    \ even;\n    for (auto i : lst)\n        if (i % 2 == 0)\n            even.push_back(i);\n\
    \    for (auto i : even) {\n        long sum = 0;\n        for (auto j : lst)\n\
    \            if (j % 2 == 1)\n                sum += j;\n        ans += sum;\n\
    \    }\n    return ans;", "    // code here\n    long sum = 0;\n    long long\
    \ oddPos = 0;\n    long long evenPos = 0;\n    for(long long i = 0; i < lst.size();\
    \ i++){\n        if(i % 2 == 1){\n            sum += lst[i];\n            evenPos++;\n\
    \        }\n        else{\n            if(oddPos == 0){\n                sum +=\
    \ lst[i];\n            }\n            else{\n                sum += lst[i] - lst[oddPos];\n\
    \            }\n            oddPos++;\n        }\n    }\n    \n    if(oddPos ==\
    \ 0){\n        sum += lst[lst.size()-1];\n    }\n    \n    \n    return sum;",
  "  // Your code here\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n\
    \    if (i % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "  \
    \  // code here\n    if(lst.size() <= 1) return 0;\n    long ans = 0;\n    long\
    \ val = 0;\n    long last = 0;\n    for(long i = 0; i < lst.size(); i++){\n  \
    \      val = val * 2 + lst[i];\n        if(val % 2 == 0 && val >= last){\n   \
    \         ans = ans + last;\n        }\n        last = val;\n    }\n    return\
    \ ans;", "    int sum = 0;\n    assert(lst.size() > 0);\n    for (int i = 0; i\
    \ < lst.size(); i += 2) {\n        sum += lst[i];\n    }\n    return sum;", " \
    \   // code here\n    long sum = 0;\n    for (long i = 0L; i < lst.size(); ++i)\n\
    \    {\n        if (i % (lst.size() / 2) == 0)\n            sum += lst[i];\n \
    \   }\n    return sum;", "  std::sort(lst.begin(), lst.end());\n  auto it = std::find_if(lst.begin(),\
    \ lst.end(), [&](long x) { return x & 1; });\n  long sum = 0;\n  while (it !=\
    \ lst.end()) {\n    sum += *it;\n    ++it;\n  }\n  return sum;", "  std::sort(lst.begin(),\
    \ lst.end());\n  long sum = 0;\n  for (long long i = 0; i < lst.size(); i++) {\n\
    \    if (i % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "  long\
    \ res = 0;\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] % 2 != lst[i\
    \ - 1] % 2) {\n      res += lst[i];\n    }\n  }\n  return res;", "    long ans=0;\n\
    \    long odd=0;\n    for (size_t i=0; i<lst.size(); i++) {\n        if (lst[i]%2==0)\
    \ {\n            odd+=lst[i];\n        } else {\n            ans=ans+odd;\n  \
    \          odd=0;\n        }\n    }\n    ans=ans+odd;\n    return ans;", "  long\
    \ sum = 0;\n  int i = 0;\n  while (i != lst.size()) {\n    if (lst[i++] % 2 ==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "    long sum = 0;\n\
    \    for(long i = 0; i < lst.size(); i++){\n        if(lst[i]%2 == 0)\n      \
    \      sum += lst[i];\n    }\n    return sum;", "    if (lst.size() <= 0) return\
    \ 0;\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n       \
    \ if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "  assert(lst.size() > 0);\n  // We will store the sum\n  long ans =\
    \ 0;\n  \n  // We will traverse the vector and keep a count of even positions\n\
    \  int i = 0;\n  while (lst.size() > 0 && i < (int) lst.size() / 2) {\n    if\
    \ (lst[i] % 2 == 0) {\n      ans += lst[i];\n      lst.erase(lst.begin() + i);\n\
    \    } else {\n      i++;\n    }\n  }\n  return ans;", "    long sum = 0;\n  \
    \  bool odd = true;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ % 2 != 0) {\n            odd = false;\n        }\n        if (odd) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;", "    if(lst.size()\
    \ == 0)\n        return 0;\n    if(lst.size() == 1)\n        return lst[0];\n\
    \    long sum = 0;\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 != 0 && lst[i] % 3 == 0)\n            sum += lst[i];\n    }\n    return\
    \ sum;", "    // Write your code here\n    long sum = lst[0], j = 1;\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] % 2 != 0 && lst[i] !=\
    \ sum) {\n            sum += j;\n            j = lst[i] + 1;\n        }\n    }\n\
    \    return sum;", '    return lst.at(lst.size() - 1);', "    std::stack<long>\
    \ s;\n    for (auto &i : lst) {\n        if (i % 2 == 0) {\n            s.push(i);\n\
    \        } else {\n            while (!s.empty() && s.top() % 2 == 0) {\n    \
    \            s.pop();\n            }\n            long r = s.top() + i;\n    \
    \        s.push(r);\n        }\n    }\n    return s.top();", "    long sum = 0;\n\
    \    for (auto i : lst) {\n        if (i % 2 != 0)\n            sum += i;\n  \
    \  }\n    return sum;", "    long ans = 0;\n    for (long &i : lst) {\n      \
    \  if (i % 2 == 0)\n            ans += i;\n    }\n    return ans;", "\t// code\
    \ here\n\tlong result = 0;\n\tassert(lst.size() > 0);\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i%2 != 0) result += lst[i];\n\t}\n\treturn result;", "  assert(lst.size()\
    \ != 0);\n  if (lst.size() == 0) {\n    return 0;\n  }\n  std::pair<long, long>\
    \ lastElement = { lst[0], lst[0] };\n  for (auto it = lst.cbegin() + 1; it !=\
    \ lst.cend(); ++it) {\n    if (lastElement.first > it->first) {\n      lastElement.second\
    \ = lastElement.first + it->first;\n    } else {\n      lastElement.first = it->first;\n\
    \    }\n  }\n  return lastElement.second;", "    long res = 0;\n    for(auto it\
    \ = lst.begin() + 1; it != lst.end(); ++it) {\n        if(*it % 2 == 1) {\n  \
    \          res+=*it;\n        }\n    }\n    return res;", "    long sum = 0;\n\
    \    long odd = 1;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst.at(i)\
    \ % 2 != 0) {\n            sum += odd;\n            odd = 1;\n        }\n    \
    \    else {\n            odd++;\n        }\n    }\n    return sum;", "    long\
    \ res = 0;\n    for (std::size_t i=0; i<lst.size(); ++i) {\n        long val =\
    \ lst[i];\n        if (val % 2 == 0) {\n            for (std::size_t j=i+1; j<lst.size();\
    \ ++j) {\n                if (lst[j] % 2 == 1) {\n                    val += lst[j];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     res += val;\n    }\n    return res;", "    int sum=0;\n    for (int i=0;\
    \ i<lst.size(); i++){\n        if (lst[i] % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for(long i = 0; i\
    \ < lst.size(); i++) {\n        if(i%2==0)\n            sum += lst[i];\n     \
    \   else\n            sum += lst[i] + lst[i - 1];\n    }\n    return sum;", " \
    \   if (lst.size() == 0)\n        return 0;\n    long ans = 0;\n    // Loop in\
    \ O(N) where N is number of elements\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] % 2 != 0)\n            continue;\n        // If the current\
    \ element is odd and current position is even,\n        // then add it to the\
    \ sum.\n        if (i + 2 < lst.size() && lst[i] % 2 == lst[i + 2] % 2) {\n  \
    \          ans += lst[i];\n        }\n    }\n    return ans;", "    // code here\n\
    \    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i\
    \ % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    std::vector<bool> v(lst.size(), 0);\n    for (int i=0; i<lst.size();\
    \ i++) {\n        v[i] = (v[i] + lst[i]) % 2 != 0;\n        sum += v[i] ? lst[i]\
    \ * 2 : 0;\n    }\n    return sum;", "    int sum = 0;\n    long result = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0) sum += lst[i];\n\
    \        else result = result + lst[i];\n    }\n    return result + sum;", " \
    \   long sum = 0;\n    long curr = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            sum += lst[i];\n            curr +=\
    \ lst[i];\n        }\n        else {\n            if (curr != 0) {\n         \
    \       sum += curr - (lst[i] / 2);\n                curr = 0;\n            }\n\
    \        }\n    }\n    return sum;", "  std::sort(lst.begin(), lst.end());\n \
    \ std::pair<long, long> l = std::equal_range(lst.begin(), lst.end(), lst.begin()\
    \ + 1);\n  if (l.second - l.first == 2) return 0;\n  return lst.at(l.second) %\
    \ 2 != 0 ? lst.at(l.second) + lst.at(l.first + 1) - l.first + 1 : 0;", "    //\
    \ Your code here\n    std::sort(lst.begin(), lst.end(), std::greater<long>());\n\
    \    lst.erase(lst.begin()+(lst.size()/2), lst.end());\n    return *std::max_element(lst.begin(),\
    \ lst.end()); // return max odd element", "    long s = 0;\n    for (long &i :\
    \ lst) {\n        if (i % 2 != 0) {\n            s += i;\n        }\n    }\n \
    \   return s;", "\tlong sum = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\
    \tif (i%2 == 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;", "    int\
    \ n = lst.size();\n    int total = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (i % 2 == 0)\n            total += lst[i];\n    }\n    return total;",
  "  std::sort(lst.begin(), lst.end());\n  return std::accumulate(lst.begin(), lst.end(),\
    \ 0);", "    assert(lst.size() > 0);\n    long sum = 0;\n    for (size_t i = 0;\
    \ i < lst.size(); ++i) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n\
    \    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i - 1] % 2 ==\
    \ 0) {\n            lst.erase(--lst.begin());\n        } else {\n            lst.erase(std::remove(lst.begin(),\
    \ lst.end(), lst[i]), lst.end());\n        }\n    }\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0ll);", "    // Your code here\n    int sum = 0;\n    for(int i=0;i<lst.size();i++){\n\
    \        \n        for(int j=1;j<lst.size();j++){\n            if(j%2==1){\n \
    \               sum+=lst[j];\n            }\n        }\n    }\n    return sum;",
  "    // code here\n    std::vector<long> even;\n    std::vector<long> odd;\n   \
    \ even.reserve(lst.size());\n    for (long i : lst) {\n        if (i % 2 == 0)\
    \ {\n            even.push_back(i);\n        } else {\n            odd.push_back(i);\n\
    \        }\n    }\n    long sum = 0;\n    for (long i : even) {\n        sum +=\
    \ i;\n    }\n    for (long i : odd) {\n        if (i % 2 == 1) {\n           \
    \ sum += i;\n        }\n    }\n    return sum;", "    if(lst.size() == 0)\n  \
    \      return 0;\n    long res = 0;\n    long odd_sum = lst[0];\n    for(size_t\
    \ i = 1; i < lst.size(); i++) {\n        if(lst[i] % 2 != 0) {\n            odd_sum\
    \ += lst[i];\n        } else {\n            res += odd_sum;\n            odd_sum\
    \ = lst[i];\n        }\n    }\n    return res;", "    assert(lst.size() > 0);\n\
    \    if (lst.size() == 1)\n        return lst[0];\n    long s = 0;\n    for (auto\
    \ i : lst) {\n        if (i % 2 == 0)\n            s += i;\n    }\n    return\
    \ s;", "    long sum = 0;\n    for (std::size_t i = 0; i < lst.size(); i++) {\n\
    \        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;", "    long ans = 0;\n    for(long i : lst) {\n        if(i&1) {\n\
    \            ans += i;\n        }\n    }\n    return ans;", "    long even = 0;\n\
    \    long odd = 0;\n    for(long i=0; i<lst.size(); i++)\n    {\n        if(lst[i]\
    \ % 2 == 0)\n            even = even + lst[i];\n        else\n            odd\
    \ = odd + lst[i];\n    }\n    return (odd + even);", "    long oddSum = 0;\n \
    \   long evenSum = 0;\n    int count = 0;\n    for(auto i = lst.begin(); i !=\
    \ lst.end(); ++i)\n    {\n        if ((*i & 1) == 1)\n            evenSum += (*i);\n\
    \        else\n            oddSum += (*i);\n        count++;\n        if (count\
    \ == 2)\n            break;\n    }\n    if (count == 0)\n        return (0);\n\
    \    return oddSum + evenSum;", "    long sum = 0;\n    // Complete this function\n\
    \    auto itr = lst.cbegin();\n    auto itr2 = itr + 1;\n    while(true){\n  \
    \      if(*itr % 2 == 0 && *itr2 % 2 == 0){\n            sum += *itr;\n      \
    \  }\n        itr++;\n        itr2++;\n        if(itr2 == lst.cend()){\n     \
    \       break;\n        }\n    }\n    return sum;", "    assert(lst.size() > 0);\n\
    \    long ans = 0;\n    for (auto i : lst) {\n        if (i % 2 == 1) ans += i;\n\
    \    }\n    return ans;", "    // Write your code here\n    long long ans = 0;\n\
    \    for (int i=0; i<lst.size(); i++) {\n        if (i%2==0)\n            ans\
    \ += lst[i];\n    }\n    return ans;", "    long sum = 0;\n    for (long i : lst)\n\
    \        if (i % 2 == 1)\n            sum += i;\n    return sum;", "    long sum\
    \ = 0;\n    long even = 0;\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    if (lst.at(i) % 2 == 0) {\n            even += lst.at(i);\n        }\n  \
    \  }\n    sum = even + (lst.at(lst.size() - 1) % 2);\n    return sum;", "    //\
    \ write your code in C/C++\n    if(lst.size() <= 0)\n        return 0;\n    long\
    \ evenSum = 0;\n    long oddSum = 0;\n    for(auto &val : lst)\n        if(val\
    \ & 1)\n            oddSum += val;\n        else\n            evenSum += val;\n\
    \    return evenSum + oddSum;", "    // Your code here\n    long ans = 0;\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (auto itr = lst.begin(); itr !=\
    \ lst.end(); ++itr) {\n        if(*itr % 2 == 0)\n            ans += *itr;\n \
    \   }\n    return ans;", "    long sum=0;\n    assert(lst.size() > 0);\n    for(long\
    \ i=0;i<lst.size();i++)\n    {\n        if (lst[i] % 2 != 0)\n        {\n    \
    \        sum += lst[i];\n        }\n    }\n    return sum;", "  // Your code here\n\
    \  long sum = 0;\n  std::sort(lst.begin(), lst.end());\n  for (long i = 0; i <\
    \ lst.size(); i++) {\n    if(i % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;", "    long sum = 0;\n    long pos = 0;\n    for (long i = 0; i\
    \ != lst.size(); i++) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \            pos = i;\n        }\n    }\n    return sum - lst[pos];", "    //\
    \ Write your code here\n    long sum = 0;\n    for (auto i : lst)\n        if\
    \ (i % 2 == 1)\n            sum += i;\n    return sum;", "    // code here\n \
    \   long sum = 0;\n    std::for_each(lst.begin(), lst.end(), [&sum](int i){\n\
    \        if (i%2==1){\n            sum += i;\n        }\n    });\n    return sum;",
  "    long ans = 0;\n    assert(lst.size() != 0);\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] % 3 == 0)\n            ans +=\
    \ lst[i];\n    }\n    return ans;", "  if (lst.size() == 0 || lst.front() % 2\
    \ != 0)\n    return 0;\n\n  long long sum = 0;\n  for (auto it1 = lst.begin();\
    \ it1 != lst.end(); it1++) {\n    if (*it1 % 2 == 0)\n      sum += *it1;\n  }\n\
    \n  return sum % 10;", "    long sum = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] % 2 == 0 && i != (lst[i] / 2))\n            sum +=\
    \ lst[i];\n    }\n    return sum;", "    long ans = 0;\n    std::sort(lst.begin(),\
    \ lst.end());\n    long last_even = (lst[lst.size() - 1] + 1) % 2;\n    for (long\
    \ val : lst) {\n        if (last_even && val % 2) {\n            ans += val;\n\
    \        }\n        last_even = (val % 2);\n    }\n    return ans;", "    long\
    \ sum = 0;\n    // Use assert to enforce your invariants\n    assert(lst.size()\
    \ >= 1);\n    long mid = lst.size() / 2;\n    for (auto x : lst) {\n        if\
    \ (x % 2 == 0) {\n            sum += x;\n        } else if (x % 2 != 0) {\n  \
    \          sum += mid + x;\n        }\n    }\n    return sum;", "    std::vector<bool>\
    \ v (lst.begin(), lst.end());\n    int sum=0;\n    // This loop sums odd elements\n\
    \    for(auto it = v.begin();it != v.end();it+=2) {\n        sum+=*it;\n    }\n\
    \    return sum;", "    // Your code goes here\n    if(lst.empty() || lst.size()\
    \ < 1)\n        return 0;\n    long sum = 0;\n    long long maxIndex = 0;\n  \
    \  for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0) {\n   \
    \         sum = sum + lst[i];\n            maxIndex = i;\n        }\n    }\n \
    \   return sum;", "    long s = 0;\n    long i = 0;\n    long start = 0;\n   \
    \ long last = lst[1] - lst[0] + 1;\n    if (last == 0) {\n        return 0;\n\
    \    }\n    bool isEven = true;\n    while (i < last) {\n        if (lst[start\
    \ + i] % 2 == 0 && isEven) {\n            s += lst[start + i];\n        }\n  \
    \      isEven = !isEven;\n        i++;\n    }\n    return s;", "    // code here\n\
    \    if (lst.size() == 0) return 0;\n    // int size = lst.size();\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            if (lst[i]\
    \ % 2 != 0) {\n                return lst[i] + solution(lst);\n            } else\
    \ {\n                continue;\n            }\n        }\n    }\n    return 0;",
  "    // write your code in C++14(STL)\n    std::sort(lst.begin(), lst.end());\n\
    \    std::set<long> set; // to maintain only unique odd values\n    auto it =\
    \ lst.begin();\n    long long oddsum = 0;\n    for (; it != lst.end(); it++) {\n\
    \        if (*it % 2 != 0) {\n            if (set.find(*it) != set.end()) {\n\
    \                oddsum += *it;\n            } else {\n                set.insert(*it);\n\
    \            }\n        }\n    }\n    if (oddsum >= 0) {\n        return oddsum;\n\
    \    } else {\n        return -1;\n    }", "    long result = 0;\n    for (size_t\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 != 0) {\n            result\
    \ += lst[i];\n        }\n    }\n    return result;", "  if(lst.size() == 0)\n\
    \    return 0;\n  long sum = 0;\n  long temp = lst[0];\n  long pos = 1;\n  for(long\
    \ i = 1, j = 0; i < lst.size(); i++) {\n    if(lst[i] & 1) {\n      pos = 0;\n\
    \    } else {\n      pos = 1;\n    }\n    if(pos == 1) {\n      sum += temp;\n\
    \      temp = lst[i];\n      pos++;\n    }\n  }\n  return sum;", "    // Your\
    \ code here\n    return lst[0];", "    // write your code in C++14\n    std::set_intersection(lst.begin(),\
    \ lst.end(), std::back_inserter(res), [](long l, long r) { return (l & 1) == (r\
    \ & 1); });\n    return res.size();", "    assert(lst.size() != 0);\n    long\
    \ sum = 0;\n    for(long i = 0; i < lst.size(); i += 2){\n        sum += lst[i];\n\
    \    }\n    return sum;", "    // code here\n    if(lst.empty())\n        return\
    \ 0;\n    long sum = lst[0];\n    for(int i = 1; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;",
  "  assert(lst.size() > 0);\n  std::sort(lst.begin(), lst.end());\n  long sum = 0;\n\
    \  for (long i = 0; i < (long)lst.size(); i = i + 2) {\n    sum += lst[i];\n \
    \ }\n  return sum;", "    // write your code in C++17 [Edit] or C++14 using standard\
    \ algorithms\n    std::cout << \"\\n---- STL SOLUTION ----\\n\";\n    auto it\
    \ = std::remove_if(lst.begin(), lst.end(), [&](int x) {\n        return x % 2\
    \ == 1;\n    });\n    // this vector is now {{3, 3}, {3}}\n    std::vector<int>\
    \ v;\n    for (; it != lst.end(); ++it) {\n        if (*it % 2 != 0)\n       \
    \     v.push_back(*it);\n    }\n    // std::cout << v << \"\\n\";\n    long sum\
    \ = 0;\n    for (auto&& x : v)\n        sum += x;\n    return sum;", "    long\
    \ sum = 0;\n    int i = 0;\n    // This loop will run while there are elements\
    \ in the vector lst\n    for(auto it = lst.begin(); it != lst.end(); ++it){\n\
    \        if(i % 2 == 0){\n            sum += *it;\n        }\n        i += 1;\n\
    \    }\n    return sum;", "    long sum = 0;\n    // std::find finds the iterator\
    \ to the first element that satisfies the condition\n    auto it = std::find(lst.begin(),\
    \ lst.end(), 0);\n    // The iterator is advanced twice: one to skip the element\
    \ that is 0, one to skip the element that satisfies the condition\n    lst.erase(it,\
    \ std::find(lst.begin(), lst.end(), 0));\n    for (auto i: lst)\n        if (i\
    \ % 2 != 0)\n            sum += i;\n    return sum;", "    int n = lst.size();\n\
    \    if(lst.size() == 0) {\n        return 0;\n    }\n    long sum = 0;\n    for(long\
    \ i=0;i<n/2;i++) {\n        if((i%2) == 0 && lst.at(i) > 0) {\n            sum\
    \ += lst.at(i);\n        }\n    }\n    for(int i=0;i<n/2;i++) {\n        if(lst.at(i)\
    \ % 2 != 0) {\n            sum += lst.at(i);\n        }\n    }\n    return sum;",
  "    // Write your code in C or C++14 (gcc7.3, c++1z) optimized with:\n    // -march=native\
    \ -O3 -funroll-loops\n    long ans = 0;\n    if (lst.size() <= 1)\n        return\
    \ 0;\n    long a = lst[0], b = lst[1], c = lst[2];\n    for (size_t i = 3; i <\
    \ lst.size(); ++i)\n    {\n        long curr = lst[i];\n        ans += curr +\
    \ 2 * (a <= curr ? c - curr : b - curr);\n        if (a <= curr)\n           \
    \ a = curr + c;\n        else\n            b = curr + b;\n    }\n    return ans;",
  "    long evenSum = 0;\n    for (long i = 0; i <lst.size(); i++)\n    {\n      \
    \  if (lst[i] % 2 == 0)\n            evenSum = evenSum + lst[i];\n    }\n    return\
    \ evenSum;", "    assert(lst.size() > 0);\n    long sum = 0;\n    for (std::size_t\
    \ i = 1; i < lst.size(); i++) {\n        if (lst[i] % 2 == 1) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n    for\
    \ (int i = 0; i < lst.size(); ++i) {\n        if (lst[i] % 2 == 1)\n         \
    \   sum += lst[i];\n    }\n    return sum;", "    long ret = 0;\n    int size\
    \ = lst.size();\n    for (int i = 0; i < size; i += 2) {\n        ret += lst[i];\n\
    \    }\n    return ret;", '    return std::accumulate(lst.begin(), lst.end(),
    0L, [](long a, long b) { return a + b % 2 == 0 ? (a + b) / 2 : 0; });', "  long\
    \ sum = 0;\n  for (int i = lst.size() - 1; i >= 0; i--) //for last element of\
    \ the vector lst size is equal to 0 then its not even so no need of any loop.\n\
    \  {\n    if (lst[i] % 2 != 0) //if its even\n    {\n      sum += lst[i]; //then\
    \ add the element to the sum\n    }\n  }\n  return sum;", "    //your code here\n\
    \    assert(lst.size() > 0);\n    long evenSum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            evenSum += lst[i];\n\
    \        }\n    }\n    return evenSum;", "  assert(lst.size() != 0);\n  long ans\
    \ = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    ans += lst[i];\n  }\n\
    \  return ans;", "  // Your code goes here\n  long sum = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    if (i % 2 == 1) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;", "    assert(lst.size() >= 1);\n    long long ans = 0;\n\
    \    for (long long i : lst) {\n        if (i % 2 != 0) {\n            ans +=\
    \ i;\n        }\n    }\n    return ans;", "  // Write your code here\n  std::sort(lst.begin(),\
    \ lst.end());\n  long sum = 0;\n  long first = (int)lst.begin();\n  long last\
    \ = (int)lst.end();\n  while (first != last) {\n    if (*first % 2 == 0) {\n \
    \     sum += *first;\n      first++;\n    } else {\n      first++;\n    }\n  }\n\
    \  return sum;", "    // Write your code in C++14 (g++ 6.3+)\n    // use below\
    \ C++11 version\n    // long long ans = 0;\n    // for (auto i : lst) {\n    //\
    \   if (i%2 == 0){\n    //     ans += i;\n    //   }\n    // }\n    // return\
    \ ans;\n\n    // std::vector<long> :: iterator\n    long long ans = 0;\n    for\
    \ (auto it = lst.begin(); it != lst.end(); ++it) {\n        if ((*it) % 2 == 0)\
    \ {\n            ans += *it;\n        }\n    }\n    return ans;", "    // code\
    \ here\n    std::vector<long> even, odd;\n    \n    even = lst;\n    odd.clear();\n\
    \    for (long i = 0; i <= even.size(); i += 2)\n        odd.push_back(even[i]);\n\
    \    \n    return std::accumulate(odd.begin(), odd.end(), 0L);", "    long ans\
    \ = 0;\n    assert(lst.size() > 0);\n    long l = lst[0];\n    for (long i = 1,\
    \ m = 1; i < l; i++, m++) {\n        if (i % 2 == 0) ans += lst[i];\n        if\
    \ (m % 2 == 1) ans += l;\n    }\n    return ans;", "    // code here\n    std::vector<long>\
    \ arr;\n    for(long i : lst){\n        arr.push_back(i);\n    }\n    long ans\
    \ = 0;\n    int index = 0;\n    while(index<arr.size()){\n        if(arr[index]%2\
    \ ==1){\n            ans+=arr[index];\n        }\n        index++;\n    }\n  \
    \  \n    return ans;", "  long sum = 0;\n  int index = 0;\n\n  while (index <\
    \ lst.size()) {\n    if (lst[index] % 2 == 1)\n      sum += lst[index];\n    else\n\
    \      index++;\n  }\n\n  return sum;", "    // Your code goes here\n    long\
    \ evenSum = 0;\n    for(auto i: lst){\n        if(i % 2 == 0){\n            evenSum\
    \ += i;\n        }\n    }\n    return evenSum;", "  long sum = 0;\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 != 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;", "    auto it = lst.begin();\n    long sum = 0;\n\
    \    while (it != lst.end()) {\n        if (*it % 2 != 0) {\n            sum +=\
    \ *it;\n        }\n        ++it;\n    }\n    return sum;", "  long ans = 0;\n\
    \  for (long i = 0; i < lst.size(); ++i) {\n    if (i % 2 == 0) {\n      ans +=\
    \ lst[i];\n    }\n  }\n  return ans;", "    long sum=0;\n    long size=lst.size();\n\
    \    if(size==0)\n        return sum;\n    for(int i=0;i<size;++i){\n        if(lst[i]%2==0)\n\
    \            sum+=lst[i];\n    }\n    return sum;", "    // Your code here\n \
    \   int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        sum +=\
    \ lst[i];\n    }\n    return sum;", "  std::vector<int> v(lst.size(), 0);\n  for\
    \ (long &i : lst) {\n    v[i % 2 == 0 ? i : i - 1] ++;\n  }\n  return *std::max_element(v.begin(),\
    \ v.end()) + 1;", "    if (lst.size() < 2) return 0;\n\n    int n = 0;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2) n++;\n        else\
    \ n += ((lst[i] - 1) % 2) * ((lst[i] - 1) / 2);\n    }\n    return n;", "    long\
    \ sum = 0;\n    for (size_t i = 0; i < lst.size(); i++)\n    {\n        if (lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    if(lst.empty()) \n        return -1;\n    std::vector<bool> vec(lst.size()\
    \ + 1);\n    vec[0]=true;\n    for(size_t i = 1; i < vec.size(); ++i) {\n    \
    \    vec[i] = false;\n    }\n    for(auto x : lst) {\n        if(vec[x/2])\n \
    \           vec[x/2] = false;\n        else\n            vec[x/2] = true;\n  \
    \  }\n    for(auto x : vec) {\n        if(x) \n            return x;\n    }\n\
    \    return -1;", "    int sum = 0;\n    int oddCount = 0;\n    for (auto x: lst)\
    \ {\n        if (x & 1) {\n            sum += x;\n            ++oddCount;\n  \
    \      }\n    }\n    return sum == 0 ? (lst.size() & 1 ? 0 : -1) : (oddCount &\
    \ 1 ? sum : -1);", "    // Write your code in Start\n    long sum=0;\n    for(int\
    \ i=0;i<lst.size();i++)\n    {\n        if(lst[i]%2==0)\n            sum+=lst[i];\n\
    \    }\n    return sum;\n    // Write your code in End\n", "    long result =\
    \ 0;\n    long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 1) {\n\
    \            odd += i;\n        }\n    }\n    return result + odd;", "    // Write\
    \ your code here.\n    std::sort(lst.begin(), lst.end());\n    long result = 0;\n\
    \    for (long i : lst) {\n        result += i%2 == 0;\n    }\n    return result;",
  "    \n    long s = 0;\n    for (long i : lst) {\n        if (i & 1) {\n       \
    \     s += i;\n        }\n    }\n    return s;", "    // code here\n\tlong sum=0;\n\
    \tlong i=0;\n\twhile(i<lst.size())\n\t{\n\t\tif (lst[i]%2==0)\n\t\t{\n\t\t\tsum+=lst[i];\n\
    \t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn sum;", " \
    \   // Your code here\n    return std::accumulate(lst.begin() + 1, lst.end(),\
    \ 0);", "    // code here\n    int n = lst.size();\n    long sum = 0;\n    for(int\
    \ i = 0; i < (n/2); i++){\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    // Write your code in C# here\n    std::unordered_map<long,\
    \ bool> odd;\n    for (auto i : lst)\n        odd.emplace(i, false);\n\n    for\
    \ (auto i : lst)\n        if (odd.count(i%2)==0)\n            odd[i/2] = true;\n\
    \n    long ans = 0;\n    for (auto i : odd)\n        ans += i;\n\n    return ans;",
  "    long oddSum = 0;\n    int len = lst.size();\n    std::vector<long> evenSum;\n\
    \    for (int i = 0; i < len; i += 2) {\n        oddSum += lst[i];\n        evenSum.push_back(lst[i]);\n\
    \    }\n\n    return oddSum + std::accumulate(evenSum.begin(), evenSum.end(),\
    \ 0);", "    long sum = lst[0];\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;", "    int sum = 0;\n    for(auto i : lst) {\n        sum += (i%2\
    \ == 0) ? i : -i;\n    }\n    return sum;", "    long sum = 0;\n    assert(lst.size()\
    \ != 0);\n    for (int i = 0; i < (int)lst.size(); i++) {\n        if (i % (int)lst.size()\
    \ % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    long n = lst.size();\n    for (int i = 0; i < n; i++) {\n\
    \        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "    int sum = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "    long result = 0;\n    assert(lst.size() > 0);\n    for\
    \ (long i = 0; i < lst.size() - 1; i++) {\n        if ((lst[i] % 2) == 1) {\n\
    \            result += lst[i];\n        }\n    }\n    return result;", "  // Write\
    \ your code here\n    std::vector<long> even;\n    std::vector<long> odd;\n\n\
    \    for (int i = 0; i < lst.size(); i++) {\n      if (lst.at(i) % 2 != 0) {\n\
    \        even.push_back(lst.at(i));\n      } else {\n        odd.push_back(lst.at(i));\n\
    \      }\n    }\n    int even_size = even.size();\n    int odd_size = odd.size();\n\
    \    int sum = 0;\n    for (int i = 0; i < even_size; i++) {\n      sum += even[i];\n\
    \    }\n\n    for (int i = 0; i < odd_size; i++) {\n      sum += odd.at(i);\n\
    \    }\n    return sum;", "    assert(lst.size() != 0);\n    long sum = 0;\n \
    \   int pos = 0;\n    while (lst.size() > 0) {\n        sum += lst[pos];\n   \
    \     if (pos == lst.size() - 1) {\n            pos = 0;\n        } else {\n \
    \           pos++;\n        }\n    }\n    return sum;", "    if(lst.empty())\n\
    \        return 0;\n    int sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n\
    \    {\n        if(i % 2 == 1 && lst[i] % 2 == 1)\n            sum += lst[i];\n\
    \    }\n    return sum;", "    long sum = 0;\n    assert(lst.size() > 0);\n  \
    \  if (lst.size() % 2 != 0) {\n        std::cout << \"Not even!\";\n        return\
    \ 0;\n    }\n    for (auto val : lst) {\n        if (val % 2 == 0) {\n       \
    \     sum += val;\n        }\n    }\n    return sum;", "    // your code goes\
    \ here\n    std::cout<<\"The sum of Odd numbers in Even positions is : \";\n \
    \   long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;", "    long long\
    \ sum = 0;\n    bool flag = false;\n    for (long long x : lst) {\n        if\
    \ (!flag) {\n            sum = x;\n            flag = true;\n        }\n     \
    \   else {\n            sum += x;\n            if (x % 2 == 0) {\n           \
    \     flag = true;\n            }\n        }\n    }\n    return sum;", "    long\
    \ sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;", "    long\
    \ res = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i] & 1)\n\
    \            ++res;\n    }\n    return res;", "    int sum = 0;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++)\n        if (i % 2 != 0)\n            sum += lst[i];\n\
    \n    return sum;", "    if (lst.size() <= 1) return 0;\n    long maxElement =\
    \ lst.front();\n    long sum = 0;\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] % 2 != 0) {\n            maxElement = max(lst[i], maxElement);\n\
    \            sum += maxElement;\n        }\n    }\n    return sum;", "    assert(lst.size()\
    \ > 0);\n    // sort\n    std::sort(lst.begin(), lst.end());\n    long sum = 0;\n\
    \    for (int i = 1; i < lst.size(); i++)\n        if (lst[i - 1] % 2 == 0 &&\
    \ lst[i] % 2 != 0)\n            sum += lst[i];\n    return sum;", "    long evensum\
    \ = 0;\n    long oddsum = 0;\n    long sizesum = lst.size();\n    int n = lst.size();\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum = sum + lst[i];\n\
    \        if (sum % 2 == 0) {\n            evensum = evensum + sum;\n        }\
    \ else {\n            oddsum = oddsum + sum;\n        }\n    }\n    return evensum\
    \ + oddsum;", "    long ans = 0;\n    for(long i = 0; i < lst.size(); i++) {\n\
    \        if(i % 2 == 0) {\n            ans += lst[i];\n        }\n    }\n    return\
    \ ans;", "    long long sum = 0;\n    long long ans = 0;\n    for (auto const\
    \ &x : lst) {\n        if (x % 2 == 1)\n            sum += x;\n        else if\
    \ (x % 2 == 0)\n            ans += sum;\n    }\n    return ans;", "    long sum\
    \ = 0;\n    long odd_sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        } else {\n\
    \            odd_sum += lst[i];\n        }\n    }\n    return odd_sum < sum ?\
    \ odd_sum : sum;", "    // code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (auto iter =\
    \ lst.begin(); iter != lst.end(); iter++) {\n        if (*iter %2 != 0) {\n  \
    \          sum += *iter;\n        }\n    }\n    return sum;", "    if (lst.size()\
    \ == 0) return 0;\n    long ans = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ if (lst[i] % 2 == 1) ans += lst[i];\n    return ans;", "    long sum = 0;\n\
    \    assert(lst.size() != 0);\n    if (lst.size() == 0)\n        return 0;\n \
    \   sort(lst.begin(), lst.end());\n    auto itr = lst.begin();\n    while (itr\
    \ != lst.end()) {\n        if ((*itr) %2 == 0) {\n            sum += *itr;\n \
    \       }\n        itr++;\n    }\n    return sum;", "    long long int sum = 0;\n\
    \    std::sort(lst.begin(), lst.end());\n    for (long long int x: lst) {\n  \
    \      if(x % 2 != 0) {\n            sum += x;\n        }\n    }\n    return sum;",
  "    // code here\n    std::cout << \"\\nEnter the size of an array : \";\n    long\
    \ t;\n    std::cin >> t;\n    std::vector<long> arr(t);\n    std::cout << \"\\\
    nEnter the elements of the array : \";\n    for(int i = 0; i < t; i++)\n    {\n\
    \        std::cin >> arr[i];\n    }\n\n    int sum = 0;\n    for(int i = 0; i\
    \ < arr.size(); i++)\n    {\n        if(arr[i] % 2 != 0)\n        {\n        \
    \    sum += arr[i];\n        }\n    }\n    return sum;", "    std::vector<long>\
    \ vec(lst.begin(), lst.end());\n    int sum = 0;\n    for(int i = 1; i < lst.size();\
    \ i++) {\n        if (vec[i - 1] % 2 != 0) {\n            sum += vec[i];\n   \
    \     }\n    }\n    return sum;", "  long long total = 0;\n  assert(lst.size()\
    \ > 0);\n  for (long i = 0; i < lst.size(); i = i + 2) {\n    total += lst[i];\n\
    \  }\n  return total;", "    if(lst.empty()) return 0;\n    long sum = 0;\n  \
    \  for(int i = 1; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0 && lst[i\
    \ - 1] % 2 != 0) sum += lst[i];\n    }\n    return sum;", "    long ans = 0;\n\
    \    for(int i = 0; i<lst.size(); i++)\n        if(lst[i]%2 != 0)\n          \
    \  ans += lst[i];\n    return ans;"]
stop_tokens:
- "\n}"
