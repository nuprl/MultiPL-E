language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    std::vector<long>\
    \ y;\n    for(const auto& i : x)\n    {\n        for(long j = 1; j < i; ++j)\n\
    \        {\n            if(i%j==0)\n            {\n                break;\n  \
    \          }\n        }\n        if(j == i)\n        {\n            y.push_back(i);\n\
    \        }\n    }\n    std::sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphbrsb1oo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphbrsb1oo.cpp:23:12: error: \u2018j\u2019 was not declared\
    \ in this scope\n   23 |         if(j == i)\n      |            ^\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() >= 1);\n    std::vector<long>\
    \ ans;\n    for (long long i : x) {\n        if (i / 10 % 2 != 0) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7v7qf8ub: /tmp/tmp7v7qf8ub.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y(x.begin(), x.end());\n\
    \    // check every element whether it contains any even digit.\n    for (long\
    \ &i : y) {\n        long n = i;\n        while (n > 9) {\n            n /= 10;\n\
    \        }\n        // remove 0 if no even digit\n        if (n == 0) {\n    \
    \        y.erase(y.begin() + std::find(y.begin(), y.end(), 0));\n        } else\
    \ {\n            if (n & 1) {\n                y.erase(y.begin() + std::find(y.begin(),\
    \ y.end(), 0));\n            }\n        }\n    }\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1f71a44.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb1f71a44.cpp:21:31: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   21 |             y.erase(y.begin()\
    \ + std::find(y.begin(), y.end(), 0));\n      |                     ~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                            |   \
    \          |\n      |                            |             __normal_iterator<[...],[...]>\n\
    \      |                            __normal_iterator<[...],[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpb1f71a44.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n    \
    \  |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::operator+(typen"
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if (x.size() <= 0) {\n        return\
    \ {};\n    }\n    // sort vector in ascending order\n    std::sort(x.begin(),\
    \ x.end());\n    std::vector<long> out;\n    for (long i = 0; i < x.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            out.push_back(x.at(i));\n        }\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkxqll5wa: /tmp/tmpkxqll5wa.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() > 0);\n    std::unordered_set<long>\
    \ digit_num;\n    for (auto i: x) digit_num.insert(i);\n    std::vector<long>\
    \ output;\n    output.push_back(digit_num.begin());\n    while (output.size()\
    \ < x.size()) {\n        for (auto itr : digit_num) {\n            if (itr % 2\
    \ != 0) output.push_back(itr);\n        }\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalzdyqgi.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpalzdyqgi.cpp:16:39: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::unordered_set<long int>::iterator)\u2019\
    \n   16 |     output.push_back(digit_num.begin());\n      |                  \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpalzdyqgi.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::unordered_set<long int>::iterator\u2019\
    \ {aka \u2018std::__detail::_Node_iterator<long int, true, false>\u2019} to \u2018\
    const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::unordered_set<long\
    \ int>::iterator\u2019 {aka \u2018std::__detail::_Node_iterator<long int, true,\
    \ false>\u2019} to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018\
    long int&&\u2019}\n 1200 |       push_back(value_type&& __x)\n      |        \
    \         ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Your code here\n  for(long long i=1;\
    \ i<x.size(); i++)\n    if(std::find(x.begin(), x.end(), x[i]) != x.end()) x.erase(x[i]);\n\
    \  for(long long j=1; j<x.size(); j++)\n    if(std::find(x.begin(), x.end(), x[j])\
    \ != x.end()) x.erase(x[j]);\n  return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6uu4qvpk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6uu4qvpk.cpp:14:68: error: no matching function for call\
    \ to \u2018std::vector<long int>::erase(__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   14 |     if(std::find(x.begin(), x.end(),\
    \ x[i]) != x.end()) x.erase(x[i]);\n      |                                  \
    \                                  ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6uu4qvpk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::vector<long\
    \ int>::const_iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<const long\
    \ int*, std::vector<long int> >\u2019}\n 1427 |       erase(const_iterator __position)\n\
    \      |             ~~~~~~~~~~~~~~~^~~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std"
  stdout: ''
  timestamp: 1660093574
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    auto\
    \ it = x.begin();\n    while (it != x.end()) {\n        if (*it % 2 == 0) {\n\
    \            auto next = std::find(it + 1, x.end(), 0);\n            x.erase(it,\
    \ next);\n            it = next;\n        }\n        it++;\n    }\n    return\
    \ x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long long ans=0;\n  int count=0;\n \
    \ for(long long i=0;i<x.size();i++) {\n    ans=ans*10+x[i];\n    count++;\n  }\n\
    \  if(count==0) return x;\n  int len=x.size();\n  ans=ans/pow(10, len);\n  \n\
    \  vector<long> ans=vector<long>(len);\n  long long s=ans;\n  int len=x.size();\n\
    \  for(int i=0;i<len;i++) {\n    if(s%10!=0&&i!=len-1) {\n      ans.push_back(s%10);\n\
    \      s=s/10;\n    }\n  }\n  if(s!=0) {\n    ans.push_back(s%10);\n  }\n  \n\
    \  std::sort(ans.begin(),ans.end());\n  ans.resize(ans!=x?ans.size()-x+1:ans.size());\n\
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5vwjtvu.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf5vwjtvu.cpp:22:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   22 |   vector<long> ans=vector<long>(len);\n      |   ^~~~~~\n\
    /tmp/tmpf5vwjtvu.cpp:22:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf5vwjtvu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf5vwjtvu.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpf5vwjtvu.cpp:22:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   22 |   vector<long>\
    \ ans=vector<long>(len);\n      |          ^~~~\n/tmp/tmpf5vwjtvu.cpp:24:7: error:\
    \ redeclaration of \u2018int len\u2019\n   24 |   int len=x.size();\n      | \
    \      ^~~\n/tmp/tmpf5vwjtvu.cpp:19:7: note: \u2018int len\u2019 previously declared\
    \ here\n   19 |   int len=x.size();\n      |       ^~~\n/tmp/tmpf5vwjtvu.cpp:27:11:\
    \ error: request for member \u2018push_back\u2019 in \u2018ans\u2019, which is\
    \ of non-class type \u2018long long int\u2019\n   27 |       ans.push_back(s%10);\n\
    \      |           ^~~~~~~~~\n/tmp/tmpf5vwjtvu.cpp:32:9: error: request for member\
    \ \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018\
    long long int\u2019\n   32 |     ans.push_back(s%10);\n      |         ^~~~~~~~~\n\
    /t"
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // TODO: Your code here\n    return\
    \ x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1oc564xx: /tmp/tmp1oc564xx.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ y;\n    for(auto &it : x)\n        for(long &jt : it)\n            for(long\
    \ &j : y)\n                if(j%jt != 0)\n                    y.push_back(j);\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppz_z1uyj.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppz_z1uyj.cpp:15:24: error: \u2018begin\u2019 was not declared\
    \ in this scope\n   15 |         for(long &jt : it)\n      |                 \
    \       ^~\n/tmp/tmppz_z1uyj.cpp:15:24: note: suggested alternatives:\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmppz_z1uyj.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   \u2018std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n\
    \      |     ^~~~~\nIn file included from /usr/include/c++/9/filesystem:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmppz_z1uyj.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3:\
    \ note:   \u2018std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmppz_z1uyj.cpp:15:24: error: \u2018\
    end\u2019 was not declared in this scope\n   15 |         for(long &jt : it)\n\
    \      |                        ^~\n/tmp/tmppz_z1uyj.cpp:15:24: note: suggested\
    \ alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmppz_z1uyj.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmppz_z1uyj.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::unordered_map<long,\
    \ long> di;\n    for(long y : x) {\n        di[y%10]++;\n    }\n    std::vector<long>\
    \ res(std::begin(di), std::end(di));\n    for(long x : res) assert(di[x]==1);\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpxsws6drj.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = std::__detail::_Node_iterator<std::pair<const\
    \ long int, long int>, false, false>; _ForwardIterator = long int*]\u2019:\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = std::__detail::_Node_iterator<std::pair<const long int, long int>, false,\
    \ false>; _ForwardIterator = long int*; _Tp = long int]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = std::__detail::_Node_iterator<std::pair<const\
    \ long int, long int>, false, false>; _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:   required from \u2018\
    std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\
    \ [with _InputIterator = std::__detail::_Node_iterator<std::pair<const long int,\
    \ long int>, false, false>; <template-parameter-2-2> = void; _Tp = long int; _Alloc\
    \ = std::allocator<long int>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long\
    \ int>]\u2019\n/tmp/tmpxsws6drj.cpp:17:55:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type must be constructible from value\
    \ type of input range\n  127 |       static_assert(is_constructible<_ValueType2,\
    \ decltype(*__first)>::value,\n      |        "
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    if(x.size()\
    \ == 0){\n        return std::vector<long>();\n    }\n    std::vector<long> res;\n\
    \    res.push_back(x.at(0));\n    for(int i = 1; i < x.size(); i++){\n       \
    \ if(x.at(i) % 2 == 0){\n            res.push_back(x.at(i));\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvz4a97u2: /tmp/tmpvz4a97u2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  assert(x.size()\
    \ == std::count(x.begin(), x.end(), 0));\n  for (long &i : x)\n    if (i % 2 !=\
    \ 0)\n      result.push_back(i);\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1rinqo38: /tmp/tmp1rinqo38.cpp:13: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `x.size() == std::count(x.begin(), x.end(), 0)'' failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ ans;\n    for (long i : x) {\n        // check if i is divisible by 2\n    \
    \    if ((i & 1) == 0) {\n            long digit = i / 10;\n            long rest\
    \ = i % 10;\n            // check if digit is even\n            if (digit % 2\
    \ == 0) {\n                ans.push_back(i);\n                ans.push_back(rest);\n\
    \            }\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplwam35_g: /tmp/tmplwam35_g.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> answer;\n    long\
    \ last_digit = 0;\n    for(auto it = x.cbegin(); it != x.cend(); ++it) {\n   \
    \     if(last_digit % 2 == 0 && (*it % 2 == 0) && last_digit != (*it))\n     \
    \       answer.push_back(*it);\n        last_digit = *it;\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp72k_7ipj: /tmp/tmp72k_7ipj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    \n   \
    \ int n = x.size();\n    for (int i = 0; i < n; ++i) {\n        bool is_even =\
    \ false;\n        long temp = x[i];\n        bool flag = false;\n        for (int\
    \ j = 0; j < n; ++j) {\n            if (temp % 10 == 0 && !is_even) {\n      \
    \          flag = true;\n                is_even = true;\n                break;\n\
    \            }\n            else if (temp % 10 != 0 && is_even) {\n          \
    \      flag = true;\n                is_even = false;\n                break;\n\
    \            }\n        }\n        if (flag == false) {\n            x[i] = temp;\n\
    \        }\n    }\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n\
    \    for (int i = 0; i < n; ++i) {\n        bool flag = false;\n        for (int\
    \ j = 0; j < n; ++j) {\n            if (x[i] % 10 != 0) {\n                flag\
    \ = true;\n                break;\n            }\n        }\n        if (flag\
    \ == false) {\n            ans.push_back(x[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5s9rqgsc: /tmp/tmp5s9rqgsc.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // sort x\n    sort(x.begin(), x.end());\n\
    \n    // set output vector\n    std::vector<long> ans;\n\n    // if x is empty\
    \ or all elements are the same \n    if (x.empty() || x.size() == 1)\n       \
    \ return ans;\n\n    // loop through all elements\n    for (long i : x) {\n  \
    \      // keep track of which elements are even\n        bool even = true;\n\n\
    \        // loop through all other elements\n        for (long j = 1; j < i; j++)\
    \ \n            if (i%j != 0)\n                even = false;\n\n        // if\
    \ even element\n        if (even) {\n            // push it to output\n      \
    \      ans.push_back(i);\n        }\n    }\n\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7x56jdkp: /tmp/tmp7x56jdkp.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tbool flag\
    \ = false;\n\tlong cur_val;\n\t\n\tfor (long i : x) {\n\t\tcur_val = i;\n\t\t\
    while (cur_val != 0) {\n\t\t\tif (cur_val % 2 == 0) {\n\t\t\t\tflag = true;\n\t\
    \t\t} else {\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\tcur_val = cur_val / 2;\n\t\
    \t}\n\t\tres.push_back(i);\n\t}\n\t\n\tif (flag == false) {\n\t\tres.push_back(cur_val);\n\
    \t}\n\t\n\treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvfwpw27f: /tmp/tmpvfwpw27f.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long ans = 0;\n    // Traverse\
    \ vector\n    for (long long i = 0; i < x.size(); i++) {\n        // If current\
    \ element is even\n        if ((i % 2 == 0) && (ans < x[i])) {\n            ans\
    \ = x[i];\n        }\n    }\n    // Return sorted vector\n    return std::vector<long>(ans);\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbpxoveg6: /tmp/tmpbpxoveg6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for(long\
    \ i : x)\n  {\n    long remain = i;\n    long sum = 0;\n    while(remain > 0)\n\
    \    {\n      sum += remain%10;\n      remain = remain/10;\n    }\n    if(sum%2\
    \ ==0)\n    {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgjxe24fa: /tmp/tmpgjxe24fa.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long n = x.size();\n    // Use a set\
    \ to keep the unique elements\n    std::set<long> unique;\n    // Iterate through\
    \ all the elements of the vector x.\n    for (int i = 0; i < n; ++i) {\n     \
    \   // Get the current element.\n        long curr = x[i];\n        // Iterate\
    \ through all the elements of the vector x.\n        for (int j = 0; j < n; ++j)\
    \ {\n            // Get the current element.\n            long next = x[j];\n\
    \            // Check if the elements are the same.\n            if (curr == next)\
    \ {\n                continue;\n            }\n            // Get the remainder\
    \ of current element divided by 10.\n            long div = curr / 10;\n     \
    \       if (div % 2 == 0) {\n                // Add curr into the set if curr\
    \ is not in the set.\n                unique.insert(curr);\n                continue;\n\
    \            }\n            // Divide the current element by 10 and add it into\
    \ the set. \n            // If the current element divided by 10 is still not\
    \ even, \n            // then it will not add into the set.\n            if (div\
    \ % 2 != 0) {\n                unique.insert(curr);\n            }\n        }\n\
    \    }\n    // Print the unique elements in the sorted order.\n    std::vector<long>\
    \ ans;\n    for (long itr: unique) {\n        ans.push_back(itr);\n    }\n   \
    \ std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpksssh7_s: /tmp/tmpksssh7_s.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n   assert(x.size() <= 100000);\n   std::vector<long>\
    \ y(x.size());\n   for (size_t i = 0; i < x.size(); i++) {\n     while (i % 2\
    \ == 0) {\n       y[i] = x[i];\n       i /= 2;\n     }\n     if (i == 0) y[i]\
    \ = x[i];\n   }\n   std::sort(y.begin(), y.end());\n   return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if (x.size() == 0) return x;\n   \
    \ std::vector<long> ret;\n    ret.reserve(x.size());\n    for (auto i : x)\n \
    \       if (i % 2 == 0) ret.push_back(i);\n    std::sort(ret.begin(), ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpd2inj4ph: /tmp/tmpd2inj4ph.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    \n    std::sort(x.begin(),\
    \ x.end());\n    for(auto it=x.begin(); it!=x.end(); ++it)\n        if(it%2 ==\
    \ 0) y.push_back(*it);\n    \n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm49tcfo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqm49tcfo.cpp:16:14: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018int\u2019)\n   16 |         if(it%2 == 0) y.push_back(*it);\n\
    \      |            ~~^~\n      |            |  |\n      |            |  int\n\
    \      |            __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\nIn file included from /usr/include/c++/9/valarray:603,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpqm49tcfo.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqm49tcfo.cpp:16:15: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   16 |         if(it%2 == 0) y.push_back(*it);\n\
    \      |               ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpqm49tcfo.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Do"
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Complete this function\n    long\
    \ double ans = 0;\n    for (auto i: x){\n        for (auto j: i){\n          \
    \  ans += j;\n        }\n    }\n    ans /= 10;\n    std::vector<long> an;\n  \
    \  for (auto i: x){\n        if (i%ans == 0){\n            an.push_back(i);\n\
    \        }\n    }\n    sort(x.begin(), x.end());\n    \n    return an;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl0m1eilp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl0m1eilp.cpp:15:22: error: \u2018begin\u2019 was not declared\
    \ in this scope\n   15 |         for (auto j: i){\n      |                   \
    \   ^\n/tmp/tmpl0m1eilp.cpp:15:22: note: suggested alternatives:\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpl0m1eilp.cpp:2:\n/usr/include/c++/9/valarray:1224:5: note:   \u2018\
    std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n\
    In file included from /usr/include/c++/9/filesystem:38,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n                 from\
    \ /tmp/tmpl0m1eilp.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3: note:   \u2018\
    std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmpl0m1eilp.cpp:15:22: error: \u2018\
    end\u2019 was not declared in this scope\n   15 |         for (auto j: i){\n \
    \     |                      ^\n/tmp/tmpl0m1eilp.cpp:15:22: note: suggested alternatives:\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpl0m1eilp.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmpl0m1eilp.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n/tmp/tmpl0m1eilp.cpp:22:14: error: invalid operands\
    \ of types \u2018long int\u2019 and \u2018long double\u2019 to binary \u2018operator%\u2019\
    \n   22 |         if (i%ans == 0){\n      |             ~^~~~\n      |       \
    \      | |\n      |             | long double\n      |             long int\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    long\
    \ long sum = 0;\n    for (int i = 0; i < x.size(); i++) {\n        sum += x[i];\n\
    \    }\n    for (int i = 0; i < x.size(); i++) {\n        if ((x[i] % 2 == 0)\
    \ && (x[i] > 0)) {\n            sum -= x[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    long long tmp;\n    while (sum >= 10) {\n        tmp = sum % 10;\n\
    \        sum += tmp * 10;\n        ans.push_back(tmp);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  \n    // Sort the vector in increasing\
    \ order using bubble sort algorithm.\n    // Note: It has O(n^2) running time\
    \ complexity.\n    long long n = x.size();\n    long long c = 1;\n    long long\
    \ start = 1;\n    long long end = 1;\n    long long temp = start; \n    while\
    \ (c < n) {\n        if (x[c] % 2 == 0) {\n            temp += 1;\n          \
    \  end += temp;\n            c += temp;\n        } else {\n            temp +=\
    \ 1;\n        }\n    }\n    // if x has odd number of elements return empty vector.\n\
    \    if (c != n) return std::vector<long>();\n    std::set<long long> s; \n  \
    \  while (s.find(end) == s.end()) s.insert(end); \n    return std::vector<long>((int)s.begin(),\
    \ (int)s.end());\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg88gy_wz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg88gy_wz.cpp:33:43: error: invalid cast from type \u2018\
    std::set<long long int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long\
    \ long int>\u2019} to type \u2018int\u2019\n   33 |     return std::vector<long>((int)s.begin(),\
    \ (int)s.end());\n      |                                           ^\n/tmp/tmpg88gy_wz.cpp:33:57:\
    \ error: invalid cast from type \u2018std::set<long long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long long int>\u2019} to type \u2018\
    int\u2019\n   33 |     return std::vector<long>((int)s.begin(), (int)s.end());\n\
    \      |                                                         ^\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::vector<long> res;\n    long digit;\n    long counter = 0;\n    for (long\
    \ i = x.size() - 1; i >= 0; i--) {\n        digit = abs(x[i]);\n        if (digit\
    \ % 2 != 0) {\n            counter++;\n            while (counter > 0 && digit\
    \ % 10 == 0) {\n                res.push_back(x[i]);\n                counter\
    \ -= 2;\n                i -= 1;\n            }\n            counter = 0;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpd8o4bfck: /tmp/tmpd8o4bfck.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0; i<x.size(); ++i) {\n        long cur = x[i];\n        v.push_back(0);\n\
    \        for(int j=0; j<v.size(); ++j) {\n            long j = v[j];\n       \
    \     if(cur % 10 == j) {\n                break;\n            } else {\n    \
    \            v[j]++;\n            }\n        }\n    }\n    sort(v.begin(), v.end());\n\
    \    std::vector<long> ans;\n    for(long i=0; i<v.size(); ++i) {\n        if(v[i]\
    \ == 1) {\n            ans.push_back(x[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpskxmz7p7.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpskxmz7p7.cpp:17:18: error: redeclaration of \u2018long\
    \ int j\u2019\n   17 |             long j = v[j];\n      |                  ^\n\
    /tmp/tmpskxmz7p7.cpp:16:17: note: \u2018int j\u2019 previously declared here\n\
    \   16 |         for(int j=0; j<v.size(); ++j) {\n      |                 ^\n"
  stdout: ''
  timestamp: 1660093574
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ ans;\n    for (auto i = x.begin(), last = x.end(); i != last; ++i){\n      \
    \  while (*i %10 != 0) {\n            ++i;\n        }\n        ans.push_back(*i);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    ans.erase(unique(ans.begin(), ans.end()),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() > 0);\n    std::set<long>\
    \ s;\n    for (long &i : x) {\n        s.insert(i);\n    }\n    std::vector<long>\
    \ ans;\n    for (auto i = s.begin(); i != s.end(); ++i) {\n        for (auto j\
    \ = i + 1; j !=s.end(); ++j) {\n            if (*i % *j == 0) {\n            \
    \    s.erase(j);\n                break;\n            }\n        }\n        if\
    \ (s.empty()) {\n            ans.push_back(*i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwlclhh7.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmwlclhh7.cpp:19:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::_Rb_tree_const_iterator<long int>\u2019 and \u2018\
    int\u2019)\n   19 |         for (auto j = i + 1; j !=s.end(); ++j) {\n      |\
    \                       ~ ^ ~\n      |                       |   |\n      |  \
    \                     |   int\n      |                       std::_Rb_tree_const_iterator<long\
    \ int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n   \
    \              from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmwlclhh7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpmwlclhh7.cpp:19:27:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   19 |         for (auto j = i + 1; j !=s.end(); ++j)\
    \ {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmwlclhh7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterator>:"
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long ans = 0;\n    long max_val =\
    \ x.back();\n    for (long i : x) {\n        if (i % 2 == 0) {\n            ans\
    \ = i;\n            break;\n        }\n        if (i > max_val) {\n          \
    \  max_val = i;\n        }\n    }\n    std::vector<long> ret;\n    for (long i\
    \ : x) {\n        if (i != ans) {\n            ret.push_back(i);\n        }\n\
    \    }\n    ret.push_back(ans);\n    sort(ret.begin(), ret.end());\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkmq3y2o5: /tmp/tmpkmq3y2o5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ y;\n    y.reserve(x.size());\n    std::sort(x.begin(), x.end());\n    long long\
    \ int sum=0;\n    for (auto i:x)\n    {\n        if(i>0)\n        {\n        \
    \    sum += i;\n        }\n        else\n        {\n            y.push_back(sum);\n\
    \            sum = 0;\n        }\n    }\n    y.push_back(sum);\n    return y;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvzs916bj: /tmp/tmpvzs916bj.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool first = true;\n    std::vector<long>\
    \ ans;\n    for (long i : x)\n        first = false;\n    for (long i : x) {\n\
    \        if (i % 2 == 0 && i > 0) {\n            ans.push_back(i);\n        }\
    \ else if (i > 0)\n            first = true;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpguyllzkp: /tmp/tmpguyllzkp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    assert(x.size()\
    \ == 0 || x.size() == 1);\n    std::vector<long> y;\n    for(long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 != 0) {\n            y.push_back(x[i]);\n      \
    \  }\n    }\n    std::sort(y.begin(), y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpq5wx3ta4: /tmp/tmpq5wx3ta4.cpp:13: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `x.size() == 0 || x.size() == 1'' failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    // Create a vector to store\
    \ sorted unique numbers.\n    std::vector<long> y;\n    \n    // Use a flag to\
    \ indicate if the current number is even or odd.\n    bool flag = true;\n    \n\
    \    // Iterate through the whole vector and check if the current number is even\
    \ or odd.\n    for(long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            // If current number is even, push the even number into the vector\
    \ y.\n            if(flag) {\n                y.push_back(x[i]);\n           \
    \     flag = false;\n            }\n        } else {\n            // If current\
    \ number is odd, clear the flag and push odd number into the vector y.\n     \
    \       if(!flag) {\n                y.push_back(x[i]);\n                flag\
    \ = true;\n            }\n        }\n    }\n    return y;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpml4ux52r: /tmp/tmpml4ux52r.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> temp;\n    long\
    \ t;\n    for (long i = 0; i < x.size(); i++) {\n        t = x[i];\n        for\
    \ (long j = i + 1; j < x.size(); j++) {\n            if (t % 10 == x[j] % 10)\
    \ {\n                temp.push_back(x[j]);\n                x.erase(x.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpl9ypfmcs: /tmp/tmpl9ypfmcs.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here.\n    std::vector<long>\
    \ ans;\n    long n = x.size();\n    for(long i = 0; i < n; i++)\n    {\n     \
    \   long temp = x[i];\n        for(long j = i; j < n; j++)\n        {\n      \
    \      if((temp & 1) != 0)\n            {\n                temp = (temp << 1)\
    \ | 1; // shift left and add\n                ans.push_back(temp);\n         \
    \       temp = x[j];\n            }\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    std::vector<long> ans2(0, 0);\n    for(long i = 0; i < ans.size();\
    \ i++)\n    {\n        if((ans[i] & 1) == 0)\n        {\n            ans2.push_back(ans[i]);\n\
    \        }\n    }\n    return ans2;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpn869r6ww: /tmp/tmpn869r6ww.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ ret;\n    if(x.size() == 0)\n        return ret; \n    for(long i = 0;i < x.size();++i){\n\
    \        for(long j = 0;j < i;++j){\n            if(x[i] % x[j] % 10 == 0){\n\
    \                for(long k = j;k<i+1;++k)\n                    x[k] = x[k + 1];\n\
    \                ret.push_back(x[i]);\n                break;\n            }\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3emikvmn: /tmp/tmp3emikvmn.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  if(x.size() == 0) return x;\n  if(x.size()\
    \ <= 1) return x;\n\n  std::vector<long> ans;\n  long last_digit = x[x.size()-1];\n\
    \n  // Find the position of all even digits.\n  long start_pos = 0;\n  for(long\
    \ i = x.size() - 1; i >= 0; i--) {\n    if(x[i] % 2 == 0) {\n      start_pos =\
    \ i;\n      break;\n    }\n  }\n\n  // Find the position of odd digits in the\
    \ range [start_pos, x.size()-1]\n  long pos = 0;\n  for(long i = start_pos; i\
    \ <= x.size() - 1; i++) {\n    if(x[i] % 2 == 1) {\n      pos = i;\n      break;\n\
    \    }\n  }\n\n  // Iterate through all odd digits.\n  for(long i = start_pos;\
    \ i <= x.size() - 1; i++) {\n    if(x[i] % 2 != 0) {\n      long digit = x[i];\n\
    \      long next_digit = x[pos + 1];\n\n      // If all odd digits are different\
    \ from the last digit.\n      if(digit != next_digit) {\n        ans.push_back(digit);\n\
    \      }\n      pos++;\n    }\n  }\n\n  assert(ans.size() == x.size());\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpscmj3fhv: /tmp/tmpscmj3fhv.cpp:50: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `ans.size() == x.size()'' failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    std::vector<long>\
    \ result;\n    for (size_t i = 0; i < x.size(); i++) {\n        int sum = 0;\n\
    \        for (size_t j = 0; j < i; j++) {\n            sum += x[j];\n        }\n\
    \        if (sum % 2 == 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdvennpez: /tmp/tmpdvennpez.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  if(x.size() == 0){\n    return x;\n\
    \  }\n  \n  std::vector<long> result;\n  \n  for(int i=0;i<x.size();i++){\n  \
    \  if(x[i] % 2 == 0){\n      // check if x[i] has even digits\n      int j = i;\n\
    \      while(j<x.size() && (x[j]%2 != 0)){\n        j++;\n      }\n      // if\
    \ there are even digits append it\n      if(j-i == 1){\n        result.push_back(x[i]);\n\
    \      }\n    }\n  }\n  \n  std::sort(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwm4ho2ue: /tmp/tmpwm4ho2ue.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() >= 1);\n    std::vector<long>\
    \ y;\n    long digit;\n    for (auto i = 0; i < x.size(); i++) {\n        digit\
    \ = abs(x[i]);\n        if (digit > 9 ||  digit % 2 != 0) {\n            y.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(y.begin(), y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpq4huy451: /tmp/tmpq4huy451.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long cnt = 0;\n    for (long\
    \ long i: x) {\n        while (cnt > 0) {\n            if (i % 10 == 0) {\n  \
    \              cnt = cnt - 1;\n            } else {\n                break;\n\
    \            }\n        }\n        cnt = cnt + 1;\n    }\n    std::vector<long>\
    \ ans;\n    for (long long i: x) {\n        while (cnt > 0) {\n            if\
    \ (i % 10 == 0) {\n                cnt = cnt - 1;\n            } else {\n    \
    \            ans.push_back(i);\n                break;\n            }\n      \
    \  }\n        cnt = cnt + 1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpy5lek_gt: /tmp/tmpy5lek_gt.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res(x.size());\n\
    \    std::set<long> s;\n    for(long &val: x){\n        // Check whether the current\
    \ number has even digits\n        if(val & 1L){\n            // If it has an even\
    \ digit, add it to the set\n            s.insert(val);\n        }\n    }\n   \
    \ for(long val: s){\n        // If it hasn't an even digit, add it to the result\n\
    \        res.push_back(val);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgtkhvsus: /tmp/tmpgtkhvsus.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> temp;\n    std::sort(x.begin(),\
    \ x.end());\n    long ans = 0;\n    for (int i = 0; i < x.size(); ++i) {\n   \
    \     while (x[i] % 2 == 0) {\n            if (ans > 0)\n                break;\n\
    \            ans += x[i];\n            x[i]--;\n        }\n        if (ans > 0)\n\
    \            temp.push_back((long)ans);\n        ans = 0;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpglumrjax: /tmp/tmpglumrjax.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::unordered_map<long, int> u;\n\
    \    for (long i : x) {\n        u[i]++;\n    }\n    std::vector<long> ans;\n\
    \    for (auto x : u) {\n        if (x == 1) ans.push_back(x);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnkm2l7l0.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnkm2l7l0.cpp:18:15: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018std::pair<const long int, int>\u2019 and \u2018int\u2019\
    )\n   18 |         if (x == 1) ans.push_back(x);\n      |             ~ ^~ ~\n\
    \      |             |    |\n      |             |    int\n      |           \
    \  std::pair<const long int, int>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnkm2l7l0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnkm2l7l0.cpp:18:18:\
    \ note:   \u2018std::pair<const long int, int>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   18 |         if (x == 1) ans.push_back(x);\n\
    \      |                  ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnkm2l7l0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnkm2l7l0.cpp:18:18: note:   \u2018std::pair<const long int,\
    \ int>\u2019 is not derived from \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019\n   18 |         if (x == 1) ans.p"
  stdout: ''
  timestamp: 1660093575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::set<long> s;\n    for (long &i:\
    \ x) s.insert(i);\n    std::vector<long> ans;\n    for (long &i: s) ans.push_back(i);\n\
    \    std::sort(ans.begin(), ans.end());\n    for (long i=0;i<ans.size();++i)\n\
    \    {\n        if (ans[i]%2 == 0)\n        {\n            ans.erase(ans.begin()+i);\n\
    \            i--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1nwdhgp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo1nwdhgp.cpp:15:19: error: binding reference of type \u2018\
    long int&\u2019 to \u2018const long int\u2019 discards qualifiers\n   15 |   \
    \  for (long &i: s) ans.push_back(i);\n      |                   ^\n"
  stdout: ''
  timestamp: 1660093576
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    long\
    \ ans = 0, pos = 0, len = 1;\n    std::vector<long> y;\n    for(size_t i = 0;\
    \ i < x.size(); i++) {\n        pos = 0;\n        for(size_t j = 0; j < len; j++)\
    \ {\n            pos += x[i]%10; x[i] /= 10;\n        }\n        if(pos == 0)\
    \ {\n            ans += len;\n            y.push_back(x[i]);\n            len++;\n\
    \        }\n    }\n    y.sort([](const long &a, const long &b){\n        return\
    \ (a<b) ? -1 : (a>b) ? 1 : 0;\n    });\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8umm1md6.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8umm1md6.cpp:26:7: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   26 |     y.sort([](const\
    \ long &a, const long &b){\n      |       ^~~~\n"
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() <= 100);\n    std::vector<long>\
    \ re;\n    long num = 0, temp, flag = 0;\n    for(long i = 0; i < x.size(); ++i)\
    \ {\n        temp = x[i]; // store original element\n        if(temp > 0) {\n\
    \            temp = temp % 10; // find digit\n            while(temp > 0) {\n\
    \                flag = temp % 2;\n                temp = temp / 2;\n        \
    \    }\n            if(flag == 1) re.push_back(x[i]);\n        }\n    }\n    return\
    \ re;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_q4wet7v: /tmp/tmp_q4wet7v.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n   std::vector<long> ans;\n   int sz =\
    \ x.size();\n   for(auto i = x.begin(), end = x.end(); i != end; ++i){\n     \
    \ while(*i % 10 == 0){\n         *i = *i / 10;\n         ans.push_back(*i);\n\
    \      }\n   }\n   std::sort(x.begin(), x.end());\n   if(sz > 0){\n      ans.push_back(*x.begin());\n\
    \   }\n   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdzrmmjk7: /tmp/tmpdzrmmjk7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    for(int i=0; i<x.size(); i++){\n        long tmp = x[i];\n       \
    \ if(tmp<10){\n            if(res.empty() || res.back()<tmp){\n              \
    \  res.push_back(tmp);\n            }\n        }else{\n            if(tmp%2!=0){\n\
    \                long t = tmp;\n                while(t>0){\n                \
    \    t /= 10;\n                }\n                if(res.empty() || res.back()<t){\n\
    \                    res.push_back(t);\n                }\n            }\n   \
    \     }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphzt84x22: /tmp/tmphzt84x22.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long ans = 0;\n    long long\
    \ l = x.size();\n    for (long i = 0; i < l; ++i) {\n        ans += x[i];\n  \
    \  }\n    std::vector<long> result;\n    long long ant = 1;\n    for (long i =\
    \ 0; i < l; ++i) {\n        int tmp = (x[i] * ant) % 10;\n        if (tmp == 0)\
    \ {\n            ant = ant * 10;\n        } else {\n            result.push_back(tmp);\
    \ \n            ans = (ans * 10 + tmp) % 10;\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_09791k0: /tmp/tmp_09791k0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    // Write your code here\n  \
    \  \n    long long ans = 0;\n    std::set<long long> visited;\n    \n    for(auto\
    \ i = x.begin(); i != x.end(); i++){\n        for(long long d = *i; *i != 0; i--){\n\
    \            if(d % 2 == 0 && visited.count(d) == 0){\n                ans++;\n\
    \                visited.insert(d);\n            }\n        }\n    }\n    \n \
    \   std::vector<long> anVector;\n    anVector.reserve(ans);\n    \n    for(auto\
    \ i = x.begin(); i != x.end(); i++){\n        if(visited.count(*i) == 0){\n  \
    \          anVector.push_back(*i);\n        }\n    }\n    \n    \n    return anVector;\n\
    \    \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093582
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long sum = 0;\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) sum += i;\n    }\n    std::vector<long>\
    \ ans;\n    while (sum > 0) {\n        long long pos = 0;\n        while (pos\
    \ < x.size() && (sum % 10 + x[pos] % 10 + 1) > 0) {\n            sum += x[pos];\n\
    \            pos++;\n        }\n        if (pos == x.size()) ans.push_back(sum);\n\
    \        sum -= x[pos];\n        pos++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long u\
    \ = 0;\n    long u2 = 0;\n    for(long i=0;i<x.size();i++) {\n        u += x[i]%10;\n\
    \        u2 = u%10;\n        if(u!=u2) {\n            ans.push_back(u2);\n   \
    \     }\n        u = u2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbsflkt8x: /tmp/tmpbsflkt8x.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long N = x.size();\n    std::vector<long>\
    \ ans;\n    long long ans_size = 0;\n    long long digit_cnt = 0;\n    for(int\
    \ i = 0; i < N; i++)\n    {\n        digit_cnt = 0;\n        for(int j = 0; j\
    \ < N; j++)\n        {\n            if(x[j] % 10 == 0)\n            {\n      \
    \          digit_cnt += 1;\n            }\n        }\n        if(digit_cnt > 0)\n\
    \        {\n            if(digit_cnt % 2 != 0)\n            {\n              \
    \  ans.push_back(x[i]);\n                ans_size += 1;\n            }\n     \
    \   }\n    }\n    for(int i = 0; i < ans.size(); i++)\n    {\n        long long\
    \ tmp = 1;\n        for(int j = 0; j < ans.size(); j++)\n        {\n         \
    \   if(ans[j] % 10 == 0)\n            {\n                tmp *= 10;\n        \
    \    }\n        }\n        if(tmp % ans[i] != 0)\n        {\n            ans.push_back(ans[i]);\n\
    \            ans_size += 1;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplt0gf044: /tmp/tmplt0gf044.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v; \n    for(long\
    \ it: x) v.push_back(it);\n    long long ans = 0, rem = 0, i = 1; \n    for(long\
    \ it: x) while(it > rem && i < (long)v.size()) \n        rem = (rem * 10) + (long)v[i\
    \ - 1] % 10;\n    for(long it: x) {\n        ans = ans * 10 + it % 10 - rem;\n\
    \        i++;\n    }\n    for(long it: v) if(it == ans) return std::vector<long>();\n\
    \    std::vector<long> ans(ans, ans + 1);\n    while(ans.back() == ans) ans.pop_back();\n\
    \    return ans; \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiavd1v4b.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpiavd1v4b.cpp:22:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   22 |     std::vector<long> ans(ans, ans +\
    \ 1);\n      |                       ^~~\n/tmp/tmpiavd1v4b.cpp:14:15: note: previous\
    \ declaration as \u2018long long int ans\u2019\n   14 |     long long ans = 0,\
    \ rem = 0, i = 1;\n      |               ^~~\n/tmp/tmpiavd1v4b.cpp:23:15: error:\
    \ request for member \u2018back\u2019 in \u2018ans\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   23 |     while(ans.back() == ans) ans.pop_back();\n\
    \      |               ^~~~\n/tmp/tmpiavd1v4b.cpp:23:34: error: request for member\
    \ \u2018pop_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018long\
    \ long int\u2019\n   23 |     while(ans.back() == ans) ans.pop_back();\n     \
    \ |                                  ^~~~~~~~\n/tmp/tmpiavd1v4b.cpp:24:12: error:\
    \ could not convert \u2018ans\u2019 from \u2018long long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   24 |     return ans;\n      |            ^~~\n      |       \
    \     |\n      |            long long int\n"
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long sum = 0;\n    long long\
    \ t = 0;\n    for (long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n\
    \        t += x[i];\n    }\n    if (t == 0)\n        return std::vector<long>({0});\n\
    \    \n    std::vector<long> ret(sum);\n    \n    for (long long i = 0; i < x.size();\
    \ i++) {\n        if (sum % 2 == 0)\n            continue;\n        if (sum >\
    \ 0)\n            t /= 10;\n        sum += x[i];\n        ret[sum] += x[i];\n\
    \    }\n    \n    for (long long i = 0; i < sum; i++) {\n        ret[i] = 0;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfc9cr_1s: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> a;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        for(long j = 0; j < x.size(); j++) {\n\
    \            if(x[i] % x[j] == 0) {\n                a.push_back(x[i]);\n    \
    \            for(long k = j + 1; k < x.size(); k++) {\n                    x[k]\
    \ /= 10;\n                    x[k] %= 10;\n                }\n               \
    \ x.erase(x.begin() + j + 1);\n                break;\n            }\n       \
    \ }\n    }\n    for(long i = 0; i < a.size(); i++) {\n        for(long j = 0;\
    \ j < a.size(); j++) {\n            if(a[i] % a[j] == 0) {\n                for(long\
    \ k = j + 1; k < a.size(); k++) {\n                    a[k] /= 10;\n         \
    \           a[k] %= 10;\n                }\n                a.erase(a.begin()\
    \ + j + 1);\n                break;\n            }\n        }\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptfyb_uo_: /tmp/tmptfyb_uo_.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    long long\
    \ s = 0;\n    long long k = 0;\n    for (long long i : x) {\n        s += i;\n\
    \        if (s % 2 == 0) k++;\n    }\n    if (k % 2 == 0)\n        res = x;\n\
    \    else\n        return std::vector<long>();\n    for (long long i = k; i <\
    \ s.size(); i += 2) {\n        if (s.at(i) >= 10)\n            std::swap(s.at(i),\
    \ s.at(s.size() - 1));\n    }\n    for (long long i = s.size() - 1; i >= 0; i\
    \ -= 2) {\n        if (s.at(i) >= 10)\n            std::swap(s.at(i), s.at(0));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6rx5uac.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc6rx5uac.cpp:23:33: error: request for member \u2018size\u2019\
    \ in \u2018s\u2019, which is of non-class type \u2018long long int\u2019\n   23\
    \ |     for (long long i = k; i < s.size(); i += 2) {\n      |               \
    \                  ^~~~\n/tmp/tmpc6rx5uac.cpp:24:15: error: request for member\
    \ \u2018at\u2019 in \u2018s\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   24 |         if (s.at(i) >= 10)\n      |               ^~\n/tmp/tmpc6rx5uac.cpp:25:25:\
    \ error: request for member \u2018at\u2019 in \u2018s\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   25 |             std::swap(s.at(i), s.at(s.size()\
    \ - 1));\n      |                         ^~\n/tmp/tmpc6rx5uac.cpp:25:34: error:\
    \ request for member \u2018at\u2019 in \u2018s\u2019, which is of non-class type\
    \ \u2018long long int\u2019\n   25 |             std::swap(s.at(i), s.at(s.size()\
    \ - 1));\n      |                                  ^~\n/tmp/tmpc6rx5uac.cpp:25:39:\
    \ error: request for member \u2018size\u2019 in \u2018s\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   25 |             std::swap(s.at(i), s.at(s.size()\
    \ - 1));\n      |                                       ^~~~\n/tmp/tmpc6rx5uac.cpp:27:26:\
    \ error: request for member \u2018size\u2019 in \u2018s\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   27 |     for (long long i = s.size() - 1;\
    \ i >= 0; i -= 2) {\n      |                          ^~~~\n/tmp/tmpc6rx5uac.cpp:28:15:\
    \ error: request for member \u2018at\u2019 in \u2018s\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   28 |         if (s.at(i) >= 10)\n      |\
    \               ^~\n/tmp/tmpc6rx5uac.cpp:29:25: error: request for member \u2018\
    at\u2019 in \u2018s\u2019, which is of non-class type \u2018long long int\u2019\
    \n   29 |             std::swap(s.at(i), s.at(0));\n      |                  \
    \       ^~\n/tmp/tmpc6rx5uac.cpp:29:34: error: request for member \u2018at\u2019\
    \ in \u2018s\u2019, which is of non-class type \u2018long long int\u2019\n   29\
    \ |             std::swap(s.at(i), s.at(0));\n      |                        \
    \          ^~\n"
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    std::vector<long> ans;\n   \
    \ \n    for (long i : x) {\n        // check if i is a multiple of 2\n       \
    \ if ((i & 1) == 0) {\n            while (i != 0) {\n                if (i & 1)\
    \ ans.push_back(i);\n                i >>= 1;\n            }\n        }\n    }\n\
    \n    std::vector<long> res;\n\n    std::sort(ans.begin(), ans.end(), std::greater<long>());\n\
    \n    for (long i : ans) if (i & 1) res.push_back(i);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp71luk5hz: /tmp/tmp71luk5hz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> tmp(x.size());\n\
    \    // sort x\n    for (auto itr = x.begin(); itr != x.end(); ++itr)\n    {\n\
    \        tmp.push_back(*itr);\n    }\n    std::sort(tmp.begin(), tmp.end());\n\
    \n    std::vector<long> ret;\n    for (auto itr = tmp.begin(); itr != tmp.end();\
    \ ++itr) {\n        if (*itr % 2 == 0) {\n            continue;\n        }\n \
    \       for (auto j = itr + 1; j != tmp.end(); ++j) {\n            if (*j % 2\
    \ != 0) {\n                break;\n            }\n            ret.push_back(*j);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9w5_jsr0: /tmp/tmp9w5_jsr0.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for (long\
    \ &i: x) \n    {\n        while(i>0){\n            long j=0;\n            long\
    \ k=0;\n            while(i>0){\n                j = j+i;\n                k++;\n\
    \                i/=10;\n            }\n            long long temp = j/k;\n  \
    \          long a = temp%10;\n            long b = temp/10;\n            assert(a<10);\n\
    \            assert(b<10);\n            if(ans.size()==0 || ans[ans.size()-1]>a\
    \ || ans[ans.size()-1]>b)\n                ans.push_back(a);\n            if(ans.size()==0\
    \ || ans[ans.size()-1]<a || ans[ans.size()-1]<b)\n                ans.push_back(b);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpf9uqyuek: /tmp/tmpf9uqyuek.cpp:27: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `b<10'' failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::map<long,\
    \ bool> s;\n    for(long &i: x){\n        s[i] = true;\n    }\n    long ans[x.size()];\n\
    \    for(int i=0; i< x.size(); i++){\n        if(s[i] == true){\n            for(int\
    \ j=i+1; j < x.size(); j++){\n                if(s[j%x.size()] == false){\n  \
    \                  ans[i] = ans[j];\n                    s[j] = true;\n      \
    \              j--;\n                }\n            }\n        }\n    }\n    return\
    \ std::vector<long>(ans);\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62jp7w31.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp62jp7w31.cpp:29:33: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(long int [(<anonymous> + 1)])\u2019\n\
    \   29 |     return std::vector<long>(ans);\n      |                         \
    \        ^\nIn file included from /usr/include/c++/9/vector:67,\n            \
    \     from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp62jp7w31.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp62jp7w31.cpp:29:33:\
    \ note:   candidate expects 3 arguments, 1 provided\n   29 |     return std::vector<long>(ans);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp62jp7w31.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:622:43: note:   no known conversion for argument\
    \ 1 from \u2018long int [(<anonymous> + 1)]"
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::vector<long> ret;\n    long cur_val = x[0];\n    long next_val = x[0];\n\
    \    bool flag = true;\n    while(next_val != 0) {\n        while(next_val%10\
    \ == 0) {\n            if(next_val != cur_val) {\n                ret.push_back(next_val);\n\
    \                flag = false;\n            }\n            cur_val += next_val;\n\
    \            next_val /= 10;\n        }\n        cur_val += next_val;\n      \
    \  next_val /= 10;\n    }\n    if(flag) {\n        ret.push_back(next_val);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplpcfe8wl: /tmp/tmplpcfe8wl.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    long\
    \ ans[100];\n    int N = x.size();\n    int i = 0;\n    for(int j=0; j<N; j++){\n\
    \        int t = x[j];\n        while(t != 0){\n            ans[i++] = t % 10;\n\
    \            t /= 10;\n        }\n    }\n    int j;\n    std::vector<long> ans_vec;\n\
    \    for(int k=0; k<i; k++){\n        for(j=0; j<i; j++){\n            if((ans[k]\
    \ % 10) == (ans[j] % 10)){\n                ans_vec.push_back(ans[k]);\n     \
    \           break;\n            }\n        }\n    }\n    return ans_vec;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwk02m8zt: /tmp/tmpwk02m8zt.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::set<long> s;\n    for (auto i : x) {\n        while (s.find(i) != s.end())\
    \ {\n            i++;\n        }\n        s.insert(i);\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gks2gq4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4gks2gq4.cpp:20:12: error: could not convert \u2018s\u2019\
    \ from \u2018std::set<long int>\u2019 to \u2018std::vector<long int>\u2019\n \
    \  20 |     return s;\n      |            ^\n      |            |\n      |   \
    \         std::set<long int>\n"
  stdout: ''
  timestamp: 1660093576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Write your code here\n  \n  std::sort(x.begin(),\
    \ x.end());\n  std::vector<long> ans;\n  std::size_t t = 0;\n  while (t < x.size())\
    \ {\n    if (x[t - 1] % 2 == 0) {\n      ans.push_back(x[t]);\n    }\n    t++;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4z26c5xs: /tmp/tmp4z26c5xs.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y(x.size());\n \
    \   std::iota(y.begin(), y.end(), 0);\n    std::sort(y.begin(), y.end(), [&x](long\
    \ a, long b){return x[a]%x[b]<0;});\n    auto it = std::unique(y.begin(), y.end());\n\
    \    y.erase(it, y.end());\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdzqi0giz: /tmp/tmpdzqi0giz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    int size\
    \ = x.size();\n    int ans = 0;\n    std::vector<long> ret;\n    \n    for (int\
    \ i = 0; i < size; i++) {\n        long tmp = x[i];\n        \n        while (i\
    \ < (size - 1)) {\n            if (tmp % 10 == 0 && tmp % 2 != 0) {\n        \
    \        break;\n            }\n            tmp /= 10;\n            i++;\n   \
    \     }\n        \n        if (i >= size) {\n            ret.push_back(tmp);\n\
    \            ans++;\n        }\n    }\n    \n    // Write your code here\n   \
    \ std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7_34yw4z: /tmp/tmp7_34yw4z.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if(x.size() == 0) return x;\n    std::vector<long>\
    \ y(x.size());\n    for(long i = x.size() - 1; i >= 0; i--)\n        if(x.at(i)\
    \ % 2 == 0) {\n            y.at(i) = x.at(i);\n        }\n    return y;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpk8hnhmtp: /tmp/tmpk8hnhmtp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans(x.size());\n\
    \    for(int i=0;i<x.size();++i)\n        ans[i] = x[i]%10;\n    sort(ans.begin(),ans.end());\n\
    \    long count = 0;\n    for(int i=0;i<ans.size();++i)\n    {\n        if(ans[i]%2\
    \ == 0)\n        {\n            ans[i] = ans[i]/10;\n            ++count;\n  \
    \          while (count > 0 && ans[ans.size() - count] == 0)\n            {\n\
    \                count--;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpan244riu: /tmp/tmpan244riu.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> out;\n    long prev_digit,\
    \ next_digit, last_digit;\n    long last_digit;\n    int i = 0, j = 0;\n    while\
    \ (i < x.size()) {\n        prev_digit = next_digit = x.at(i);\n        last_digit\
    \ = next_digit;\n        while ((i + 1) < x.size() && x.at(i+1) > next_digit)\
    \ {\n            ++i;\n            ++next_digit;\n        }\n        while (j\
    \ < x.size() && x.at(j) < next_digit) {\n            last_digit = x.at(j);\n \
    \           ++j;\n        }\n        if (i == j) out.push_back(last_digit);\n\
    \        ++i;\n    }\n    return out;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcd961zo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptcd961zo.cpp:14:10: error: redeclaration of \u2018long\
    \ int last_digit\u2019\n   14 |     long last_digit;\n      |          ^~~~~~~~~~\n\
    /tmp/tmptcd961zo.cpp:13:34: note: \u2018long int last_digit\u2019 previously declared\
    \ here\n   13 |     long prev_digit, next_digit, last_digit;\n      |        \
    \                          ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    std::vector<long>\
    \ ans;\n    \n    for (long i: x) {\n        long sum = 0;\n        while (i !=\
    \ 0) {\n            sum += i % 10;\n            i /= 10;\n        }\n        if\
    \ (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpavm05gfl: /tmp/tmpavm05gfl.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for (auto\
    \ it : x){\n        int digit = it % 10;\n        if(digit != 0){\n          \
    \  y.push_back(it);\n        }\n    }\n    std::sort(y.begin(), y.end());\n  \
    \  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi73zl_8q: /tmp/tmpi73zl_8q.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ n: x) {\n        while(n%10 != 0) {\n            ans.push_back(n%10);\n    \
    \        n /= 10;\n        }\n    }\n    while(!ans.empty()) {\n        for(auto\
    \ n: ans) {\n            while(n != 0) {\n                auto d = n % 10;\n \
    \               if(d % 2 == 1) {\n                    ans.push_back(d);\n    \
    \                n /= 10;\n                }\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ v;\n    for(long i : x) {\n        long sum = 0;\n        while(i > 0) {\n \
    \           sum += i % 10;\n            i /= 10;\n        }\n        if(sum %\
    \ 2 != 0) v.push_back(i);\n    }\n    sort(v.begin(), v.end());\n    return v;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpe7av054q: /tmp/tmpe7av054q.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // initialize a vector to hold the\
    \ unique digits with their indexes.\n    std::vector<std::pair<long, int>> y;\n\
    \    // sort the vector in increasing order.\n    std::sort(x.begin(), x.end());\n\
    \    // loop over the vector and check if it's even digit, if so then \n    //\
    \ add the index to vector y and remove the number.\n    for (long &i : x) {\n\
    \        if (i % 2 == 0) {\n            y.push_back(std::make_pair(i, 0));\n \
    \           x.erase(x.begin() + i);\n        }\n    }\n    // return the unique\
    \ numbers only.\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpou9qy7__.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpou9qy7__.cpp:25:12: error: could not convert \u2018y\u2019\
    \ from \u2018vector<std::pair<long int, int>>\u2019 to \u2018vector<long int>\u2019\
    \n   25 |     return y;\n      |            ^\n      |            |\n      | \
    \           vector<std::pair<long int, int>>\n"
  stdout: ''
  timestamp: 1660093577
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  int size = x.size();\n  int counter[size];\n\
    \  for (int i = 0; i < size; i++) {\n    counter[x[i]]++;\n  }\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < size; i++) {\n    if (counter[i] % 2 == 1) {\n\
    \      result.push_back(x[i]);\n    }\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> out;\n    long long\
    \ temp=0;\n    long long n=x.size();\n    if(x.size()==0)\n        return out;\n\
    \    for(long long i=0;i<n;i++){\n        temp = x[i]/10;\n        if(temp%2==0)\n\
    \            out.push_back(temp);\n        else{\n            while(i<n && x[i]/10==temp)\n\
    \                i++;\n            out.push_back(x[i]);\n        }\n    }\n  \
    \  return out;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsjzksukw: /tmp/tmpsjzksukw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  long xx\
    \ = x;\n  for (long i = 0; i < xx.size(); i++) {\n    long digit = xx % 10;\n\
    \    if (digit == 0) {\n      xx /= 10;\n    } else {\n      result.push_back(digit);\n\
    \      xx /= 10;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xe9wp62.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6xe9wp62.cpp:13:13: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   13 |   long xx = x;\n\
    \      |             ^\n      |             |\n      |             std::vector<long\
    \ int>\n/tmp/tmp6xe9wp62.cpp:14:27: error: request for member \u2018size\u2019\
    \ in \u2018xx\u2019, which is of non-class type \u2018long int\u2019\n   14 |\
    \   for (long i = 0; i < xx.size(); i++) {\n      |                          \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    int n = x.size();\n    int ret[n]\
    \ = {0};\n    for(int i = 0; i < n; i++) {\n        int flag = 0;\n        for(int\
    \ j = 0; j < n; j++) {\n            if(ret[j] == 0 && x[i] % x[j] == 0) {\n  \
    \              ret[j] = 1; // set it a 1\n                flag = 1;\n        \
    \        break;\n            }\n        }\n        if(flag == 1) {\n         \
    \   continue;\n        }\n        // no even digit\n        ret[++i] = 1; // set\
    \ it a 1\n    }\n    return std::vector<long>(ret, ret+n);\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0rbkw32e: /tmp/tmp0rbkw32e.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    //\
    \ Check x\n    assert(x.size() > 0);\n    // Check x's elements are positive\n\
    \    assert(std::all_of(x.begin(), x.end(), [](long n){return n > 0;}));\n   \
    \ // Initialize count\n    long count = 0;\n    // Check x's elements are digit\n\
    \    for (long n : x) {\n        assert(std::all_of(x.begin(), x.end(), [](long\
    \ n){return std::all_of(std::begin(n), std::end(n), [](long n){return std::all_of(std::begin(n),\
    \ std::end(n), [](long n){return n%10 == 0 ;});});}));\n        long d = n % 10;\n\
    \        if (d % 2 == 0) {\n            count++;\n        }\n    }\n    // If\
    \ all x's elements are digit, return empty vector\n    if (count == x.size())\
    \ {\n        return result;\n    }\n    // Check x's elements are not repeat\n\
    \    bool is_repeat = false;\n    for (long n : x) {\n        long d = n % 10;\n\
    \        if (std::find(x.begin(), x.end(), n) == x.end()) {\n            is_repeat\
    \ = true;\n            break;\n        }\n    }\n    // If is_repeat, return empty\
    \ vector\n    if (is_repeat) {\n        return result;\n    }\n    // Check count\
    \ is odd or even\n    if (count % 2 == 0) {\n        // If count is odd, find\
    \ all the digits that not repeated\n        for (long n : x) {\n            long\
    \ d = n % 10;\n            if (std::find(x.begin(), x.end(), n) == x.end()) {\n\
    \                result.push_back(d);\n            }\n        }\n        // If\
    \ count is even, find all the digits that repeated and add them to result\n  \
    \      for (long n : x) {\n            long d = n % 10;\n            if (std::find(x.begin(),\
    \ x.end(), n) != x.end()) {\n                result.push_back(d);\n          \
    \  }\n        }\n    } else {\n        // If count is even, find all the digits\
    \ that repeated and remove them from result\n        for (long n : x) {\n    \
    \        long d = n % 10;\n            if (std::find(x.begin(), x.end(), n) !=\
    \ x.end()) {\n                result.erase(std::remove(result.begin(), result.end(),\
    \ d), result.end());\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpqtn8mnto.cpp:2:\n/tmp/tmpqtn8mnto.cpp: In lambda function:\n/tmp/tmpqtn8mnto.cpp:21:90:\
    \ error: no matching function for call to \u2018begin(long int&)\u2019\n   21\
    \ |         assert(std::all_of(x.begin(), x.end(), [](long n){return std::all_of(std::begin(n),\
    \ std::end(n), [](long n){return std::all_of(std::begin(n), std::end(n), [](long\
    \ n){return n%10 == 0 ;});});}));\n      |                                   \
    \                                                       ^\nIn file included from\
    \ /usr/include/c++/9/bits/range_access.h:36,\n                 from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqtn8mnto.cpp:2:\n/usr/include/c++/9/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/cassert:44,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n           \
    \      from /tmp/tmpqtn8mnto.cpp:2:\n/tmp/tmpqtn8mnto.cpp:21:90: note:   mismatched\
    \ types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\n   21\
    \ |         assert(std::all_of(x.begin(), x.end(), [](long n){return std::all_of(std::begin(n),\
    \ std::end(n), [](long n){return std::all_of(std::begin(n), std::end(n), [](long\
    \ n){return n%10 == 0 ;});"
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ ans;\n    long long total = 0;\n    for (const auto& e: x) {\n        total\
    \ += e;\n    }\n    ans.push_back(total);\n    for (long long i = total; (i /=\
    \ 10) != 0;) {\n        long long num = i;\n        for (long long j = 0; j <\
    \ ans.size(); j++)\n            if (j != 0 && num % ans[j] == 0) {\n         \
    \       num *= 10;\n                ans.erase(ans.begin() + j);\n            \
    \    break;\n            }\n        ans.push_back(num);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkmrriigk: /tmp/tmpkmrriigk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y(x.size());\n \
    \   for(size_t i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long\
    \ temp = x[i];\n        while(temp / 10 != 0) {\n            temp = temp / 10;\n\
    \            flag++;\n        }\n        y[i] = temp % 10;\n    }\n    \n    for(size_t\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] == 0 || y[i] == 0) {\n        \
    \    continue;\n        }\n        for(size_t j = 0; j < x.size(); j++) {\n  \
    \          if(x[i] == y[j]) {\n                if(j < i) {\n                 \
    \   continue;\n                }\n                if(flag > 1) {\n           \
    \         y.insert(y.begin() + i, x[j]);\n                    y.insert(y.begin()\
    \ + j, 0);\n                    flag--;\n                } else {\n          \
    \          y[i] = 0;\n                }\n            }\n        }\n    }\n   \
    \ \n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7f6a6ysb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7f6a6ysb.cpp:32:20: error: \u2018flag\u2019 was not declared\
    \ in this scope\n   32 |                 if(flag > 1) {\n      |             \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> ans;\n\tfor(long i=0;i<x.size();i++)\
    \ {\n\t\tlong d=0;\n\t\twhile(x[i]>=10) {\n\t\t\td +=(x[i]%10)*(x[i]/10);\n\t\t\
    \tx[i] /=10;\n\t\t}\n\t\tif(d%2 !=0) {\n\t\t\tans.push_back(x[i]);\n\t\t}\n\t\
    }\n\treturn ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpow_v19z9: /tmp/tmpow_v19z9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::vector<long> y(x.size());\n    long long s = 0;\n    for (long long i\
    \ : x) {\n        s += i;\n        while (s % 2 == 0) {\n            y [i / 2]++;\n\
    \            s /= 10;\n        }\n    }\n    for (size_t i = 0; i < x.size();\
    \ i++) {\n        if (y[i] > 0) {\n            x.erase(x.begin() + i);\n     \
    \   }\n    }\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3ycx_0sy: /tmp/tmp3ycx_0sy.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    int n = x.size();\n    std::vector<long>\
    \ res;\n    long long sum=0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ x[i];\n        // Check if there were any even digit.\n        // If no then\
    \ add this number to result vector\n        if (sum % 2 == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpye2ll82o: /tmp/tmpye2ll82o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res(x.size());\n\
    \    // Sort the vector in ascending order\n    std::sort(x.begin(), x.end());\n\
    \    // Iterate over the vector, check if the current number has any even\n  \
    \  // digit, if so add it to result vector\n    for (long i=0;i<x.size();i++)\
    \ {\n        // Check if the i-th number has any even digit\n        // If no,\
    \ skip to the next element\n        bool found = false;\n        for (long j=i+1;j<x.size();j++)\
    \ {\n            if (x[i]%x[j] ==0) {\n                found = true;\n       \
    \         break;\n            }\n        }\n        if (!found) {\n          \
    \  res[res.length()-i-1] = x[i];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uz0j3_d.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9uz0j3_d.cpp:28:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018length\u2019\n   28 |             res[res.length()-i-1]\
    \ = x[i];\n      |                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660093577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_ebdtou6: /tmp/tmp_ebdtou6.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() > 0);\n    std::unordered_set<long>\
    \ digits;\n    for (auto y : x) {\n        while (y) {\n            long rem =\
    \ y % 10;\n            if (digits[rem])\n                break;\n            digits[rem]\
    \ = true;\n            y = y / 10;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for (auto d : digits)\n        if (!d)\n            ans.push_back(std::move(d));\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5so4ksy.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf5so4ksy.cpp:17:23: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::unordered_set<long int>\u2019 and \u2018long int\u2019\
    )\n   17 |             if (digits[rem])\n      |                       ^\n/tmp/tmpf5so4ksy.cpp:19:19:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_set<long\
    \ int>\u2019 and \u2018long int\u2019)\n   19 |             digits[rem] = true;\n\
    \      |                   ^\n"
  stdout: ''
  timestamp: 1660093578
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(auto\
    \ n : x)\n        y.push_back(n/10);\n    for(int i = y.size()-1; i>=0; i--) {\n\
    \        if((int)y[i] % 2 == 0) {\n            auto it = std::find(x.begin(),\
    \ x.end(), y[i]);\n            x.erase(it);\n        }\n    }\n    return x;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // TODO: Use a set here\n  x.sort();\n\
    \  std::vector<long> result;\n  // Keep adding elements to result until we reach\
    \ x.size().\n  while (x.size() > 0){\n    // If current element equals to current\
    \ last element\n    // No more elements to add, break\n    if (x.at(0) == x.back())\
    \ {\n      break;\n    }\n    // If current element doesn't have any even digits\n\
    \    // Add it to result vector\n    result.push_back(x.at(0));\n    // Remove\
    \ the first element from x vector\n    x.erase(x.begin());\n  }\n  // Return vector\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl0eefmso.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl0eefmso.cpp:13:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   13 |   x.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660093578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long result = 0;\n  for (long i: x)\
    \ {\n    result += i;\n  }\n  std::vector<long> result;\n  long base = result\
    \ % 10;\n  while (base > 0) {\n    if (result % base == 0) {\n      long tmp =\
    \ result / base;\n      result.push_back(tmp);\n    }\n    base /= 10;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp624k9qjh.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp624k9qjh.cpp:16:21: error: conflicting declaration \u2018\
    std::vector<long int> result\u2019\n   16 |   std::vector<long> result;\n    \
    \  |                     ^~~~~~\n/tmp/tmp624k9qjh.cpp:12:8: note: previous declaration\
    \ as \u2018long int result\u2019\n   12 |   long result = 0;\n      |        ^~~~~~\n\
    /tmp/tmp624k9qjh.cpp:21:14: error: request for member \u2018push_back\u2019 in\
    \ \u2018result\u2019, which is of non-class type \u2018long int\u2019\n   21 |\
    \       result.push_back(tmp);\n      |              ^~~~~~~~~\n/tmp/tmp624k9qjh.cpp:25:10:\
    \ error: could not convert \u2018result\u2019 from \u2018long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   25 |   return result;\n      |          ^~~~~~\n\
    \      |          |\n      |          long int\n"
  stdout: ''
  timestamp: 1660093578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() != 0);\n    std::vector<long>\
    \ res(x.size());\n    for(long i = 0; i < x.size(); i++) {\n        for(long j\
    \ = i+1; j < x.size(); j++) {\n            long c = x[j] - x[i];\n           \
    \ if (c >= 10) {\n                c = c - 10;\n            }\n            else\
    \ if (c < 0) {\n                c = c + 10;\n            }\n            else if\
    \ (c % 2 != 0) {\n                c = c + 1;\n            }\n            res[i]\
    \ = res[i] & c;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjjyncejq: /tmp/tmpjjyncejq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> output;\n    int\
    \ n = x.size();\n    long long s = accumulate(x.begin(), x.end(), 0);\n    int\
    \ odd = 0, even = 0, even_index = 0, odd_index = 0;\n    while (odd < n) {\n \
    \       if (s % 10 == 0) even++;\n        even_index = x.at(even_index);\n   \
    \     even--;\n        odd++;\n        odd_index = x.at(odd);\n    }\n    if (even\
    \ == 0) return x;\n    for (int i = n; i >= 1; i--) {\n        int index = x.at(i);\n\
    \        if (index % 10 == 0) continue;\n        if (x.at(i - 1) % 10 == 0) x.at(i)\
    \ = x.at(i - 1) + 1;\n        else x.at(i) = x.at(i - 1) + 1;\n        x.at(i\
    \ - 1) = x.at(i);\n        x.at(i - 1) = index;\n    }\n    return x;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 15) >= this->size() (which is 4)\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::sort(x.begin(), x.end());\n  std::vector<long>\
    \ y;\n  std::vector<long> tmp;\n  long ans = -1;\n  for (long n : x) {\n    bool\
    \ is_even = false;\n    for (long i = 0; i <= n; i++) {\n      if (n % i == 0)\
    \ {\n        is_even = true;\n        ans = i;\n        break;\n      }\n    }\n\
    \    if (!is_even) {\n      tmp.push_back(n);\n    }\n  }\n  std::sort(tmp.begin(),\
    \ tmp.end());\n  for (long n : tmp) {\n    if (n != ans) {\n      y.push_back(n);\n\
    \    }\n  }\n  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i: x) {\n        long temp=i;\n        while(temp%10==0)\n           \
    \ temp/=10;\n        if(result.count(temp))\n            break;\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4zxh6907.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4zxh6907.cpp:17:19: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   17 |         if(result.count(temp))\n\
    \      |                   ^~~~~\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n  std::vector<long>\
    \ ans;\n  // store all elements that doesn't have any even digit\n  std::unordered_set<long>\
    \ digits;\n  for (auto i : x) {\n    if (digits.count(i) == 0) {\n      digits.insert(i);\n\
    \      ans.push_back(i);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4w3u3xja: /tmp/tmp4w3u3xja.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long even = x[0&1]; // Get the first\
    \ odd digit\n    std::vector<long> ret;\n    for(long &i: x) //Go through all\
    \ numbers\n    {\n        long digit = i%10; //Get digit at current position\n\
    \        if(digit==0) { //If digit is 0 \n            ret.push_back(i); //Add\
    \ it to the result set\n            continue; \n        }\n        long cur =\
    \ digit; //Get current digit\n        for(long &j: x) {\n            long num\
    \ = j%10; //Get digit at position j\n            if(num==0) { //If digit is 0\
    \ \n                continue;\n            }\n            long next = num; //Save\
    \ current digit \n            if(next==digit) { //If current digit is same as\
    \ digit \n                continue; \n            }\n            if(next==even)\
    \ { //If current digit has even digit\n                ret.push_back(i); //Add\
    \ it to the result set\n                break; \n            }\n            if(next<digit)\
    \ { //If next digit has odd digit\n                cur.swap(next); //Swap current\
    \ digit with next digit\n                break; \n            }\n        }\n \
    \   }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcwak9l5.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwcwak9l5.cpp:36:21: error: request for member \u2018swap\u2019\
    \ in \u2018cur\u2019, which is of non-class type \u2018long int\u2019\n   36 |\
    \                 cur.swap(next); //Swap current digit with next digit\n     \
    \ |                     ^~~~\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::sort(x.begin(), x.end()); \n  std::vector<long>\
    \ y;\n  int count[33] = {0};\n  for (long &i : x) {\n    int k = i / 10;\n   \
    \ i = i % 10;\n    while (k-- > 0) {\n      assert(count[k] == 0);\n      count[k]\
    \ += 1;\n    }\n  }\n  for (int i = 0; i < 33; i++) {\n    if (count[i] == 0)\
    \ {\n      y.push_back(i);\n    }\n  }\n  return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm_lwu0c0: /tmp/tmpm_lwu0c0.cpp:19: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `count[k] == 0'' failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long n = 0;\n  for (long i = x.size()\
    \ - 1; i >= 0; i--) {\n    n = n % 10 + x[i];\n    if (n == 0) {\n      x.erase(x.begin()\
    \ + i);\n    }\n  }\n  return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb77ew4dr: /tmp/tmpb77ew4dr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ y;\n    long sum = 0;\n    for(auto i : x){\n        sum += i;\n    }\n    int\
    \ size = x.size();\n    for(int i = 0; i < size; i++){\n        if(sum % 2 ==\
    \ 0){\n            sum -= x[i];\n            y.push_back(x[i]);\n        }\n \
    \   }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpltq_931z: /tmp/tmpltq_931z.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tassert(x.size() != 0);\n\tlong long\
    \ result = 0;\n\tfor(auto it=x.begin();it!=x.end();++it) {\n\t\tresult *= 10;\n\
    \t\tresult += *it;\n\t}\n\tint mod = sqrt(result);\n\tstd::vector<long> result;\n\
    \tlong long pow10 = 1;\n\tfor(long long i = 1;i < mod;++i) {\n\t\tpow10 *= 10;\n\
    \t}\n\tfor(auto it=x.begin();it!=x.end();++it) {\n\t\tresult <<= 1;\n\t\tresult\
    \ += (long long)pow10 * (*it);\n\t}\n\tstd::sort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83sxlbzp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp83sxlbzp.cpp:19:20: error: conflicting declaration \u2018\
    std::vector<long int> result\u2019\n   19 |  std::vector<long> result;\n     \
    \ |                    ^~~~~~\n/tmp/tmp83sxlbzp.cpp:13:12: note: previous declaration\
    \ as \u2018long long int result\u2019\n   13 |  long long result = 0;\n      |\
    \            ^~~~~~\n/tmp/tmp83sxlbzp.cpp:28:19: error: request for member \u2018\
    begin\u2019 in \u2018result\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   28 |  std::sort(result.begin(), result.end());\n      |      \
    \             ^~~~~\n/tmp/tmp83sxlbzp.cpp:28:35: error: request for member \u2018\
    end\u2019 in \u2018result\u2019, which is of non-class type \u2018long long int\u2019\
    \n   28 |  std::sort(result.begin(), result.end());\n      |                 \
    \                  ^~~\n/tmp/tmp83sxlbzp.cpp:29:9: error: could not convert \u2018\
    result\u2019 from \u2018long long int\u2019 to \u2018std::vector<long int>\u2019\
    \n   29 |  return result;\n      |         ^~~~~~\n      |         |\n      |\
    \         long long int\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(long\
    \ i: x){\n        while(i /= 10)\n            ++ans.size();\n        ans.push_back(i);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    std::vector<long> res(ans.size());\n\
    \    std::iota(res.begin(), res.end(), 0);\n    for(long k = 0; k < res.size();\
    \ ++k) {\n        long sum = 0;\n        long tmp = res[k];\n        for(long\
    \ i = 0; i < k; ++i)\n            sum += (tmp %= 10);\n        if(sum == 0)\n\
    \            continue;\n        while(sum > 0) {\n            res[k] = res[sum\
    \ % res.size()];\n            --sum;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_rlkrli.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8_rlkrli.cpp:15:24: error: lvalue required as increment\
    \ operand\n   15 |             ++ans.size();\n      |                        ^\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n  long long res\
    \ = 0;\n  for (long i = 0; i < x.size(); i++) {\n    res = res * 10 + (x[i] %\
    \ 10);\n  }\n  std::vector<long> ans;\n  while (res % 2 == 0) {\n    ans.push_back(res\
    \ % 10);\n    res = res / 10;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgz3zyk51: /tmp/tmpgz3zyk51.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < x.size(); i++) {\n    int digit = x[i] % 10;\n    if (x[i] % 2 ==\
    \ 0)\n      continue;\n    if (result[digit - 1] != 0)\n      result.push_back(0);\n\
    \    result[digit - 1] += 1;\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for (int\
    \ i = 0; i < x.size(); i++) {\n        // if the current element contains any\
    \ even digit, push it to another vector.\n        if(std::any_of(x[i].begin(),\
    \ x[i].end(), [](int x){ return (x % 10) % 2 == 0; })) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    // return sorted vector\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoaqkdqaz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoaqkdqaz.cpp:15:29: error: request for member \u2018begin\u2019\
    \ in \u2018x.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   15 |      \
    \   if(std::any_of(x[i].begin(), x[i].end(), [](int x){ return (x % 10) % 2 ==\
    \ 0; })) {\n      |                             ^~~~~\n/tmp/tmpoaqkdqaz.cpp:15:43:\
    \ error: request for member \u2018end\u2019 in \u2018x.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   15 |      \
    \   if(std::any_of(x[i].begin(), x[i].end(), [](int x){ return (x % 10) % 2 ==\
    \ 0; })) {\n      |                                           ^~~\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    \n\
    \    for(long i: x) {\n        if(i % 2 == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    \n    if(result.size() == 0){\n        return result;\n\
    \    }\n\n    long mid = result.size() / 2;\n    \n    long prev = result[0];\n\
    \    long prevPrev = 0;\n    \n    for(int i = 1; i < mid; i++) {\n        if(result[i]\
    \ != prev) {\n            \n            result.insert(result.begin() + prev -\
    \ prevPrev, prev);\n            prev = result[i];\n            prevPrev = prev;\n\
    \        }\n    }\n    \n    result.insert(result.begin() + mid - prevPrev, prev);\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpde79t1n6: /tmp/tmpde79t1n6.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // write your code here\n  long long\
    \ int ans = 0, n = x.size();\n  for (int i = 0; i < n; i++) {\n    long long int\
    \ temp = x[i];\n    if (temp % 2 == 0) {\n      ans += temp;\n      x[i] = 0;\n\
    \      x[ans++] = temp;\n    }\n  }\n  std::vector<long> ans(ans, 0);\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyy4j5xy.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppyy4j5xy.cpp:22:21: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   22 |   std::vector<long> ans(ans, 0);\n  \
    \    |                     ^~~\n/tmp/tmppyy4j5xy.cpp:13:17: note: previous declaration\
    \ as \u2018long long int ans\u2019\n   13 |   long long int ans = 0, n = x.size();\n\
    \      |                 ^~~\n/tmp/tmppyy4j5xy.cpp:23:10: error: could not convert\
    \ \u2018ans\u2019 from \u2018long long int\u2019 to \u2018std::vector<long int>\u2019\
    \n   23 |   return ans;\n      |          ^~~\n      |          |\n      |   \
    \       long long int\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n\tstd::vector<long>\
    \ y;\n\tfor(auto i:x){\n\t\tif((i%10)%2==0)\n\t\t\ty.push_back(i);\n\t}\n\treturn\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp51nkdo4z: /tmp/tmp51nkdo4z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    long long int size = x.size();\n\
    \    \n    // Check if all elements are positive\n    if(size<1)\n        return\
    \ std::vector<long>();\n    \n    // Iterate from 1 to (size-1)\n    for(long\
    \ long int i=1;i<(size-1);i++)\n    {\n        // Check if current number is even\
    \ digit\n        if(x[i]%2==0)\n        {\n            // If yes, add current\
    \ number to output vector.\n            x.push_back(x[i]);\n        }\n    }\n\
    \    \n    // If all numbers are even, just return empty vector\n    if(size==1)\n\
    \        return std::vector<long>();\n    \n    // Return sorted vector\n    return\
    \ sort(x);\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7s_9ycen.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7s_9ycen.cpp:35:18: error: no matching function for call\
    \ to \u2018sort(std::vector<long int>&)\u2019\n   35 |     return sort(x);\n \
    \     |                  ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7s_9ycen.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4863:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::sort(_RAIter, _RAIter)\u2019\
    \n 4863 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4863:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7s_9ycen.cpp:35:18: note: \
    \  candidate expects 2 arguments, 1 provided\n   35 |     return sort(x);\n  \
    \    |                  ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7s_9ycen.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4893:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4893 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4893:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7s_9ycen.cpp:35:18:\
    \ note:   candidate expects 3 arguments, 1 provided\n   35 |     return sort(x);\n\
    \      |                  ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7s_9ycen.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:292:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _RandomAccessIterator,\
    \ class _Compare> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare)\u2019\n  292 | sort(_Exec"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbexito04: /tmp/tmpbexito04.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ nums_temp;\n    for(auto i = 0L; i < x.size(); i++)\n    {\n        if(std::find(nums_temp.begin(),\
    \ nums_temp.end(), x[i]) == nums_temp.end())\n        {\n            nums_temp.push_back(x[i]);\n\
    \        }\n    }\n    \n    return nums_temp;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpe5l5a23u: /tmp/tmpe5l5a23u.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // code here\n    \n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkqdiapcf: /tmp/tmpkqdiapcf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Write your code here.\n  assert(x.size()\
    \ > 0);\n  long maxValue = x[x.size()-1];\n  std::unordered_map<long, std::vector<long>>\
    \ map;\n  for(auto &i : x) {\n    auto digit = i % maxValue;\n    map[digit].push_back(i);\n\
    \  }\n  std::vector<long> ret;\n  for(auto &it : map) {\n    if(it.second.size()\
    \ == 1) ret.push_back(it.second[0]);\n  }\n  return ret;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpznna9rfy: /tmp/tmpznna9rfy.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    \n   \
    \ assert(x.size() > 0);\n    \n    // remove all even number\n    for(long i =\
    \ 0; i < (long)x.size(); i++)\n        if(std::all_of(x[i].begin(), x[i].end(),\
    \ \n                       [](long x) { return (x % 2) != 0; })) {\n         \
    \   ans.push_back(x[i]);\n        }\n    \n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf49opeqc.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf49opeqc.cpp:18:29: error: request for member \u2018begin\u2019\
    \ in \u2018x.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   18 |      \
    \   if(std::all_of(x[i].begin(), x[i].end(),\n      |                        \
    \     ^~~~~\n/tmp/tmpf49opeqc.cpp:18:43: error: request for member \u2018end\u2019\
    \ in \u2018x.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   18 |      \
    \   if(std::all_of(x[i].begin(), x[i].end(),\n      |                        \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  assert(x.size() >= 2);\n  long long\
    \ sum = 0;\n  std::sort(x.begin(), x.end());\n  for (long long x: x) {\n    if\
    \ (x % 10 == 0) sum += x;\n  }\n  long long y = sum / 10;\n  std::vector<long>\
    \ res;\n  for (long long x: x) {\n    if (x % 10 != 0 || x != y) {\n      res.push_back(x);\n\
    \    }\n  }\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpotuh1lyk: /tmp/tmpotuh1lyk.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // code here\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm20957l3: /tmp/tmpm20957l3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    long long\
    \ temp;\n    for (long long i = 0; i < (long long) x.size(); i++) {\n        temp\
    \ = x[i];\n        res.push_back(temp % 10);\n        temp = temp / 10;\n    }\n\
    \    std::sort(res.begin(), res.end());\n    for (long long i = 0; i < res.size();\
    \ i++) {\n        if (res[i] % 2 != 0)\n            continue;\n        temp =\
    \ res[i];\n        res.erase(res.begin() + i);\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpalh1_0rh: /tmp/tmpalh1_0rh.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    // dp[i]\
    \ stores the number of elements that have an even number of digit\n    // when\
    \ indexed by i\n    std::vector<long> dp(x.size()+1, 0);\n    // dp[i] stores\
    \ the number of elements that have an even number of digit\n    // when indexed\
    \ by i.\n    for (int i = 0; i < x.size(); ++i) {\n        long current_digit_sum\
    \ = x[i];\n        long dp_index = i;\n        // if current_digit_sum is 0, then\
    \ dp[i] should stay at 0.\n        // if we have already visited dp[0], we cannot\
    \ have any even digit at all.\n        while (current_digit_sum != 0 && dp_index\
    \ > 1) {\n            long temp_digit_sum = current_digit_sum;\n            long\
    \ temp_dp_index = dp_index;\n            current_digit_sum -= current_digit_sum\
    \ % 10;\n            while(temp_digit_sum != 0) {\n                dp_index--;\n\
    \                dp[dp_index] += dp[dp_index-1];\n                temp_digit_sum\
    \ -= temp_digit_sum % 10;\n            }\n        }\n        // If current_digit_sum\
    \ is 0, then dp[i] should stay at 0.\n        // if we have already visited dp[0],\
    \ we cannot have any even digit at all.\n        dp[i] = dp_index;\n    }\n  \
    \  return dp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() == 100);\n    int\
    \ k = 0;\n    // We will sort the vector and count how many even digits are there\
    \ at that position\n    std::vector<int> count(x.size());\n    for (auto it =\
    \ x.begin(); it != x.end(); ++it) {\n        ++count[*it];\n    }\n    for (auto\
    \ it = x.begin(); it != x.end(); ++it) {\n        while (count[*it] > 0) {\n \
    \           ++k; // count the digit\n            count[*it] -= 1; // decrement\
    \ the count\n        }\n    }\n    std::vector<long> res;\n    // All even digits\
    \ should appear in even position in the vector\n    int countEven = 0;\n    //\
    \ Keep adding even digits to the res vector till k is less than x.size\n    while\
    \ (k <= x.size()) {\n        // If the current element has k digits and we haven't\
    \ found even digits in count\n        if (count[k] >= 2 && countEven >= 0) {\n\
    \            int i = 0;\n            for (auto it = x.begin(); it != x.end();\
    \ ++it) {\n                // If the current element is equal to k then we found\
    \ a new digit that we didn't find before.\n                // We should add it\
    \ to res vector and increase the count.\n                // Else, we should increase\
    \ the count\n                if (count[*it] == k) {\n                    res.push_back(*it);\n\
    \                    ++countEven;\n                }\n                else {\n\
    \                    ++countEven;\n                }\n            }\n        \
    \    ++k;\n        }\n        else {\n            ++k;\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp43yf7bc3: /tmp/tmp43yf7bc3.cpp:12: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `x.size() == 100'' failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // write your code here\n  \n  x.sort();\n\
    \  std::vector<long> ans;\n  for(long long i : x){\n    if((int)i/2 != i)\n  \
    \    ans.push_back(i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5qv657b.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpm5qv657b.cpp:14:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   14 |   x.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Your code here\n\tauto it = x.begin();\n\
    \tstd::vector<long> digits;\n\tfor(; it != x.end(); ++it) {\n\t\tunsigned long\
    \ val = *it;\n\t\tunsigned long base = 10;\n\t\tstd::vector<long> digits(std::ceil(val\
    \ / base).begin(), \n\t\t\t\tstd::ceil(val / base).end());\n\t\tfor(auto d : digits)\
    \ {\n\t\t\tif(val % base == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!digits.size())\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tfor(auto d : digits) {\n\t\t\tif(digits.size()\
    \ == 1) {\n\t\t\t\tdigits = std::vector<long>();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    \tfor(auto d : digits) {\n\t\t\t\tif(d > 10) {\n\t\t\t\t\tdigits.erase(digits.begin());\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(d % 2 == 0) {\n\t\t\t\t\tdigits.erase(digits.begin());\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(digits.size() == 1) {\n\t\t\
    \tdigits.erase(digits.begin());\n\t\t}\n\t\tfor(auto d : digits) {\n\t\t\tdigits.push_back(d);\n\
    \t\t}\n\t}\n\treturn digits;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwmly0o99.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwmly0o99.cpp:18:50: error: request for member \u2018begin\u2019\
    \ in \u2018std::ceil<long unsigned int>((val / base))\u2019, which is of non-class\
    \ type \u2018__gnu_cxx::__enable_if<true, double>::__type\u2019 {aka \u2018double\u2019\
    }\n   18 |   std::vector<long> digits(std::ceil(val / base).begin(),\n      |\
    \                                                  ^~~~~\n/tmp/tmpwmly0o99.cpp:19:27:\
    \ error: request for member \u2018end\u2019 in \u2018std::ceil<long unsigned int>((val\
    \ / base))\u2019, which is of non-class type \u2018__gnu_cxx::__enable_if<true,\
    \ double>::__type\u2019 {aka \u2018double\u2019}\n   19 |     std::ceil(val /\
    \ base).end());\n      |                           ^~~\n"
  stdout: ''
  timestamp: 1660093580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    long\
    \ result = 1;\n    for (long i : x) {\n        while (!(i%10)) {\n           \
    \ result *= 10;\n            i--;\n        }\n        result += (i / 10);\n  \
    \      i %= 10;\n    }\n    std::vector<long> result;\n    while (!result % 2)\
    \ {\n        result /= 10;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gxip8xb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8gxip8xb.cpp:22:23: error: conflicting declaration \u2018\
    std::vector<long int> result\u2019\n   22 |     std::vector<long> result;\n  \
    \    |                       ^~~~~~\n/tmp/tmp8gxip8xb.cpp:13:10: note: previous\
    \ declaration as \u2018long int result\u2019\n   13 |     long result = 1;\n \
    \     |          ^~~~~~\n/tmp/tmp8gxip8xb.cpp:26:12: error: could not convert\
    \ \u2018result\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\
    \n   26 |     return result;\n      |            ^~~~~~\n      |            |\n\
    \      |            long int\n"
  stdout: ''
  timestamp: 1660093579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> vx;\n    for(long\
    \ &i: x) {\n        if(i % 10 == 0)\n            vx.push_back(i);\n    }\n   \
    \ std::sort(vx.begin(), vx.end());\n    for(long i: vx) {\n        if(i % 2 !=\
    \ 0)\n            std::cout << i << std::endl;\n    }\n    return vx;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxvjerqgl: /tmp/tmpxvjerqgl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::set<long>\
    \ unique_digits;\n    for (long &e : x) {\n        e %= 10;\n        if (unique_digits.find(e)\
    \ != unique_digits.end()) {\n            continue;\n        }\n        unique_digits.insert(e);\n\
    \        result.push_back(e);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpy3q27q0n: /tmp/tmpy3q27q0n.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ out;\n    for (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n\
    \        for (int j = 0; j < 10; j++) {\n            long temp = num;\n      \
    \      while (temp % 10 == 0) {\n                temp = temp / 10;\n         \
    \   }\n            if (temp % 2 == 0) {\n                out.push_back(temp);\n\
    \            }\n        }\n    }\n    std::sort(out.begin(), out.end());\n   \
    \ for (long i = 0; i < out.size(); i++) {\n        if (i != 0 && out[i - 1] ==\
    \ out[i]) {\n            out.erase(out.begin() + i - 1);\n        }\n    }\n \
    \   return out;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpozk1tv_e: /tmp/tmpozk1tv_e.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093580
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // code here\n    std::vector<long>\
    \ y;\n    long temp;\n    long c = 0;\n    for (long i = 0L; i < x.size(); i++)\
    \ {\n        while ((temp = x[i]/10) != 0) {\n            if (temp % 2 == 0) {\n\
    \                c++;\n            }\n            temp /= 10;\n        }\n   \
    \     if (c > 1) {\n            y.push_back(x[i]);\n            c--;\n       \
    \ }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   // store all the digits in one vector.\n    std::vector<long> d(x.size());\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    for (int i = 0; i < x.size();\
    \ ++i) {\n        if (0 == (i % 2)) {\n            a = x[i];\n        }\n    }\n\
    \    for (int i = 0; i < x.size(); ++i) {\n        if (1 == (i % 2)) {\n     \
    \       b = x[i];\n        }\n    }\n    for (int i = 0; i < x.size(); ++i) {\n\
    \        if (2 == (i % 2)) {\n            c = x[i];\n        }\n    }\n    for\
    \ (int i = 0; i < x.size(); ++i) {\n        if (3 == (i % 2)) {\n            d\
    \ = x[i];\n        }\n    }\n    for (int i = 0; i < x.size(); ++i) {\n      \
    \  if (4 == (i % 2)) {\n            e = x[i];\n        }\n    }\n    for (int\
    \ i = 0; i < x.size(); ++i) {\n        if (5 == (i % 2)) {\n            f = x[i];\n\
    \        }\n    }\n    for (int i = 0; i < x.size(); ++i) {\n        if (6 ==\
    \ (i % 2)) {\n            g = x[i];\n        }\n    }\n    if (a == 0) {\n   \
    \     d.push_back(a);\n        d.push_back(b);\n        d.push_back(c);\n    \
    \    d.push_back(d);\n        d.push_back(e);\n        d.push_back(f);\n     \
    \   d.push_back(g);\n    }\n    if (b == 0) {\n        d.push_back(a);\n     \
    \   d.push_back(b);\n        d.push_back(c);\n        d.push_back(d);\n      \
    \  d.push_back(e);\n        d.push_back(f);\n        d.push_back(g);\n    }\n\
    \    if (c == 0) {\n        d.push_back(a);\n        d.push_back(b);\n       \
    \ d.push_back(c);\n        d.push_back(d);\n        d.push_back(e);\n        d.push_back(f);\n\
    \        d.push_back(g);\n    }\n    if (d == 0) {\n        d.push_back(a);\n\
    \        d.push_back(b);\n        d.push_back(c);\n        d.push_back(d);\n \
    \       d.push_back(e);\n        d.push_back(f);\n        d.push_back(g);\n  \
    \  }\n    if (e == 0) {\n        d.push_back(a);\n        d.push_back(b);\n  \
    \      d.push_back(c);\n        d.push_back(d);\n        d.push_back(e);\n   \
    \     d.push_back(f);\n        d.push_back(g);\n    }\n    if (f == 0) {\n   \
    \     d.push_back(a);\n        d.push_back(b);\n        d.push_back(c);\n    \
    \    d.push_back(d);\n        d.push_back(e);\n        d.push_back(f);\n     \
    \   d.push_back(g);\n    }\n    if (g == 0) {\n        d.push_back(a);\n     \
    \   d.push_back(b);\n        d.push_back(c);\n        d.push_back(d);\n      \
    \  d.push_back(e);\n        d.push_back(f);\n        d.push_back(g);\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpue4zut_5.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpue4zut_5.cpp:18:10: error: conflicting declaration \u2018\
    long int d\u2019\n   18 |     long d = 0;\n      |          ^\n/tmp/tmpue4zut_5.cpp:14:23:\
    \ note: previous declaration as \u2018std::vector<long int> d\u2019\n   14 | \
    \    std::vector<long> d(x.size());\n      |                       ^\n/tmp/tmpue4zut_5.cpp:39:20:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   39 |             d =\
    \ x[i];\n      |                    ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpue4zut_5.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018const std::vector<long int>&\u2019\n  199\
    \ |     operator=(const vector<_Tp, _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpue4zut_5.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:706:7:\
    \ note: candid"
  stdout: ''
  timestamp: 1660093580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0pfowlgu: /tmp/tmp0pfowlgu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    //\
    \ your code goes here\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp17ved45i: /tmp/tmp17ved45i.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Code here\n    std::vector<long>\
    \ result;\n    std::vector<bool> isEven;\n    isEven.resize(x.size());\n    for(int\
    \ i=0;i<x.size();i++)\n        isEven[i]=false;\n    long long digits=0;\n   \
    \ for(int i=0;i<x.size();i++)\n    {\n        isEven[(int)x[i]] = true;\n    \
    \    digits+=x[i];\n    }\n    int count=0, size=0;\n    for(int i=0;i<x.size();i++)\n\
    \        if(!isEven[i])\n        {\n            result.push_back(x[i]);\n    \
    \        size++;\n            count++;\n        }\n    std::sort(result.begin(),\
    \ result.end());\n    return std::vector<long>{result, count};\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6e0xzdl7.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6e0xzdl7.cpp:33:43: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(<brace-enclosed initializer list>)\u2019\
    \n   33 |     return std::vector<long>{result, count};\n      |              \
    \                             ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6e0xzdl7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6e0xzdl7.cpp:33:43: note:   deduced conflicting types for parameter\
    \ \u2018_InputIterator\u2019 (\u2018std::vector<long int>\u2019 and \u2018int\u2019\
    )\n   33 |     return std::vector<long>{result, count};\n      |             \
    \                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6e0xzdl7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n\
    /usr/include/c++/9"
  stdout: ''
  timestamp: 1660093580
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  int result[] = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9};\n  std::vector<long> y;\n  for (long i = 0, size = x.size(); i < size;\
    \ i++) {\n    long n = x[i];\n    if (n > 0) {\n      for (int j = 0; j < i; j++)\
    \ {\n        if (n % result[j] == 0) {\n          y.push_back(x[j]);\n       \
    \   break;\n        }\n      }\n    }\n  }\n  return y;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    // 1.\
    \ Find number of digits\n    size_t num_digits = x.size();\n    std::vector<bool>\
    \ flag(num_digits);\n    for (size_t i = 0; i != num_digits; ++i) {\n        flag[i]\
    \ = false;\n    }\n    // 2. Scan all elements, and add one to every even digit\n\
    \    for (size_t i = 0; i != num_digits; ++i) {\n        if (flag[i]) {\n    \
    \        flag[i] = false;\n        } else {\n            flag[i] = x[i / 2] %\
    \ 2 == 0;\n            x[i / 2]++;\n        }\n    }\n    // 3. Return vector\n\
    \    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpw_8t1jx2: /tmp/tmpw_8t1jx2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y; \n    long cnt\
    \ = 0;\n    for (auto i = x.begin(), end = x.end(); i != end; ++i)\n    {\n  \
    \      for (auto j = i; j != end; ++j)\n        {\n            ++cnt;\n      \
    \      if (*j % 10 == 0)\n                break;\n        }\n        if (cnt %\
    \ 2 == 0)\n        {\n            y.push_back(*i);\n            cnt = 0;\n   \
    \     }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptavmjfvm: /tmp/tmptavmjfvm.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for(long\
    \ i=0;i<x.size();i++){\n        long long tmp=x[i];\n        while(tmp){\n   \
    \         tmp=tmp/10;\n            if(tmp%2==0){\n                result.push_back(tmp);\n\
    \                break;\n            }\n        }\n    }\n    \n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2vinz4bp: /tmp/tmp2vinz4bp.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long sum = 0, ans = 0, digit\
    \ = 0, count = 0;\n    for(long i: x)\n    {\n        sum += i;\n    }\n    while(sum\
    \ != 0)\n    {\n        digit = sum % 10;\n        if(digit % 2 == 0)\n      \
    \  {\n            ans = ans * 10 + (int)digit;\n            ++count;\n       \
    \ }\n        sum = (sum / 10) - 1;\n    }\n    std::vector<long> ans2((int)count);\n\
    \    count = 0;\n    for(long long i: x)\n    {\n        digit = (long long)(i\
    \ / sum) % 10;\n        if(digit % 2 == 0)\n        {\n            ans2[count]\
    \ = ans * 10 + digit;\n            ++count;\n        }\n    }\n    std::vector<long>\
    \ ans3(count);\n    for(long i = 0; i < (int)ans2.size(); ++i)\n    {\n      \
    \  ans3[i] = ans2[i];\n    }\n    return ans3;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long s\
    \ = 0;\n    for (long &i : x) {\n        s += i;\n    }\n    if (s % 2 == 0) {\n\
    \        return ans;\n    }\n    for (long &i : x) {\n        if (i % 2 != 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_8y95nvw: /tmp/tmp_8y95nvw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::map<long, int> m;\n    for(long\
    \ &x : x) {\n        m[x] = m[x % 10] + 1;\n    }\n\n    std::vector<long> ans;\n\
    \    long max = 1;\n    for(auto &it : m) {\n        if(it.second > 1) {\n   \
    \         for(long i=it.second-1; i >0; i--) {\n                long tmp = it.first\
    \ % 10;\n                long digit = it.first / 10;\n                it[m[digit]]--;\n\
    \                m[tmp]--;\n            }\n            long tmp = it.first % 10;\n\
    \            long digit = it.first / 10;\n            ans.push_back(tmp); // Keep\
    \ the current position\n            it[m[digit]]--;\n            m[tmp]--;\n \
    \       }\n        else if(it.second == 1) {\n            long tmp = it.first\
    \ % 10;\n            long digit = it.first / 10;\n            ans.push_back(tmp);\n\
    \            it[m[digit]]--;\n            m[tmp]--;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25cifyse.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp25cifyse.cpp:24:19: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::pair<const long int, int>\u2019 and \u2018std::map<long\
    \ int, int>::mapped_type\u2019 {aka \u2018int\u2019})\n   24 |               \
    \  it[m[digit]]--;\n      |                   ^\n/tmp/tmp25cifyse.cpp:30:15: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::pair<const\
    \ long int, int>\u2019 and \u2018std::map<long int, int>::mapped_type\u2019 {aka\
    \ \u2018int\u2019})\n   30 |             it[m[digit]]--;\n      |            \
    \   ^\n/tmp/tmp25cifyse.cpp:37:15: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::pair<const long int, int>\u2019 and \u2018std::map<long\
    \ int, int>::mapped_type\u2019 {aka \u2018int\u2019})\n   37 |             it[m[digit]]--;\n\
    \      |               ^\n"
  stdout: ''
  timestamp: 1660093581
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    long count[1000010];\n\
    \    \n    for (auto i: x){\n        long temp = 0;\n        for(int j = i%10;\
    \ j>0; j/=10)\n            temp += count[j];\n        count[i%10] = temp+1;\n\
    \    }\n    \n    std::vector<long> ans;\n    for (long i=0; i <= 1000000000;\
    \ ++i){\n        long max = 0;\n        for(int j=0; j<10; ++j)\n            if(count[j]\
    \ >= i)\n                max = i;\n        if(max > 0)\n            ans.push_back(max);\n\
    \    }\n    \n    std::sort(ans.begin(), ans.end());\n    \n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    // Solve it\
    \ using std::unique_copy\n    std::vector<long> y;\n    std::unique_copy(x.begin(),\
    \ x.end(), std::back_inserter(y));\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjj38u_6c: /tmp/tmpjj38u_6c.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() != 0);\n    std::vector<long>\
    \ ans;\n    for(long &x: x) {\n        if(x % 2 == 0) {\n            int n = 0;\n\
    \            while(x > 0) {\n                if((x % 10) == 0) n++;\n        \
    \        x /= 10;\n            }\n            assert(n % 2 != 0);\n          \
    \  ans.push_back(n / 2);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9kbqmh_9: /tmp/tmp9kbqmh_9.cpp:21: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `n % 2 != 0'' failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    long\
    \ long ans = 0, n = 0;\n    for(int i = 0; i < x.size(); i++) {\n        n +=\
    \ x[i]; \n        if((n % 10) % 2 == 0) {\n            ans += n / 10;\n      \
    \  }\n    }\n    std::vector<long> y;\n    for(long long i = 1; i < ans; i *=\
    \ 10) {\n        long long rem = i % 10;\n        while(ans % i == 0) {\n    \
    \        ans /= i;\n        }\n        if(rem != 0) {\n            y.push_back(rem);\n\
    \        }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long even[10]\
    \ = {0};\n    for (long &i : x) {\n        // get each digit.\n        long d\
    \ = i % 10;\n        // if d is even update it's value else 0.\n        if (d\
    \ % 2 == 0) even[d]++;\n        else even[d] = 1;\n    }\n    for (long i = 0;\
    \ i < 10; i++) {\n        if (even[i] == 1) {\n            ans.push_back(i);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplrd7vvln: /tmp/tmplrd7vvln.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() >= 1);\n    std::vector<long>\
    \ ans;\n    long maxValue = *(std::max_element(x.begin(), x.end()) + 1);\n   \
    \ long maxIndex = 0;\n    for (int i = 0; i < x.size(); i++) {\n        int digit\
    \ = *(x + i);\n        if (digit < 10) {\n            ans.push_back(digit);\n\
    \        }\n        else if (digit == maxValue) {\n            maxIndex = i;\n\
    \        }\n    }\n    if (maxIndex < ans.size()) {\n        ans.erase(ans.begin()\
    \ + maxIndex);\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp91dee_b.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp91dee_b.cpp:17:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   17 |         int digit = *(x + i);\n      |                       ~ ^ ~\n\
    \      |                       |   |\n      |                       |   int\n\
    \      |                       std::vector<long int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp91dee_b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpp91dee_b.cpp:17:27:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   17 |         int digit = *(x + i);\n      |        \
    \                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp91dee_b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_i"
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long ans = 0;\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        while (ans*10+(x[i]%10)%2 == 0) {\n\
    \            ans++;\n            x[i]--;\n        }\n    }\n    std::vector<long>\
    \ ans_list;\n    for (long long i = 0; i < x.size(); i++) {\n        while (x[i]\
    \ > 0) {\n            ans++;\n            x[i]--;\n        }\n        ans_list.push_back(x[i]/10);\n\
    \    }\n    return ans_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpmyd5jcgm: /tmp/tmpmyd5jcgm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ret; \n    for (long\
    \ i = 0; i < (long)x.size(); i++) {\n        int counter = 1;\n        for (long\
    \ j = (long)i + 1; j < (long)x.size(); j++) {\n            long temp = x[i];\n\
    \            if (temp % j == 0) {\n                counter++;\n            }\n\
    \        }\n        if (counter % 2 == 0) {\n            ret.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpov7lmd1p: /tmp/tmpov7lmd1p.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    long long\
    \ ans = 0, tmp = 0;\n    for(auto itr = x.begin(); itr != x.end(); ++itr) {\n\
    \        tmp *= 10;\n        tmp += *itr;\n        ans = std::min(ans, tmp);\n\
    \        if(ans % 10 == 0) res.push_back(tmp);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb60tsgn7: /tmp/tmpb60tsgn7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    long\
    \ long size = x.size();\n    std::vector<long> ans;\n    for (long long i = 0;\
    \ i < size; i++) {\n        // if x[i]%2 == 0 then we can skip it\n        if\
    \ (x[i] % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpt28uvq73: /tmp/tmpt28uvq73.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // TODO: return sorted version of\
    \ x\n    assert(x.size() > 0);\n    std::vector<long> retval;\n    std::vector<bool>\
    \ visited(x.size(), false);\n    for (long &i : x) {\n        while (!visited[i])\
    \ {\n            retval += i;\n            visited[i] = true;\n            i /=\
    \ 10;\n        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp695100o0.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp695100o0.cpp:18:20: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019\
    )\n   18 |             retval += i;\n      |             ~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  if (x.empty())\n    return std::vector<long>();\n\
    \  std::vector<long> out;\n  long last = 0;\n  for (long num : x) {\n    long\
    \ ans = num;\n    long temp = last;\n    for (long i = last; i > temp; i--) {\n\
    \      if (num % i == 0) {\n        ans = ans / i;\n        break;\n      }\n\
    \    }\n    if (ans != last) {\n      out.push_back(last);\n      last = ans;\n\
    \    }\n  }\n  out.push_back(last);\n  return out;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmps_dmn789: /tmp/tmps_dmn789.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  assert(x.size() >= 1);\n  std::vector<long>\
    \ res(x.size());\n  for (int i = 0; i != x.size(); ++i) {\n    long current =\
    \ x[i];\n    for (int j = 0; j != i; ++j) {\n      if (x[j] % 2 == 0) {\n    \
    \    long temp = current;\n        current = x[j];\n        x[j] = temp;\n   \
    \   }\n    }\n    res[i] = current;\n  }\n  std::sort(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmph65aow2n: /tmp/tmph65aow2n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::vector<long> udi;\n    // For every digit, we go through the vector,\
    \ find the first \n    // element that's not equal to the current digit, \n  \
    \  // and store all such elements in the vector. After \n    // we finish the\
    \ loop, all such elements should be unique\n    // and in the increasing order.\n\
    \    for(long d : x) {\n        for(long i = 0; i < x.size(); i++) {\n       \
    \     if(x[i] != d) break;\n        }\n        if(i != x.size() - 1) udi.push_back(d);\n\
    \    }\n    return udi;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy7iu3du.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoy7iu3du.cpp:23:12: error: \u2018i\u2019 was not declared\
    \ in this scope\n   23 |         if(i != x.size() - 1) udi.push_back(d);\n   \
    \   |            ^\n"
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long n = x.size();\n  long cnt = 0;\n\
    \  std::vector<long> res;\n  while(cnt < n) {\n    long digit = x[cnt];\n    while\
    \ (digit >= 10) {\n      res.push_back(digit%10);\n      digit /= 10;\n    }\n\
    \    if (digit > 0) res.push_back(digit);\n    ++cnt;\n  }\n  sort(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpje5sz52k: /tmp/tmpje5sz52k.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> y(x.begin(), x.end());\n\
    \  std::sort(y.begin(), y.end());\n  long prev = y[0];\n  long temp;\n  for (long\
    \ i = 0; i < y.size(); i++) {\n    if (y[i] % 2 == 0) {\n      temp = prev;\n\
    \      prev = y[i];\n      y[i] = temp;\n    }\n  }\n  return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3kzwr6p5: /tmp/tmp3kzwr6p5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long sum\
    \ = 0;\n    for (long n : x) {\n        sum += n;\n    }\n    long d = 0;\n  \
    \  for (long n : x) {\n        while (n % 10 == 0) {\n            d += 1;\n  \
    \          n = n / 10;\n        }\n        if ((n == 0) && (d % 2 == 0)) {\n \
    \           ans.push_back(n);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6l8tb_43: /tmp/tmp6l8tb_43.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  if (x.size()\
    \ < 2) {\n    return result;\n  }\n  long cur = *x.begin();\n  long cur2 = cur;\n\
    \  long i = 1;\n  long remainder = 0;\n  while (i < x.size()) {\n    cur2 = cur;\n\
    \    cur = cur * 10 + (*x.begin())%10;\n    remainder = (cur & 1)*10 + cur2 %\
    \ 10;\n    result.push_back(cur2%10);\n    ++i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbkk4o9bk: /tmp/tmpbkk4o9bk.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::sort(x.begin(), x.end());\n  \n\
    \  long long y = 0;\n  \n  for (long long z : x) {\n    if (z % 2 == 0) {\n  \
    \    y = z / 2;\n    }\n  }\n  \n  std::vector<long> ans;\n  for (long long i\
    \ : x) {\n    if (i % 2 == 0) {\n      ans.push_back(i);\n    }\n  }\n  \n  return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpav3dexkk: /tmp/tmpav3dexkk.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (auto & i : x) sum += i;\n    for (int i = 1, sum = 0; i <\
    \ x.size(); i++) {\n        if (sum % 2 == 0) {\n            while (sum % 2 ==\
    \ 0) {\n                sum += x[--i];\n                result.push_back(x[i]);\n\
    \            }\n        } else {\n            while (sum % 2 != 0) {\n       \
    \         sum += x[--i];\n                result.push_back(x[i]);\n          \
    \  }\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    std::vector<long>\
    \ result;\n    long digit = 0;\n    for (long i : x){\n        if ((i % 10) %\
    \ 2 == 0){\n            digit += i;\n        }\n    }\n    long counter = 0;\n\
    \    for (long i : x){\n        if ((i % 10) % 2 == 0){\n            counter +=\
    \ 1;\n        }\n    }\n    long start = digit/10;\n    long end = digit%10;\n\
    \    long temp = result;\n    while (counter > 0){\n        counter--;\n     \
    \   if (temp[counter] >= start){\n            temp[counter] += (end - start);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnp3hj514.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnp3hj514.cpp:28:17: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   28 |     long temp\
    \ = result;\n      |                 ^~~~~~\n      |                 |\n     \
    \ |                 std::vector<long int>\n/tmp/tmpnp3hj514.cpp:31:25: error:\
    \ invalid types \u2018long int[long int]\u2019 for array subscript\n   31 |  \
    \       if (temp[counter] >= start){\n      |                         ^\n/tmp/tmpnp3hj514.cpp:32:25:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 32 |             temp[counter] += (end - start);\n      |                  \
    \       ^\n"
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Do not write main() function.\n\
    \    // Do not read input, instead use the arguments to the function.\n    //\
    \ Do not print the output, instead return values as specified\n    // Still have\
    \ a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n\
    \    \n    std::sort(x.begin(), x.end());\n    \n    std::vector<long> y;\n  \
    \  \n    long cnt = 0;\n    \n    for(int i=0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            cnt++;\n        }\n    }\n    \n    long temp = 0;\n\
    \    \n    for(int i=0; i < x.size(); i++) {\n        temp += x[i] * pow(10, i);\n\
    \    }\n    \n    for(int i=0; i < cnt; i++) {\n        if(temp % 10 != 0) {\n\
    \            y.push_back(x[i]);\n        }\n    }\n    \n    return y;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxmtvd3ib: /tmp/tmpxmtvd3ib.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i:x){\n        long c = i;\n        while(c/10 != 0) c/= 10;\n        if (c%2\
    \ == 1) res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_zfe4_9i: /tmp/tmp_zfe4_9i.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long t = 0; long temp = 0; long k\
    \ = 0;\n    int size = x.size();\n    std::vector<long> ans;\n    for (int i =\
    \ 0; i < size; i++) {\n        temp = temp * 10 + x[i];\n    }\n    while (temp\
    \ > 0) {\n        k = 0;\n        while (temp > 0) {\n            t += temp %\
    \ 10;\n            temp /= 10;\n            k++;\n        }\n        if (ans[k]\
    \ == 0)\n            ans[k] = t;\n        temp = 0;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    \n  \
    \  long long x_size = x.size();\n    std::vector<long> y;\n    for(int i=0;i<x_size;i++){\n\
    \        long long x_copy = x[i];\n        \n        int j=i;\n        while(j<x_size){\n\
    \            if(x_copy%10==0 && x_size-j>0){\n                y.push_back(x_copy);\n\
    \                x_size-=1;\n            }\n            j++;\n        }\n    \
    \    \n    }\n    \n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpojbpcdtn: /tmp/tmpojbpcdtn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here.\n    // O(n)\n\
    \    // Time complexity: O(n) because we need to loop through every single digit.\n\
    \    // Space complexity: O(1)\n    std::vector<long> x;\n    for (long i = x.size();\
    \ i > 0; i--) {\n        if (x[i - 1] % 2 == 0) {\n            x.erase(x.begin()\
    \ + i);\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vatcojl.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7vatcojl.cpp:16:23: error: declaration of \u2018std::vector<long\
    \ int> x\u2019 shadows a parameter\n   16 |     std::vector<long> x;\n      |\
    \                       ^\n"
  stdout: ''
  timestamp: 1660093582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long long n = x.size();\n    std::vector<long>\
    \ ans(n);\n    long long t;\n    for (int i = 0; i < n; ++i) {\n        t = x[i];\n\
    \        ans[i] = t;\n        int j = 0;\n        while (t > 0) {\n          \
    \  if (t % 10 == 0) {\n                ans[j++] = t / 10;\n            }\n   \
    \         t /= 10;\n        }\n        ans[j++] = t;\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0fua2xug: /tmp/tmp0fua2xug.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long long ans = 0;\n  long long cnt\
    \ = 0;\n  for (auto it=x.begin(); it!=x.end(); ++it)\n  {\n    long long curr\
    \ = *it;\n    for (long long i = 0; curr/10 > 0 && cnt<ans/10;++i)\n    {\n  \
    \    ans *= 10;\n      ans += curr/10;\n      cnt += 1;\n      curr -= (curr%10);\n\
    \    }\n    ans *= 10;\n    ans += curr/10;\n    cnt += 1;\n  }\n  std::vector<long>\
    \ result(ans/10, 0);\n  return result;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprhss3p2e: /tmp/tmprhss3p2e.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::sort(x.begin(), x.end());\n  std::vector<long>\
    \ y;\n  for (long i = 0; i < x.size(); ++i)\n    if (x[i] % 2 == 0)\n      y.push_back(x[i]);\n\
    \  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1kiiohlc: /tmp/tmp1kiiohlc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ t = 0;\n    for(int i = 0; i < x.size(); ++i)\n        t = t * 10 + x[i];\n\
    \    for(int i = 0; i < 10; ++i)\n        if(t % i == 0)\n            ans.push_back(i);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    assert(x.size()\
    \ == 1);\n    std::vector<long> result;\n    long rem = x[0];\n    long remInt\
    \ = rem;\n    for(long i = 1;i < x.size();i++) {\n        rem = x[i];\n      \
    \  remInt = (rem * 10) % 10;\n        if(remInt == 0) {\n            result.push_back(rem);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcnshxya0: /tmp/tmpcnshxya0.cpp:13: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `x.size() == 1'' failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n  std::vector<long>\
    \ temp;\n  long carry=0;\n  for (long i: x) {\n    if (i%2 == 0) {\n      y.push_back(i);\n\
    \    } else {\n      long temp = i*10;\n      if (temp>9) {\n        temp%=10;\n\
    \      }\n      long val = temp + carry;\n      if (val>9) {\n        val%=10;\n\
    \      }\n      carry = val/10;\n      y.push_back(val);\n    }\n  }\n  if (carry\
    \ != 0) {\n    y.push_back(carry);\n  }\n  return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpujzg_ywj: /tmp/tmpujzg_ywj.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n  long sum = 0,\
    \ n = x.size();\n  while(n > 1) {\n    sum = sum + x[n / 2];\n    y.push_back(sum\
    \ % 10);\n    sum = 0;\n    n /= 10;\n  }\n  sum = sum + x[0];\n  y.push_back(sum\
    \ % 10);\n  std::sort(y.begin(), y.end());\n  if(y.size() == 1) return std::vector<long>();\n\
    \  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp032kjjw2: /tmp/tmp032kjjw2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    assert(x.size()\
    \ > 0);\n    auto it = std::unique(x.begin(), x.end()); \n    x.erase(it, x.end());\
    \ \n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfah8drq_: /tmp/tmpfah8drq_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if (x.size() <= 1)\n        return\
    \ x;\n    std::vector<long> ans;\n    long ans = 0;\n    for (long d : x)\n  \
    \      ans += d % 10;\n    for (long d : x)\n        ans -= d % 10;\n    for (long\
    \ d = ans; d > 0; d /= 10)\n        ans.push_back(d);\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpncgj4adc.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpncgj4adc.cpp:15:10: error: conflicting declaration \u2018\
    long int ans\u2019\n   15 |     long ans = 0;\n      |          ^~~\n/tmp/tmpncgj4adc.cpp:14:23:\
    \ note: previous declaration as \u2018std::vector<long int> ans\u2019\n   14 |\
    \     std::vector<long> ans;\n      |                       ^~~\n/tmp/tmpncgj4adc.cpp:17:13:\
    \ error: no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long int\u2019)\n   17 |         ans += d % 10;\n     \
    \ |         ~~~~^~~~~~~~~\n/tmp/tmpncgj4adc.cpp:19:13: error: no match for \u2018\
    operator-=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    long int\u2019)\n   19 |         ans -= d % 10;\n      |         ~~~~^~~~~~~~~\n\
    /tmp/tmpncgj4adc.cpp:20:19: error: cannot convert \u2018std::vector<long int>\u2019\
    \ to \u2018long int\u2019 in initialization\n   20 |     for (long d = ans; d\
    \ > 0; d /= 10)\n      |                   ^~~\n      |                   |\n\
    \      |                   std::vector<long int>\n"
  stdout: ''
  timestamp: 1660093583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y; \n    for (auto\
    \ it = x.begin(); it != x.end(); ++it) {\n        long y = *it;\n        while\
    \ (y > 0 && y % 2 == 0) {\n            y /= 2;\n        }\n        y.push_back(y);\n\
    \    }\n    std::sort(y.begin(), y.end());\n    return y;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7qkzwh7.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd7qkzwh7.cpp:18:11: error: request for member \u2018push_back\u2019\
    \ in \u2018y\u2019, which is of non-class type \u2018long int\u2019\n   18 | \
    \        y.push_back(y);\n      |           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if (x.size() == 0) {\n        return\
    \ {};\n    }\n    int n = (int) x.size();\n    int count = 0;\n    for (int i\
    \ = 0; i < n; ++i) {\n        long tmp = x[i];\n        for (int j = 0; j < i;\
    \ ++j) {\n            if (tmp % 10 == 0 && (x[j] % 10 == 0)) {\n             \
    \   count += 1;\n                break;\n            }\n        }\n    }\n   \
    \ if (count == 0) {\n        return {};\n    }\n    int count = 0;\n    int index\
    \ = 0;\n    while (index < n) {\n        long tmp = x[index];\n        for (int\
    \ i = index + 1; i < n; ++i) {\n            if (tmp % 10 == 0 && (x[i] % 10 ==\
    \ 0)) {\n                count += 1;\n                break;\n            }\n\
    \        }\n        if (count == 0) {\n            x.erase(x.begin() + index);\n\
    \        }\n        else {\n            index += 1;\n            count = 0;\n\
    \        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbjw11j4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplbjw11j4.cpp:29:9: error: redeclaration of \u2018int count\u2019\
    \n   29 |     int count = 0;\n      |         ^~~~~\n/tmp/tmplbjw11j4.cpp:16:9:\
    \ note: \u2018int count\u2019 previously declared here\n   16 |     int count\
    \ = 0;\n      |         ^~~~~\n"
  stdout: ''
  timestamp: 1660093583
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t\n\tassert(x.size() >= 1);\n\t\n\tstd::vector<long>\
    \ y(x.size());\n\t\n\tfor(long i = 0, imax = x.size(); i < imax; ++i) {\n\t\t\n\
    \t\tlong temp = x[i];\n\t\t\n\t\twhile(temp > 0) {\n\t\t\t\n\t\t\tlong mod = (temp\
    \ % 10);\n\t\t\t\n\t\t\tif(mod >= 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t\
    y[i] = temp / 10;\n\t\t\t\n\t\t\ttemp = temp % 10;\n\t\t}\n\t\t\n\t\tif(temp ==\
    \ 0) {\n\t\t\ty[i] = 0;\n\t\t}\n\t\t\n\t}\n\t\n\treturn y;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    \n    std::vector<long> result;\n\
    \    long long num = x[0]; // first element of x\n    int ndigits = x.size();\
    \ // Number of digits in x\n    // Store all digits in result\n    for(int i =\
    \ 1; i < ndigits; i++){\n        while(num % 10 != 0 && num != 0)\n          \
    \  num /= 10;\n        \n        // Store digit if hasn't any even digit in result\n\
    \        if(num != 0){\n            result.push_back(num);\n            num %=\
    \ 10;\n        }\n    }\n    \n    // Sort the result vector in increasing order.\n\
    \    for(auto it = result.begin(); it != result.end(); it++){\n        for(auto\
    \ it2 = it + 1; it2 != result.end(); it2++){\n            if(*it > *it2){\n  \
    \              long long temp = *it;\n                *it2 = *it;\n          \
    \      *it = temp;\n            }\n        }\n    }\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjg_tkc5v: /tmp/tmpjg_tkc5v.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ y;\n    for(long &x : x){\n        long temp = x;\n        x = 0;\n        while(x<temp){\n\
    \            if(temp%10 == 0){\n                y[x] = 1;\n                temp/=10;\n\
    \                x++;\n            }\n            else{\n                temp/=10;\n\
    \            }\n        }\n    }\n    for(long &x : y){\n        if(x==1){\n \
    \           x.clear();\n        }\n    }\n    return y;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr916o6s0.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr916o6s0.cpp:30:15: error: request for member \u2018clear\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   30 | \
    \            x.clear();\n      |               ^~~~~\n"
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  if(x.empty()){\n    return x;\n  }\n\
    \  \n  long long max_num = *std::max_element(x.begin(), x.end());\n  long long\
    \ minus_max = max_num - max_num % 10;\n  std::vector<long> res;\n  \n  if(minus_max\
    \ >= 0){\n    for(long long i = max_num / 10; i; i--){\n      long long temp =\
    \ i;\n      long long remain = i % 10;\n      while(remain){\n        long long\
    \ temp2 = remain;\n        remain = temp % 10;\n        if(temp2 < remain){\n\
    \          break;\n        }\n        temp = temp/10;\n      }\n      if(temp\
    \ == 0){\n        res.push_back(i);\n      }\n    }\n  }\n  \n  return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpee0_nl3y: /tmp/tmpee0_nl3y.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ res;\n    for (long &i: x)\n    {\n        while(i > 0)\n        {\n       \
    \     i /= 10;\n            if(i % 2 == 0)\n            {\n                res.push_back(i);\n\
    \                res.sort();\n                for(auto j: res)\n             \
    \   {\n                    while(j > 0)\n                    {\n             \
    \           j/=10;\n                        if(j % 2 == 0)\n                 \
    \           break;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtcro8c4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxtcro8c4.cpp:22:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   22 |                 res.sort();\n\
    \      |                     ^~~~\n"
  stdout: ''
  timestamp: 1660093583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n \
    \   std::vector<long> res(x.size());\n    int len = x.size();\n    int k = 0;\n\
    \    long sum = 0;\n    int count = 0;\n    long num = 0;\n    int start = 0;\n\
    \    for (int i = 0; i < len; i++) {\n        k = i;\n        while (k >= 0 &&\
    \ x[k] > 10) k--;\n        sum = sum * 10 + x[k];\n        if (sum % 2 != 0) {\n\
    \            res[count++] = sum;\n            sum = 0;\n        }\n    }\n   \
    \ while (k >= 0) {\n        sum = sum * 10 + x[k];\n        if (sum % 2 != 0)\
    \ {\n            res[count++] = sum;\n            sum = 0;\n        }\n      \
    \  k--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphoe0cgqp: /tmp/tmphoe0cgqp.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::sort(x.begin(), x.end());\n  std::vector<long>\
    \ res;\n  long n = x.back();\n  for(long i: x) {\n    if(n % i == 0) {\n     \
    \ res.push_back(i);\n      n *= i;\n    }\n  }\n  if(n) res.push_back(n);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpht2mpnbf: /tmp/tmpht2mpnbf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  int digit_count[26]; // = x.size() ^\
    \ 5\n  for (int i = 0; i < x.size(); ++i) {\n    int digit = x[i] % 10;\n    digit_count[digit]++;\n\
    \  }\n  // sort \n  std::vector<long> x_out;\n  for (int i = 0; i < 26; ++i) {\n\
    \    int digit_count = digit_count[i];\n    if (digit_count > 0) {\n      x_out.push_back(x[i\
    \ / 10]);\n      digit_count--;\n    }\n  }\n  return x_out;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfrwt4om5.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfrwt4om5.cpp:20:36: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   20 |     int digit_count = digit_count[i];\n      |\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  long long ans = 0, res = 0;\n  for (long\
    \ long i = 0; i < x.size(); i++) {\n    res = x[i]%10;\n    if (res != 0 && ans+1\
    \ != res) ans = res;\n  }\n  ans = res*10+ans;\n  x.clear();\n  for (long long\
    \ i = 0; i < x.size(); i++) {\n    if (x[i] < ans) continue;\n    x.push_back(x[i]);\n\
    \  }\n  return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1s6gw0r5: /tmp/tmp1s6gw0r5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    assert(x.size() != 0);\n    std::vector<long>\
    \ y(x.begin(), x.end());\n    sort(y.begin(), y.end());\n    std::vector<long>\
    \ z;\n    for (long i = 0; i < y.size(); i++) {\n        if (y[i] % 2 == 0) z.push_back(y[i]);\n\
    \    }\n    return z;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvcss0468: /tmp/tmpvcss0468.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n   assert(x.size() != 0);\n   std::vector<long>\
    \ y(x.begin(), x.end());\n   sort(y.begin(), y.end());\n   for(long i = 2; i <\
    \ y.size(); i <<= 1) {\n      long cnt = 0;\n      for(long j : y) {\n       \
    \  if(j & i) cnt++;\n      }\n      if(cnt == 0) y.erase(y.begin() + i);\n   }\n\
    \   return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6y1k3d34: /tmp/tmp6y1k3d34.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> u;\n  \n  for(long\
    \ i=0;i<x.size();i++){\n    for(long j=i+1;j<x.size();j++){\n      if(x[i]%x[j]==0\
    \ && x[j]%x[i]==0){\n        u.push_back(x[i]);\n      }\n    }\n  }\n  return\
    \ u;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpp4pf1pf9: /tmp/tmpp4pf1pf9.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ret;\n    for (auto i = 0; i < x.size(); ++i) {\n        auto flag = 1;\n  \
    \      for (int j = i; j < x.size(); ++j) {\n            if (x[j] % 2 == 0) {\n\
    \                flag = 0;\n                break;\n            }\n        }\n\
    \        if (flag == 1) {\n            ret.emplace_back(x[i]);\n        }\n  \
    \  }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbzflkafa: /tmp/tmpbzflkafa.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    long long\
    \ num = 0;\n    for (auto i : x)\n        num = num * 10 + i;\n    while (num)\
    \ {\n        if (num % 2 == 0)\n            res.push_back(num);\n        num /=\
    \ 10;\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp98iawhd_: /tmp/tmp98iawhd_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long ans = 0;\n    std::vector<long>\
    \ ans_list;\n    // Store each digit's position in a map\n    std::map<long, int>\
    \ digits;\n    for(long v : x) {\n        digits[v % 10] = digits.size();\n  \
    \  }\n    // Search and keep track of digits which has even position in \n   \
    \ // vector(digits) with unique number.\n    for(long i = 0; i < x.size(); i++)\
    \ {\n        if(digits.size() != 0) {\n            long v = x[i];\n          \
    \  long digit = v % 10;\n            long digits_size = digits.size();\n     \
    \       int index = digits[digit];\n            if(index != digits_size) {\n \
    \               ans = 1;\n            }\n            else {\n                ans\
    \ = 0;\n            }\n        }\n        if(ans) {\n            ans_list.push_back(x[i]);\n\
    \        }\n    }\n    return ans_list;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpygpka36a: /tmp/tmpygpka36a.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    \n   \
    \ long long u;\n    std::unordered_map<long long, long long> count;\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        count[x[i]]++;\n    }\n\n    std::vector<long>\
    \ ans;\n    for (long long x : count) {\n        if (x.second == 0) {\n      \
    \      ans.push_back(x.first);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1hjzyjf.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj1hjzyjf.cpp:21:24: error: cannot convert \u2018std::pair<const\
    \ long long int, long long int>\u2019 to \u2018long long int\u2019 in initialization\n\
    \   21 |     for (long long x : count) {\n      |                        ^~~~~\n\
    /tmp/tmpj1hjzyjf.cpp:22:15: error: request for member \u2018second\u2019 in \u2018\
    x\u2019, which is of non-class type \u2018long long int\u2019\n   22 |       \
    \  if (x.second == 0) {\n      |               ^~~~~~\n/tmp/tmpj1hjzyjf.cpp:23:29:\
    \ error: request for member \u2018first\u2019 in \u2018x\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   23 |             ans.push_back(x.first);\n\
    \      |                             ^~~~~\n"
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long\
    \ i : x) {\n        long sum = 0;\n        while (i != 0) {\n            sum +=\
    \ i % 10;\n            i /= 10;\n        }\n        if (sum % 2 != 0)\n      \
    \      res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp21kay_pt: /tmp/tmp21kay_pt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    // count\
    \ of number of occurences\n    long count = 0;\n    // find the number of occurences\n\
    \    for (long num: x) {\n        // find the last occurence of the number\n \
    \       while (count < x.size() && x[count] == num) {\n            ++count;\n\
    \        }\n        // if there are not any more occurences of the number in the\
    \ vector\n        if (count == x.size()) {\n            ans.push_back(num);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpspjz4w4j: /tmp/tmpspjz4w4j.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::map<long, bool> seen;\n    std::vector<long>\
    \ result;\n    for(long i = 0; i<x.size(); i++) {\n        if(seen[x[i]] == false)\
    \ {\n            seen[x[i]] = true;\n            result.push_back(x[i]);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphigcwy6b: /tmp/tmphigcwy6b.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    int i\
    \ = 0, j, k = 0, n = x.size();\n    std::vector<long> y;\n    std::vector<long>\
    \ z;\n    z.push_back(x[0]);\n    z.push_back(x[1]);\n    for(j = i + 1; j < n;\
    \ j++){\n        if(x[j] % 2 == 0){\n            z.push_back(x[j]);\n        }\n\
    \    }\n    for(j = 0, i = 1;i < n - 1; i++){\n        if(x[j] % 2 != 0){\n  \
    \          y.push_back(z[k]);\n            k++;\n        }\n        if(x[j] ==\
    \ z[k]){\n            y.push_back(z[k]);\n        }\n    }\n    for(j = 0, i =\
    \ 1;i < n - 1; i++){\n        if(x[j] == z[k]){\n            y.push_back(z[k]);\n\
    \        }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsuha89le: /tmp/tmpsuha89le.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long\
    \ n : x) {\n    long m = n / 10;\n    long r1 = n % 10;\n    long r2 = m % 10;\n\
    \    if (!result.empty() && (r1 == 0 || r2 == 0)) {\n      continue;\n    }\n\
    \    if (r1 == 0 || r2 == 0) {\n      result.push_back(n);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpituoj2li: /tmp/tmpituoj2li.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> s;\n    long carry\
    \ = 1;\n    \n    for(long i = x.size(); i > 0; i--) {\n        carry += (x[i\
    \ - 1] / 10) * 10;\n        x[i - 1] = carry % 10;\n        carry = carry / 10;\n\
    \        \n        if(carry % 2 == 0) {\n            s.push_back(x[i - 1]);\n\
    \        }\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3wsznjkc: /tmp/tmp3wsznjkc.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093584
