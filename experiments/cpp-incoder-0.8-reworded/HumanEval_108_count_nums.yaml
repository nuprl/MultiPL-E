name: HumanEval_108_count_nums
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
  \ which takes a vector of integers and returns\n// the number of elements which\
  \ has a sum of digits > 0.\n// If a number is negative, then its first signed digit\
  \ will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n\
  // (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n\
  // (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n//\
  \ (3)\nlong count_nums(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
  \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
  \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
  \ (1));\n}\n"
completions: ["    if (arr.empty()) return 0;\n    long sum = 0;\n    for (long elem\
    \ : arr) {\n        assert(elem >= 0);\n        if (elem < 0) {\n            elem\
    \ += 10;\n        }\n        assert(elem >= 0);\n        sum += elem;\n    }\n\
    \    return sum;", "    if(arr.size() == 0) {\n        return 0;\n    }\n    long\
    \ sum = 0;\n    long n = arr[0];\n    for(size_t i = 1; i < arr.size(); i++) {\n\
    \        if(n <= 0) {\n            sum += abs(n);\n            return sum;\n \
    \       }\n        sum += arr[i];\n        n = n - arr[i];\n    }\n    return\
    \ sum;", "  long ret = 0;\n  for (auto i = arr.begin(); i != arr.end(); ++i) {\n\
    \    if (*i >= 0) {\n      if (*i < 0) ret += (*i) * 10;\n      else         \
    \ ret += (*i);\n    }\n  }\n  return ret;", "  std::ios_base::sync_with_stdio(false);\n\
    \  std::cin.tie(NULL);\n  std::cout.tie(NULL);\n  // Write your logic here\n \
    \ int n = arr.size();\n  long long ans = 0;\n  for (int i = 0; i < n; i++) {\n\
    \    ans += arr[i];\n  }\n  return ans;", "    long ans = 0;\n    if (arr.size()\
    \ == 0) {\n        return 0;\n    }\n    long sum = 0;\n    for (long n : arr)\
    \ {\n        sum += n;\n    }\n    if (sum < 0) {\n        ans = arr.size() -\
    \ 1;\n    }\n    else {\n        ans = arr.size();\n    }\n    return ans;", " \
    \   long sum = 0;\n    // Iterate over the vector\n    for (long n : arr) {\n\
    \        // Check if n is a positive number\n        if (n >= 0) {\n         \
    \   // Iterate over all the digits\n            for (long d : numDigits(n)) {\n\
    \                // Add a digit to sum if it is positive\n                if (d\
    \ >= 0)\n                    sum += d;\n            }\n        }\n        else\
    \ {\n            // n is negative and is the first sign digit\n            sum\
    \ += (-n) - 1;\n        }\n    }\n    return sum;", "    long cnt = 0;\n    long\
    \ curr = 0;\n    for (int i = 0; i < arr.size(); ++i) {\n        curr += arr[i];\n\
    \        if (curr >= 0 && curr < 10) ++cnt;\n    }\n    return cnt;", "    //\
    \ arr is empty if arr is an empty array\n    if (arr.empty())\n        return\
    \ 0;\n    \n    long first_digit_is_negative = 0;\n    // First element of arr\
    \ is always negative if arr is not empty\n    if (!arr[0].has_value())\n     \
    \   first_digit_is_negative = !arr[0];\n    \n    // Start with the first element\
    \ of arr and decrease by 1 until the\n    // element reaches 0.\n    long cur_num\
    \ = 1;\n    while (arr[0] > 0) {\n        cur_num *= 10;\n        cur_num += arr[0]\
    \ - 1;\n        arr[0] -= 1;\n    }\n    \n    // If the first element is negative,\
    \ then all the rest of the elements\n    // have a negative sign and are greater\
    \ than zero.\n    // So, return all elements which has a negative sign as negative\
    \ sum.\n    if (first_digit_is_negative)\n        return cur_num;\n    \n    //\
    \ Otherwise, return all the elements which has positive digits.\n    return cur_num\
    \ / 10;", "  if (arr.size() == 0) {\n    return 0;\n  }\n  long sum = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) {\n\
    \      return i + 1;\n    }\n  }\n  return -1;", "    long count = 0;\n    for\
    \ (int i = arr.size() - 1; i >= 0; i--) {\n        count += arr[i] < 0 ? arr[i]\
    \ * (arr[i] < 0 ? 2 : 3) : 0;\n        if (arr[i] != 0) {\n            break;\n\
    \        }\n    }\n    return count;", "    if (arr.empty())\n        return (long)\
    \ 0;\n    long res = 0;\n    long sum = 0;\n    long digit = 0;\n    long a =\
    \ arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if (sum > 0) {\n            digit = sum % 10;\n            if (digit\
    \ < 0) {\n                digit *= -1;\n                sum -= digit;\n      \
    \      }\n            sum += digit;\n        }\n        if (sum > 0) {\n     \
    \       while (sum > 0) {\n                sum += arr[i];\n                if\
    \ (sum > 0) {\n                    digit = sum % 10;\n                    if (digit\
    \ < 0) {\n                        digit *= -1;\n                        sum -=\
    \ digit;\n                    }\n                    sum += digit;\n         \
    \       }\n                res = 1 + res;\n                sum -= arr[i];\n  \
    \          }\n        } else {\n            res = 1 + res;\n        }\n    }\n\
    \    return res;", "    long ans = 0;\n    for (long i : arr) {\n        if (i\
    \ >= 0)\n            ans += i;\n        else\n            ans = -ans + i;\n  \
    \  }\n    return ans;", "    int len = arr.size();\n    int cnt = 0;\n    long\
    \ curr = 0;\n    for (int i = 0; i < len; i++) {\n        curr += arr[i];\n  \
    \      if (curr > 0) {\n            cnt++;\n        }\n    }\n    return cnt;",
  "  std::vector<std::pair<long, long> > v(arr.size());\n  for (size_t i = 0; i <\
    \ v.size(); ++i) {\n    if (arr[i] < 0) {\n      v[i].first = v[i].first * -1;\n\
    \      v[i].second = v[i].second * -1;\n    }\n    v[i].first = v[i].first;\n\
    \    v[i].second = v[i].second;\n  }\n  // Write code here", "  if (arr.size()\
    \ == 0) {\n    return 0;\n  }\n  // If arr[i] is negative, return its first non-negative\
    \ digit:\n  for (size_t i = 1; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      if (arr[i] >= -LONG_MAX / 10 + (arr[0] / 10)) {\n        return 0;\n  \
    \    }\n      break;\n    }\n  }\n  // If it reaches here, then the number has\
    \ a sum of digits. Now we need to check\n  // if the number has more than 1 digit,\
    \ which is indicated by having an\n  // odd number of digits:\n  long ans = 1;\n\
    \  if (arr.size() > 1) {\n    if (arr[0] % 10 == 1 && arr[1] % 10 == 1) {\n  \
    \    return 0;\n    }\n    ans = count_nums(arr / 10);\n  }\n  // If ans is 1,\
    \ then this number has only 1 digit:\n  if (ans == 1) {\n    return 1;\n  }\n\
    \  return ans;", "  long ans = 0;\n  for (auto &i : arr) ans += count_digits(i);\n\
    \  return ans;", "  // Use count_if to return the number of numbers in the vector\
    \ whose\n  // first digit is a positive number.\n  return std::count_if(arr.begin(),\
    \ arr.end(),\n                       [&](long num) {\n                       \
    \  return num < 0;\n                       });", "  long n = arr.size();\n  long\
    \ sum = 0;\n  for (long i = 0; i < n; i++)\n    if (arr[i] > 0)\n      sum +=\
    \ arr[i];\n  assert(sum > 0);\n  return sum;", "    // code here\n    if(arr.size()==0)\n\
    \        return 0;\n    if(arr.size()==1)\n        return arr[0];\n    long num=0;\n\
    \    for(auto i:arr)\n    {\n        num+=i;\n    }\n    while(num>0)\n    {\n\
    \        if(num%10>0)\n            num/=10;\n        else\n        {\n       \
    \     int cnt=0;\n            while(num!=0)\n            {\n                cnt++;\n\
    \                num/=10;\n            }\n            if(cnt>0)\n            \
    \    return cnt;\n        }\n    }\n    return 0;", "  std::vector<long> narr;\n\
    \  long n = 0;\n  for (long i = 0; i < (long)arr.size(); i++) {\n    n += arr[i];\n\
    \    if (n > 0) {\n      narr.push_back(n);\n      n = 0;\n    }\n  }\n  assert(n\
    \ > 0);\n  return narr.size();", "    long ans = 0;\n    int sign = arr[0] >>\
    \ 63;\n    long i = 1;\n    while (i + 1 < arr.size() && arr[i] + arr[i + 1] <=\
    \ 0) {\n        i += 1;\n    }\n    if (i != arr.size()) {\n        i += 1;\n\
    \    }\n    while (i < arr.size() && arr[i] > 0) {\n        ans += arr[i];\n \
    \       if (arr[i] > 0) {\n            i += 1;\n        }\n    }\n    if (sign\
    \ > 0) {\n        ans *= -1;\n    }\n    return ans;", "  // Initialize all sums\
    \ to 0\n  long sum = 0;\n  // Initialize a flag variable to detect if negative\
    \ numbers\n  // are present in arr\n  bool is_neg = false;\n  for (long num :\
    \ arr) {\n    // Add num to sum if its digits sum up\n    sum += num / 10;\n \
    \   // Check if num is negative\n    if (num < 0) {\n      is_neg = true;\n  \
    \  }\n  }\n  // Return answer if there are no numbers which has sum over 0\n \
    \ if (sum == 0) {\n    return 0;\n  }\n  // Return answer if there are no numbers\
    \ which has sum over 0\n  if (sum < 0) {\n    return 0;\n  }\n  // Return answer\
    \ if there are no numbers which has sum over 0\n  if (is_neg) {\n    return 0;\n\
    \  }\n  // Return answer if there are no numbers which has sum over 0\n  return\
    \ 1;", "  long ans = 0, sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   sum += arr[i];\n    if (sum > 0) {\n      ans++;\n    }\n  }\n  return ans;",
  "  if (arr.empty()) return 0;\n  long sum = 0;\n  for (auto i : arr)\n    sum +=\
    \ i;\n  return sum;", "  if (arr.size() == 0)\n    return 0L;\n  long sum = 0;\n\
    \  for (long i : arr) {\n    long mod = i;\n    for (long j = 0; j < 9; j++) {\n\
    \      if (mod > 0) mod /= 10;\n      else mod = (mod * 10 + i) % 10;\n    }\n\
    \    if (mod > 0)\n      sum += (long)mod;\n  }\n  return sum;", "  // Your code\
    \ here\n  int sum = 0;\n  for (auto itr = arr.begin(); itr != arr.end(); ++itr)\
    \ {\n    sum += *itr;\n  }\n  if (sum > 0) {\n    return 1;\n  }\n  if (sum <\
    \ 0) {\n    return 0;\n  }\n  assert(0);\n  return 0;", "    if (arr.size() ==\
    \ 0)\n        return 0;\n    long sum = 0;\n    long count = 0;\n    for (long\
    \ val : arr) {\n        sum += val;\n        if (sum > 9)\n            count++;\n\
    \    }\n    return count;", "  long result = 0;\n  for (long number : arr) {\n\
    \    if (number < 0) {\n      number /= 10;\n      result -= number >= 0 ? 1 :\
    \ 0;\n    } else {\n      result += number;\n    }\n  }\n  return result;", " \
    \   if (arr.empty()) return 0;\n    long ans = 0;\n    for (auto i = arr.begin();\
    \ i != arr.end(); i++) {\n        long num = *i;\n        if (num < 0) {\n   \
    \         num *= -1;\n            ans += (num < 0);\n        } else {\n      \
    \      ans += num;\n            ans %= 10;\n            ans /= 10;\n        }\n\
    \    }\n    return ans;", "    long ans = 0;\n    for (long x = 0; x < arr.size();\
    \ x++) {\n        long digit = arr[x] / 10;\n        ans += digit > 0 ? 1 : 0;\n\
    \        ans += digit * count_nums(arr.subvector(0, x + 1));\n    }\n    return\
    \ ans;", "    // Your code goes here\n    int sum = 0;\n    for (auto x : arr)\
    \ {\n        sum += x;\n    }\n    if (sum > 0) {\n        return sum;\n    }\
    \ else {\n        long res = 0;\n        for (auto x : arr) {\n            res\
    \ += x - (sum - 1);\n        }\n        return res;\n    }", "    long ans = 0;\n\
    \    for (auto itr = arr.begin(); itr != arr.end(); ++itr) {\n        // if first\
    \ digit is negative\n        if (*itr >= 0) {\n            long d = *itr;\n  \
    \          if (d > 0) {\n                d = d - '0';\n                long n\
    \ = 0;\n                for (int i = 0; i < d && itr != arr.end(); ++i) {\n  \
    \                  n = (n * 10) + (itr[itr.size() - 1 - i] - '0');\n         \
    \       }\n                if (n > 0)\n                    ans++;\n          \
    \  }\n        }\n    }\n    return ans;", "    // Fill arr with the number of\
    \ elements which has a sum of digits > 0.\n    // For a number with a sum of digits\
    \ > 0, arr[i] is incremented by one.\n    // The return value is number of elements\
    \ in arr.\n    //\n    // Write your code here.\n    // arr has all the numbers\
    \ to sum\n    // For each element in the vector\n    // If the sum of the elements\
    \ is greater than 0, increment arr by 1\n    long sum = 0;\n    long result =\
    \ 0;\n    for (long &elem : arr) {\n        sum += elem;\n    }\n    for (long\
    \ &elem : arr) {\n        if (sum > 0) {\n            result++;\n        }\n \
    \       sum -= elem;\n    }\n    return result;", "  long ans = 0;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] % 10 != 0) {\n \
    \     ans++;\n    }\n  }\n  return ans;", "  long sum = 0;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum < 0)\n      sum *= -1;\n\
    \  }\n  return sum;", "  if (arr.empty()) {\n    return 0;\n  }\n  long sum =\
    \ 0, num = 0;\n  for (const auto e : arr) {\n    sum += e;\n    num += (e > 0);\n\
    \  }\n  // count the number of digits\n  for (const auto e : arr) {\n    num -=\
    \ (e < 0);\n  }\n  return num;", "  if (arr.empty())\n    return 0;\n  long ans\
    \ = 0;\n  for (int i = 0; i < arr.size(); ++i) {\n    long digit = arr[i];\n \
    \   if (digit < 0) {\n      digit *= -1;\n      ans -= 1;\n    }\n    ans += digit\
    \ / 10;\n    digit %= 10;\n    ans += digit > 0;\n  }\n  return ans;", "    long\
    \ ans = 0, sign = -1, sum = 0, i = arr.size() - 1;\n    // Loop till the end of\
    \ array.\n    while (i >= 0) {\n        if (sign < 0) {\n            sum = 0;\n\
    \            sign = (arr[i] * -1L) % 10;\n        }\n        else {\n        \
    \    sum += (arr[i] * sign) % 10;\n            sign = 1;\n        }\n        ans\
    \ += sum > 0;\n        i--;\n    }\n    return ans;", "    int sum = 0;\n    for\
    \ (auto num : arr)\n        sum += abs(num);\n\n    return sum;", "  long nums\
    \ = 0;\n  for (auto n : arr)\n    nums += n >= 0 ? n : -n;\n  return nums;", " \
    \ if (arr.empty())\n    return 0;\n  long nums_sum = 0;\n  for (long i = 0; i\
    \ < (long)arr.size(); i++) {\n    long long nums_sum_i = (arr[i] + (arr[i] ==\
    \ 0 ? 0 : (long)pow(10, (long double)i)));\n    nums_sum = max(nums_sum, nums_sum_i);\n\
    \  }\n  return nums_sum;", "    int n = arr.size();\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; ++i) {\n        int digit = arr[i];\n        if (digit >\
    \ 0) sum += digit;\n        else sum += 2 * -digit;\n    }\n    return sum;",
  "  // Your code here.\n  assert(arr.size() != 0);\n  std::stack<int> s;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    if (num < 0) {\n\
    \      num += std::numeric_limits<long>::max();\n      num *= -1;\n    }\n   \
    \ while (num > 0) {\n      s.push(num % 10);\n      num/=10;\n    }\n    while\
    \ ( !s.empty() && s.top() <= 0) {\n      s.pop();\n    }\n  }\n  return s.size();",
  "  // Write your code here.\n  long sum = 0;\n  long count = 0;\n  for (long x :\
    \ arr) {\n    sum += x;\n    for (long y : arr) {\n      if (sum > 0) {\n    \
    \    sum += y;\n        for (long z : arr) {\n          if (sum > 0) {\n     \
    \       sum += z;\n            if (sum > 0) {\n              count++;\n      \
    \      }\n            break;\n          }\n        }\n        break;\n      }\n\
    \    }\n  }\n  return count;", "    // your code goes here\n    long sum = 0;\n\
    \    for(long i = 0; i < arr.size(); ++i){\n        if(arr[i] >= 0){\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    long long len = arr.size();\n    for(long i = 0; i < len; i++)\n        sum\
    \ += arr[i];\n\n    // A number is negative if the first digit is a negative number:\n\
    \    if(arr[len - 1] < 0)\n        sum += (long long)-arr[len - 1];\n\n    return\
    \ sum;", "    // Your code goes here\n    long sum = 0;\n    for (long i : arr)\
    \ {\n        sum += i;\n    }\n    return sum;", "    long sum = 0, count = 0;\n\
    \    for (long num: arr) {\n        sum += num;\n        count += 1 << ((sum -\
    \ num) >> 31);\n    }\n    return count;", "    long s = 0;\n    for (long n:\
    \ arr) {\n        s += n;\n        if (s > 9) {\n            s = s - 9;\n    \
    \    }\n    }\n    return s;", "    // Only integer and long type allowed.\n \
    \   assert(arr.size() == 1 || arr.size() == 2 || arr.size() == 3);\n    long ans\
    \ = 0, n = arr.size();\n    long sum = 0;\n    long digit = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        // If the number is negative, then the first signed\
    \ digit will be\n        // negative:\n        if (arr[i] < 0) digit = -arr[i];\n\
    \        // If the number is positive, then the first signed digit will be\n \
    \       // positive:\n        else digit = arr[i];\n        sum += digit;\n  \
    \      if (sum > 0) {\n            ans++;\n        }\n    }\n    return ans;",
  "    int n = 0;\n    for (long i : arr) {\n        if (i > 0) n += i;\n    }\n \
    \   return n;", "    // Code here\n    long result = 0;\n    for (auto it = arr.cbegin();\
    \ it != arr.cend(); ++it)\n    {\n        if (*it < 0) {\n            if (*it\
    \ > 0)\n            {\n                if (*it > 9)\n                {\n     \
    \               result = result + 10;\n                }\n                result\
    \ = result + (*it);\n            }\n            else\n            {\n        \
    \        if (*it > -9)\n                {\n                    result = result\
    \ + (*it);\n                }\n                else\n                {\n     \
    \               result = result + (*it);\n                }\n            }\n \
    \       }\n        else\n        {\n            if (*it > 0)\n            {\n\
    \                if (*it > 9)\n                {\n                    result =\
    \ result + 10;\n                }\n                result = result + (*it);\n\
    \            }\n            else\n            {\n                if (*it > -9)\n\
    \                {\n                    result = result + (*it);\n           \
    \     }\n                else\n                {\n                    result =\
    \ result + (*it);\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    if (arr.empty())\n        return 0;\n    long ans = 0, digit\
    \ = 0;\n    int s = arr.size();\n    if (s == 0)\n        return 0;\n    long\
    \ number = arr[0];\n    for (long i = 1;;) {\n        ++i;\n        if (number\
    \ / 10 == 0 || number % 10 == 0) {\n            ++ans;\n        }\n        number\
    \ /= 10;\n        number %= 10;\n        if (number < 0)\n            number =\
    \ -number;\n        digit = number % 10;\n        ans *= 10;\n        ans += digit;\n\
    \    }\n    return ans;", "    // your code here\n    long ans=0;\n    for(auto\
    \ it:arr){\n        assert(it!=0);\n        if(it<0)\n            it=-it;\n  \
    \      ans+=it;\n    }\n    return ans;", "  long res = 0;\n  for(long n: arr)\
    \ {\n    res += __builtin_clz(n);\n  }\n  return res;", "    // Your code here\n\
    \    long n = arr.size();\n    if (n > 0) {\n        for (long i = 0; i < n; i++)\
    \ {\n            for (long j = 0; j < arr[i].size(); j++) {\n                assert(arr[i][j]\
    \ >= 0);\n                long val = arr[i][j];\n                if (val < 10)\n\
    \                    n--;\n            }\n        }\n    }\n    return n;", " \
    \   long result = 0;\n    for (auto & v : arr) {\n        if (v < 0) v += 10;\n\
    \        if (v <= 9)\n            result += v - '0';\n        else\n         \
    \   result += 10 - v;\n    }\n    return result;", "    long cnt = 0;\n    long\
    \ sum = 0;\n    for (long i = 0; i < (long int)arr.size(); i++) {\n        sum\
    \ += arr[i];\n        if (sum > 0)\n            cnt++;\n        if (sum < 0)\n\
    \            sum += 1 + (int)arr[i];\n    }\n    return cnt;", "    // Initialize\
    \ ans := 0.\n    long ans = 0;\n    // Iterate over the array's elements.\n  \
    \  for (auto it = arr.cbegin(); it != arr.cend(); ++it) {\n        // Iterate\
    \ over the array and count the digits of each number.\n        // A number with\
    \ sum > 0 will have a digit sum.\n        // If all the digits are zero, then\
    \ the number has no sum.\n        long sum_digits = 0;\n        // Iterate over\
    \ the number's digits.\n        for (auto &i : *it) {\n            sum_digits\
    \ += i;\n        }\n        if (sum_digits > 0) {\n            ans++;\n      \
    \  }\n    }\n    return ans;", "  if (arr.empty())\n    return 0;\n  if (arr.size()\
    \ <= 1)\n    return arr.size();\n  long ans = 0;\n  auto sum = std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n  if (sum < 0) {\n    long c = 1;\n    long d = (sum / 10);\n\
    \    while (d) {\n      sum += (c *= 10) - d;\n      d /= 10;\n    }\n    ans\
    \ = c - 1;\n  } else {\n    while (sum && sum % 10) {\n      ++ans;\n      sum\
    \ /= 10;\n    }\n  }\n  return ans;", "    long sum = 0;\n    for (auto elem :\
    \ arr) {\n        sum += elem;\n    }\n    if (sum >= 0) {\n        return sum;\n\
    \    }\n    long res = 0, lastDigit = arr[0] - 1;\n    while (lastDigit >= 0)\
    \ {\n        res += lastDigit * 10;\n        lastDigit /= 10;\n    }\n    return\
    \ res;", "    long counter = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        int sum = 0;\n        int num = 0;\n        while (arr[i] > 0) {\n  \
    \          sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n          \
    \  num++;\n        }\n        if (sum > 0) {\n            counter += num;\n  \
    \      }\n    }\n    return counter;", "    long num = 0;\n    for (int i = 0;\
    \ i < arr.size(); ++i) {\n        long v = arr[i];\n        if (v < 0) {\n   \
    \         v = -v;\n            arr[i] = -arr[i];\n        }\n        if (v >=\
    \ 10 && v <= 19) {\n            num++;\n        }\n    }\n    return num;", " \
    \ // Write your code here\n  long sum = 0;\n  for (long i : arr){\n    sum +=\
    \ i;\n  }\n  return sum;", "  int count = 0;\n  int carry = 0;\n  for (long i\
    \ = arr.size() - 1; i >= 0; i--) {\n    int num = arr[i] + carry;\n    if (num\
    \ >= 10) {\n      carry = num / 10;\n      count++;\n    } else {\n      carry\
    \ = 0;\n      count--;\n    }\n  }\n  return count;", "  int ans = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 0) {\n      ans += arr[i] /\
    \ 10;\n      ans += arr[i] % 10;\n    }\n  }\n  return ans;", "  long ans = 0;\n\
    \  // Loop through the vector and sum up the digits.\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    long curr_val = arr[i];\n    if (curr_val < 0) curr_val *= -1;\n\
    \    for (int j = i; j < arr.size(); j++) {\n      long next_val = arr[j];\n \
    \     if (next_val < 0) next_val *= -1;\n      ans += curr_val / next_val % 10;\n\
    \      curr_val %= next_val;\n    }\n  }\n  return ans;", "    int n = arr.size();\n\
    \    long cnt = 0;\n    for (long &i : arr) {\n        assert(i >= 0);\n     \
    \   long digit = i;\n        if (digit < 0) digit *= 10;\n        for (; digit\
    \ > 0; digit /= 10)\n            cnt++;\n    }\n    return cnt;", "    long ans\
    \ = 0;\n    if (arr.size() == 0) return ans;\n    for (auto i : arr) ans += count_digits(i);\n\
    \    return ans;", "  // Write your code here\n  assert(arr.size() > 0);\n  long\
    \ n = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long curr = arr[i];\n\
    \    long sum = 0;\n    while (curr) {\n      sum += curr % 10;\n      curr =\
    \ (curr >> digits_of<long int>(1));\n    }\n    if (sum > 0) {\n      n++;\n \
    \   }\n  }\n  return n;", "    assert(arr.size() > 0);\n    long cnt = 0;\n  \
    \  for (long i = arr.size(); i > 0; i--)\n        cnt += arr[i] >= 0 ? 1 : 0;\n\
    \    return cnt;", "    long res = 0;\n    for (auto i : arr) {\n        if (i\
    \ < 0) i = i * -1;\n        if (i & 1) res += i;\n    }\n    return res;", " \
    \ // Write your code here\n  long ans = 0, sum = 0;\n  for(const auto& i : arr){\n\
    \    if(i >= 0){\n      sum += i;\n    } else {\n      sum += i * 10;\n      ans\
    \ += 1;\n    }\n  }\n  return ans;", "    long count = 0;\n    if (arr.size()\
    \ == 0)\n        return 0;\n    int sign = 0;\n    bool positive = true;\n   \
    \ long cur = arr[0];\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ < 0) {\n            sign = -1;\n            positive = !positive;\n        }\n\
    \        cur += arr[i];\n        if (!(cur %= 10))\n            positive = false;\n\
    \    }\n    if (sign < 0) {\n        if (positive)\n            sign = 1;\n  \
    \      else\n            sign = -1;\n    }\n    if (sign == 0)\n        return\
    \ 0;\n    if (sign == -1)\n        return arr.size();\n    for (int i = arr.size()\
    \ - 1; i >= 0; --i) {\n        if (arr[i] != 0) {\n            count += (i + 1)\
    \ / 10;\n            count -= 1;\n        }\n    }\n    return count;", "    long\
    \ n = 0;\n    long last_sum = 0;\n    for (long i = 0; i < arr.size(); i++)\n\
    \        if (arr[i] >= 0)\n            last_sum -= arr[i];\n        else\n   \
    \         last_sum += arr[i];\n        if (last_sum > 0)\n            n += last_sum;\n\
    \    return n;", "  long count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] >= 0) {\n      assert(arr[i] > 0);\n      long temp = abs(arr[i]);\n\
    \      while (temp != 0) {\n        if (temp % 10 > 0) {\n          count++;\n\
    \        }\n        temp /= 10;\n      }\n    } else {\n      if (arr[i] < 0)\
    \ {\n        arr[i] = abs(arr[i]);\n      }\n      if (arr[i] < 0) {\n       \
    \ arr[i] = -arr[i];\n      }\n      long temp = arr[i];\n      assert(temp > 0);\n\
    \      while (temp != 0) {\n        if (temp % 10 > 0) {\n          count++;\n\
    \        }\n        temp /= 10;\n      }\n    }\n  }\n  return count;", "  std::sort(arr.begin(),\
    \ arr.end()); // sort descending by value\n  // for each index, check if arr[i]\
    \ - arr[j] has positive digits (greater than 0)\n  long n = arr.size();\n  long\
    \ sum = 0;\n  for (size_t i = 0; i < n; ++i) {\n    for (size_t j = i + 1; j <\
    \ n; ++j) {\n      sum += arr[i] - arr[j];\n    }\n  }\n  return sum > 0 ? n :\
    \ 0;", "    int sum = 0;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n  \
    \      sum += arr[i];\n        if (sum >= 10)\n            sum -= 10;\n    }\n\
    \    return sum;", "    std::sort(arr.begin(), arr.end());\n    long result =\
    \ 0;\n    long sum = 0;\n    for (long x : arr) {\n        sum += x;\n       \
    \ result += sum > 9;\n    }\n    return result;", "    int ans = 0;\n    for (long\
    \ i: arr) {\n        if (i >= 0) {\n            ans += 1;\n            if (ans\
    \ > 0) break;\n        }\n        if (i < 0) i = i * -1;\n        int s = 1;\n\
    \        while (i + s >= 0 && s <= 9) {\n            ans += (s - 1);\n       \
    \     i = i / s;\n            s += 1;\n        }\n    }\n    return ans;", " \
    \   long ret = 0;\n    for(long i = 0; i <arr.size(); i++) {\n        if(arr[i]\
    \ > 0 && arr[i] % 10 != 0) {\n            ret++;\n        }\n    }\n    return\
    \ ret;", "    long ans = 0;\n    for(auto x : arr) {\n        ans += std::count_if(arr.begin(),\
    \ arr.end(), [] (long x)->bool {\n            return x > 0;\n        });\n   \
    \ }\n    return ans;", "    auto l = arr.size();\n    if (l == 0)\n        return\
    \ (0);\n    if (l == 1)\n        return (1);\n    std::sort(arr.begin(), arr.end());\n\
    \    long num = arr[0];\n    for (int i = 1; i < l; i++)\n        num += arr[i];\n\
    \    if (num < 0)\n        num = -(num + 1);\n    long ans = 1;\n    for (auto\
    \ i : arr)\n        ans *= i;\n    if (ans > 100000000)\n        return (0);\n\
    \    return (ans);", "    // Return 0 for an empty vector.\n    if (arr.size()\
    \ == 0)\n        return 0;\n    // Initialize a variable to store the result.\n\
    \    long result = 0;\n    // For each element of arr and its negative sign.\n\
    \    for (long i : arr) {\n        // Convert to unsigned integer.\n        unsigned\
    \ long u = (unsigned long)i;\n        // Store the value of the sum of the digits\
    \ in i.\n        // For negative numbers less than 10, the sum will be 0.\n  \
    \      result += i % 10;\n        // For negative numbers greater than 10, the\
    \ sum will be -10.\n        result += u / 10;\n    }\n    // Return the number\
    \ of elements with sum greater than 0.\n    return result > 0 ? 1 : 0;", "  //\
    \ Write your code here\n  int n = arr.size();\n  long num = 0;\n  for (int i =\
    \ 0; i < n; i++) {\n    num +=  arr[i];\n  }\n  num *= 10;\n  num %= 10;\n  return\
    \ num;", "  // Initialize a variable count and initialize it to 0.\n  long count\
    \ = 0;\n  // Iterate over the elements of arr:\n  for (long n : arr) {\n    //\
    \ If any of n has a negative digit, then increment count:\n    if (n < 0) ++count;\n\
    \  }\n  // Return the value of count:\n  return count;", "  // write your code\
    \ here\n  assert(arr.size() != 0);\n  long ans = 0;\n  long n = arr[0];\n  if\
    \ (n >= 0) {\n    while (n > 0) {\n      ans++;\n      n /= 10;\n    }\n  } else\
    \ {\n    long p = n;\n    while (p > 0) {\n      ans++;\n      p /= 10;\n    }\n\
    \  }\n  return ans;", "  long ans = 0, carry = 0, i;\n  for(i = 0; i < arr.size();\
    \ i++){\n    if(arr[i] < 0){\n      arr[i] += 10;\n      arr[i] -= carry;\n  \
    \    carry = 1;\n    }else{\n      carry = 0;\n    }\n    ans += arr[i]*(i+1);\n\
    \  }\n  return ans;", "  long count = 0;\n  long long temp = 0, temp2 = 0;\n \
    \ for (auto i : arr) {\n    if (i < 0) {\n      temp = -i;\n    } else {\n   \
    \   temp = i;\n    }\n    temp2 = temp % 10;\n    if (temp2 > 0) {\n      count++;\n\
    \    }\n  }\n  return count;", "    long ans = 0;\n    // If there are no digits,\
    \ then return the number of elements in arr.\n    if (arr.empty()) {\n       \
    \ return arr.size();\n    }\n    // If there is only 1 element, return it.\n \
    \   if (arr.size() == 1) {\n        return arr[0];\n    }\n    // If there is\
    \ only a 0, return 1.\n    if (arr[0] == 0) {\n        return 1;\n    }\n    //\
    \ We will calculate the sum of the digits of each element in the vector\n    //\
    \ and check it against 0. Here we assume that all elements are positive.\n   \
    \ long digitSum = 0;\n    for (long i : arr) {\n        digitSum += i;\n    }\n\
    \    // If digitSum is negative, then the first element in the vector will be\
    \ negative\n    // which we need to negate.\n    if (digitSum < 0) {\n       \
    \ digitSum = ~digitSum + 1;\n    }\n    // If the sum is 0, then all elements\
    \ have the same digitSum.\n    if (digitSum == 0) {\n        return arr.size();\n\
    \    }\n    // Find the element that has the largest digitSum.\n    for (long\
    \ i : arr) {\n        if (digitSum - i > ans) {\n            ans = digitSum -\
    \ i;\n        }\n    }\n    return ans;", "    int sum = 0;\n    for (auto x :\
    \ arr) {\n        sum += std::abs(x);\n    }\n    return sum;", "    long count\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int sum = arr[i];\n\
    \        if (sum > 0) {\n            count += sum;\n        }\n        if (sum\
    \ < 0) {\n            count += sum * (-1);\n        }\n    }\n    return count;",
  "  int res = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      if (std::signbit(arr[i])) {\n        arr[i] += 10;\n      }\n    }\n  \
    \  while (arr[i] > 9) {\n      arr[i] -= 9;\n      res++;\n    }\n  }\n  return\
    \ res;", "  if (arr.size() == 0) {\n    return 0;\n  }\n  assert(arr.size() >\
    \ 0);\n  std::vector<int> digits(arr.size());\n  std::vector<int> sum_digits(arr.size());\n\
    \  for (long &i : arr) {\n    long temp = i;\n    long sum = 0;\n    while (temp)\
    \ {\n      sum += temp % 10;\n      temp /= 10;\n    }\n    digits[arr.size()\
    \ - 1 - i] = sum;\n    sum_digits[arr.size() - 1 - i] = sum;\n  }\n  int num_positive\
    \ = 0;\n  int num_negative = 0;\n  for (int i = 0; i < arr.size(); i++) {\n  \
    \  if (sum_digits[i] > 0) {\n      num_positive++;\n    } else if (sum_digits[i]\
    \ < 0) {\n      num_negative++;\n    }\n  }\n  return num_positive > num_negative\
    \ ? num_positive : num_negative;", "    long sum = 0;\n    std::vector<long> arr1;\n\
    \    long len = arr.size();\n    for (long i = 0; i < len; i++) {\n        if\
    \ (arr[i] < 0) {\n            arr1.push_back(arr[i] * -1);\n        } else {\n\
    \            arr1.push_back(arr[i]);\n        }\n    }\n    for (long i = 0; i\
    \ < arr1.size() - 1; i++) {\n        long c = arr1[i] + arr1[i + 1];\n       \
    \ if ((c > 0) || (c < 0)) {\n            sum += c;\n        }\n    }\n    return\
    \ sum;", "    long count = 0;\n    for(auto &i : arr) {\n        i = abs(i);\n\
    \        if(i >= 0) {\n            count += i;\n        }\n        else {\n  \
    \          i += abs(i);\n            while(i >= 0) {\n                count +=\
    \ i;\n                i -= abs(i);\n            }\n        }\n    }\n    return\
    \ count;", "  long res = 0;\n  for (long i : arr) {\n    if (i > 0) res += i;\n\
    \  }\n  return res;", "    long ans = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        long long num = arr[i];\n        if (num < 0 || num < 0) {\n\
    \            long long dig1 = num % 10;\n            num /= 10;\n            long\
    \ long dig2 = num % 10;\n            num /= 10;\n            ans += (dig1 + dig2)\
    \ * (dig1 > 0);\n        }\n        else {\n            ans += (num % 10) * (num\
    \ >= 0);\n        }\n    }\n    return ans;", "  if (arr.size() == 0)\n    return\
    \ 0;\n  long ans = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long j =\
    \ arr[i];\n    if (j >= 0)\n      j += 1;\n    while (j != 0)\n      if (j % 10\
    \ == 0)\n        ans += 1;\n      j/=10;\n  }\n  return ans;", "  if (arr.empty())\
    \ {\n    return 0;\n  }\n  long num_ones = 0;\n  long sum = 0;\n  for (const auto&\
    \ num : arr) {\n    sum += num;\n    if (sum < 0) {\n      num_ones--;\n     \
    \ sum = sum * -1;\n    }\n  }\n  return num_ones + 1;", "    long cnt = 0;\n \
    \   int sign = 1;\n    for (auto elem : arr)\n    {\n        cnt += (sign*elem)*std::count(arr.begin()+cnt,\
    \ arr.end(), -elem);\n        sign *= -1;\n    }\n    return cnt;", "  std::vector<long>\
    \ res;\n  res.push_back(0);\n  for (auto e : arr) {\n    auto digits = std::to_string(e).find_first_of(\"\
    0123456789\");\n    long long cur_digits = std::stoi(std::to_string(arr[0]).substr(digits));\n\
    \    long long remaining = cur_digits % 10;\n    if (remaining > 0) res.push_back(remaining\
    \ + 1);\n    else res.push_back(remaining + 10);\n  }\n  assert(res.size() ==\
    \ arr.size());\n  long long ans = 0;\n  for (auto i : res) ans += i;\n  return\
    \ ans;", "  long n = 0;\n  for (long &i : arr) assert(i >= 0);\n  for (long &i\
    \ : arr) {\n    if (i > 0) n++;\n    i = abs(i);\n  }\n  return n;", "    int\
    \ sum = 0;\n    // Write your code here\n    int n = arr.size();\n    for (int\
    \ i = 0; i <= n; i++) {\n        sum = sum + arr[i];\n        if (sum > 9) {\n\
    \            sum -= 10;\n        }\n    }\n    return sum;", "    long long sum\
    \ = 0;\n    for (auto x : arr) sum += x;\n    if (sum < 0) sum = -sum;\n    return\
    \ sum;", "    long num_arr = 0;\n    for (auto i : arr) if (i >= 0) num_arr++;\n\
    \    if (num_arr) return num_arr;\n    assert(num_arr == 0);\n    return -1;",
  '  // Your code here', "    long nums = 0;\n    if (arr.size() == 0) {\n       \
    \ return 0;\n    }\n    long digit = 0;\n    int sum = 0;\n    bool isNegative\
    \ = false;\n    for (long &val : arr) {\n        digit = val % 10;\n        sum\
    \ += digit;\n        if (sum < 0) {\n            isNegative = true;\n        \
    \    sum += 10;\n        }\n        if (sum == 0) {\n            ++nums;\n   \
    \     }\n    }\n    if (isNegative) {\n        nums--;\n    }\n    return nums;",
  "    long ans = 0;\n    int pos = 0;\n    for (auto &i : arr) {\n        if (i <\
    \ 0) {\n            i += 10;\n        }\n        while (i != 0) {\n          \
    \  pos = pos * 10 + i % 10;\n            i /= 10;\n        }\n        ans += pos;\n\
    \    }\n    return ans;", "    long count = 0;\n    for (long n : arr) {\n   \
    \     if (n >= 0 && n < LONG_MAX) {\n            int n_digits = n % 10;\n    \
    \        long n_remaining = n / 10;\n            if (n_digits > 0 && n_remaining\
    \ > 0) {\n                count += n_digits + n_remaining;\n            }\n  \
    \      }\n    }\n    return count;", "    long ans = 0;\n    std::vector<long>::iterator\
    \ it;\n    for (it = arr.begin(); it != arr.end(); it++) {\n        long num =\
    \ *it;\n        if (num < 0) {\n            num %= 10;\n            int digit\
    \ = num + static_cast<int>(num % 10);\n            if (digit == 0) {\n       \
    \         continue;\n            }\n            while (num > 0) {\n          \
    \      num -= 10;\n                digit += num;\n            }\n            if\
    \ (digit > 0) ans += 1;\n        } else {\n            ans += 1;\n        }\n\
    \    }\n    return ans;", "    int count = 0;\n    for (auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n        if ((*it) < 0) continue;\n        long sum\
    \ = 0;\n        while (it != arr.begin()) {\n            sum += *--it;\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    if (arr.empty()) return 0;\n    int n = arr.size();\n    long\
    \ ret = 1;\n    for (int i = 1; i < n; ++i) {\n        ret *= i;\n        ret\
    \ %= 10;\n        ret *= arr[i];\n        ret %= 10;\n    }\n    return ret;",
  "  std::sort(arr.begin(), arr.end(), std::greater<long>());\n  if (arr.size() ==\
    \ 0) return 0;\n  long num = 0;\n  for (int i = 0; i < arr.size(); ++i) if (arr[i]\
    \ < 0) num -= arr[i];\n  return num;", "    // Code here\n    // return 0;\n \
    \   \n    long cnt = 0;\n    for(auto i : arr)\n    {\n        if(i + i >= 0)\n\
    \        {\n            cnt += i;\n        }\n        else\n        {\n      \
    \      cnt += (i < 0) ? -i : i;\n        }\n    }\n    return cnt;", "  assert(arr.size()\
    \ > 0);\n  int nums = 0, start = 0, end = 0;\n  for (auto num : arr) {\n    end\
    \ = std::count(num.begin(), num.end(), 0);\n    if (num < 0)\n      start += end;\n\
    \    else\n      nums += end - start;\n    start = 0;\n  }\n  if (nums < 0)\n\
    \    start += arr.size();\n  return nums;", "  if (arr.size() == 0)\n    return\
    \ 0;\n  long ans = 0;\n  long len = arr.size();\n  if (len <= 1)\n    return len;\n\
    \  for (long i = 0; i < len; i++) {\n    ans += arr[i] * (len - i);\n    ans +=\
    \ ((ans % 10) == 0) ? (ans / 10) : -1;\n  }\n  return ans;", "    if (arr.empty())\
    \ {\n        return 0;\n    }\n    if (arr.size() == 1) {\n        return std::abs(arr[0]);\n\
    \    }\n    std::vector<long> arr1 = arr;\n    long ans = 1;\n    long rem = arr1.back();\n\
    \    for (long i : arr1) {\n        rem = rem - i;\n        if (rem > 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;", "    int c=0;\n    long\
    \ sum=0;\n    for(int i=0;i<arr.size();i++)\n        sum+=arr[i];\n    for(int\
    \ i=0;i<arr.size();i++)\n    {\n        if(arr[i]<0)\n        {\n            arr[i]=-arr[i];\n\
    \            sum=-sum;\n        }\n    }\n    for(int i=0;i<arr.size();i++)\n\
    \        c+=arr[i]/sum;\n    return c;", "\tassert(arr.size() != 0);\n\tlong ans\
    \ = 0;\n\tlong long curr = 0;\n\tfor (long i = 0; i < arr.size(); ++i) {\n\t\t\
    curr = arr[i];\n\t\tfor (int j = 1; j < 9; ++j)\n\t\t\tcurr -= curr % 10;\n\t\t\
    ans += (curr > 0) ? 1 : 0;\n\t}\n\treturn ans;", "    int len = arr.size();\n\
    \    long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += arr[i];\n\
    \    }\n    // If negative numbers are present, then they have their first digit\n\
    \    // negative.\n    if (len > 0) {\n        sum += arr[0] & 1;\n    }\n   \
    \ return sum;", "   long ans = 0;\n   for (auto it : arr) {\n      if (it < 0)\
    \ it *= -1;\n      for (int i = it; i >= 0; i--) {\n         if (it % 10 != 0)\
    \ it--;\n         else it = (it / 10);\n         ans = ans + 1;\n      }\n   }\n\
    \   return ans;", "  // Write your code here.\n  assert(arr.size() > 0);\n  if\
    \ (arr.size() == 0) {\n    return 0;\n  }\n  long long sum = 0;\n  for (int i\
    \ = 1; i < arr.size(); i++) {\n    int sumDigits = 0;\n    while (arr[i] >= 10)\
    \ {\n      arr[i] += arr[i] % 10;\n      sumDigits++;\n    }\n    sum += arr[i]\
    \ - arr[i] % 10 + sumDigits;\n  }\n  if (sum < 0) {\n    sum *= -1;\n  }\n  return\
    \ sum;", "  if (arr.empty()) return 0;\n  long ans = 0;\n  // If input array is\
    \ of single element, then it contains no summands:\n  if (arr.size() == 1) {\n\
    \    return 0;\n  }\n  for (long i = arr.size() - 1; i >= 0; i--) {\n    long\
    \ digits = arr[i] - '0';\n    ans += digits > 0 ? digits : digits * -1;\n  }\n\
    \  return ans;", "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++)\n\
    \        sum += arr[i];\n    if (sum < 0)\n        sum *= -1;\n    long ans =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++)\n        if (arr[i] >= 0 && arr[i]\
    \ % 10 == 0)\n            ans++;\n    return ans;", "\tstd::vector<bool> sign;\n\
    \tsign.resize(arr.size(), false);\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\
    \tif (arr[i] < 0) {\n\t\t\tsign[i] = true;\n\t\t\tarr[i] = -arr[i];\n\t\t}\n\t\
    }\n\tlong ans = 0;\n\tfor (int i = 0; i < arr.size() && (ans + arr[i]) != 0; i++)\
    \ {\n\t\tif (sign[i])\n\t\t\tans++;\n\t\telse {\n\t\t\tlong d = arr[i] - 10;\n\
    \t\t\tif (d < 0) {\n\t\t\t\tans++;\n\t\t\t\tsign[i] = true;\n\t\t\t\tarr[i] =\
    \ -arr[i];\n\t\t\t} else {\n\t\t\t\tarr[i] = d;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ ans;", "  if (arr.size() == 0) {\n    return 0;\n  }\n  // Write your logic\
    \ here\n  long sum = 0;\n  for (auto num : arr) {\n    sum += num;\n  }\n  return\
    \ sum;", "  assert(arr.size() > 0);\n  long ans = 0;\n  long long carry = 0;\n\
    \  long long cur_sum = 0;\n  for (auto i : arr) {\n    cur_sum += i;\n    if (cur_sum\
    \ < 0)\n      cur_sum = (cur_sum * 10) + (cur_sum / 10);\n    if (cur_sum > 0)\n\
    \      carry = (cur_sum / 10);\n    if (carry > 0) {\n      ans += 1;\n      cur_sum\
    \ -= carry;\n      carry = 1;\n    }\n  }\n  assert(carry == 0);\n  return ans;",
  "    long sum = 0;\n    long temp = arr.front();\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        sum += (arr[i] - temp);\n        temp += arr[i];\n    }\n  \
    \  return sum;", "    if (arr.empty()) {\n        return 0;\n    }\n    // If\
    \ first number is positive\n    if (arr[0] >= 0) {\n        long n = arr[0];\n\
    \        // Find first non-positive number.\n        for (long i = 1; i < arr.size();\
    \ i++) {\n            if (arr[i] >= 0) {\n                n += arr[i];\n     \
    \           break;\n            }\n        }\n        return n;\n    } else {\n\
    \        long first = arr[0];\n        // Find first negative number.\n      \
    \  for (long i = 1; i < arr.size(); i++) {\n            if (arr[i] < 0) {\n  \
    \              first += arr[i];\n                break;\n            }\n     \
    \   }\n        long n = 0;\n        long m = first;\n        // Find every number\
    \ whose sum of digits is > 0.\n        for (long i = 1; i < arr.size(); i++) {\n\
    \            if (arr[i] > 0) {\n                m += arr[i];\n               \
    \ while (m > 0) {\n                    n += m;\n                    m /= 10;\n\
    \                }\n                break;\n            }\n        }\n       \
    \ return n;\n    }", "  assert(arr.size() != 0);\n  long ans = 0;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    long s = arr[i];\n    if (s < 0) s = s*-1;\n\
    \    ans += s;\n  }\n  return ans;", "    int n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >= 0) {\n     \
    \       while (arr[i] >= 10) {\n                arr[i] /= 10;\n              \
    \  count++;\n            }\n            count += arr[i] - '0';\n        }\n  \
    \  }\n    return count;", "  long count = 0;\n  long temp = arr[0];\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    temp += arr[i];\n    if (temp > 0) {\n  \
    \    count++;\n    }\n  }\n  return count;", "    long sum = 0;\n    for (long\
    \ val : arr) {\n        sum += (val > 0) ? (val % 10) : -val % 10;\n    }\n  \
    \  return sum;", "    if (arr.empty()) return 0;\n    long sum = 0;\n    for (long\
    \ n : arr) {\n        if (n >= 0)\n            sum += (n / 100) * 10 + (n % 100);\n\
    \        else sum += (-n) / 100 * 10 + (n / 100);\n    }\n    return sum;", " \
    \   long res = 0;\n    for (long i : arr) {\n        while (i > 0) {\n       \
    \     i = i / 10;\n            ++res;\n        }\n    }\n    return res;", " \
    \   long sum = 0;\n    if (arr.empty()) {\n        return 0;\n    }\n    long\
    \ firstDigit = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > 0 && (firstDigit > 0 || arr[i] < 0)\n        ) {\n            firstDigit\
    \ -= arr[i]; // subtract the current number from the first number\n        } else\
    \ {\n            sum += i;\n        }\n    }\n    return sum;", "    std::vector<int>\
    \ digits;\n    for (auto ele : arr) {\n        long num = ele;\n        while\
    \ (num > 0) {\n            digits.push_front(num % 10);\n            num /= 10;\n\
    \        }\n    }\n    long result = 0;\n    for (size_t i = 0; i < digits.size();\
    \ i++) {\n        if (digits[i] > 0) result += pow(10, digits[i] - 1);\n    }\n\
    \    return result;", "    long ans = 0;\n    for (long i = 0; i < arr.size();\
    \ ++i) {\n        long num = arr[i];\n        ans += num;\n        if (num < 0)\
    \ {\n            ans -= num * (long)pow(10, -(int)log10(num));\n            num\
    \ %= (long)pow(10, -(int)log10(num));\n        }\n    }\n    return ans;", " \
    \   int ans = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n          \
    \  continue;\n        }\n        ans = ans + i / 10;\n        ans = ans - (i %\
    \ 10);\n    }\n    return ans;", "  long ans = 0;\n  for (int i = 0; i < arr.size();\
    \ ++i) {\n    long s = 0;\n    for (long d : arr[i]) {\n      s += (d<0)?-d:d;\n\
    \      if (s<0) break;\n    }\n    if (s<0) ans += -1;\n    if (s>0) ans += s;\n\
    \  }\n  return ans;", "    long sum = 0;\n    long digit = 0;\n    for (long i\
    \ = 0; i < arr.size(); ++i) {\n        sum += arr[i];\n        digit = sum % 10;\n\
    \        if (digit > 0 && sum > 0) {\n            return 1;\n        }\n     \
    \   if (digit < 0 && sum < 0) {\n            sum = -sum;\n            return 2;\n\
    \        }\n    }\n    return 0;", "    // your code goes here\n    // Write your\
    \ code below this line\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n     \
    \   }\n        for (int j = 0; j < arr[i]; j++) {\n            sum += 1;\n   \
    \     }\n    }\n    return sum;", "    assert(arr.size() == 1 && arr[0] >= 0);\n\
    \    long s = 0;\n    for (long d : arr) {\n        s += d;\n        if (s < 0)\
    \ s = -s;\n    }\n    return s;", "  std::stack<long> s;\n  for (auto &elem :\
    \ arr) {\n    long num = elem;\n    s.push(num);\n    while (!s.empty() && num\
    \ >= 0) {\n      num = num - s.top();\n      s.pop();\n    }\n    if (num < 0)\
    \ {\n      num = num * -1;\n      s.push(num);\n    }\n  }\n  return s.size();",
  "    auto it = arr.begin();\n    auto itEnd = arr.end();\n    auto itSum = arr.begin();\n\
    \    auto itSumEnd = arr.begin();\n    long sum = 0;\n    long nums = 0;\n   \
    \ while (it != itEnd) {\n        sum = sum * 10 + (*it) - '0';\n        ++nums;\n\
    \        ++it;\n        if (sum > 0) {\n            ++itSum;\n        }\n    \
    \    if (sum < 0) {\n            sum += 10 - sum;\n            ++itSum;\n    \
    \    }\n        if (sum == 0 && nums == 0) {\n            break;\n        }\n\
    \    }\n    return nums;", "  long sum = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    sum += arr[i];\n  }\n  if (sum < 0) {\n    return sum + count_nums(arr);\n\
    \  } else {\n    return sum;\n  }", "  if (arr.empty()) return 0;\n  int res =\
    \ 0;\n  for (long i: arr) if (i > 0) res++;\n  return res;", "    long ans = 0;\n\
    \    for (auto n : arr)\n        if (n > 0) {\n            ans += n / 10;\n  \
    \          ans += n % 10;\n        }\n    return ans;", "  long sum = 0;\n  for\
    \ (long elem : arr) {\n    sum += elem;\n  }\n  return sum;", "    long sum =\
    \ 0;\n    for (auto i : arr) sum += i;\n    for (auto i : arr) sum += i % 10;\n\
    \    return sum;", "    // write your code here\n    \n    int sum = 0;\n    for(auto\
    \ val : arr) {\n        if(val >= 0) {\n            sum+= val % 10;\n        }\n\
    \    }\n    return sum;", "  // Code here.\n  if (arr.size() <= 1)\n    return\
    \ 0;\n  if (arr[0] < 0)\n    arr[0] = -arr[0];\n  int n = 1;\n  for (auto v :\
    \ arr)\n  {\n    n *= 10;\n    n -= v;\n    if (n < 0)\n      return 0;\n  }\n\
    \  return n;", "  int n = arr.size();\n  long sum = 0;\n  for (int i = 0; i <\
    \ n; i++) {\n    sum += arr[i];\n  }\n  assert(sum > 0);\n  while (sum > 0) {\n\
    \    if (sum > n) {\n      sum += n - sum;\n      n--;\n    } else {\n      sum\
    \ -= n;\n      n--;\n    }\n  }\n  return n;", "  long count = 0;\n  for (int\
    \ i = 0; i != arr.size(); i++) {\n    if (arr[i] > 0) count++;\n  }\n  return\
    \ count;", "    int n = arr.size();\n    int ans = 0;\n    for (int i = 0; i <\
    \ n; ++i) {\n        if (arr[i] < 0)\n            arr[i] *= -1L;\n        int\
    \ count = 0;\n        while (arr[i]) {\n            arr[i] -= 9L;\n          \
    \  ++count;\n            arr[i] /= 10;\n        }\n        ans += count;\n   \
    \ }\n    return ans;", "  // Your code here\n  long sum = 0;\n  for (long i :\
    \ arr) {\n    if ((i + 1) % 10 == 0)\n      sum += i;\n  }\n  return sum;", " \
    \ int ret=0;\n  for (auto i:arr) {\n    auto n=0;\n    if (i<0) n=i;\n    else\
    \ i=abs(i);\n    auto d = i;\n    while (d>0) {\n      d=d%10;\n      n++;\n \
    \   }\n    ret = max(n,ret);\n  }\n  return ret;", "    long count = 0;\n    long\
    \ sum = std::accumulate(arr.begin(), arr.end(), 0);\n    while(sum && sum >= 10)\
    \ {\n        sum -= 10;\n        ++count;\n    }\n    return count;", "  long\
    \ count = 0;\n  // Iterate through every element of the array.\n  for (long i\
    \ = 0; i < arr.size(); ++i) {\n    // If current element has sum > 0, then increment\
    \ count.\n    if (arr[i] + arr[i + 1] + arr[i + 2] > 0)\n      ++count;\n  }\n\
    \  return count;", "    long sum = 0;\n    for (auto &x : arr) {\n        sum\
    \ += x;\n    }\n    if (sum < 0) {\n        return std::abs(sum);\n    }\n   \
    \ long firstPositive = std::abs(sum);\n    for (long i = firstPositive + 1; i\
    \ < std::numeric_limits<long>::max(); i += 10) {\n        long sumOfDigits = 0;\n\
    \        for (auto &x : arr) {\n            if (x > i) {\n                sumOfDigits\
    \ += x - i;\n            }\n        }\n        if (sumOfDigits > 0) {\n      \
    \      return i + 1;\n        }\n    }\n    return std::numeric_limits<long>::max();",
  "\tlong nums = 0;\n\tfor (long i : arr) {\n\t\tlong sum = 0;\n\t\tfor (long j :\
    \ arr) {\n\t\t\tif (j > 0) sum += j;\n\t\t\telse sum = -sum;\n\t\t}\n\t\tif (i\
    \ != sum) nums++;\n\t}\n\treturn nums;", "  if (arr.empty()) {\n    return 0;\n\
    \  }\n  long ans = 0;\n  long sum = 0;\n  for (long num : arr) {\n    if (num\
    \ > 0) {\n      sum += num;\n    } else {\n      int num_digits = floor(log10(abs(num)))\
    \ + 1;\n      ans += (sum - pow(10, num_digits)) * (long long)(num);\n      sum\
    \ = 0;\n    }\n  }\n  return ans;", "  std::unordered_map<long, long> nums_sum_digits;\n\
    \  long ans = 0;\n  long sum = 0;\n  for (int i = 0; i < arr.size(); ++i) {\n\
    \    if (arr.at(i) >= 0) {\n      sum += arr.at(i);\n    } else {\n      // For\
    \ negative numbers, subtract the number with its first digit.\n      sum -= arr.at(i)\
    \ % 10;\n    }\n    // Check whether the sum is positive or not by checking whether\n\
    \    // the sum of the digits in nums_sum_digits is a power of 10.\n    if (sum\
    \ <= 0) {\n      continue;\n    }\n    if (nums_sum_digits.count(sum) == 0) {\n\
    \      nums_sum_digits[sum] = 1;\n    } else {\n      nums_sum_digits[sum]++;\n\
    \    }\n    ans++;\n  }\n  return ans;", "\tint size = 0;\n\tlong sum = 0;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tsum += arr[i];\n\t\tif (sum > 0)\n\
    \t\t\t++size;\n\t\telse sum -= arr[arr.size() - 1 - i];\n\t}\n\treturn size;",
  "  std::vector<int> s(arr.size());\n  // Count the number of digits in each number:\n\
    \  // for each number in the vector, check how many positive numbers\n  // have\
    \ that same number of digits.\n  for (size_t i = 0; i < arr.size(); i++) {\n \
    \   long n = (arr[i] < 0) ? arr[i] : abs(arr[i]);\n    long d = 0;\n    while\
    \ (n) {\n      n = (n / 10) % 10;\n      d++;\n    }\n    s[i] = d;\n  }\n  //\
    \ Count the number of positive numbers in the vector:\n  long ans = 0;\n  for\
    \ (size_t i = 0; i < s.size(); i++) {\n    ans += s[i];\n  }\n  return ans;",
  "  long ans = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    long sum = 0;\n\
    \    for (size_t j = 0; j < arr.size(); j++) {\n      if (i == j) {\n        continue;\n\
    \      }\n      sum += arr[j];\n    }\n    if (sum > 0) {\n      ans++;\n    }\n\
    \  }\n  return ans;", "    long n = 0, sum = 0;\n    for (int i = 0; i != arr.size();\
    \ i++)\n        if (arr[i] > 0)\n            sum += arr[i];\n        else\n  \
    \          sum += arr[i] - 1;\n    if (sum > 0)\n        for (int i = 0; i !=\
    \ arr.size(); i++)\n            if (arr[i] > 0)\n                n++;\n    return\
    \ n;", "    assert(arr.size() > 0);\n    long ans = 0;\n    long temp = 0;\n \
    \   for (long i : arr) {\n        if (i > 0) {\n            temp += i;\n     \
    \       if (temp > 0) {\n                ans++;\n            }\n        }\n  \
    \  }\n    return ans;", "    long res = 0;\n    for (auto n : arr) {\n       \
    \ res += abs(n);\n    }\n    return res;", "    long ans = 0;\n    for (long x\
    \ : arr) {\n        ans += __builtin_popcount(x);\n        if (x < 0)\n      \
    \      ans *= -1;\n    }\n    return ans;", "    // Your code goes here\n    //\
    \ ...\n    return count_nums(arr);", "    long ans = 0;\n    bool neg = false;\n\
    \    for (auto x : arr) {\n        long sum = 0;\n        while (x > 0) {\n  \
    \          sum = sum * 10 + x % 10;\n            x /= 10;\n        }\n       \
    \ if (sum > 0) {\n            ans = ans + sum;\n        }\n    }\n    return ans;",
  "    long ret = 0;\n    for (auto &i : arr) {\n        if (i > 0)\n            ret\
    \ += i / 10;\n    }\n    return ret;", "  if (arr.size() < 1)\n    return 0;\n\
    \  int sum = 0;\n  long number = arr[0];\n  while (number > 0) {\n    sum += number\
    \ % 10;\n    number /= 10;\n  }\n  return sum;", "    // Your code here\n    std::cout<<\"\
    inside function \"<<std::endl;\n    if(arr.size() == 0){\n        return 0;\n\
    \    }\n\n    std::cout<<arr[0]<<\" \"<<arr.size()<<std::endl;\n    if(arr.size()\
    \ == 1){\n        if(arr[0] < 0)\n            return 0;\n        else{\n     \
    \       if(arr[0] < 10)\n                return 1;\n            else{\n      \
    \          if(arr[0] < 100)\n                    return 2;\n                else{\n\
    \                    return 3;\n                }\n            }\n        }\n\
    \    }\n    long count = 0;\n    for(int i = 1; i < arr.size(); i++)\n    {\n\
    \        if(arr[i]%10 == 0 && arr[i-1]%10 != 0)\n            count = count + 1;\n\
    \    }\n    return count;", "  if (arr.empty())\n    return 0;\n  long ans = 0;\n\
    \  long sign = 1;\n  for (auto num : arr) {\n    ans += sign * num;\n    sign\
    \ = -sign;\n  }\n  return ans;", "    std::stack<bool> stck;\n    for (long n\
    \ : arr) {\n        if (n < 0) {\n            while (n >= 10) {\n            \
    \    stck.push(false);\n                n /= 10;\n            }\n        } else\
    \ {\n            while (!stck.empty() && stck.top()) stck.pop();\n           \
    \ stck.push(false);\n        }\n        while (!stck.empty() && stck.top()) stck.pop();\n\
    \        stck.push(true);\n    }\n    if (stck.empty()) return 0;\n    return\
    \ 1 + stck.top();", "\tassert(arr.size() != 0 && arr[0] != 0);\n\tlong ans = 0;\n\
    \tlong n = 0;\n\tfor (long i: arr) {\n\t\tassert(i != 0);\n\t\tn += i;\n\t\tif\
    \ (n > 0) {\n\t\t\tans += 1;\n\t\t}\n\t}\n\treturn ans;", "  if (arr.empty())\
    \ {\n    return 0;\n  }\n  // Find the first digit whose absolute value is positive.\n\
    \  // If no such digit is found, the first digit will not be > 0.\n  long pos\
    \ = std::numeric_limits<long>::max();\n  for (long i : arr) {\n    if (i > 0 &&\
    \ i >= pos) {\n      pos = i;\n    }\n  }\n  if (pos == std::numeric_limits<long>::max())\
    \ {\n    return arr.size();\n  }\n  // Use a sliding window of size pos - 1 whose\
    \ elements are the sum of digits\n  // for numbers > 0.\n  long window_size =\
    \ pos - 1;\n  long count = 0;\n  long digit;\n  for (auto it = arr.begin() + 1;\
    \ it != arr.end(); ++it) {\n    digit = *it - pos * (*it / pos);\n    if (digit\
    \ < 0) {\n      digit = digit * -1;\n    }\n    if (window_size > 0 && window_size\
    \ * digit > 0) {\n      window_size -= 1;\n      ++count;\n    }\n  }\n  return\
    \ count;", "    if (arr.empty()) return 0;\n    long ans = 0;\n    long sum =\
    \ 0;\n    for (auto i : arr) {\n        sum += i;\n        if (sum > 0) {\n  \
    \          ans = 1;\n            break;\n        }\n    }\n    return ans;", " \
    \   long count = 0;\n    for (const auto &num : arr) {\n        count += count_nums(num);\n\
    \    }\n    return count;", "    // Your code here\n    long ans = 0;\n    \n\
    \    for (int i=0; i<arr.size(); i++) {\n        long sum = 0;\n        for (int\
    \ j=0; j<arr[i].size(); j++) {\n            sum += arr[i][j];\n        }\n   \
    \     if (sum > 0) {\n            ans += 1;\n        }\n    }\n    return ans;",
  "  long cnt = 0;\n  for (long i : arr) {\n    if (i < 0) i = -i;\n    cnt += i;\n\
    \  }\n  return cnt;", "    if (arr.size() == 0) return 0;\n    // If there is\
    \ only 1 element, then count is 1 since it is positive.\n    if (arr.size() ==\
    \ 1) return 1;\n    // If the first element is a negative number, then return\
    \ negative number\n    if (arr[0] < 0) return count_nums(std::vector<long>(arr.begin()\
    \ + 1, arr.end()));\n    long count = 1;\n    // Loop over each element and add\
    \ the digits of it.\n    for (long e : arr) count += e / 10.0;\n    return count;",
  "    int sum = 0;\n    for(long n : arr) {\n        if(n<0) {\n            n = -n;\n\
    \            sum += n;\n        }\n        else {\n            sum += n;\n   \
    \     }\n    }\n    return sum;", "  int sum = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] > 0) sum += arr[i];\n  }\n  return sum;", "    long count\
    \ = 0;\n    for (long i = 0; i< arr.size(); i++) {\n        if(arr[i]<0)\n   \
    \         arr[i] = -arr[i];\n        long sum = 0;\n        for (long j = i; j<arr.size();\
    \ j++) {\n            sum += arr[j];\n        }\n        if (sum>0) count++;\n\
    \    }\n    return count;", "  // Your code here\n  long sum = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int sign = arr[i] < 0 ? -1 : arr[i] > 0 ?\
    \ 1 : 0;\n    sum += sign * std::abs(arr[i]);\n  }\n  return sum;", "\t// arr\
    \ is empty?\n\tif (arr.size() == 0)\n\t\treturn 0;\n\t// arr is negative?\n\t\
    long sum = 0;\n\tfor (int i = arr.size() - 1; i >= 0; i--) {\n\t\tlong num = arr[i];\n\
    \t\tsum += num / 10;\n\t\tsum *= 10 - num % 10;\n\t}\n\tif (sum < 0) {\n\t\tsum\
    \ += 10 * (arr.size() + 1);\n\t\tsum -= 1;\n\t}\n\treturn sum;", "  assert(arr.size()\
    \ > 0);\n  long ans = 0;\n  for (size_t i = 0; i < arr.size(); ++i) {\n    if\
    \ (arr[i] > 0)\n      ans++;\n    else\n      ans += arr[i] % 10;\n    arr[i]\
    \ /= 10;\n  }\n  return ans;", "    if (arr.empty()) return 0;\n    long res =\
    \ 0;\n    for (long val : arr) {\n        if (val >= 0) {\n            for (int\
    \ i = 0; i < arr.size() - 1; i++) {\n                long next_val = arr[i + 1];\n\
    \                if (next_val >= val) {\n                    val = next_val;\n\
    \                    break;\n                }\n            }\n            long\
    \ next_val = arr[arr.size() - 1];\n            if (next_val >= val) {\n      \
    \          val = next_val;\n            }\n        }\n        res += val;\n  \
    \  }\n    return res;", "    long n = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            n += arr[i];\n        }\n   \
    \ }\n    return n;", "    if (arr.empty())\n        return (long)0;\n    long\
    \ result = 0;\n    long long sum = (long long)0;\n    \n    for (long i: arr)\n\
    \        sum += (long long)i;\n    if (sum < 0)\n        sum = (sum - ((long long)sum\
    \ % 10)) % 10;\n    \n    if (sum > 0) {\n        while (sum > 0) {\n        \
    \    result += 1;\n            sum = (sum - (long long)sum % 10) % 10;\n     \
    \   }\n    }\n    else if (sum < 0) {\n        while (sum < 0) {\n           \
    \ result -= 1;\n            sum = (sum - (long long)sum % 10) % 10;\n        }\n\
    \    }\n    return result;", "    long ans = 0;\n    long long n = 0;\n    int\
    \ i = 0;\n    long long sum = 0;\n    for (auto it : arr) {\n        n = it *\
    \ 10;\n        sum += n;\n    }\n    for (auto it : arr) {\n        n = it * 10;\n\
    \        if (sum >= 0 && sum < n && sum >= n - 1 && sum < n + 1) {\n         \
    \   ans++;\n        }\n    }\n    return ans;", "    long count = 0;\n    for\
    \ (long i = 0; i < (arr.size() / 2); i++) {\n        if (arr[2 * i] > 0) count++;\n\
    \        if (arr[2 * i + 1] > 0) count++;\n    }\n    return count;", "    //\
    \ Write your code here\n    long count = 0;\n    long long total = 0;\n    for(auto\
    \ i:arr) {\n        if (i == 0) {\n            continue;\n        }\n        if\
    \ (i >= 0) {\n            total += i;\n            if (total > 9) {\n        \
    \        total -= 10;\n                count++;\n            }\n        }\n  \
    \      else if (i < 0) {\n            total += abs(i);\n            if (total\
    \ > 9) {\n                total -= 10;\n                count++;\n           \
    \ }\n        }\n    }\n    return count;", "\tlong ans = 0, cur, sum;\n\tfor (cur\
    \ = 0, sum = 0; cur < arr.size(); ++cur) {\n\t\tsum += arr[cur];\n\t\tif (sum\
    \ > 0) {\n\t\t\tans += 1;\n\t\t\tif (sum == arr[cur])\n\t\t\t\tsum = 0;\n\t\t\
    }\n\t}\n\treturn ans;", "    long ans = 0, cur = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        cur += arr[i];\n        if (cur >= 0) {\n      \
    \      ans += cur;\n            cur = 0;\n        }\n    }\n    return ans;",
  "  std::vector<long> result;\n  for (int i = 0; i < arr.size(); ++i) {\n    if (arr[i]\
    \ < 0) {\n      std::swap(arr[i], arr[i]%10);\n      result.push_back(arr[i] /\
    \ 10);\n    } else {\n      result.push_back(arr[i]);\n    }\n  }\n  long ans\
    \ = 0;\n  for (int i = 0; i < result.size(); ++i) {\n    ans += result[i];\n \
    \ }\n  return ans;"]
stop_tokens:
- "\n}"
