name: HumanEval_64_vowels_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count\
  \ which takes a string representing\n// a word as input and returns the number of\
  \ vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here,\
  \ 'y' is also a\n// vowel, but only when it is at the end of the given word.\n//\
  \ Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"\
  ))\n// (3)\nlong vowels_count(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"\
  abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"\
  key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"\
  keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"\
  ACEDY\")) == (3));\n}\n"
completions: ["    int count_of_a = 0;\n    int count_of_e = 0;\n    int count_of_i\
    \ = 0;\n    int count_of_o = 0;\n    int count_of_u = 0;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (s[i] == 'a') {\n            count_of_a++;\n\
    \        }\n        if (s[i] == 'e') {\n            count_of_e++;\n        }\n\
    \        if (s[i] == 'i') {\n            count_of_i++;\n        }\n        if\
    \ (s[i] == 'o') {\n            count_of_o++;\n        }\n        if (s[i] == 'u')\
    \ {\n            count_of_u++;\n        }\n    }\n    return count_of_a;", " \
    \ long count = 0;\n  assert(s.size() > 0);\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    char c = s[i];\n    switch (c) {\n      case 'a':\n      case 'e':\n\
    \      case 'i':\n      case 'o':\n      case 'u':\n        ++count;\n    }\n\
    \  }\n  return count;", "    // code here\n    long count = 0;\n    for (size_t\
    \ i = 0; i < s.size(); i++)\n    {\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u')\n        {\n            count++;\n        }\n   \
    \ }\n    return count;", "    int count = 0;\n    int flag = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n            count++;\n        if(s[i] ==\
    \ 'y') {\n            if(i == s.length() - 1) {\n                count++;\n  \
    \              flag = 1;\n            }\n        }\n    }\n    if(flag == 1)\n\
    \        count = count + 1;\n    return count;", "        \n        // Your code\
    \ goes here\n        \n    long vowelsCount=0;\n    long lastVowel=0;\n    long\
    \ i= 0;\n    while(s[i]!=0 && s[i]!='\\0'){\n        if(s[i]=='a' || s[i]=='A')\n\
    \            vowelsCount++;\n        if(s[i]=='e' || s[i]=='E')\n            vowelsCount++;\n\
    \        if(s[i]=='i' || s[i]=='I')\n            vowelsCount++;\n        if(s[i]=='o'\
    \ || s[i]=='O')\n            vowelsCount++;\n        if(s[i]=='u' || s[i]=='U')\n\
    \            vowelsCount++;\n        if(s[i]=='y' || s[i]=='Y')\n            vowelsCount++;\n\
    \        i++;\n    }\n    if(lastVowel!=0 && s[lastVowel]!='y')\n        vowelsCount++;\n\
    \    return vowelsCount;", "    long count = 0;\n    // Write your code here\n\
    \    for (int i = 0; i <= s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            count++;\n  \
    \  }\n    return count;", "    int vowel_counter = 0;\n    for (char ch : s) {\n\
    \        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n\
    \            vowel_counter++;\n        }\n    }\n    return vowel_counter;", "\t\
    int i, len = s.size();\n\tint v = 0;\n\tfor (i = 0; i < len; i++)\n\t\tif (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\t\t\t\
    v++;\n\tif (v == 1 && s[len - 1] == 'y')\n\t\tv++;\n\treturn v;", "    int len\
    \ = s.size();\n    long count = 0;\n    for (int i = 0; i < len; i++) {\n    \
    \    char ch = s[i];\n        if (isupper(ch) && ch != 'Y') {\n            count++;\n\
    \        }\n    }\n    return count;", "    // code here\n    return s.size();",
  "    long vowels = 0;\n    for (auto &x : s)\n    {\n        if (x == 'a' || x ==\
    \ 'e' || x == 'i' || x == 'o' || x == 'u')\n        {\n            vowels++;\n\
    \        }\n    }\n    return vowels;", "    int v=0;\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]=='a')\n            v++;\n        else if(s[i]=='e')\n       \
    \     v++;\n        else if(s[i]=='i')\n            v++;\n        else if(s[i]=='o')\n\
    \            v++;\n        else if(s[i]=='u')\n            v++;\n        else\
    \ if(s[i]=='Y')\n            v++;\n        else if(s[i]=='y')\n            v++;\n\
    \    }\n    return v;", "    int len = s.length();\n    long vowels = 0;\n   \
    \ for (int i = 0; i < len; i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels++;\n        }\n\
    \    }\n    return vowels;", "  // TODO: Write your code here\n  long vowels =\
    \ 0;\n  for (int i = 0; i <= s.length(); i++) {\n    if (s.at(i) == 'a' || s.at(i)\
    \ == 'e' || s.at(i) == 'i' || s.at(i) == 'o' || s.at(i) == 'u') {\n      vowels++;\n\
    \    }\n  }\n  return vowels;", "    // Complete the code here\n    long count\
    \ = 0L;\n    for (auto i : s) {\n        if (i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n   \
    \     if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u') {\n            count++;\n        } else if (s[i] == 'y') {\n          \
    \  i++;\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u') {\n                count++;\n            } else {\n    \
    \            count = 0;\n                break;\n            }\n        }\n  \
    \  }\n    return count;", "    int vowel = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            vowel++;\n        }\n    }\n    return vowel;",
  "  int vowel = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      vowel++;\n\
    \    if (s[i] == 'y' && s[i + 1] == 'e')\n      vowel++;\n  }\n  return vowel;",
  "    long vowels = 0;\n    long len = s.length();\n    for (long i = 0; i <= len;\
    \ i++)\n    {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u')\n        {\n            vowels += 1;\n        }\n    }\n\
    \    return vowels;", "    long vowel = 0;\n    for (char c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            vowel++;\n\
    \    }\n    return vowel;", "    int count = 0;\n    for (auto c : s) {\n    \
    \    switch (c) {\n            case 'a':\n            case 'e':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n                count++;\n\
    \                break;\n            case 'y':\n                if (s.substr(s.size()\
    \ - 1, 1) == c)\n                    count++;\n                break;\n      \
    \      default:\n                break;\n        }\n    }\n    return count;",
  "    // Complete the code here\n    long vowels = 0;\n    for (std::string::iterator\
    \ it = s.begin(); it != s.end(); ++it)\n    {\n        if (*it == 'a' || *it ==\
    \ 'e' || *it == 'i' || *it == 'o' || *it == 'u')\n        {\n            vowels++;\n\
    \        }\n        if (*it == 'y')\n        {\n            vowels++;\n      \
    \  }\n    }\n    return vowels;", "  int n = s.length();\n  int count = 0;\n \
    \ for (int i = 0; i < n; i++) {\n    if (isalpha(s[i])) {\n      char c = s[i];\n\
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \   count++;\n      }\n    }\n  }\n  return count;", "    int flag=0,x=0;\n  \
    \  for(int i=0;i<s.length();i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u'){\n            flag=1;\n        }\n        else{\n\
    \            flag=0;\n        }\n        if(s[i]=='y' && flag==0){\n         \
    \   flag=1;\n        }\n    }\n    return flag;", "    int count1=0;\n    long\
    \ count2=0;\n    int i,j;\n    for(i=0;i<s.size();i++){\n        if(s[i]==('a')\
    \ || (s[i]=='e') || (s[i]=='i') || (s[i]=='o') || (s[i]=='u')){\n            count1++;\n\
    \        }\n        if(s[i]=='y'){\n            count2++;\n        }\n    }\n\
    \    long vowels=count1;\n    long total= (count2+count1);\n    return total;",
  "    long vowel_count = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowel_count++;\n   \
    \     }\n    }\n    return vowel_count;", "  long vowels_count = 0;\n  for (int\
    \ i = 0; i < s.length(); i++) {\n    // Only count vowels if they are not at the\
    \ end of word.\n    if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u' && s[i] != ' ') {\n      vowels_count++;\n    }\n  }\n  return\
    \ vowels_count;", "    // Your code here\n    long sum=0;\n    for(auto x:s)\n\
    \    {\n        if(x=='a'||x=='e'||x=='i'||x=='o'||x=='u'||x=='y')\n        {\n\
    \            sum++;\n        }\n    }\n    return sum;", "    long vowels = 0;\n\
    \    for (int i = 0; s[i] != '\\0'; i++) {\n        switch (s[i]) {\n        \
    \    case 'a':\n            case 'e':\n            case 'i':\n            case\
    \ 'o':\n            case 'u':\n                vowels++;\n                break;\n\
    \            case 'y':\n                if (i + 1 < s.size() && s[i + 1] == 'a')\
    \ {\n                    vowels++;\n                }\n                break;\n\
    \        }\n    }\n    return vowels;", "    long count = 0;\n    for (int i =\
    \ 0; i < s.length(); ++i) {\n        switch (s[i]) {\n        case 'a':\n    \
    \    case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n    \
    \        break;\n        default:\n            if (i == s.length() - 1 && s[i]\
    \ == 'y') {\n                ++count;\n            }\n        }\n    }\n    return\
    \ count;", "  long vowel_count = 0;\n  for (int i = 0; i < s.size(); i++) {\n\
    \    switch (s[i]) {\n    case 'a':\n    case 'e':\n    case 'i':\n    case 'o':\n\
    \    case 'u':\n      vowel_count++;\n      break;\n    default:\n      break;\n\
    \    }\n  }\n  return vowel_count;", "    // Your code here\n    std::unordered_map<char,\
    \ int> m; // Initialize unordered_map\n    for (std::size_t i = 0; i < s.length();\
    \ ++i) {\n        // Insert into unordered_map\n        if (m[s[i]]) {\n     \
    \       m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n  \
    \  }\n\n    return m.size();", "  // Your code here\n  std::map<char, int> m;\n\
    \  for (char c: s) {\n    m[c] = m[c] + 1;\n  }\n  \n  for (char c: m) {\n   \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      return\
    \ m[c];\n    }\n  }\n  return 0;", "    int count = 0;\n    for (int i = 0; i\
    \ != s.length(); ++i) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n \
    \   return count;", "  long vCount = 0;\n  std::string word;\n  std::string vowel(\"\
    aeiou\");\n  for (int i = 0; i < s.length(); i++) {\n    word = s.substr(i, 1);\n\
    \    if (word.find(vowel) != std::string::npos) {\n      vCount++;\n    }\n  }\n\
    \  return vCount;", "  int n = s.size();\n  int count = 0;\n  for (int i = 0;\
    \ i < n; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u') {\n      count++;\n    }\n  }\n  return count;", "    int\
    \ n = s.size();\n    int c = 0;\n    for(int i = 0; i < n; i++) {\n        switch(s[i])\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n                c++;\n           \
    \     break;\n            case 'y':\n                if (i+1 != n) c++;\n    \
    \            break;\n            default:\n                break;\n        }\n\
    \    }\n    return c;", "    int vowel_count = 0, i = 0;\n    while (i != s.size())\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'y') {\n            ++vowel_count;\n        }\n        ++i;\n\
    \    }\n    return vowel_count;", "  int n = s.length();\n  long count = 0;\n\
    \  for (int i = 0; i < n; i++)\n    if (s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n      count++;\n  return count;", "    long\
    \ count = 0;\n    for (char c: s) {\n        switch (c) {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                break;\n            default:\n              \
    \  ++count;\n                break;\n        }\n    }\n    return count;", " \
    \  long long count=0;\n   if(s.length()==0)\n      return count;\n   if(s.at(0)=='a'\
    \ || s.at(0)=='e' || s.at(0)=='i' || s.at(0)=='o' || s.at(0)=='u')\n      count++;\n\
    \   for(int i=1;i<s.length();i++)\n   {\n      if(s.at(i)=='a' || s.at(i)=='e'\
    \ || s.at(i)=='i' || s.at(i)=='o' || s.at(i)=='u')\n      {\n         count++;\n\
    \      }\n      if(s.at(i)=='y' && i!=s.length()-1)\n      {\n         count++;\n\
    \      }\n   }\n   return count;", "  int count = 0; // Initialize count with\
    \ 0\n  int len = s.length(); // Get the length of given string\n  for (int i =\
    \ 0; i < len; i++) { // Iterate through string\n    // Check if the current character\
    \ is a vowel\n    if (isvowel(s[i])) {\n      count++; // Increment count if character\
    \ is a vowel\n    }\n  }\n  // Return count variable\n  return count;", "    long\
    \ vowels = 0; \n    for(auto i = 0; i < s.length(); i++) {\n        for(auto j\
    \ = 0; j < 5; j++) {\n            if(s[i] == j) {\n                vowels++;\n\
    \                break;\n            }\n        }\n        if(s[i] == 'y'){\n\
    \            vowels++;\n            break;\n        }\n    }\n    return vowels;",
  "    assert(s.length());\n    int counter = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            counter++;\n            if (s[i] == 'y') {\n\
    \                counter++;\n            }\n        }\n    }\n    return counter;",
  "  long vowels = 0;\n  for (auto c : s) {\n    switch (c) {\n      case 'a':\n \
    \     case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n        vowels++;\n\
    \        break;\n      case 'y':\n        vowels += (s.rfind(\"y\") != s.npos);\n\
    \        break;\n      default:\n        break;\n    }\n  }\n  return vowels;",
  "    // Complete this function\n    long vowel_count = 0;\n    size_t len = s.length();\n\
    \    for(int i = 0; i < len; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n            vowel_count++;\n    }\n \
    \   return vowel_count;", "    long ans = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            ans += 1;\n        }\n    }\n    return ans;",
  "    long vowels = 0;\n    for (int i = 0; i < s.size(); i++) {\n        switch\
    \ (s[i]) {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                vowels++;\n   \
    \             break;\n        }\n    }\n    return vowels;", "    long vowels\
    \ = 0;\n    for(int i=0; i<s.size(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels++;\n\
    \        }\n    }\n    return vowels;", "    assert(s.size() >= 4);\n    int count{0};\n\
    \    for (auto &c : s) {\n        if (std::isalpha(c) || std::isspace(c)) {\n\
    \            count++;\n            continue;\n        }\n        auto v = static_cast<unsigned\
    \ char>(c);\n        if (v == 'a' || v == 'e' || v == 'i' || v == 'o' || v ==\
    \ 'u') {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ vowels = 0;\n    for (char c : s) {\n        if (std::isalpha(c)) {\n      \
    \      switch (c) {\n                case 'a':\n                case 'e':\n  \
    \              case 'i':\n                case 'o':\n                case 'u':\n\
    \                    vowels += 1;\n                    break;\n              \
    \  default:\n                    break;\n            }\n        }\n    }\n   \
    \ return vowels;", "    long v = 1;\n    for (int i = 0; i <= s.length(); ++i)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n            ++v;\n    }\n    return v;", "    std::set<char> vowels;\n\
    \    for (char &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            vowels.insert(c);\n    }\n    return vowels.size();",
  "  int vowels[5] = {'a', 'e', 'i', 'o', 'u'};\n  long count = 0;\n  for (int i =\
    \ 0; i < 5; i++) {\n    for (char c: s) {\n      if (c == vowels[i]) {\n     \
    \   count++;\n      }\n    }\n  }\n  return count;", "  int count = 0;\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    if ((s[i] == 'a') || (s[i] == 'e') ||\
    \ (s[i] == 'i') || (s[i] == 'o') || (s[i] == 'u'))\n      count++;\n  }\n  return\
    \ count;", "    long vowels = 0;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;", " \
    \   int n = s.size();\n    long int vowel = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            vowel++;\n        }\n    }\n    return vowel;", "   \
    \ int i;\n    long count = 0;\n    for (i = 0; i < s.length(); i++)\n    {\n \
    \       switch (s[i])\n        {\n        case 'a':\n        case 'e':\n     \
    \   case 'i':\n        case 'o':\n        case 'u':\n            count++;\n  \
    \          break;\n        }\n    }\n    return count;", "    assert(s.size()\
    \ > 0);\n    int count = 0;\n    for (int i = 0; i < s.size() && s[i] != '\\0';\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;",
  "    long vowels = 0;\n    for (auto c : s)\n        if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u')\n            vowels++;\n    return vowels;",
  "    std::stack<char> s;\n    for (std::size_t i = 0; i < s.size(); i++) {\n   \
    \     if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\
    \ {\n            s.push(s[i]);\n        }\n    }\n    return s.size();", "  //\
    \ write your code here\n  return s.size();", "    long count = 0;\n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            ++count;\n    }\n    return count;", "    long count = 0;\n    int\
    \ flag = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \ count++;\n        }\n        if (s[i] == 'y') {\n            flag = 1;\n   \
    \     }\n    }\n    if (flag == 0) {\n        count++;\n    }\n    return count;",
  "    long cnt = 0;\n    for (int i = 0; i < s.length(); i++) {\n        cnt++;\n\
    \    }\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n \
    \       switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n\
    \        case 'o':\n        case 'u':\n        case 'y':\n        case 'A':\n\
    \        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n\
    \        case 'Y':\n            if (i == s.length() - 1)\n                cnt++;\n\
    \        }\n    }\n    return cnt;", "  int count = 0;\n  for (int i = 0; i <\
    \ s.length(); i++) {\n    if (isalpha(s[i]))\n      count++;\n  }\n  return count;",
  "  int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n\
    \    }\n  }\n  return count;", "    // Write your code here\n    long sum = 0;\n\
    \    for(int i=0; i<s.length(); i++) {\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u') {\n            sum+=1;\n        }\n        if(s[i]=='y'\
    \ && s[i+1]=='Y') {\n            sum+=1;\n        }\n    }\n    return sum;",
  "   std::map<char,int> m;\n   for (char &ch:s) m[ch]++;\n   for (const auto &v:m)\
    \ if (v.second==3) return v.first;\n   return 0;", "    long count= 0;\n    for(int\
    \ i=0; i< s.length(); i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' ||\
    \ s[i]=='o' || s[i]=='u'){\n            count++;\n        }\n    }\n    return\
    \ count;", "    int vowel_count = 0;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            vowel_count++;\n        }\n    }\n    return vowel_count;",
  "    long vcount = 0;\n    for (auto it=s.begin(); it!=s.end(); ++it) {\n      \
    \  switch (*it) {\n        case 'a':\n        case 'e':\n        case 'i':\n \
    \       case 'o':\n        case 'u':\n            vcount++;\n            break;\n\
    \        case 'y':\n            if (it+1 != s.end()) {\n                if (it+2\
    \ != s.end()) {\n                    if (it+3 != s.end()) {\n                \
    \        if (it+4 != s.end()) {\n                            if (it+5 != s.end())\
    \ {\n                                vcount++;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            break;\n        }\n    }\n    return vcount;", "  int count_vowels\
    \ = 0, index = 0;\n  while (index < s.size()) {\n    if (s[index] == 'a' || s[index]\
    \ == 'e' || s[index] == 'i' || s[index] == 'o' || s[index] == 'u') {\n      count_vowels++;\n\
    \    }\n    index++;\n  }\n  return count_vowels;", "    int count = 0;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        switch (s.at(i)) {\n        case\
    \ 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case\
    \ 'u':\n            count++;\n            break;\n        default:\n         \
    \   if (s.at(i) == s.at(s.length() - 1)) {\n                count++;\n       \
    \     }\n            break;\n        }\n    }\n    return count;", "  long cnt\
    \ = 0;\n  long n = s.size();\n  for (int i = 0; i <= n / 2; i++) {\n    if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \  cnt++;\n    }\n  }\n  return cnt;", "    long vowels_cnt = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels_cnt++;\n       \
    \ }\n    }\n    return vowels_cnt;", "  long count = 0;\n  for (int i = 0; i <\
    \ s.length(); i++) {\n    switch (s[i]) {\n      case 'a':\n      case 'e':\n\
    \      case 'i':\n      case 'o':\n      case 'u':\n        count++;\n       \
    \ break;\n      default:\n        break;\n    }\n  }\n  return count;", "    long\
    \ n = 0;\n    std::string vowels(\"aeiouy\");\n    for (const auto &c: s) {\n\
    \        auto it = std::find(vowels.begin(), vowels.end(), c);\n        if (it\
    \ != vowels.end()) {\n            n += 1;\n        }\n    }\n    return n;", " \
    \   long vowels_count = 0;\n    for (char c : s)\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            vowels_count += 1;\n \
    \   return vowels_count;", "    int vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  \
    \  size_t len = s.length();\n    long ans = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        int index = -1;\n        for (int j = 0; j < 5; j++) {\n        \
    \    if (s[i] == vowels[j]) {\n                index = j;\n            }\n   \
    \     }\n        if (index != -1) {\n            ans += 1;\n        }\n    }\n\
    \    return ans;", "    long vowels = 0;\n    for(int i = 0; i < s.size(); i++){\n\
    \        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u'){\n            vowels++;\n        }\n    }\n    return vowels;", "  \
    \  long vowels = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])\
    \ && islower(s[i]) && i != s.size() - 1) {\n            if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n    \
    \            vowels++;\n            }\n        }\n    }\n    return vowels;",
  "    long result = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            result += 1;\n        }\n\
    \    }\n    return result;", "    long count = 0;\n    for (char ch : s) {\n \
    \       if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n \
    \           count++;\n    }\n    return count;", "    // Code Here\n    long count\
    \ = 0;\n    for (char &c: strtok_s(s.c_str(), \"AEIOUYaeiouy\", &strtok)) {\n\
    \        if (c == 'y' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ vowels_count=0;\n    for (int i=0;i<s.length();i++){\n        if (s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n\
    \        {\n            vowels_count++;\n        }\n    }\n    return vowels_count;",
  "    int vowels = 0;\n    std::string vowels = \"aeiou\";\n    for (auto c : s)\
    \ {\n        if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c ==\
    \ 'u')) {\n            vowels++;\n        }\n    }\n    return vowels;", "   \
    \ int vowel_count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \        vowel_count++;\n        }\n    }\n    return vowel_count;", "    long\
    \ vowels = 0;\n    for(long i=0;i<s.length();i++) {\n        char ch = s[i];\n\
    \        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n\
    \            vowels++;\n        }\n    }\n    return vowels;", "    long count\
    \ = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        switch (s[i]) {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'y':\n              \
    \  count++;\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto c :\
    \ s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            ++count;\n    }\n    return count;", "  // TODO: Write your code\
    \ here\n  //  long ans = 0;\n  //  for (int i = 0; i < s.size(); i++)\n  //  {\n\
    \  //      if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n  //      {\n  //          ans++;\n  //      }\n  //  }\n  //  return\
    \ ans;\n  assert(s.size());\n  long ans = 0;\n  assert(s.at(0) == 'a' || s.at(0)\
    \ == 'e' || s.at(0) == 'i' || s.at(0) == 'o' || s.at(0) == 'u');\n  for (int i\
    \ = 0; i < s.size(); i++)\n  {\n      if (s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n      {\n          ans++;\n      }\n  }\n\
    \  return ans;", "  long count = 0;\n  for (int i = 0; i < s.length(); i++) {\n\
    \    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\
    \ {\n      count++;\n    }\n  }\n  return count;", "    int count = 0;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n       \
    \ }\n    }\n    return count;", "  if (s.empty())\n    return 0;\n  int i = 0;\n\
    \  while ((s[i] != '\\0') && (s[i] != 'a') && (s[i] != 'e') &&\n         (s[i]\
    \ != 'i') && (s[i] != 'o') && (s[i] != 'u') &&\n         (s[i] != 'y')) {\n  \
    \  i++;\n  }\n  if (s[i] == '\\0')\n    return 0;\n  return i;", "    // code\
    \ here\n    // Write your logic here\n    int vowel_count = 0;\n    for(int i=0;i<s.length();i++)\
    \ {\n        std::string character = \"\";\n        for(int j=0;j<i;j++) {\n \
    \           character = character+s.at(j);\n        }\n        switch(character){\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n                vowel_count++;\n     \
    \           break;\n        }\n    }\n    return vowel_count;", "    long count\
    \ = 0;\n    for (std::size_t i = 0; i < s.length(); i++) {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' &&\n       \
    \     (i + 1 < s.length() && s[i + 1] == 'y')) {\n            count++;\n     \
    \   }\n    }\n    return count;", '    // TODO: Write your code here', "    long\
    \ vowels = 0;\n    for (long i = 0; i < s.length(); ++i) {\n        vowels +=\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u');\n\
    \    }\n    return vowels;", "    int n = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            n++;\n        }\n    }\n    return n;", "  long\
    \ count = 0;\n  for (auto c : s) {\n    if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n      count++;\n  }\n  return count;", "  long count\
    \ = 0;\n  for (char c : s) {\n    if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n      count++;\n  }\n  return count;", "    long count = 0;\n\
    \    for(int i=0; i<s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            count++;\n    }\n\
    \    return count;", "    long vowels=0;\n    for (int i=0;i<s.length();i++){\n\
    \        if (s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u') vowels++;\n\
    \    }\n    return vowels;", "    long c = 0;\n    for (long i = 0; i < s.length();\
    \ i++) {\n        if (s.at(i) == 'a' || s.at(i) == 'e' || s.at(i) == 'i' || s.at(i)\
    \ == 'o' || s.at(i) == 'u')\n            c++;\n    }\n    return c;", "  int n\
    \ = s.size();\n  int result = 0;\n  char ch;\n  for (int i = 0; i < n; i++) {\n\
    \    ch = s[i];\n    switch (ch) {\n      case 'a':\n      case 'e':\n      case\
    \ 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        result += 1;\n\
    \        break;\n      default:\n        break;\n    }\n  }\n  return result;",
  "  // Your code goes here\n  int count = 0;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (s.at(i) == 'a' || s.at(i) == 'e' || s.at(i) == 'i' || s.at(i) ==\
    \ 'o' || s.at(i) == 'u') {\n      count++;\n    }\n  }\n  return count;", "  long\
    \ count = 0;\n  for (char &c : s) {\n    if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n      ++count;\n    }\n  }\n  return count;", " \
    \   int vowel_count = 0, ch;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     ch = s[i];\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u') {\n            vowel_count++;\n        }\n    }\n    return vowel_count;",
  "    long vowels = 0;\n    long size = s.length();\n    for(int i = 0; i < size;\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;",
  "    // your code here\n    long vowel_count = 0;\n    for (std::size_t i = 0; i\
    \ < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            vowel_count++;\n\
    \        }\n    }\n    return vowel_count;", "  int count = 0;\n  for (int i =\
    \ 0; i < s.size(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n      count++;\n    }\n  }\n \
    \ return count;", "    int counter = 0;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            counter++;\n        }\n    }\n    return counter;", " \
    \   int count = 0;\n    std::string vowels = \"aeiouy\";\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (vowels.find(s[i]) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    int vowels[6]\
    \ = {0};\n    int vowel_count = 0;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if ((s[i] == 'a') || (s[i] == 'e') || (s[i] == 'i') || (s[i] == 'o')\
    \ || (s[i] == 'u')) {\n            vowels[vowel_count] = 1;\n        }\n     \
    \   else if (s[i] == 'y') {\n            if (vowels[vowel_count - 1] == 1) {\n\
    \                vowels[vowel_count] = 1;\n                vowel_count++;\n  \
    \          }\n        }\n    }\n    return vowel_count;", "    long n = 0;\n \
    \   for (long i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            n++;\n    }\n\
    \    return n;", "    int count = 0; // Initialize count to zero.\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n \
    \   }\n    return (count);", "    auto it = s.begin();\n    long vowelCount =\
    \ 0;\n\n    while (it != s.end()) {\n        if (*it == 'a' || *it == 'e' || *it\
    \ == 'i' || *it == 'o' || *it == 'u') {\n            vowelCount++;\n        }\n\
    \        it++;\n    }\n\n    return vowelCount;", "  assert(s.length() > 1);\n\
    \  long count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n\
    \    }\n  }\n  return count;", "  int n=0;\n  for (int i = 0; i <= s.size()-1;\
    \ ++i) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u')\n      ++n;\n  }\n  return n;", "    long count=0;\n    for(int\
    \ i=0;i<s.length();i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o'\
    \ || s[i]=='u'){\n            count++;\n        }\n    }\n    return count;",
  "    long count=0, vowel_count, last_position;\n    bool isVowel=false;\n    for(auto\
    \ c : s) {\n        if(isVowel) {\n            if(c != 'y')\n                isVowel=false;\n\
    \            else {\n                isVowel=false;\n                count++;\n\
    \            }\n        }\n        else {\n            isVowel=(c=='a' || c=='e'\
    \ || c=='i' || c=='o' || c=='u');\n            if(isVowel)\n                count++;\n\
    \            else\n                count++;\n        }\n        if(isVowel) {\n\
    \            vowel_count++;\n        }\n    }\n    return vowel_count;", "  int\
    \ count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n\
    \    }\n  }\n  return (count);", "    long count = 0;\n    for (char &c : s) {\n\
    \        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n\
    \        case 'o':\n        case 'u':\n            ++count;\n            break;\n\
    \        default:\n            break;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    std::string vowels{\"a\", \"e\", \"i\", \"o\", \"u\"\
    };\n    for (char c : s) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto i : s) {\n        if ((i == 'a') || (i == 'e') || (i == 'i')\
    \ || (i == 'o') || (i == 'u')) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count=0;\n    for (long i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u'){\n            count++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        char ch = s[i];\n\
    \        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n\
    \            count++;\n        }\n    }\n    return count;", "    int n = s.length();\n\
    \    int vowel_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      \
    \      vowel_count++;\n    }\n    return vowel_count;", "    long count = 0;\n\
    \    for (auto it = s.begin(); it != s.end(); ++it) {\n        if ((*it) == 'a'\
    \ || *it == 'e' || *it == 'i' || *it == 'o' ||\n             *it == 'u') {\n \
    \           count++;\n        }\n    }\n    return count;", "   long count = 0;\n\
    \   for (auto i : s) {\n      if (i == 'a' || i == 'e' || i == 'i' || i == 'o'\
    \ || i == 'u' && (i == s.back() || i == 'y')) {\n         count++;\n      }\n\
    \   }\n   return count;", "  int count = 0;\n  for (int i = 0; i <= s.size();\
    \ i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u') {\n      count++;\n    }\n  }\n  return count;", "    // code here\n\
    \    long count=0;\n    int i =0;\n    while (i<s.size()){\n        if (s[i]=='a'||\
    \ s[i]=='e'|| s[i]=='i'|| s[i]=='o'|| s[i]=='u'){\n            count+=1;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count=0,n=s.length();\n\
    \    for(int i=0;i<n;i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' ||\
    \ s[i]=='o' || s[i]=='u' || s[i]=='y'){\n            count++;\n        }\n   \
    \ }\n    return count;", "    long count = 0;\n    // Your code here\n    for\
    \ (auto i : s)\n        if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i\
    \ == 'u')\n            count++;\n    return count;", "    long vowels = 0;\n \
    \   for (char ch : s) {\n        switch (ch) {\n            case 'a':\n      \
    \      case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n            case 'y':\n                vowels++;\n                break;\n\
    \        }\n    }\n    return vowels;", "    int vowels[] = {0, 4, 5, 6, 8};\n\
    \    int len = 0;\n    for (int i = 0; i < s.length(); i++) {\n        len++;\n\
    \        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || (s[i] == 'y' && i != s.length() - 1)) {\n            vowels[len -\
    \ 1]++;\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        if (vowels[i] > 0) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    if (s.size() == 0) return 0;\n    if (s.front() != 'a'\
    \ && s.front() != 'e' && s.front() != 'i' && s.front() != 'o' && s.front() !=\
    \ 'u')\n        return 0;\n    long vowels = 0;\n    long index = 0;\n    for\
    \ (char c : s) {\n        if (index == 0) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n                vowels += 1;\n   \
    \     } else {\n            if (c == 'a')\n                index = 1;\n      \
    \  }\n        index++;\n    }\n    return vowels;", "    int vowels = 0;\n   \
    \ for (int i = 0; i < (int)s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels++;\n\
    \        }\n    }\n    return vowels;", "    long vowel_count = 0;\n    for (int\
    \ i = 0; i <= s.length() - 1; i++) {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowel_count++;\n \
    \       }\n    }\n    return vowel_count;", "    long n = 0;\n    for (auto i\
    \ : s) // loop through each character in string\n    {\n        // vowels are\
    \ a characters other than 'a', 'e', 'i', 'o', 'u', 'y'\n        if (i >= 'a' &&\
    \ i <= 'z' || i >= 'A' && i <= 'Z' || i >= '0' && i <= '9') // check for a vowel\n\
    \        {\n            ++n; // increment number of vowels\n        }\n    }\n\
    \    return n;", "    long vowels = 0;\n    for (size_t i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' &&\n            s.substr(i, 2) == (\"ya\")) {\n            vowels++;\n\
    \        }\n    }\n    return vowels;", "    if (s.length() == 0) return 0;\n\
    \    long long ans = 0;\n    bool vowels[12] = {'a', 'e', 'i', 'o', 'u', 'y'};\n\
    \    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if\
    \ (c == 'y' && vowels[i / 2]) {\n            ans++;\n        } else if (vowels[c])\
    \ ans++;\n    }\n    return ans;", "  // Write your code here.\n  long result=0;\n\
    \  for(int i=0;i<s.length();i++){\n    if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n\
    \      result++;\n  }\n  return result;", "    std::map<char, int> vowels;\n \
    \   long n = 0;\n    for (char ch : s) {\n        if (vowels.find(ch) != vowels.end())\
    \ {\n            n++;\n        }\n    }\n    return n;", "    long count=0;\n\
    \    int last= s.length()-1;\n    for (int i=0;i<s.length();i++)\n    {\n    \
    \    if (s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='Y')\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    int vowel_count\
    \ = 0;\n    int vowel_index = -1;\n    int letter_index = -1;\n\n    for (auto\
    \ character : s) {\n        letter_index = static_cast<int>(character) - 'a';\n\
    \n        if (letter_index >= 0) {\n            vowel_count++;\n            vowel_index\
    \ = letter_index;\n        }\n\n        if (vowel_index >= 0 && vowel_index ==\
    \ letter_index + 1) {\n            vowel_index = -1;\n        }\n    }\n\n   \
    \ return vowel_count;", "    // code goes here\n    long vowels=0;\n    int len=s.size();\n\
    \    for(int i=0;i<len;i++)\n    {\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n\
    \        {\n            vowels++;\n        }\n    }\n    \n    return vowels;",
  "    int c = 0;\n    long len = s.length();\n    // check first char\n    if(c ==\
    \ 0)\n    {\n        c += 1;\n    }\n    // check last char\n    if(len > 0)\n\
    \    {\n        if(s[len - 1] == 'y')\n        {\n            c += 1;\n      \
    \  }\n    }\n    // check each other char\n    for(int i = 0; i <= len - 1; i++)\n\
    \    {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u')\n        {\n            c += 1;\n        }\n    }\n    return c;",
  "  int count = 0;\n  for (int i = 0; i < (int) s.size(); i++) {\n    if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n\
    \    }\n  }\n  return count;", "    int vowels[] = {'a', 'e', 'i', 'o', 'u', 'y'};\n\
    \    int count = 0;\n    int pos = 0;\n    for (; pos < s.length(); pos++) {\n\
    \        if (s[pos] == 'y') {\n            count++;\n            pos++;\n    \
    \    }\n        if (s[pos] == 'a' || s[pos] == 'e' || s[pos] == 'i' || s[pos]\
    \ == 'o' || s[pos] == 'u') {\n            count++;\n            pos++;\n     \
    \   }\n    }\n    return count;", "    long count=0;\n    for (int i=0;i<s.length();i++)\
    \ {\n        if (s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u')\n\
    \        count++;\n    }\n    return count;", "    int i;\n    long count = 0;\n\
    \    for (i = 0; i < s.length(); i++) {\n        if (s.at(i) == 'a' || s.at(i)\
    \ == 'e' || s.at(i) == 'i' || s.at(i) == 'o' || s.at(i) == 'u') {\n          \
    \  count++;\n        }\n    }\n    return count;", "    // code here\n    int\
    \ n = 0;\n    for (int i = 0; i <= s.size(); i++) {\n        if (isalpha(s[i])){\n\
    \            if ((s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u')){\n                n++;\n            }\n        }\n    }\n    return\
    \ n;", "    long vowels = 0;\n    for (auto &c : s) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowels += 1;\n\
    \        }\n    }\n    return vowels;", "    \n    long ans = 0;\n    int size\
    \ = s.size();\n    for(int i=0 ; i < size ; i++) {\n        if(s[i] == 'a') ans++;\n\
    \        if(s[i] == 'e') ans++;\n        if(s[i] == 'i') ans++;\n        if(s[i]\
    \ == 'o') ans++;\n        if(s[i] == 'u') ans++;\n        if(s[i] == 'Y') ans++;\n\
    \        if(s[i] == 'y' && i != size-1) ans++;\n    }\n    return ans;", "   \
    \ long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \        count++;\n        }\n        if (s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long vowels_count = 0;\n    int len\
    \ = s.size();\n    for(int i = 0; i < len; i++) {\n        if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels_count++;\n\
    \        }\n    }\n    return vowels_count;", "  // code goes here\n  long vowels\
    \ = 0, flag = 0;\n  for (int i = 0; i < s.length(); i++)\n  {\n    if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n    {\n  \
    \    if (flag != 0)\n      {\n        vowels++;\n        flag = 0;\n      }\n\
    \    }\n    else if (s[i] == 'y')\n    {\n      flag = 1;\n    }\n  }\n  return\
    \ vowels;", "    std::map<char,long> m;\n    for(auto x:s) {\n        if(isalpha(x))\
    \ {\n            long y = m[x];\n            if(y!=0) {\n                m[x]\
    \ = y+1; //change previous value\n            } else {\n                m[x] =\
    \ 1;\n            }\n        }\n    }\n    for(auto x:m) {\n        if(x.second==1)\
    \ {\n            return x.first;\n        }\n    }\n    return -1;", "    long\
    \ res = 0;\n    for (char &c : s) {\n        switch (c) {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                res++;\n                break;\n            case\
    \ 'y':\n                if (s.back() == 'a' || s.back() == 'e' || s.back() ==\
    \ 'i' || s.back() == 'o' || s.back() == 'u') {\n                    res++;\n \
    \               }\n                break;\n            default:\n            \
    \    break;\n        }\n    }\n    return res;", "    auto it = s.begin();\n \
    \   long count = 0;\n    while (it != s.end()) {\n        if (*it == 'a') { //\
    \ checking the first character of the string\n            count++;\n        }\
    \ else if (*it == 'e') { // checking the second character of the string\n    \
    \        count++;\n        } else if (*it == 'i') { // checking the third character\
    \ of the string\n            count++;\n        } else if (*it == 'o') { // checking\
    \ the fourth character of the string\n            count++;\n        } else if\
    \ (*it == 'u') { // checking the fifth character of the string\n            count++;\n\
    \        } else if (*it == 'y') { // checking the fifth character of the string\n\
    \            count++;\n        } else {\n            count = 0;\n        }\n \
    \       it++;\n    }\n    return count;", "    int count = 0;\n    for (auto ch\
    \ : s) {\n        switch (ch) {\n        case 'a':\n        case 'e':\n      \
    \  case 'i':\n        case 'o':\n        case 'u':\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (std::size_t\
    \ i = 0; i < s.size(); i++)\n    {\n        if (std::string(s[i]) == 'a' || std::string(s[i])\
    \ == 'e' ||\n            std::string(s[i]) == 'i' || std::string(s[i]) == 'o'\
    \ ||\n            std::string(s[i]) == 'u')\n            ++count;\n    }\n   \
    \ return count;", "    long vowels = 0;\n    size_t pos = 0, len = s.length();\n\
    \    while (pos < len) {\n        char ch = s[pos];\n        if (ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n            vowels++;\n \
    \       pos++;\n    }\n    return vowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    long result = 0;\n    size_t pos = 0;\n    while (pos < s.size()) {\n \
    \       if (vowels.find(s[pos]) != std::string::npos) {\n            result++;\n\
    \        }\n        pos++;\n    }\n    return result;", "    long count = 0;\n\
    \    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ++count;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (std::size_t i = 0; i < s.size(); i++)\n        if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \            count++;\n    return count;", "  int count = 0;\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    char c = s.at(i);\n    if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n      count++;\n    }\n  }\n  return\
    \ count;", "    // code here\n    return s.size();", "  int i = 0;\n  char ch;\n\
    \  long count = 0;\n  int n = s.length();\n  for (i = 0; i < n; i++) {\n    ch\
    \ = s[i];\n    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\
    \ {\n      count++;\n    }\n  }\n  return count;", "    long vowels = 0;\n   \
    \ for (char c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            vowels += 1;\n    }\n    return vowels;", "    long\
    \ count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n       \
    \     count++;\n        }\n    }\n    return count;", "  long long ans = 0;\n\
    \  for (int i = 0; i < s.length(); i++)\n    ans += (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u');\n  return ans;", "  int n = s.length();\n\
    \  long vowels = 0;\n  long pos = 0;\n  while (pos < n) {\n    if (s[pos] == 'a'\
    \ || s[pos] == 'e' || s[pos] == 'i' || s[pos] == 'o' || s[pos] == 'u') {\n   \
    \   ++vowels;\n    }\n    pos++;\n  }\n  return vowels;", "    long count = 0;\n\
    \    for(long i = 0; i <= s.size(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n\
    \        }\n    }\n    return count;", "    // code goes here\n    long vowel_count=0;\n\
    \    int len=s.length();\n    for(int i=0;i<len;i++)\n    {\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n\
    \        {\n            vowel_count+=1;\n        }\n    }\n    return vowel_count;",
  "  std::map<char, int> vowels;\n  for (char ch : s) {\n    switch (ch) {\n     \
    \ case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n\
    \        vowels[ch]++;\n        break;\n    }\n  }\n  long count = 0;\n  for (auto\
    \ itr = vowels.begin(); itr != vowels.end(); ++itr) {\n    if (itr->second > 0)\
    \ {\n      count++;\n    }\n  }\n  return count;", "    long ans = 0;\n    auto\
    \ itr = s.begin();\n    for (auto itrs = s.rbegin(); itr != s.rend(); ++itr) {\n\
    \        if (*itr == 'a' || *itr == 'e' || *itr == 'i' || *itr == 'o' || *itr\
    \ == 'u') {\n            ans++;\n        }\n        if (*itr == 'y') {\n     \
    \       ans++;\n        }\n    }\n    return ans;", '    // code here', "    std::string\
    \ vowels = \"aeiou\";\n    long vowels_count = 0;\n    for (long i = 0; i < s.size();\
    \ i++) {\n        if (vowels.find(s[i]) != std::string::npos) {\n            vowels_count++;\n\
    \        }\n    }\n    return vowels_count;", "    long count=0;\n    for (auto\
    \ c : s)\n    {\n        if (c =='a'|| c=='e'||c=='i'||c=='o'||c=='u')\n     \
    \   {\n            count++;\n        }\n    }\n    return count;", "    long count=0;\n\
    \    int j=0;\n    while(j<s.length()){\n        if(s[j]=='a' || s[j]=='e' ||\
    \ s[j]=='i' || s[j]=='o' || s[j]=='u'){\n            count++;\n        }\n   \
    \     j++;\n    }\n    return count;", "    // code here\n    long count =0;\n\
    \    for(int i=0;i<s.length();i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u'){\n            count+=1;\n        }\n    }\n    return\
    \ count;", "    long v = 0;\n    for (char c : s) {\n        switch (c) {\n  \
    \          case 'a':\n            case 'e':\n            case 'i':\n         \
    \   case 'o':\n            case 'u':\n            case 'y':\n                v++;\n\
    \        }\n    }\n    return v;", "  long vowel_count = 0;\n  for (int i = 0;\
    \ i < s.size(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u')\n      vowel_count++;\n  }\n  return vowel_count;", " \
    \   auto vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n    int vowel_count =\
    \ 0;\n    // for (int i = 0; i < s.length(); i++) {\n    //     if (vowels.find(s[i])\
    \ != std::string::npos) {\n    //         vowel_count++;\n    //     }\n    //\
    \ }\n    for (int i = 0; i < s.length(); i++) {\n        if (vowels.find(s[i])\
    \ != std::string::npos) {\n            vowel_count++;\n        }\n    }\n    return\
    \ vowel_count;", "    long count = 0;\n    for (int i = 0; i < (int) s.length();\
    \ i++) {\n        if (s.at(i) == 'a' || s.at(i) == 'e' || s.at(i) == 'i' || s.at(i)\
    \ == 'o' || s.at(i) == 'u') {\n            count++;\n        }\n    }\n    return\
    \ count;", "  long ans = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\
    \      ans++;\n    }\n  }\n  return ans;", "  long count = 0;\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n  }\n  return count;",
  "    long ans = 0;\n    long len = s.length();\n    for (int i = 0; i < len; i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            ans++;\n        }\n        if (s[i] == 'y') {\n     \
    \       ans += 2;\n        }\n    }\n    return ans;", "  long result = 0;\n \
    \ for (size_t i = 0; i < s.length(); ++i) {\n    if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      ++result;\n    }\n  }\n\
    \  return result;", "    // write your code in C++14(Lambda expressions)\n   \
    \ long count = 0;\n    for (auto &i : s)\n    {\n        if (i == 'a' || i ==\
    \ 'e' || i == 'i' || i == 'o' || i == 'u')\n        {\n            count++;\n\
    \        }\n    }\n    return count;", "    int vowels[] = { 'a', 'e', 'i', 'o',\
    \ 'u' };\n    long count = 0; // Initialize count to zero\n    for (int i = 0;\
    \ i < s.length(); i++) { // For every character in s\n        if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { // If it is a\
    \ vowel\n            count++; // Increase count\n        }\n        if (s[i] ==\
    \ 'y' && i == s.length() - 1) { // If the vowel is at the end of the word\n  \
    \          count++; // Increase count\n        }\n    }\n    return count;", " \
    \   // Write your code here\n    long count = 0;\n    if(s.size() > 0){\n    \
    \    for(int i = 0; i < s.size(); i++){\n            if(s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    int n = s.length();\n\
    \    long vowels = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] ==\
    \ 'y' && i == (n-1))) {\n            vowels++;\n        }\n    }\n    return vowels;",
  "    long count = 0;\n    int lastVowelCount = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            count++;\n            lastVowelCount = 0;\n \
    \       }\n        else {\n            lastVowelCount++;\n        }\n    }\n \
    \   return count;", "    long vowels = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;", " \
    \ // Declare and initialize variables.\n  long vowels = 0;\n  std::string vowels\
    \ = \"aeiou\";\n  // Iterate through the entire input string.\n  for (int i =\
    \ 0; i <= s.length() - 1; i++) {\n    // Check if the character at the position\
    \ is a vowel.\n    if (s.at(i) == vowels.at(i)) {\n      // Increment the number\
    \ of vowels.\n      vowels++;\n    }\n  }\n  // Return the number of vowels.\n\
    \  return vowels;"]
stop_tokens:
- "\n}"
